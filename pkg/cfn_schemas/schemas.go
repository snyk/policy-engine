package cfn_schemas

type Type int

const (
	Unknown Type = iota
	Boolean
	Integer
	Number
	String
	Array
	Object
)

// A Schema correponds to a resource
type Schema struct {
	Properties map[string]*Reference
}

// A Reference is an abstract property; it must be resolved first.
type Reference struct {
	ref        string
	type_      Type
	properties map[string]*Reference
	items      *Reference
}

// A Property has items that can actually be read.
type Property struct {
	Type       Type
	Properties map[string]*Reference
	Items      *Reference
}

// Find or return the underlying property.
func (ref *Reference) Resolve() Property {
	if ref.ref == "" {
		return Property{
			Type:       ref.type_,
			Properties: ref.properties,
			Items:      ref.items,
		}
	}

	if def, ok := definitions[ref.ref]; ok {
		return def.Resolve()
	} else {
		return Property{
			Type: Unknown,
		}
	}
}



var Schemas = map[string]Schema{
	"AWS::ACMPCA::Certificate": {
		Properties: map[string]*Reference{
				"ApiPassthrough": &Reference{
	ref: "AWS::ACMPCA::Certificate_ApiPassthrough",
},
				"Arn": &Reference{
	ref: "AWS::ACMPCA::Certificate_Arn",
},
				"Certificate": &Reference{
	type_: String,
},
				"CertificateAuthorityArn": &Reference{
	ref: "AWS::ACMPCA::Certificate_Arn",
},
				"CertificateSigningRequest": &Reference{
	type_: String,
},
				"SigningAlgorithm": &Reference{
	type_: String,
},
				"TemplateArn": &Reference{
	ref: "AWS::ACMPCA::Certificate_Arn",
},
				"Validity": &Reference{
	ref: "AWS::ACMPCA::Certificate_Validity",
},
				"ValidityNotBefore": &Reference{
	ref: "AWS::ACMPCA::Certificate_Validity",
},
		},
	},
	"AWS::ACMPCA::CertificateAuthority": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_Arn",
},
				"CertificateSigningRequest": &Reference{
	type_: String,
},
				"CsrExtensions": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_CsrExtensions",
},
				"KeyAlgorithm": &Reference{
	type_: String,
},
				"KeyStorageSecurityStandard": &Reference{
	type_: String,
},
				"RevocationConfiguration": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_RevocationConfiguration",
},
				"SigningAlgorithm": &Reference{
	type_: String,
},
				"Subject": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_Subject",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_Tag",
},
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::ACMPCA::CertificateAuthorityActivation": {
		Properties: map[string]*Reference{
				"Certificate": &Reference{
	type_: String,
},
				"CertificateAuthorityArn": &Reference{
	type_: String,
},
				"CertificateChain": &Reference{
	type_: String,
},
				"CompleteCertificateChain": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
		},
	},
	"AWS::ACMPCA::Permission": {
		Properties: map[string]*Reference{
				"Actions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"CertificateAuthorityArn": &Reference{
	type_: String,
},
				"Principal": &Reference{
	type_: String,
},
				"SourceAccount": &Reference{
	type_: String,
},
		},
	},
	"AWS::APS::RuleGroupsNamespace": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Data": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::APS::RuleGroupsNamespace_Tag",
},
},
				"Workspace": &Reference{
	type_: String,
},
		},
	},
	"AWS::APS::Workspace": {
		Properties: map[string]*Reference{
				"AlertManagerDefinition": &Reference{
	type_: String,
},
				"Alias": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"PrometheusEndpoint": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::APS::Workspace_Tag",
},
},
				"WorkspaceId": &Reference{
	type_: String,
},
		},
	},
	"AWS::AccessAnalyzer::Analyzer": {
		Properties: map[string]*Reference{
				"AnalyzerName": &Reference{
	type_: String,
},
				"ArchiveRules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AccessAnalyzer::Analyzer_ArchiveRule",
},
},
				"Arn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AccessAnalyzer::Analyzer_Tag",
},
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::AmazonMQ::Broker": {
		Properties: map[string]*Reference{
				"AmqpEndpoints": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Arn": &Reference{
	type_: String,
},
				"AuthenticationStrategy": &Reference{
	type_: String,
},
				"AutoMinorVersionUpgrade": &Reference{
	type_: Boolean,
},
				"BrokerName": &Reference{
	type_: String,
},
				"Configuration": &Reference{
	ref: "AWS::AmazonMQ::Broker_ConfigurationId",
},
				"ConfigurationId": &Reference{
	type_: String,
},
				"ConfigurationRevision": &Reference{
	type_: Integer,
},
				"DeploymentMode": &Reference{
	type_: String,
},
				"EncryptionOptions": &Reference{
	ref: "AWS::AmazonMQ::Broker_EncryptionOptions",
},
				"EngineType": &Reference{
	type_: String,
},
				"EngineVersion": &Reference{
	type_: String,
},
				"HostInstanceType": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"IpAddresses": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"LdapServerMetadata": &Reference{
	ref: "AWS::AmazonMQ::Broker_LdapServerMetadata",
},
				"Logs": &Reference{
	ref: "AWS::AmazonMQ::Broker_LogList",
},
				"MaintenanceWindowStartTime": &Reference{
	ref: "AWS::AmazonMQ::Broker_MaintenanceWindow",
},
				"MqttEndpoints": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"OpenWireEndpoints": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"PubliclyAccessible": &Reference{
	type_: Boolean,
},
				"SecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"StompEndpoints": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"StorageType": &Reference{
	type_: String,
},
				"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AmazonMQ::Broker_TagsEntry",
},
},
				"Users": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AmazonMQ::Broker_User",
},
},
				"WssEndpoints": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::AmazonMQ::Configuration": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AuthenticationStrategy": &Reference{
	type_: String,
},
				"Data": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"EngineType": &Reference{
	type_: String,
},
				"EngineVersion": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Revision": &Reference{
	type_: Integer,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AmazonMQ::Configuration_TagsEntry",
},
},
		},
	},
	"AWS::AmazonMQ::ConfigurationAssociation": {
		Properties: map[string]*Reference{
				"Broker": &Reference{
	type_: String,
},
				"Configuration": &Reference{
	ref: "AWS::AmazonMQ::ConfigurationAssociation_ConfigurationId",
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::Amplify::App": {
		Properties: map[string]*Reference{
				"AccessToken": &Reference{
	type_: String,
},
				"AppId": &Reference{
	type_: String,
},
				"AppName": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"AutoBranchCreationConfig": &Reference{
	ref: "AWS::Amplify::App_AutoBranchCreationConfig",
},
				"BasicAuthConfig": &Reference{
	ref: "AWS::Amplify::App_BasicAuthConfig",
},
				"BuildSpec": &Reference{
	type_: String,
},
				"CustomHeaders": &Reference{
	type_: String,
},
				"CustomRules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Amplify::App_CustomRule",
},
},
				"DefaultDomain": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"EnableBranchAutoDeletion": &Reference{
	type_: Boolean,
},
				"EnvironmentVariables": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Amplify::App_EnvironmentVariable",
},
},
				"IAMServiceRole": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"OauthToken": &Reference{
	type_: String,
},
				"Repository": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Amplify::App_Tag",
},
},
		},
	},
	"AWS::Amplify::Branch": {
		Properties: map[string]*Reference{
				"AppId": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"BasicAuthConfig": &Reference{
	ref: "AWS::Amplify::Branch_BasicAuthConfig",
},
				"BranchName": &Reference{
	type_: String,
},
				"BuildSpec": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"EnableAutoBuild": &Reference{
	type_: Boolean,
},
				"EnablePerformanceMode": &Reference{
	type_: Boolean,
},
				"EnablePullRequestPreview": &Reference{
	type_: Boolean,
},
				"EnvironmentVariables": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Amplify::Branch_EnvironmentVariable",
},
},
				"PullRequestEnvironmentName": &Reference{
	type_: String,
},
				"Stage": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Amplify::Branch_Tag",
},
},
		},
	},
	"AWS::Amplify::Domain": {
		Properties: map[string]*Reference{
				"AppId": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"AutoSubDomainCreationPatterns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"AutoSubDomainIAMRole": &Reference{
	type_: String,
},
				"CertificateRecord": &Reference{
	type_: String,
},
				"DomainName": &Reference{
	type_: String,
},
				"DomainStatus": &Reference{
	type_: String,
},
				"EnableAutoSubDomain": &Reference{
	type_: Boolean,
},
				"StatusReason": &Reference{
	type_: String,
},
				"SubDomainSettings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Amplify::Domain_SubDomainSetting",
},
},
		},
	},
	"AWS::AmplifyUIBuilder::Component": {
		Properties: map[string]*Reference{
				"AppId": &Reference{
	type_: String,
},
				"BindingProperties": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentBindingProperties",
},
				"Children": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentChild",
},
},
				"CollectionProperties": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentCollectionProperties",
},
				"ComponentType": &Reference{
	type_: String,
},
				"EnvironmentName": &Reference{
	type_: String,
},
				"Events": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentEvents",
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Overrides": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentOverrides",
},
				"Properties": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentProperties",
},
				"SchemaVersion": &Reference{
	type_: String,
},
				"SourceId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_Tags",
},
				"Variants": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentVariant",
},
},
		},
	},
	"AWS::AmplifyUIBuilder::Theme": {
		Properties: map[string]*Reference{
				"AppId": &Reference{
	type_: String,
},
				"CreatedAt": &Reference{
	type_: String,
},
				"EnvironmentName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"ModifiedAt": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Overrides": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AmplifyUIBuilder::Theme_ThemeValues",
},
},
				"Tags": &Reference{
	ref: "AWS::AmplifyUIBuilder::Theme_Tags",
},
				"Values": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AmplifyUIBuilder::Theme_ThemeValues",
},
},
		},
	},
	"AWS::ApiGateway::Account": {
		Properties: map[string]*Reference{
				"CloudWatchRoleArn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::ApiGateway::ApiKey": {
		Properties: map[string]*Reference{
				"APIKeyId": &Reference{
	type_: String,
},
				"CustomerId": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Enabled": &Reference{
	type_: Boolean,
},
				"GenerateDistinctId": &Reference{
	type_: Boolean,
},
				"Name": &Reference{
	type_: String,
},
				"StageKeys": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApiGateway::ApiKey_StageKey",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApiGateway::ApiKey_Tag",
},
},
				"Value": &Reference{
	type_: String,
},
		},
	},
	"AWS::ApiGateway::Authorizer": {
		Properties: map[string]*Reference{
				"AuthType": &Reference{
	type_: String,
},
				"AuthorizerCredentials": &Reference{
	type_: String,
},
				"AuthorizerId": &Reference{
	type_: String,
},
				"AuthorizerResultTtlInSeconds": &Reference{
	type_: Integer,
},
				"AuthorizerUri": &Reference{
	type_: String,
},
				"IdentitySource": &Reference{
	type_: String,
},
				"IdentityValidationExpression": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"ProviderARNs": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"RestApiId": &Reference{
	type_: String,
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::ApiGateway::BasePathMapping": {
		Properties: map[string]*Reference{
				"BasePath": &Reference{
	type_: String,
},
				"DomainName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"RestApiId": &Reference{
	type_: String,
},
				"Stage": &Reference{
	type_: String,
},
		},
	},
	"AWS::ApiGateway::ClientCertificate": {
		Properties: map[string]*Reference{
				"ClientCertificateId": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApiGateway::ClientCertificate_Tag",
},
},
		},
	},
	"AWS::ApiGateway::Deployment": {
		Properties: map[string]*Reference{
				"DeploymentCanarySettings": &Reference{
	ref: "AWS::ApiGateway::Deployment_DeploymentCanarySettings",
},
				"DeploymentId": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"RestApiId": &Reference{
	type_: String,
},
				"StageDescription": &Reference{
	ref: "AWS::ApiGateway::Deployment_StageDescription",
},
				"StageName": &Reference{
	type_: String,
},
		},
	},
	"AWS::ApiGateway::DocumentationPart": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Location": &Reference{
	ref: "AWS::ApiGateway::DocumentationPart_Location",
},
				"Properties": &Reference{
	type_: String,
},
				"RestApiId": &Reference{
	type_: String,
},
		},
	},
	"AWS::ApiGateway::DocumentationVersion": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"DocumentationVersion": &Reference{
	type_: String,
},
				"RestApiId": &Reference{
	type_: String,
},
		},
	},
	"AWS::ApiGateway::DomainName": {
		Properties: map[string]*Reference{
				"CertificateArn": &Reference{
	type_: String,
},
				"DistributionDomainName": &Reference{
	type_: String,
},
				"DistributionHostedZoneId": &Reference{
	type_: String,
},
				"DomainName": &Reference{
	type_: String,
},
				"EndpointConfiguration": &Reference{
	ref: "AWS::ApiGateway::DomainName_EndpointConfiguration",
},
				"MutualTlsAuthentication": &Reference{
	ref: "AWS::ApiGateway::DomainName_MutualTlsAuthentication",
},
				"OwnershipVerificationCertificateArn": &Reference{
	type_: String,
},
				"RegionalCertificateArn": &Reference{
	type_: String,
},
				"RegionalDomainName": &Reference{
	type_: String,
},
				"RegionalHostedZoneId": &Reference{
	type_: String,
},
				"SecurityPolicy": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApiGateway::DomainName_Tag",
},
},
		},
	},
	"AWS::ApiGateway::GatewayResponse": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"ResponseParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"ResponseTemplates": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"ResponseType": &Reference{
	type_: String,
},
				"RestApiId": &Reference{
	type_: String,
},
				"StatusCode": &Reference{
	type_: String,
},
		},
	},
	"AWS::ApiGateway::Method": {
		Properties: map[string]*Reference{
				"ApiKeyRequired": &Reference{
	type_: Boolean,
},
				"AuthorizationScopes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"AuthorizationType": &Reference{
	type_: String,
},
				"AuthorizerId": &Reference{
	type_: String,
},
				"HttpMethod": &Reference{
	type_: String,
},
				"Integration": &Reference{
	ref: "AWS::ApiGateway::Method_Integration",
},
				"MethodResponses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApiGateway::Method_MethodResponse",
},
},
				"OperationName": &Reference{
	type_: String,
},
				"RequestModels": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"RequestParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"RequestValidatorId": &Reference{
	type_: String,
},
				"ResourceId": &Reference{
	type_: String,
},
				"RestApiId": &Reference{
	type_: String,
},
		},
	},
	"AWS::ApiGateway::Model": {
		Properties: map[string]*Reference{
				"ContentType": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RestApiId": &Reference{
	type_: String,
},
				"Schema": &Reference{
	type_: Unknown,
},
		},
	},
	"AWS::ApiGateway::RequestValidator": {
		Properties: map[string]*Reference{
				"Name": &Reference{
	type_: String,
},
				"RequestValidatorId": &Reference{
	type_: String,
},
				"RestApiId": &Reference{
	type_: String,
},
				"ValidateRequestBody": &Reference{
	type_: Boolean,
},
				"ValidateRequestParameters": &Reference{
	type_: Boolean,
},
		},
	},
	"AWS::ApiGateway::Resource": {
		Properties: map[string]*Reference{
				"ParentId": &Reference{
	type_: String,
},
				"PathPart": &Reference{
	type_: String,
},
				"ResourceId": &Reference{
	type_: String,
},
				"RestApiId": &Reference{
	type_: String,
},
		},
	},
	"AWS::ApiGateway::RestApi": {
		Properties: map[string]*Reference{
				"ApiKeySourceType": &Reference{
	type_: String,
},
				"BinaryMediaTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Body": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"BodyS3Location": &Reference{
	ref: "AWS::ApiGateway::RestApi_S3Location",
},
				"CloneFrom": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"DisableExecuteApiEndpoint": &Reference{
	type_: Boolean,
},
				"EndpointConfiguration": &Reference{
	ref: "AWS::ApiGateway::RestApi_EndpointConfiguration",
},
				"FailOnWarnings": &Reference{
	type_: Boolean,
},
				"Id": &Reference{
	type_: String,
},
				"MinimumCompressionSize": &Reference{
	type_: Integer,
},
				"Mode": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Policy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"RootResourceId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApiGateway::RestApi_Tag",
},
},
		},
	},
	"AWS::ApiGateway::Stage": {
		Properties: map[string]*Reference{
				"AccessLogSetting": &Reference{
	ref: "AWS::ApiGateway::Stage_AccessLogSetting",
},
				"CacheClusterEnabled": &Reference{
	type_: Boolean,
},
				"CacheClusterSize": &Reference{
	type_: String,
},
				"CanarySetting": &Reference{
	ref: "AWS::ApiGateway::Stage_CanarySetting",
},
				"ClientCertificateId": &Reference{
	type_: String,
},
				"DeploymentId": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"DocumentationVersion": &Reference{
	type_: String,
},
				"MethodSettings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApiGateway::Stage_MethodSetting",
},
},
				"RestApiId": &Reference{
	type_: String,
},
				"StageName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApiGateway::Stage_Tag",
},
},
				"TracingEnabled": &Reference{
	type_: Boolean,
},
				"Variables": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::ApiGateway::UsagePlan": {
		Properties: map[string]*Reference{
				"ApiStages": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApiGateway::UsagePlan_ApiStage",
},
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Quota": &Reference{
	ref: "AWS::ApiGateway::UsagePlan_QuotaSettings",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApiGateway::UsagePlan_Tag",
},
},
				"Throttle": &Reference{
	ref: "AWS::ApiGateway::UsagePlan_ThrottleSettings",
},
				"UsagePlanName": &Reference{
	type_: String,
},
		},
	},
	"AWS::ApiGateway::UsagePlanKey": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"KeyId": &Reference{
	type_: String,
},
				"KeyType": &Reference{
	type_: String,
},
				"UsagePlanId": &Reference{
	type_: String,
},
		},
	},
	"AWS::ApiGateway::VpcLink": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApiGateway::VpcLink_Tag",
},
},
				"TargetArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::ApiGatewayV2::Api": {
		Properties: map[string]*Reference{
				"ApiEndpoint": &Reference{
	type_: String,
},
				"ApiKeySelectionExpression": &Reference{
	type_: String,
},
				"BasePath": &Reference{
	type_: String,
},
				"Body": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"BodyS3Location": &Reference{
	ref: "AWS::ApiGatewayV2::Api_BodyS3Location",
},
				"CorsConfiguration": &Reference{
	ref: "AWS::ApiGatewayV2::Api_Cors",
},
				"CredentialsArn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"DisableExecuteApiEndpoint": &Reference{
	type_: Boolean,
},
				"DisableSchemaValidation": &Reference{
	type_: Boolean,
},
				"FailOnWarnings": &Reference{
	type_: Boolean,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"ProtocolType": &Reference{
	type_: String,
},
				"RouteKey": &Reference{
	type_: String,
},
				"RouteSelectionExpression": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Target": &Reference{
	type_: String,
},
				"Version": &Reference{
	type_: String,
},
		},
	},
	"AWS::ApiGatewayV2::ApiGatewayManagedOverrides": {
		Properties: map[string]*Reference{
				"ApiId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Integration": &Reference{
	ref: "AWS::ApiGatewayV2::ApiGatewayManagedOverrides_IntegrationOverrides",
},
				"Route": &Reference{
	ref: "AWS::ApiGatewayV2::ApiGatewayManagedOverrides_RouteOverrides",
},
				"Stage": &Reference{
	ref: "AWS::ApiGatewayV2::ApiGatewayManagedOverrides_StageOverrides",
},
		},
	},
	"AWS::ApiGatewayV2::ApiMapping": {
		Properties: map[string]*Reference{
				"ApiId": &Reference{
	type_: String,
},
				"ApiMappingKey": &Reference{
	type_: String,
},
				"DomainName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Stage": &Reference{
	type_: String,
},
		},
	},
	"AWS::ApiGatewayV2::Authorizer": {
		Properties: map[string]*Reference{
				"ApiId": &Reference{
	type_: String,
},
				"AuthorizerCredentialsArn": &Reference{
	type_: String,
},
				"AuthorizerPayloadFormatVersion": &Reference{
	type_: String,
},
				"AuthorizerResultTtlInSeconds": &Reference{
	type_: Integer,
},
				"AuthorizerType": &Reference{
	type_: String,
},
				"AuthorizerUri": &Reference{
	type_: String,
},
				"EnableSimpleResponses": &Reference{
	type_: Boolean,
},
				"Id": &Reference{
	type_: String,
},
				"IdentitySource": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"IdentityValidationExpression": &Reference{
	type_: String,
},
				"JwtConfiguration": &Reference{
	ref: "AWS::ApiGatewayV2::Authorizer_JWTConfiguration",
},
				"Name": &Reference{
	type_: String,
},
		},
	},
	"AWS::ApiGatewayV2::Deployment": {
		Properties: map[string]*Reference{
				"ApiId": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"StageName": &Reference{
	type_: String,
},
		},
	},
	"AWS::ApiGatewayV2::DomainName": {
		Properties: map[string]*Reference{
				"DomainName": &Reference{
	type_: String,
},
				"DomainNameConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApiGatewayV2::DomainName_DomainNameConfiguration",
},
},
				"Id": &Reference{
	type_: String,
},
				"MutualTlsAuthentication": &Reference{
	ref: "AWS::ApiGatewayV2::DomainName_MutualTlsAuthentication",
},
				"RegionalDomainName": &Reference{
	type_: String,
},
				"RegionalHostedZoneId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::ApiGatewayV2::Integration": {
		Properties: map[string]*Reference{
				"ApiId": &Reference{
	type_: String,
},
				"ConnectionId": &Reference{
	type_: String,
},
				"ConnectionType": &Reference{
	type_: String,
},
				"ContentHandlingStrategy": &Reference{
	type_: String,
},
				"CredentialsArn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"IntegrationMethod": &Reference{
	type_: String,
},
				"IntegrationSubtype": &Reference{
	type_: String,
},
				"IntegrationType": &Reference{
	type_: String,
},
				"IntegrationUri": &Reference{
	type_: String,
},
				"PassthroughBehavior": &Reference{
	type_: String,
},
				"PayloadFormatVersion": &Reference{
	type_: String,
},
				"RequestParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"RequestTemplates": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"ResponseParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"TemplateSelectionExpression": &Reference{
	type_: String,
},
				"TimeoutInMillis": &Reference{
	type_: Integer,
},
				"TlsConfig": &Reference{
	ref: "AWS::ApiGatewayV2::Integration_TlsConfig",
},
		},
	},
	"AWS::ApiGatewayV2::IntegrationResponse": {
		Properties: map[string]*Reference{
				"ApiId": &Reference{
	type_: String,
},
				"ContentHandlingStrategy": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"IntegrationId": &Reference{
	type_: String,
},
				"IntegrationResponseKey": &Reference{
	type_: String,
},
				"ResponseParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"ResponseTemplates": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"TemplateSelectionExpression": &Reference{
	type_: String,
},
		},
	},
	"AWS::ApiGatewayV2::Model": {
		Properties: map[string]*Reference{
				"ApiId": &Reference{
	type_: String,
},
				"ContentType": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Schema": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::ApiGatewayV2::Route": {
		Properties: map[string]*Reference{
				"ApiId": &Reference{
	type_: String,
},
				"ApiKeyRequired": &Reference{
	type_: Boolean,
},
				"AuthorizationScopes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"AuthorizationType": &Reference{
	type_: String,
},
				"AuthorizerId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"ModelSelectionExpression": &Reference{
	type_: String,
},
				"OperationName": &Reference{
	type_: String,
},
				"RequestModels": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"RequestParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"RouteKey": &Reference{
	type_: String,
},
				"RouteResponseSelectionExpression": &Reference{
	type_: String,
},
				"Target": &Reference{
	type_: String,
},
		},
	},
	"AWS::ApiGatewayV2::RouteResponse": {
		Properties: map[string]*Reference{
				"ApiId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"ModelSelectionExpression": &Reference{
	type_: String,
},
				"ResponseModels": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"ResponseParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"RouteId": &Reference{
	type_: String,
},
				"RouteResponseKey": &Reference{
	type_: String,
},
		},
	},
	"AWS::ApiGatewayV2::Stage": {
		Properties: map[string]*Reference{
				"AccessLogSettings": &Reference{
	ref: "AWS::ApiGatewayV2::Stage_AccessLogSettings",
},
				"AccessPolicyId": &Reference{
	type_: String,
},
				"ApiId": &Reference{
	type_: String,
},
				"AutoDeploy": &Reference{
	type_: Boolean,
},
				"ClientCertificateId": &Reference{
	type_: String,
},
				"DefaultRouteSettings": &Reference{
	ref: "AWS::ApiGatewayV2::Stage_RouteSettings",
},
				"DeploymentId": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"RouteSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"StageName": &Reference{
	type_: String,
},
				"StageVariables": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::ApiGatewayV2::VpcLink": {
		Properties: map[string]*Reference{
				"Name": &Reference{
	type_: String,
},
				"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"VpcLinkId": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppConfig::Application": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppConfig::Application_Tags",
},
},
		},
	},
	"AWS::AppConfig::ConfigurationProfile": {
		Properties: map[string]*Reference{
				"ApplicationId": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"LocationUri": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RetrievalRoleArn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppConfig::ConfigurationProfile_Tags",
},
},
				"Type": &Reference{
	type_: String,
},
				"Validators": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppConfig::ConfigurationProfile_Validators",
},
},
		},
	},
	"AWS::AppConfig::Deployment": {
		Properties: map[string]*Reference{
				"ApplicationId": &Reference{
	type_: String,
},
				"ConfigurationProfileId": &Reference{
	type_: String,
},
				"ConfigurationVersion": &Reference{
	type_: String,
},
				"DeploymentStrategyId": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"EnvironmentId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppConfig::Deployment_Tags",
},
},
		},
	},
	"AWS::AppConfig::DeploymentStrategy": {
		Properties: map[string]*Reference{
				"DeploymentDurationInMinutes": &Reference{
	type_: Number,
},
				"Description": &Reference{
	type_: String,
},
				"FinalBakeTimeInMinutes": &Reference{
	type_: Number,
},
				"GrowthFactor": &Reference{
	type_: Number,
},
				"GrowthType": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"ReplicateTo": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppConfig::DeploymentStrategy_Tags",
},
},
		},
	},
	"AWS::AppConfig::Environment": {
		Properties: map[string]*Reference{
				"ApplicationId": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Monitors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppConfig::Environment_Monitors",
},
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppConfig::Environment_Tags",
},
},
		},
	},
	"AWS::AppConfig::HostedConfigurationVersion": {
		Properties: map[string]*Reference{
				"ApplicationId": &Reference{
	type_: String,
},
				"ConfigurationProfileId": &Reference{
	type_: String,
},
				"Content": &Reference{
	type_: String,
},
				"ContentType": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"LatestVersionNumber": &Reference{
	type_: Number,
},
		},
	},
	"AWS::AppFlow::ConnectorProfile": {
		Properties: map[string]*Reference{
				"ConnectionMode": &Reference{
	type_: String,
},
				"ConnectorLabel": &Reference{
	type_: String,
},
				"ConnectorProfileArn": &Reference{
	type_: String,
},
				"ConnectorProfileConfig": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ConnectorProfileConfig",
},
				"ConnectorProfileName": &Reference{
	type_: String,
},
				"ConnectorType": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ConnectorType",
},
				"CredentialsArn": &Reference{
	type_: String,
},
				"KMSArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppFlow::Flow": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"DestinationFlowConfigList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppFlow::Flow_DestinationFlowConfig",
},
},
				"FlowArn": &Reference{
	type_: String,
},
				"FlowName": &Reference{
	type_: String,
},
				"KMSArn": &Reference{
	type_: String,
},
				"SourceFlowConfig": &Reference{
	ref: "AWS::AppFlow::Flow_SourceFlowConfig",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppFlow::Flow_Tag",
},
},
				"Tasks": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppFlow::Flow_Task",
},
},
				"TriggerConfig": &Reference{
	ref: "AWS::AppFlow::Flow_TriggerConfig",
},
		},
	},
	"AWS::AppMesh::GatewayRoute": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"GatewayRouteName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"MeshName": &Reference{
	type_: String,
},
				"MeshOwner": &Reference{
	type_: String,
},
				"ResourceOwner": &Reference{
	type_: String,
},
				"Spec": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_GatewayRouteSpec",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::GatewayRoute_Tag",
},
},
				"Uid": &Reference{
	type_: String,
},
				"VirtualGatewayName": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppMesh::Mesh": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"MeshName": &Reference{
	type_: String,
},
				"MeshOwner": &Reference{
	type_: String,
},
				"ResourceOwner": &Reference{
	type_: String,
},
				"Spec": &Reference{
	ref: "AWS::AppMesh::Mesh_MeshSpec",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::Mesh_Tag",
},
},
				"Uid": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppMesh::Route": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"MeshName": &Reference{
	type_: String,
},
				"MeshOwner": &Reference{
	type_: String,
},
				"ResourceOwner": &Reference{
	type_: String,
},
				"RouteName": &Reference{
	type_: String,
},
				"Spec": &Reference{
	ref: "AWS::AppMesh::Route_RouteSpec",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::Route_Tag",
},
},
				"Uid": &Reference{
	type_: String,
},
				"VirtualRouterName": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppMesh::VirtualGateway": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"MeshName": &Reference{
	type_: String,
},
				"MeshOwner": &Reference{
	type_: String,
},
				"ResourceOwner": &Reference{
	type_: String,
},
				"Spec": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewaySpec",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::VirtualGateway_Tag",
},
},
				"Uid": &Reference{
	type_: String,
},
				"VirtualGatewayName": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppMesh::VirtualNode": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"MeshName": &Reference{
	type_: String,
},
				"MeshOwner": &Reference{
	type_: String,
},
				"ResourceOwner": &Reference{
	type_: String,
},
				"Spec": &Reference{
	ref: "AWS::AppMesh::VirtualNode_VirtualNodeSpec",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::VirtualNode_Tag",
},
},
				"Uid": &Reference{
	type_: String,
},
				"VirtualNodeName": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppMesh::VirtualRouter": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"MeshName": &Reference{
	type_: String,
},
				"MeshOwner": &Reference{
	type_: String,
},
				"ResourceOwner": &Reference{
	type_: String,
},
				"Spec": &Reference{
	ref: "AWS::AppMesh::VirtualRouter_VirtualRouterSpec",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::VirtualRouter_Tag",
},
},
				"Uid": &Reference{
	type_: String,
},
				"VirtualRouterName": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppMesh::VirtualService": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"MeshName": &Reference{
	type_: String,
},
				"MeshOwner": &Reference{
	type_: String,
},
				"ResourceOwner": &Reference{
	type_: String,
},
				"Spec": &Reference{
	ref: "AWS::AppMesh::VirtualService_VirtualServiceSpec",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::VirtualService_Tag",
},
},
				"Uid": &Reference{
	type_: String,
},
				"VirtualServiceName": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppRunner::ObservabilityConfiguration": {
		Properties: map[string]*Reference{
				"Latest": &Reference{
	type_: Boolean,
},
				"ObservabilityConfigurationArn": &Reference{
	type_: String,
},
				"ObservabilityConfigurationName": &Reference{
	type_: String,
},
				"ObservabilityConfigurationRevision": &Reference{
	type_: Integer,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppRunner::ObservabilityConfiguration_Tag",
},
},
				"TraceConfiguration": &Reference{
	ref: "AWS::AppRunner::ObservabilityConfiguration_TraceConfiguration",
},
		},
	},
	"AWS::AppRunner::Service": {
		Properties: map[string]*Reference{
				"AutoScalingConfigurationArn": &Reference{
	type_: String,
},
				"EncryptionConfiguration": &Reference{
	ref: "AWS::AppRunner::Service_EncryptionConfiguration",
},
				"HealthCheckConfiguration": &Reference{
	ref: "AWS::AppRunner::Service_HealthCheckConfiguration",
},
				"InstanceConfiguration": &Reference{
	ref: "AWS::AppRunner::Service_InstanceConfiguration",
},
				"NetworkConfiguration": &Reference{
	ref: "AWS::AppRunner::Service_NetworkConfiguration",
},
				"ObservabilityConfiguration": &Reference{
	ref: "AWS::AppRunner::Service_ServiceObservabilityConfiguration",
},
				"ServiceArn": &Reference{
	type_: String,
},
				"ServiceId": &Reference{
	type_: String,
},
				"ServiceName": &Reference{
	type_: String,
},
				"ServiceUrl": &Reference{
	type_: String,
},
				"SourceConfiguration": &Reference{
	ref: "AWS::AppRunner::Service_SourceConfiguration",
},
				"Status": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppRunner::Service_Tag",
},
},
		},
	},
	"AWS::AppRunner::VpcConnector": {
		Properties: map[string]*Reference{
				"SecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Subnets": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppRunner::VpcConnector_Tag",
},
},
				"VpcConnectorArn": &Reference{
	type_: String,
},
				"VpcConnectorName": &Reference{
	type_: String,
},
				"VpcConnectorRevision": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::AppStream::AppBlock": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::AppStream::AppBlock_Arn",
},
				"CreatedTime": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"DisplayName": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"SetupScriptDetails": &Reference{
	ref: "AWS::AppStream::AppBlock_ScriptDetails",
},
				"SourceS3Location": &Reference{
	ref: "AWS::AppStream::AppBlock_S3Location",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppStream::AppBlock_Tag",
},
},
		},
	},
	"AWS::AppStream::Application": {
		Properties: map[string]*Reference{
				"AppBlockArn": &Reference{
	ref: "AWS::AppStream::Application_Arn",
},
				"Arn": &Reference{
	ref: "AWS::AppStream::Application_Arn",
},
				"AttributesToDelete": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppStream::Application_ApplicationAttribute",
},
},
				"CreatedTime": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"DisplayName": &Reference{
	type_: String,
},
				"IconS3Location": &Reference{
	ref: "AWS::AppStream::Application_S3Location",
},
				"InstanceFamilies": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"LaunchParameters": &Reference{
	type_: String,
},
				"LaunchPath": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Platforms": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppStream::Application_PlatformType",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppStream::Application_Tag",
},
},
				"WorkingDirectory": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppStream::ApplicationEntitlementAssociation": {
		Properties: map[string]*Reference{
				"ApplicationIdentifier": &Reference{
	type_: String,
},
				"EntitlementName": &Reference{
	type_: String,
},
				"StackName": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppStream::ApplicationFleetAssociation": {
		Properties: map[string]*Reference{
				"ApplicationArn": &Reference{
	ref: "AWS::AppStream::ApplicationFleetAssociation_Arn",
},
				"FleetName": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppStream::DirectoryConfig": {
		Properties: map[string]*Reference{
				"DirectoryName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"OrganizationalUnitDistinguishedNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"ServiceAccountCredentials": &Reference{
	ref: "AWS::AppStream::DirectoryConfig_ServiceAccountCredentials",
},
		},
	},
	"AWS::AppStream::Entitlement": {
		Properties: map[string]*Reference{
				"AppVisibility": &Reference{
	type_: String,
},
				"Attributes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppStream::Entitlement_Attribute",
},
},
				"CreatedTime": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"LastModifiedTime": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"StackName": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppStream::Fleet": {
		Properties: map[string]*Reference{
				"ComputeCapacity": &Reference{
	ref: "AWS::AppStream::Fleet_ComputeCapacity",
},
				"Description": &Reference{
	type_: String,
},
				"DisconnectTimeoutInSeconds": &Reference{
	type_: Integer,
},
				"DisplayName": &Reference{
	type_: String,
},
				"DomainJoinInfo": &Reference{
	ref: "AWS::AppStream::Fleet_DomainJoinInfo",
},
				"EnableDefaultInternetAccess": &Reference{
	type_: Boolean,
},
				"FleetType": &Reference{
	type_: String,
},
				"IamRoleArn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"IdleDisconnectTimeoutInSeconds": &Reference{
	type_: Integer,
},
				"ImageArn": &Reference{
	type_: String,
},
				"ImageName": &Reference{
	type_: String,
},
				"InstanceType": &Reference{
	type_: String,
},
				"MaxConcurrentSessions": &Reference{
	type_: Integer,
},
				"MaxUserDurationInSeconds": &Reference{
	type_: Integer,
},
				"Name": &Reference{
	type_: String,
},
				"Platform": &Reference{
	type_: String,
},
				"SessionScriptS3Location": &Reference{
	ref: "AWS::AppStream::Fleet_S3Location",
},
				"StreamView": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppStream::Fleet_Tag",
},
},
				"UsbDeviceFilterStrings": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"VpcConfig": &Reference{
	ref: "AWS::AppStream::Fleet_VpcConfig",
},
		},
	},
	"AWS::AppStream::ImageBuilder": {
		Properties: map[string]*Reference{
				"AccessEndpoints": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppStream::ImageBuilder_AccessEndpoint",
},
},
				"AppstreamAgentVersion": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"DisplayName": &Reference{
	type_: String,
},
				"DomainJoinInfo": &Reference{
	ref: "AWS::AppStream::ImageBuilder_DomainJoinInfo",
},
				"EnableDefaultInternetAccess": &Reference{
	type_: Boolean,
},
				"IamRoleArn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"ImageArn": &Reference{
	type_: String,
},
				"ImageName": &Reference{
	type_: String,
},
				"InstanceType": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"StreamingUrl": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppStream::ImageBuilder_Tag",
},
},
				"VpcConfig": &Reference{
	ref: "AWS::AppStream::ImageBuilder_VpcConfig",
},
		},
	},
	"AWS::AppStream::Stack": {
		Properties: map[string]*Reference{
				"AccessEndpoints": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppStream::Stack_AccessEndpoint",
},
},
				"ApplicationSettings": &Reference{
	ref: "AWS::AppStream::Stack_ApplicationSettings",
},
				"AttributesToDelete": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"DeleteStorageConnectors": &Reference{
	type_: Boolean,
},
				"Description": &Reference{
	type_: String,
},
				"DisplayName": &Reference{
	type_: String,
},
				"EmbedHostDomains": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"FeedbackURL": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RedirectURL": &Reference{
	type_: String,
},
				"StorageConnectors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppStream::Stack_StorageConnector",
},
},
				"StreamingExperienceSettings": &Reference{
	ref: "AWS::AppStream::Stack_StreamingExperienceSettings",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppStream::Stack_Tag",
},
},
				"UserSettings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppStream::Stack_UserSetting",
},
},
		},
	},
	"AWS::AppStream::StackFleetAssociation": {
		Properties: map[string]*Reference{
				"FleetName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"StackName": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppStream::StackUserAssociation": {
		Properties: map[string]*Reference{
				"AuthenticationType": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"SendEmailNotification": &Reference{
	type_: Boolean,
},
				"StackName": &Reference{
	type_: String,
},
				"UserName": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppStream::User": {
		Properties: map[string]*Reference{
				"AuthenticationType": &Reference{
	type_: String,
},
				"FirstName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"LastName": &Reference{
	type_: String,
},
				"MessageAction": &Reference{
	type_: String,
},
				"UserName": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppSync::ApiCache": {
		Properties: map[string]*Reference{
				"ApiCachingBehavior": &Reference{
	type_: String,
},
				"ApiId": &Reference{
	type_: String,
},
				"AtRestEncryptionEnabled": &Reference{
	type_: Boolean,
},
				"Id": &Reference{
	type_: String,
},
				"TransitEncryptionEnabled": &Reference{
	type_: Boolean,
},
				"Ttl": &Reference{
	type_: Number,
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppSync::ApiKey": {
		Properties: map[string]*Reference{
				"ApiId": &Reference{
	type_: String,
},
				"ApiKey": &Reference{
	type_: String,
},
				"ApiKeyId": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Expires": &Reference{
	type_: Number,
},
		},
	},
	"AWS::AppSync::DataSource": {
		Properties: map[string]*Reference{
				"ApiId": &Reference{
	type_: String,
},
				"DataSourceArn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"DynamoDBConfig": &Reference{
	ref: "AWS::AppSync::DataSource_DynamoDBConfig",
},
				"ElasticsearchConfig": &Reference{
	ref: "AWS::AppSync::DataSource_ElasticsearchConfig",
},
				"HttpConfig": &Reference{
	ref: "AWS::AppSync::DataSource_HttpConfig",
},
				"Id": &Reference{
	type_: String,
},
				"LambdaConfig": &Reference{
	ref: "AWS::AppSync::DataSource_LambdaConfig",
},
				"Name": &Reference{
	type_: String,
},
				"OpenSearchServiceConfig": &Reference{
	ref: "AWS::AppSync::DataSource_OpenSearchServiceConfig",
},
				"RelationalDatabaseConfig": &Reference{
	ref: "AWS::AppSync::DataSource_RelationalDatabaseConfig",
},
				"ServiceRoleArn": &Reference{
	type_: String,
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppSync::DomainName": {
		Properties: map[string]*Reference{
				"AppSyncDomainName": &Reference{
	type_: String,
},
				"CertificateArn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"DomainName": &Reference{
	type_: String,
},
				"HostedZoneId": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppSync::DomainNameApiAssociation": {
		Properties: map[string]*Reference{
				"ApiAssociationIdentifier": &Reference{
	type_: String,
},
				"ApiId": &Reference{
	type_: String,
},
				"DomainName": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppSync::FunctionConfiguration": {
		Properties: map[string]*Reference{
				"ApiId": &Reference{
	type_: String,
},
				"DataSourceName": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"FunctionArn": &Reference{
	type_: String,
},
				"FunctionId": &Reference{
	type_: String,
},
				"FunctionVersion": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"MaxBatchSize": &Reference{
	type_: Integer,
},
				"Name": &Reference{
	type_: String,
},
				"RequestMappingTemplate": &Reference{
	type_: String,
},
				"RequestMappingTemplateS3Location": &Reference{
	type_: String,
},
				"ResponseMappingTemplate": &Reference{
	type_: String,
},
				"ResponseMappingTemplateS3Location": &Reference{
	type_: String,
},
				"SyncConfig": &Reference{
	ref: "AWS::AppSync::FunctionConfiguration_SyncConfig",
},
		},
	},
	"AWS::AppSync::GraphQLApi": {
		Properties: map[string]*Reference{
				"AdditionalAuthenticationProviders": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppSync::GraphQLApi_AdditionalAuthenticationProvider",
},
},
				"ApiId": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"AuthenticationType": &Reference{
	type_: String,
},
				"GraphQLUrl": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"LambdaAuthorizerConfig": &Reference{
	ref: "AWS::AppSync::GraphQLApi_LambdaAuthorizerConfig",
},
				"LogConfig": &Reference{
	ref: "AWS::AppSync::GraphQLApi_LogConfig",
},
				"Name": &Reference{
	type_: String,
},
				"OpenIDConnectConfig": &Reference{
	ref: "AWS::AppSync::GraphQLApi_OpenIDConnectConfig",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppSync::GraphQLApi_Tag",
},
},
				"UserPoolConfig": &Reference{
	ref: "AWS::AppSync::GraphQLApi_UserPoolConfig",
},
				"XrayEnabled": &Reference{
	type_: Boolean,
},
		},
	},
	"AWS::AppSync::GraphQLSchema": {
		Properties: map[string]*Reference{
				"ApiId": &Reference{
	type_: String,
},
				"Definition": &Reference{
	type_: String,
},
				"DefinitionS3Location": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::AppSync::Resolver": {
		Properties: map[string]*Reference{
				"ApiId": &Reference{
	type_: String,
},
				"CachingConfig": &Reference{
	ref: "AWS::AppSync::Resolver_CachingConfig",
},
				"DataSourceName": &Reference{
	type_: String,
},
				"FieldName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Kind": &Reference{
	type_: String,
},
				"MaxBatchSize": &Reference{
	type_: Integer,
},
				"PipelineConfig": &Reference{
	ref: "AWS::AppSync::Resolver_PipelineConfig",
},
				"RequestMappingTemplate": &Reference{
	type_: String,
},
				"RequestMappingTemplateS3Location": &Reference{
	type_: String,
},
				"ResolverArn": &Reference{
	type_: String,
},
				"ResponseMappingTemplate": &Reference{
	type_: String,
},
				"ResponseMappingTemplateS3Location": &Reference{
	type_: String,
},
				"SyncConfig": &Reference{
	ref: "AWS::AppSync::Resolver_SyncConfig",
},
				"TypeName": &Reference{
	type_: String,
},
		},
	},
	"AWS::ApplicationAutoScaling::ScalableTarget": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"MaxCapacity": &Reference{
	type_: Integer,
},
				"MinCapacity": &Reference{
	type_: Integer,
},
				"ResourceId": &Reference{
	type_: String,
},
				"RoleARN": &Reference{
	type_: String,
},
				"ScalableDimension": &Reference{
	type_: String,
},
				"ScheduledActions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApplicationAutoScaling::ScalableTarget_ScheduledAction",
},
},
				"ServiceNamespace": &Reference{
	type_: String,
},
				"SuspendedState": &Reference{
	ref: "AWS::ApplicationAutoScaling::ScalableTarget_SuspendedState",
},
		},
	},
	"AWS::ApplicationAutoScaling::ScalingPolicy": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"PolicyName": &Reference{
	type_: String,
},
				"PolicyType": &Reference{
	type_: String,
},
				"ResourceId": &Reference{
	type_: String,
},
				"ScalableDimension": &Reference{
	type_: String,
},
				"ScalingTargetId": &Reference{
	type_: String,
},
				"ServiceNamespace": &Reference{
	type_: String,
},
				"StepScalingPolicyConfiguration": &Reference{
	ref: "AWS::ApplicationAutoScaling::ScalingPolicy_StepScalingPolicyConfiguration",
},
				"TargetTrackingScalingPolicyConfiguration": &Reference{
	ref: "AWS::ApplicationAutoScaling::ScalingPolicy_TargetTrackingScalingPolicyConfiguration",
},
		},
	},
	"AWS::ApplicationInsights::Application": {
		Properties: map[string]*Reference{
				"ApplicationARN": &Reference{
	type_: String,
},
				"AutoConfigurationEnabled": &Reference{
	type_: Boolean,
},
				"CWEMonitorEnabled": &Reference{
	type_: Boolean,
},
				"ComponentMonitoringSettings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApplicationInsights::Application_ComponentMonitoringSetting",
},
},
				"CustomComponents": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApplicationInsights::Application_CustomComponent",
},
},
				"GroupingType": &Reference{
	type_: String,
},
				"LogPatternSets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApplicationInsights::Application_LogPatternSet",
},
},
				"OpsCenterEnabled": &Reference{
	type_: Boolean,
},
				"OpsItemSNSTopicArn": &Reference{
	type_: String,
},
				"ResourceGroupName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApplicationInsights::Application_Tag",
},
},
		},
	},
	"AWS::Athena::DataCatalog": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Tags": &Reference{
	ref: "AWS::Athena::DataCatalog_Tags",
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::Athena::NamedQuery": {
		Properties: map[string]*Reference{
				"Database": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"NamedQueryId": &Reference{
	type_: String,
},
				"QueryString": &Reference{
	type_: String,
},
				"WorkGroup": &Reference{
	type_: String,
},
		},
	},
	"AWS::Athena::PreparedStatement": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"QueryStatement": &Reference{
	type_: String,
},
				"StatementName": &Reference{
	type_: String,
},
				"WorkGroup": &Reference{
	type_: String,
},
		},
	},
	"AWS::Athena::WorkGroup": {
		Properties: map[string]*Reference{
				"CreationTime": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RecursiveDeleteOption": &Reference{
	type_: Boolean,
},
				"State": &Reference{
	type_: String,
},
				"Tags": &Reference{
	ref: "AWS::Athena::WorkGroup_Tags",
},
				"WorkGroupConfiguration": &Reference{
	ref: "AWS::Athena::WorkGroup_WorkGroupConfiguration",
},
				"WorkGroupConfigurationUpdates": &Reference{
	ref: "AWS::Athena::WorkGroup_WorkGroupConfigurationUpdates",
},
		},
	},
	"AWS::AuditManager::Assessment": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::AuditManager::Assessment_AssessmentArn",
},
				"AssessmentId": &Reference{
	ref: "AWS::AuditManager::Assessment_UUID",
},
				"AssessmentReportsDestination": &Reference{
	ref: "AWS::AuditManager::Assessment_AssessmentReportsDestination",
},
				"AwsAccount": &Reference{
	ref: "AWS::AuditManager::Assessment_AWSAccount",
},
				"CreationTime": &Reference{
	ref: "AWS::AuditManager::Assessment_Timestamp",
},
				"Delegations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AuditManager::Assessment_Delegation",
},
},
				"Description": &Reference{
	ref: "AWS::AuditManager::Assessment_AssessmentDescription",
},
				"FrameworkId": &Reference{
	ref: "AWS::AuditManager::Assessment_FrameworkId",
},
				"Name": &Reference{
	ref: "AWS::AuditManager::Assessment_AssessmentName",
},
				"Roles": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AuditManager::Assessment_Role",
},
},
				"Scope": &Reference{
	ref: "AWS::AuditManager::Assessment_Scope",
},
				"Status": &Reference{
	ref: "AWS::AuditManager::Assessment_AssessmentStatus",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AuditManager::Assessment_Tag",
},
},
		},
	},
	"AWS::AutoScaling::AutoScalingGroup": {
		Properties: map[string]*Reference{
				"AutoScalingGroupName": &Reference{
	type_: String,
},
				"AvailabilityZones": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"CapacityRebalance": &Reference{
	type_: Boolean,
},
				"Context": &Reference{
	type_: String,
},
				"Cooldown": &Reference{
	type_: String,
},
				"DefaultInstanceWarmup": &Reference{
	type_: Integer,
},
				"DesiredCapacity": &Reference{
	type_: String,
},
				"DesiredCapacityType": &Reference{
	type_: String,
},
				"HealthCheckGracePeriod": &Reference{
	type_: Integer,
},
				"HealthCheckType": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InstanceId": &Reference{
	type_: String,
},
				"LaunchConfigurationName": &Reference{
	type_: String,
},
				"LaunchTemplate": &Reference{
	ref: "AWS::AutoScaling::AutoScalingGroup_LaunchTemplateSpecification",
},
				"LaunchTemplateSpecification": &Reference{
	type_: String,
},
				"LifecycleHookSpecificationList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AutoScaling::AutoScalingGroup_LifecycleHookSpecification",
},
},
				"LoadBalancerNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"MaxInstanceLifetime": &Reference{
	type_: Integer,
},
				"MaxSize": &Reference{
	type_: String,
},
				"MetricsCollection": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AutoScaling::AutoScalingGroup_MetricsCollection",
},
},
				"MinSize": &Reference{
	type_: String,
},
				"MixedInstancesPolicy": &Reference{
	ref: "AWS::AutoScaling::AutoScalingGroup_MixedInstancesPolicy",
},
				"NewInstancesProtectedFromScaleIn": &Reference{
	type_: Boolean,
},
				"NotificationConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AutoScaling::AutoScalingGroup_NotificationConfiguration",
},
},
				"PlacementGroup": &Reference{
	type_: String,
},
				"ServiceLinkedRoleARN": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AutoScaling::AutoScalingGroup_TagProperty",
},
},
				"TargetGroupARNs": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"TerminationPolicies": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"VPCZoneIdentifier": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::AutoScaling::LaunchConfiguration": {
		Properties: map[string]*Reference{
				"AssociatePublicIpAddress": &Reference{
	type_: Boolean,
},
				"BlockDeviceMappings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AutoScaling::LaunchConfiguration_BlockDeviceMapping",
},
},
				"ClassicLinkVPCId": &Reference{
	type_: String,
},
				"ClassicLinkVPCSecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"EbsOptimized": &Reference{
	type_: Boolean,
},
				"IamInstanceProfile": &Reference{
	type_: String,
},
				"ImageId": &Reference{
	type_: String,
},
				"InstanceId": &Reference{
	type_: String,
},
				"InstanceMonitoring": &Reference{
	type_: Boolean,
},
				"InstanceType": &Reference{
	type_: String,
},
				"KernelId": &Reference{
	type_: String,
},
				"KeyName": &Reference{
	type_: String,
},
				"LaunchConfigurationName": &Reference{
	type_: String,
},
				"MetadataOptions": &Reference{
	ref: "AWS::AutoScaling::LaunchConfiguration_MetadataOptions",
},
				"PlacementTenancy": &Reference{
	type_: String,
},
				"RamDiskId": &Reference{
	type_: String,
},
				"SecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SpotPrice": &Reference{
	type_: String,
},
				"UserData": &Reference{
	type_: String,
},
		},
	},
	"AWS::AutoScaling::LifecycleHook": {
		Properties: map[string]*Reference{
				"AutoScalingGroupName": &Reference{
	type_: String,
},
				"DefaultResult": &Reference{
	type_: String,
},
				"HeartbeatTimeout": &Reference{
	type_: Integer,
},
				"LifecycleHookName": &Reference{
	type_: String,
},
				"LifecycleTransition": &Reference{
	type_: String,
},
				"NotificationMetadata": &Reference{
	type_: String,
},
				"NotificationTargetARN": &Reference{
	type_: String,
},
				"RoleARN": &Reference{
	type_: String,
},
		},
	},
	"AWS::AutoScaling::ScalingPolicy": {
		Properties: map[string]*Reference{
				"AdjustmentType": &Reference{
	type_: String,
},
				"AutoScalingGroupName": &Reference{
	type_: String,
},
				"Cooldown": &Reference{
	type_: String,
},
				"EstimatedInstanceWarmup": &Reference{
	type_: Integer,
},
				"Id": &Reference{
	type_: String,
},
				"MetricAggregationType": &Reference{
	type_: String,
},
				"MinAdjustmentMagnitude": &Reference{
	type_: Integer,
},
				"PolicyType": &Reference{
	type_: String,
},
				"PredictiveScalingConfiguration": &Reference{
	ref: "AWS::AutoScaling::ScalingPolicy_PredictiveScalingConfiguration",
},
				"ScalingAdjustment": &Reference{
	type_: Integer,
},
				"StepAdjustments": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AutoScaling::ScalingPolicy_StepAdjustment",
},
},
				"TargetTrackingConfiguration": &Reference{
	ref: "AWS::AutoScaling::ScalingPolicy_TargetTrackingConfiguration",
},
		},
	},
	"AWS::AutoScaling::ScheduledAction": {
		Properties: map[string]*Reference{
				"AutoScalingGroupName": &Reference{
	type_: String,
},
				"DesiredCapacity": &Reference{
	type_: Integer,
},
				"EndTime": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"MaxSize": &Reference{
	type_: Integer,
},
				"MinSize": &Reference{
	type_: Integer,
},
				"Recurrence": &Reference{
	type_: String,
},
				"StartTime": &Reference{
	type_: String,
},
				"TimeZone": &Reference{
	type_: String,
},
		},
	},
	"AWS::AutoScaling::WarmPool": {
		Properties: map[string]*Reference{
				"AutoScalingGroupName": &Reference{
	type_: String,
},
				"InstanceReusePolicy": &Reference{
	ref: "AWS::AutoScaling::WarmPool_InstanceReusePolicy",
},
				"MaxGroupPreparedCapacity": &Reference{
	type_: Integer,
},
				"MinSize": &Reference{
	type_: Integer,
},
				"PoolState": &Reference{
	type_: String,
},
		},
	},
	"AWS::AutoScalingPlans::ScalingPlan": {
		Properties: map[string]*Reference{
				"ApplicationSource": &Reference{
	ref: "AWS::AutoScalingPlans::ScalingPlan_ApplicationSource",
},
				"Id": &Reference{
	type_: String,
},
				"ScalingInstructions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AutoScalingPlans::ScalingPlan_ScalingInstruction",
},
},
				"ScalingPlanName": &Reference{
	type_: String,
},
				"ScalingPlanVersion": &Reference{
	type_: String,
},
		},
	},
	"AWS::Backup::BackupPlan": {
		Properties: map[string]*Reference{
				"BackupPlan": &Reference{
	ref: "AWS::Backup::BackupPlan_BackupPlanResourceType",
},
				"BackupPlanArn": &Reference{
	type_: String,
},
				"BackupPlanId": &Reference{
	type_: String,
},
				"BackupPlanTags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"VersionId": &Reference{
	type_: String,
},
		},
	},
	"AWS::Backup::BackupSelection": {
		Properties: map[string]*Reference{
				"BackupPlanId": &Reference{
	type_: String,
},
				"BackupSelection": &Reference{
	ref: "AWS::Backup::BackupSelection_BackupSelectionResourceType",
},
				"Id": &Reference{
	type_: String,
},
				"SelectionId": &Reference{
	type_: String,
},
		},
	},
	"AWS::Backup::BackupVault": {
		Properties: map[string]*Reference{
				"AccessPolicy": &Reference{
	type_: Unknown,
},
				"BackupVaultArn": &Reference{
	type_: String,
},
				"BackupVaultName": &Reference{
	ref: "AWS::Backup::BackupVault_BackupVaultNamePattern",
},
				"BackupVaultTags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"EncryptionKeyArn": &Reference{
	type_: String,
},
				"LockConfiguration": &Reference{
	ref: "AWS::Backup::BackupVault_LockConfigurationType",
},
				"Notifications": &Reference{
	ref: "AWS::Backup::BackupVault_NotificationObjectType",
},
		},
	},
	"AWS::Backup::Framework": {
		Properties: map[string]*Reference{
				"CreationTime": &Reference{
	type_: Number,
},
				"DeploymentStatus": &Reference{
	type_: String,
},
				"FrameworkArn": &Reference{
	type_: String,
},
				"FrameworkControls": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Backup::Framework_FrameworkControl",
},
},
				"FrameworkDescription": &Reference{
	type_: String,
},
				"FrameworkName": &Reference{
	type_: String,
},
				"FrameworkStatus": &Reference{
	type_: String,
},
				"FrameworkTags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Backup::Framework_Tag",
},
},
		},
	},
	"AWS::Backup::ReportPlan": {
		Properties: map[string]*Reference{
				"ReportDeliveryChannel": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Formats": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"S3BucketName": &Reference{
	type_: String,
},
			"S3KeyPrefix": &Reference{
	type_: String,
},
	},
},
				"ReportPlanArn": &Reference{
	type_: String,
},
				"ReportPlanDescription": &Reference{
	type_: String,
},
				"ReportPlanName": &Reference{
	type_: String,
},
				"ReportPlanTags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Backup::ReportPlan_Tag",
},
},
				"ReportSetting": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FrameworkArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ReportTemplate": &Reference{
	type_: String,
},
	},
},
		},
	},
	"AWS::Batch::ComputeEnvironment": {
		Properties: map[string]*Reference{
				"ComputeEnvironmentArn": &Reference{
	type_: String,
},
				"ComputeEnvironmentName": &Reference{
	type_: String,
},
				"ComputeResources": &Reference{
	ref: "AWS::Batch::ComputeEnvironment_ComputeResources",
},
				"ReplaceComputeEnvironment": &Reference{
	type_: Boolean,
},
				"ServiceRole": &Reference{
	type_: String,
},
				"State": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Type": &Reference{
	type_: String,
},
				"UnmanagedvCpus": &Reference{
	type_: Integer,
},
				"UpdatePolicy": &Reference{
	ref: "AWS::Batch::ComputeEnvironment_UpdatePolicy",
},
		},
	},
	"AWS::Batch::JobDefinition": {
		Properties: map[string]*Reference{
				"ContainerProperties": &Reference{
	ref: "AWS::Batch::JobDefinition_ContainerProperties",
},
				"Id": &Reference{
	type_: String,
},
				"JobDefinitionName": &Reference{
	type_: String,
},
				"NodeProperties": &Reference{
	ref: "AWS::Batch::JobDefinition_NodeProperties",
},
				"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"PlatformCapabilities": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"PropagateTags": &Reference{
	type_: Boolean,
},
				"RetryStrategy": &Reference{
	ref: "AWS::Batch::JobDefinition_RetryStrategy",
},
				"SchedulingPriority": &Reference{
	type_: Integer,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Timeout": &Reference{
	ref: "AWS::Batch::JobDefinition_Timeout",
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::Batch::JobQueue": {
		Properties: map[string]*Reference{
				"ComputeEnvironmentOrder": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Batch::JobQueue_ComputeEnvironmentOrder",
},
},
				"JobQueueArn": &Reference{
	ref: "AWS::Batch::JobQueue_ResourceArn",
},
				"JobQueueName": &Reference{
	type_: String,
},
				"Priority": &Reference{
	type_: Integer,
},
				"SchedulingPolicyArn": &Reference{
	ref: "AWS::Batch::JobQueue_ResourceArn",
},
				"State": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::Batch::SchedulingPolicy": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::Batch::SchedulingPolicy_ResourceArn",
},
				"FairsharePolicy": &Reference{
	ref: "AWS::Batch::SchedulingPolicy_FairsharePolicy",
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::Budgets::Budget": {
		Properties: map[string]*Reference{
				"Budget": &Reference{
	ref: "AWS::Budgets::Budget_BudgetData",
},
				"Id": &Reference{
	type_: String,
},
				"NotificationsWithSubscribers": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Budgets::Budget_NotificationWithSubscribers",
},
},
		},
	},
	"AWS::Budgets::BudgetsAction": {
		Properties: map[string]*Reference{
				"ActionId": &Reference{
	type_: String,
},
				"ActionThreshold": &Reference{
	ref: "AWS::Budgets::BudgetsAction_ActionThreshold",
},
				"ActionType": &Reference{
	type_: String,
},
				"ApprovalModel": &Reference{
	type_: String,
},
				"BudgetName": &Reference{
	type_: String,
},
				"Definition": &Reference{
	ref: "AWS::Budgets::BudgetsAction_Definition",
},
				"ExecutionRoleArn": &Reference{
	type_: String,
},
				"NotificationType": &Reference{
	type_: String,
},
				"Subscribers": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Budgets::BudgetsAction_Subscriber",
},
},
		},
	},
	"AWS::CE::CostCategory": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"DefaultValue": &Reference{
	type_: String,
},
				"EffectiveStart": &Reference{
	ref: "AWS::CE::CostCategory_ZonedDateTime",
},
				"Name": &Reference{
	type_: String,
},
				"RuleVersion": &Reference{
	type_: String,
},
				"Rules": &Reference{
	type_: String,
},
				"SplitChargeRules": &Reference{
	type_: String,
},
		},
	},
	"AWS::Cassandra::Keyspace": {
		Properties: map[string]*Reference{
				"KeyspaceName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Cassandra::Keyspace_Tag",
},
},
		},
	},
	"AWS::Cassandra::Table": {
		Properties: map[string]*Reference{
				"BillingMode": &Reference{
	ref: "AWS::Cassandra::Table_BillingMode",
},
				"ClusteringKeyColumns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Cassandra::Table_ClusteringKeyColumn",
},
},
				"DefaultTimeToLive": &Reference{
	type_: Integer,
},
				"EncryptionSpecification": &Reference{
	ref: "AWS::Cassandra::Table_EncryptionSpecification",
},
				"KeyspaceName": &Reference{
	type_: String,
},
				"PartitionKeyColumns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Cassandra::Table_Column",
},
},
				"PointInTimeRecoveryEnabled": &Reference{
	type_: Boolean,
},
				"RegularColumns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Cassandra::Table_Column",
},
},
				"TableName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Cassandra::Table_Tag",
},
},
		},
	},
	"AWS::CertificateManager::Account": {
		Properties: map[string]*Reference{
				"AccountId": &Reference{
	ref: "AWS::CertificateManager::Account_AccountId",
},
				"ExpiryEventsConfiguration": &Reference{
	ref: "AWS::CertificateManager::Account_ExpiryEventsConfiguration",
},
		},
	},
	"AWS::CertificateManager::Certificate": {
		Properties: map[string]*Reference{
				"CertificateAuthorityArn": &Reference{
	type_: String,
},
				"CertificateTransparencyLoggingPreference": &Reference{
	type_: String,
},
				"DomainName": &Reference{
	type_: String,
},
				"DomainValidationOptions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CertificateManager::Certificate_DomainValidationOption",
},
},
				"Id": &Reference{
	type_: String,
},
				"SubjectAlternativeNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CertificateManager::Certificate_Tag",
},
},
				"ValidationMethod": &Reference{
	type_: String,
},
		},
	},
	"AWS::Chatbot::SlackChannelConfiguration": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"ConfigurationName": &Reference{
	type_: String,
},
				"GuardrailPolicies": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"IamRoleArn": &Reference{
	type_: String,
},
				"LoggingLevel": &Reference{
	type_: String,
},
				"SlackChannelId": &Reference{
	type_: String,
},
				"SlackWorkspaceId": &Reference{
	type_: String,
},
				"SnsTopicArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"UserRoleRequired": &Reference{
	type_: Boolean,
},
		},
	},
	"AWS::Cloud9::EnvironmentEC2": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AutomaticStopTimeMinutes": &Reference{
	type_: Integer,
},
				"ConnectionType": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"ImageId": &Reference{
	type_: String,
},
				"InstanceType": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"OwnerArn": &Reference{
	type_: String,
},
				"Repositories": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Cloud9::EnvironmentEC2_Repository",
},
},
				"SubnetId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Cloud9::EnvironmentEC2_Tag",
},
},
		},
	},
	"AWS::CloudFormation::CustomResource": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"ServiceToken": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudFormation::HookDefaultVersion": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"TypeName": &Reference{
	type_: String,
},
				"TypeVersionArn": &Reference{
	type_: String,
},
				"VersionId": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudFormation::HookTypeConfig": {
		Properties: map[string]*Reference{
				"Configuration": &Reference{
	type_: String,
},
				"ConfigurationAlias": &Reference{
	type_: String,
},
				"ConfigurationArn": &Reference{
	type_: String,
},
				"TypeArn": &Reference{
	type_: String,
},
				"TypeName": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudFormation::HookVersion": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"ExecutionRoleArn": &Reference{
	type_: String,
},
				"IsDefaultVersion": &Reference{
	type_: Boolean,
},
				"LoggingConfig": &Reference{
	ref: "AWS::CloudFormation::HookVersion_LoggingConfig",
},
				"SchemaHandlerPackage": &Reference{
	type_: String,
},
				"TypeArn": &Reference{
	type_: String,
},
				"TypeName": &Reference{
	type_: String,
},
				"VersionId": &Reference{
	type_: String,
},
				"Visibility": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudFormation::Macro": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"FunctionName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"LogGroupName": &Reference{
	type_: String,
},
				"LogRoleARN": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudFormation::ModuleDefaultVersion": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"ModuleName": &Reference{
	type_: String,
},
				"VersionId": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudFormation::ModuleVersion": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"DocumentationUrl": &Reference{
	type_: String,
},
				"IsDefaultVersion": &Reference{
	type_: Boolean,
},
				"ModuleName": &Reference{
	type_: String,
},
				"ModulePackage": &Reference{
	type_: String,
},
				"Schema": &Reference{
	type_: String,
},
				"TimeCreated": &Reference{
	type_: String,
},
				"VersionId": &Reference{
	type_: String,
},
				"Visibility": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudFormation::PublicTypeVersion": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"LogDeliveryBucket": &Reference{
	type_: String,
},
				"PublicTypeArn": &Reference{
	type_: String,
},
				"PublicVersionNumber": &Reference{
	type_: String,
},
				"PublisherId": &Reference{
	type_: String,
},
				"Type": &Reference{
	type_: String,
},
				"TypeName": &Reference{
	type_: String,
},
				"TypeVersionArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudFormation::Publisher": {
		Properties: map[string]*Reference{
				"AcceptTermsAndConditions": &Reference{
	type_: Boolean,
},
				"ConnectionArn": &Reference{
	type_: String,
},
				"IdentityProvider": &Reference{
	type_: String,
},
				"PublisherId": &Reference{
	type_: String,
},
				"PublisherProfile": &Reference{
	type_: String,
},
				"PublisherStatus": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudFormation::ResourceDefaultVersion": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"TypeName": &Reference{
	type_: String,
},
				"TypeVersionArn": &Reference{
	type_: String,
},
				"VersionId": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudFormation::ResourceVersion": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"ExecutionRoleArn": &Reference{
	type_: String,
},
				"IsDefaultVersion": &Reference{
	type_: Boolean,
},
				"LoggingConfig": &Reference{
	ref: "AWS::CloudFormation::ResourceVersion_LoggingConfig",
},
				"ProvisioningType": &Reference{
	type_: String,
},
				"SchemaHandlerPackage": &Reference{
	type_: String,
},
				"TypeArn": &Reference{
	type_: String,
},
				"TypeName": &Reference{
	type_: String,
},
				"VersionId": &Reference{
	type_: String,
},
				"Visibility": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudFormation::Stack": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"NotificationARNs": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFormation::Stack_Tag",
},
},
				"TemplateURL": &Reference{
	type_: String,
},
				"TimeoutInMinutes": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::CloudFormation::StackSet": {
		Properties: map[string]*Reference{
				"AdministrationRoleARN": &Reference{
	type_: String,
},
				"AutoDeployment": &Reference{
	ref: "AWS::CloudFormation::StackSet_AutoDeployment",
},
				"CallAs": &Reference{
	type_: String,
},
				"Capabilities": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFormation::StackSet_Capability",
},
},
				"Description": &Reference{
	type_: String,
},
				"ExecutionRoleName": &Reference{
	type_: String,
},
				"ManagedExecution": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Active": &Reference{
	ref: "AWS::CloudFormation::StackSet_Active",
},
	},
},
				"OperationPreferences": &Reference{
	ref: "AWS::CloudFormation::StackSet_OperationPreferences",
},
				"Parameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFormation::StackSet_Parameter",
},
},
				"PermissionModel": &Reference{
	type_: String,
},
				"StackInstancesGroup": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFormation::StackSet_StackInstances",
},
},
				"StackSetId": &Reference{
	type_: String,
},
				"StackSetName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFormation::StackSet_Tag",
},
},
				"TemplateBody": &Reference{
	type_: String,
},
				"TemplateURL": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudFormation::TypeActivation": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AutoUpdate": &Reference{
	type_: Boolean,
},
				"ExecutionRoleArn": &Reference{
	type_: String,
},
				"LoggingConfig": &Reference{
	ref: "AWS::CloudFormation::TypeActivation_LoggingConfig",
},
				"MajorVersion": &Reference{
	type_: String,
},
				"PublicTypeArn": &Reference{
	type_: String,
},
				"PublisherId": &Reference{
	type_: String,
},
				"Type": &Reference{
	type_: String,
},
				"TypeName": &Reference{
	type_: String,
},
				"TypeNameAlias": &Reference{
	type_: String,
},
				"VersionBump": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudFormation::WaitCondition": {
		Properties: map[string]*Reference{
				"Count": &Reference{
	type_: Integer,
},
				"Data": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Handle": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Timeout": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudFormation::WaitConditionHandle": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudFront::CachePolicy": {
		Properties: map[string]*Reference{
				"CachePolicyConfig": &Reference{
	ref: "AWS::CloudFront::CachePolicy_CachePolicyConfig",
},
				"Id": &Reference{
	type_: String,
},
				"LastModifiedTime": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudFront::CloudFrontOriginAccessIdentity": {
		Properties: map[string]*Reference{
				"CloudFrontOriginAccessIdentityConfig": &Reference{
	ref: "AWS::CloudFront::CloudFrontOriginAccessIdentity_CloudFrontOriginAccessIdentityConfig",
},
				"Id": &Reference{
	type_: String,
},
				"S3CanonicalUserId": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudFront::Distribution": {
		Properties: map[string]*Reference{
				"DistributionConfig": &Reference{
	ref: "AWS::CloudFront::Distribution_DistributionConfig",
},
				"DomainName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFront::Distribution_Tag",
},
},
		},
	},
	"AWS::CloudFront::Function": {
		Properties: map[string]*Reference{
				"AutoPublish": &Reference{
	type_: Boolean,
},
				"FunctionARN": &Reference{
	type_: String,
},
				"FunctionCode": &Reference{
	type_: String,
},
				"FunctionConfig": &Reference{
	ref: "AWS::CloudFront::Function_FunctionConfig",
},
				"FunctionMetadata": &Reference{
	ref: "AWS::CloudFront::Function_FunctionMetadata",
},
				"Name": &Reference{
	type_: String,
},
				"Stage": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudFront::KeyGroup": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"KeyGroupConfig": &Reference{
	ref: "AWS::CloudFront::KeyGroup_KeyGroupConfig",
},
				"LastModifiedTime": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudFront::OriginRequestPolicy": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"LastModifiedTime": &Reference{
	type_: String,
},
				"OriginRequestPolicyConfig": &Reference{
	ref: "AWS::CloudFront::OriginRequestPolicy_OriginRequestPolicyConfig",
},
		},
	},
	"AWS::CloudFront::PublicKey": {
		Properties: map[string]*Reference{
				"CreatedTime": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"PublicKeyConfig": &Reference{
	ref: "AWS::CloudFront::PublicKey_PublicKeyConfig",
},
		},
	},
	"AWS::CloudFront::RealtimeLogConfig": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"EndPoints": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFront::RealtimeLogConfig_EndPoint",
},
},
				"Fields": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Name": &Reference{
	type_: String,
},
				"SamplingRate": &Reference{
	type_: Number,
},
		},
	},
	"AWS::CloudFront::ResponseHeadersPolicy": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"LastModifiedTime": &Reference{
	type_: String,
},
				"ResponseHeadersPolicyConfig": &Reference{
	ref: "AWS::CloudFront::ResponseHeadersPolicy_ResponseHeadersPolicyConfig",
},
		},
	},
	"AWS::CloudFront::StreamingDistribution": {
		Properties: map[string]*Reference{
				"DomainName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"StreamingDistributionConfig": &Reference{
	ref: "AWS::CloudFront::StreamingDistribution_StreamingDistributionConfig",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFront::StreamingDistribution_Tag",
},
},
		},
	},
	"AWS::CloudTrail::Trail": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CloudWatchLogsLogGroupArn": &Reference{
	type_: String,
},
				"CloudWatchLogsRoleArn": &Reference{
	type_: String,
},
				"EnableLogFileValidation": &Reference{
	type_: Boolean,
},
				"EventSelectors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudTrail::Trail_EventSelector",
},
},
				"IncludeGlobalServiceEvents": &Reference{
	type_: Boolean,
},
				"InsightSelectors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudTrail::Trail_InsightSelector",
},
},
				"IsLogging": &Reference{
	type_: Boolean,
},
				"IsMultiRegionTrail": &Reference{
	type_: Boolean,
},
				"IsOrganizationTrail": &Reference{
	type_: Boolean,
},
				"KMSKeyId": &Reference{
	type_: String,
},
				"S3BucketName": &Reference{
	type_: String,
},
				"S3KeyPrefix": &Reference{
	type_: String,
},
				"SnsTopicArn": &Reference{
	type_: String,
},
				"SnsTopicName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudTrail::Trail_Tag",
},
},
				"TrailName": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudWatch::Alarm": {
		Properties: map[string]*Reference{
				"ActionsEnabled": &Reference{
	type_: Boolean,
},
				"AlarmActions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"AlarmDescription": &Reference{
	type_: String,
},
				"AlarmName": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"ComparisonOperator": &Reference{
	type_: String,
},
				"DatapointsToAlarm": &Reference{
	type_: Integer,
},
				"Dimensions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudWatch::Alarm_Dimension",
},
},
				"EvaluateLowSampleCountPercentile": &Reference{
	type_: String,
},
				"EvaluationPeriods": &Reference{
	type_: Integer,
},
				"ExtendedStatistic": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InsufficientDataActions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"MetricName": &Reference{
	type_: String,
},
				"Metrics": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudWatch::Alarm_MetricDataQuery",
},
},
				"Namespace": &Reference{
	type_: String,
},
				"OKActions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Period": &Reference{
	type_: Integer,
},
				"Statistic": &Reference{
	type_: String,
},
				"Threshold": &Reference{
	type_: Number,
},
				"ThresholdMetricId": &Reference{
	type_: String,
},
				"TreatMissingData": &Reference{
	type_: String,
},
				"Unit": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudWatch::AnomalyDetector": {
		Properties: map[string]*Reference{
				"Configuration": &Reference{
	ref: "AWS::CloudWatch::AnomalyDetector_Configuration",
},
				"Dimensions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudWatch::AnomalyDetector_Dimension",
},
},
				"Id": &Reference{
	type_: String,
},
				"MetricMathAnomalyDetector": &Reference{
	ref: "AWS::CloudWatch::AnomalyDetector_MetricMathAnomalyDetector",
},
				"MetricName": &Reference{
	type_: String,
},
				"Namespace": &Reference{
	type_: String,
},
				"SingleMetricAnomalyDetector": &Reference{
	ref: "AWS::CloudWatch::AnomalyDetector_SingleMetricAnomalyDetector",
},
				"Stat": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudWatch::CompositeAlarm": {
		Properties: map[string]*Reference{
				"ActionsEnabled": &Reference{
	type_: Boolean,
},
				"AlarmActions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"AlarmDescription": &Reference{
	type_: String,
},
				"AlarmName": &Reference{
	type_: String,
},
				"AlarmRule": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"InsufficientDataActions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"OKActions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::CloudWatch::Dashboard": {
		Properties: map[string]*Reference{
				"DashboardBody": &Reference{
	type_: String,
},
				"DashboardName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::CloudWatch::InsightRule": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"RuleBody": &Reference{
	type_: String,
},
				"RuleName": &Reference{
	type_: String,
},
				"RuleState": &Reference{
	type_: String,
},
				"Tags": &Reference{
	ref: "AWS::CloudWatch::InsightRule_Tags",
},
		},
	},
	"AWS::CloudWatch::MetricStream": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CreationDate": &Reference{
	type_: String,
},
				"ExcludeFilters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudWatch::MetricStream_MetricStreamFilter",
},
},
				"FirehoseArn": &Reference{
	type_: String,
},
				"IncludeFilters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudWatch::MetricStream_MetricStreamFilter",
},
},
				"LastUpdateDate": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"OutputFormat": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
				"State": &Reference{
	type_: String,
},
				"StatisticsConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudWatch::MetricStream_MetricStreamStatisticsConfiguration",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudWatch::MetricStream_Tag",
},
},
		},
	},
	"AWS::CodeArtifact::Domain": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"DomainName": &Reference{
	type_: String,
},
				"EncryptionKey": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Owner": &Reference{
	type_: String,
},
				"PermissionsPolicyDocument": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeArtifact::Domain_Tag",
},
},
		},
	},
	"AWS::CodeArtifact::Repository": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"DomainName": &Reference{
	type_: String,
},
				"DomainOwner": &Reference{
	type_: String,
},
				"ExternalConnections": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Name": &Reference{
	type_: String,
},
				"PermissionsPolicyDocument": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"RepositoryName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeArtifact::Repository_Tag",
},
},
				"Upstreams": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::CodeBuild::Project": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Artifacts": &Reference{
	ref: "AWS::CodeBuild::Project_Artifacts",
},
				"BadgeEnabled": &Reference{
	type_: Boolean,
},
				"BuildBatchConfig": &Reference{
	ref: "AWS::CodeBuild::Project_ProjectBuildBatchConfig",
},
				"Cache": &Reference{
	ref: "AWS::CodeBuild::Project_ProjectCache",
},
				"ConcurrentBuildLimit": &Reference{
	type_: Integer,
},
				"Description": &Reference{
	type_: String,
},
				"EncryptionKey": &Reference{
	type_: String,
},
				"Environment": &Reference{
	ref: "AWS::CodeBuild::Project_Environment",
},
				"FileSystemLocations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeBuild::Project_ProjectFileSystemLocation",
},
},
				"Id": &Reference{
	type_: String,
},
				"LogsConfig": &Reference{
	ref: "AWS::CodeBuild::Project_LogsConfig",
},
				"Name": &Reference{
	type_: String,
},
				"QueuedTimeoutInMinutes": &Reference{
	type_: Integer,
},
				"ResourceAccessRole": &Reference{
	type_: String,
},
				"SecondaryArtifacts": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeBuild::Project_Artifacts",
},
},
				"SecondarySourceVersions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeBuild::Project_ProjectSourceVersion",
},
},
				"SecondarySources": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeBuild::Project_Source",
},
},
				"ServiceRole": &Reference{
	type_: String,
},
				"Source": &Reference{
	ref: "AWS::CodeBuild::Project_Source",
},
				"SourceVersion": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeBuild::Project_Tag",
},
},
				"TimeoutInMinutes": &Reference{
	type_: Integer,
},
				"Triggers": &Reference{
	ref: "AWS::CodeBuild::Project_ProjectTriggers",
},
				"Visibility": &Reference{
	type_: String,
},
				"VpcConfig": &Reference{
	ref: "AWS::CodeBuild::Project_VpcConfig",
},
		},
	},
	"AWS::CodeBuild::ReportGroup": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"DeleteReports": &Reference{
	type_: Boolean,
},
				"ExportConfig": &Reference{
	ref: "AWS::CodeBuild::ReportGroup_ReportExportConfig",
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeBuild::ReportGroup_Tag",
},
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::CodeBuild::SourceCredential": {
		Properties: map[string]*Reference{
				"AuthType": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"ServerType": &Reference{
	type_: String,
},
				"Token": &Reference{
	type_: String,
},
				"Username": &Reference{
	type_: String,
},
		},
	},
	"AWS::CodeCommit::Repository": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CloneUrlHttp": &Reference{
	type_: String,
},
				"CloneUrlSsh": &Reference{
	type_: String,
},
				"Code": &Reference{
	ref: "AWS::CodeCommit::Repository_Code",
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RepositoryDescription": &Reference{
	type_: String,
},
				"RepositoryName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeCommit::Repository_Tag",
},
},
				"Triggers": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeCommit::Repository_RepositoryTrigger",
},
},
		},
	},
	"AWS::CodeDeploy::Application": {
		Properties: map[string]*Reference{
				"ApplicationName": &Reference{
	type_: String,
},
				"ComputePlatform": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeDeploy::Application_Tag",
},
},
		},
	},
	"AWS::CodeDeploy::DeploymentConfig": {
		Properties: map[string]*Reference{
				"ComputePlatform": &Reference{
	type_: String,
},
				"DeploymentConfigName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"MinimumHealthyHosts": &Reference{
	ref: "AWS::CodeDeploy::DeploymentConfig_MinimumHealthyHosts",
},
				"TrafficRoutingConfig": &Reference{
	ref: "AWS::CodeDeploy::DeploymentConfig_TrafficRoutingConfig",
},
		},
	},
	"AWS::CodeDeploy::DeploymentGroup": {
		Properties: map[string]*Reference{
				"AlarmConfiguration": &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_AlarmConfiguration",
},
				"ApplicationName": &Reference{
	type_: String,
},
				"AutoRollbackConfiguration": &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_AutoRollbackConfiguration",
},
				"AutoScalingGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"BlueGreenDeploymentConfiguration": &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_BlueGreenDeploymentConfiguration",
},
				"Deployment": &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_Deployment",
},
				"DeploymentConfigName": &Reference{
	type_: String,
},
				"DeploymentGroupName": &Reference{
	type_: String,
},
				"DeploymentStyle": &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_DeploymentStyle",
},
				"ECSServices": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_ECSService",
},
},
				"Ec2TagFilters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_EC2TagFilter",
},
},
				"Ec2TagSet": &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_EC2TagSet",
},
				"Id": &Reference{
	type_: String,
},
				"LoadBalancerInfo": &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_LoadBalancerInfo",
},
				"OnPremisesInstanceTagFilters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_TagFilter",
},
},
				"OnPremisesTagSet": &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_OnPremisesTagSet",
},
				"OutdatedInstancesStrategy": &Reference{
	type_: String,
},
				"ServiceRoleArn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_Tag",
},
},
				"TriggerConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_TriggerConfig",
},
},
		},
	},
	"AWS::CodeGuruProfiler::ProfilingGroup": {
		Properties: map[string]*Reference{
				"AgentPermissions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Principals": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeGuruProfiler::ProfilingGroup_IamArn",
},
},
	},
},
				"AnomalyDetectionNotificationConfiguration": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeGuruProfiler::ProfilingGroup_Channel",
},
},
				"Arn": &Reference{
	ref: "AWS::CodeGuruProfiler::ProfilingGroup_ProfilingGroupArn",
},
				"ComputePlatform": &Reference{
	type_: String,
},
				"ProfilingGroupName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeGuruProfiler::ProfilingGroup_Tag",
},
},
		},
	},
	"AWS::CodeGuruReviewer::RepositoryAssociation": {
		Properties: map[string]*Reference{
				"AssociationArn": &Reference{
	type_: String,
},
				"BucketName": &Reference{
	type_: String,
},
				"ConnectionArn": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Owner": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeGuruReviewer::RepositoryAssociation_Tag",
},
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::CodePipeline::CustomActionType": {
		Properties: map[string]*Reference{
				"Category": &Reference{
	type_: String,
},
				"ConfigurationProperties": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodePipeline::CustomActionType_ConfigurationProperties",
},
},
				"Id": &Reference{
	type_: String,
},
				"InputArtifactDetails": &Reference{
	ref: "AWS::CodePipeline::CustomActionType_ArtifactDetails",
},
				"OutputArtifactDetails": &Reference{
	ref: "AWS::CodePipeline::CustomActionType_ArtifactDetails",
},
				"Provider": &Reference{
	type_: String,
},
				"Settings": &Reference{
	ref: "AWS::CodePipeline::CustomActionType_Settings",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodePipeline::CustomActionType_Tag",
},
},
				"Version": &Reference{
	type_: String,
},
		},
	},
	"AWS::CodePipeline::Pipeline": {
		Properties: map[string]*Reference{
				"ArtifactStore": &Reference{
	ref: "AWS::CodePipeline::Pipeline_ArtifactStore",
},
				"ArtifactStores": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodePipeline::Pipeline_ArtifactStoreMap",
},
},
				"DisableInboundStageTransitions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodePipeline::Pipeline_StageTransition",
},
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RestartExecutionOnUpdate": &Reference{
	type_: Boolean,
},
				"RoleArn": &Reference{
	type_: String,
},
				"Stages": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodePipeline::Pipeline_StageDeclaration",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodePipeline::Pipeline_Tag",
},
},
				"Version": &Reference{
	type_: String,
},
		},
	},
	"AWS::CodePipeline::Webhook": {
		Properties: map[string]*Reference{
				"Authentication": &Reference{
	type_: String,
},
				"AuthenticationConfiguration": &Reference{
	ref: "AWS::CodePipeline::Webhook_WebhookAuthConfiguration",
},
				"Filters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodePipeline::Webhook_WebhookFilterRule",
},
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RegisterWithThirdParty": &Reference{
	type_: Boolean,
},
				"TargetAction": &Reference{
	type_: String,
},
				"TargetPipeline": &Reference{
	type_: String,
},
				"TargetPipelineVersion": &Reference{
	type_: Integer,
},
				"Url": &Reference{
	type_: String,
},
		},
	},
	"AWS::CodeStar::GitHubRepository": {
		Properties: map[string]*Reference{
				"Code": &Reference{
	ref: "AWS::CodeStar::GitHubRepository_Code",
},
				"ConnectionArn": &Reference{
	type_: String,
},
				"EnableIssues": &Reference{
	type_: Boolean,
},
				"Id": &Reference{
	type_: String,
},
				"IsPrivate": &Reference{
	type_: Boolean,
},
				"RepositoryAccessToken": &Reference{
	type_: String,
},
				"RepositoryDescription": &Reference{
	type_: String,
},
				"RepositoryName": &Reference{
	type_: String,
},
				"RepositoryOwner": &Reference{
	type_: String,
},
		},
	},
	"AWS::CodeStarConnections::Connection": {
		Properties: map[string]*Reference{
				"ConnectionArn": &Reference{
	type_: String,
},
				"ConnectionName": &Reference{
	type_: String,
},
				"ConnectionStatus": &Reference{
	type_: String,
},
				"HostArn": &Reference{
	type_: String,
},
				"OwnerAccountId": &Reference{
	type_: String,
},
				"ProviderType": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeStarConnections::Connection_Tag",
},
},
		},
	},
	"AWS::CodeStarNotifications::NotificationRule": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CreatedBy": &Reference{
	type_: String,
},
				"DetailType": &Reference{
	type_: String,
},
				"EventTypeId": &Reference{
	type_: String,
},
				"EventTypeIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Name": &Reference{
	type_: String,
},
				"Resource": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"TargetAddress": &Reference{
	type_: String,
},
				"Targets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeStarNotifications::NotificationRule_Target",
},
},
		},
	},
	"AWS::Cognito::IdentityPool": {
		Properties: map[string]*Reference{
				"AllowClassicFlow": &Reference{
	type_: Boolean,
},
				"AllowUnauthenticatedIdentities": &Reference{
	type_: Boolean,
},
				"CognitoEvents": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"CognitoIdentityProviders": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Cognito::IdentityPool_CognitoIdentityProvider",
},
},
				"CognitoStreams": &Reference{
	ref: "AWS::Cognito::IdentityPool_CognitoStreams",
},
				"DeveloperProviderName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"IdentityPoolName": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"OpenIdConnectProviderARNs": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"PushSync": &Reference{
	ref: "AWS::Cognito::IdentityPool_PushSync",
},
				"SamlProviderARNs": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SupportedLoginProviders": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::Cognito::IdentityPoolRoleAttachment": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"IdentityPoolId": &Reference{
	type_: String,
},
				"RoleMappings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Roles": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::Cognito::UserPool": {
		Properties: map[string]*Reference{
				"AccountRecoverySetting": &Reference{
	ref: "AWS::Cognito::UserPool_AccountRecoverySetting",
},
				"AdminCreateUserConfig": &Reference{
	ref: "AWS::Cognito::UserPool_AdminCreateUserConfig",
},
				"AliasAttributes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Arn": &Reference{
	type_: String,
},
				"AutoVerifiedAttributes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"DeviceConfiguration": &Reference{
	ref: "AWS::Cognito::UserPool_DeviceConfiguration",
},
				"EmailConfiguration": &Reference{
	ref: "AWS::Cognito::UserPool_EmailConfiguration",
},
				"EmailVerificationMessage": &Reference{
	type_: String,
},
				"EmailVerificationSubject": &Reference{
	type_: String,
},
				"EnabledMfas": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Id": &Reference{
	type_: String,
},
				"LambdaConfig": &Reference{
	ref: "AWS::Cognito::UserPool_LambdaConfig",
},
				"MfaConfiguration": &Reference{
	type_: String,
},
				"Policies": &Reference{
	ref: "AWS::Cognito::UserPool_Policies",
},
				"ProviderName": &Reference{
	type_: String,
},
				"ProviderURL": &Reference{
	type_: String,
},
				"Schema": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Cognito::UserPool_SchemaAttribute",
},
},
				"SmsAuthenticationMessage": &Reference{
	type_: String,
},
				"SmsConfiguration": &Reference{
	ref: "AWS::Cognito::UserPool_SmsConfiguration",
},
				"SmsVerificationMessage": &Reference{
	type_: String,
},
				"UserAttributeUpdateSettings": &Reference{
	ref: "AWS::Cognito::UserPool_UserAttributeUpdateSettings",
},
				"UserPoolAddOns": &Reference{
	ref: "AWS::Cognito::UserPool_UserPoolAddOns",
},
				"UserPoolName": &Reference{
	type_: String,
},
				"UserPoolTags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"UsernameAttributes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"UsernameConfiguration": &Reference{
	ref: "AWS::Cognito::UserPool_UsernameConfiguration",
},
				"VerificationMessageTemplate": &Reference{
	ref: "AWS::Cognito::UserPool_VerificationMessageTemplate",
},
		},
	},
	"AWS::Cognito::UserPoolClient": {
		Properties: map[string]*Reference{
				"AccessTokenValidity": &Reference{
	type_: Integer,
},
				"AllowedOAuthFlows": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"AllowedOAuthFlowsUserPoolClient": &Reference{
	type_: Boolean,
},
				"AllowedOAuthScopes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"AnalyticsConfiguration": &Reference{
	ref: "AWS::Cognito::UserPoolClient_AnalyticsConfiguration",
},
				"CallbackURLs": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"ClientName": &Reference{
	type_: String,
},
				"ClientSecret": &Reference{
	type_: String,
},
				"DefaultRedirectURI": &Reference{
	type_: String,
},
				"EnablePropagateAdditionalUserContextData": &Reference{
	type_: Boolean,
},
				"EnableTokenRevocation": &Reference{
	type_: Boolean,
},
				"ExplicitAuthFlows": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"GenerateSecret": &Reference{
	type_: Boolean,
},
				"Id": &Reference{
	type_: String,
},
				"IdTokenValidity": &Reference{
	type_: Integer,
},
				"LogoutURLs": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Name": &Reference{
	type_: String,
},
				"PreventUserExistenceErrors": &Reference{
	type_: String,
},
				"ReadAttributes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"RefreshTokenValidity": &Reference{
	type_: Integer,
},
				"SupportedIdentityProviders": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"TokenValidityUnits": &Reference{
	ref: "AWS::Cognito::UserPoolClient_TokenValidityUnits",
},
				"UserPoolId": &Reference{
	type_: String,
},
				"WriteAttributes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::Cognito::UserPoolDomain": {
		Properties: map[string]*Reference{
				"CustomDomainConfig": &Reference{
	ref: "AWS::Cognito::UserPoolDomain_CustomDomainConfigType",
},
				"Domain": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"UserPoolId": &Reference{
	type_: String,
},
		},
	},
	"AWS::Cognito::UserPoolGroup": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"GroupName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Precedence": &Reference{
	type_: Number,
},
				"RoleArn": &Reference{
	type_: String,
},
				"UserPoolId": &Reference{
	type_: String,
},
		},
	},
	"AWS::Cognito::UserPoolIdentityProvider": {
		Properties: map[string]*Reference{
				"AttributeMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Id": &Reference{
	type_: String,
},
				"IdpIdentifiers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"ProviderDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"ProviderName": &Reference{
	type_: String,
},
				"ProviderType": &Reference{
	type_: String,
},
				"UserPoolId": &Reference{
	type_: String,
},
		},
	},
	"AWS::Cognito::UserPoolResourceServer": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Identifier": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Scopes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Cognito::UserPoolResourceServer_ResourceServerScopeType",
},
},
				"UserPoolId": &Reference{
	type_: String,
},
		},
	},
	"AWS::Cognito::UserPoolRiskConfigurationAttachment": {
		Properties: map[string]*Reference{
				"AccountTakeoverRiskConfiguration": &Reference{
	ref: "AWS::Cognito::UserPoolRiskConfigurationAttachment_AccountTakeoverRiskConfigurationType",
},
				"ClientId": &Reference{
	type_: String,
},
				"CompromisedCredentialsRiskConfiguration": &Reference{
	ref: "AWS::Cognito::UserPoolRiskConfigurationAttachment_CompromisedCredentialsRiskConfigurationType",
},
				"Id": &Reference{
	type_: String,
},
				"RiskExceptionConfiguration": &Reference{
	ref: "AWS::Cognito::UserPoolRiskConfigurationAttachment_RiskExceptionConfigurationType",
},
				"UserPoolId": &Reference{
	type_: String,
},
		},
	},
	"AWS::Cognito::UserPoolUICustomizationAttachment": {
		Properties: map[string]*Reference{
				"CSS": &Reference{
	type_: String,
},
				"ClientId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"UserPoolId": &Reference{
	type_: String,
},
		},
	},
	"AWS::Cognito::UserPoolUser": {
		Properties: map[string]*Reference{
				"ClientMetadata": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"DesiredDeliveryMediums": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"ForceAliasCreation": &Reference{
	type_: Boolean,
},
				"Id": &Reference{
	type_: String,
},
				"MessageAction": &Reference{
	type_: String,
},
				"UserAttributes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Cognito::UserPoolUser_AttributeType",
},
},
				"UserPoolId": &Reference{
	type_: String,
},
				"Username": &Reference{
	type_: String,
},
				"ValidationData": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Cognito::UserPoolUser_AttributeType",
},
},
		},
	},
	"AWS::Cognito::UserPoolUserToGroupAttachment": {
		Properties: map[string]*Reference{
				"GroupName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"UserPoolId": &Reference{
	type_: String,
},
				"Username": &Reference{
	type_: String,
},
		},
	},
	"AWS::Config::AggregationAuthorization": {
		Properties: map[string]*Reference{
				"AggregationAuthorizationArn": &Reference{
	type_: String,
},
				"AuthorizedAccountId": &Reference{
	type_: String,
},
				"AuthorizedAwsRegion": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Config::AggregationAuthorization_Tag",
},
},
		},
	},
	"AWS::Config::ConfigRule": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"ComplianceType": &Reference{
	type_: String,
},
				"ConfigRuleId": &Reference{
	type_: String,
},
				"ConfigRuleName": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"InputParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"MaximumExecutionFrequency": &Reference{
	type_: String,
},
				"Scope": &Reference{
	ref: "AWS::Config::ConfigRule_Scope",
},
				"Source": &Reference{
	ref: "AWS::Config::ConfigRule_Source",
},
		},
	},
	"AWS::Config::ConfigurationAggregator": {
		Properties: map[string]*Reference{
				"AccountAggregationSources": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Config::ConfigurationAggregator_AccountAggregationSource",
},
},
				"ConfigurationAggregatorArn": &Reference{
	type_: String,
},
				"ConfigurationAggregatorName": &Reference{
	type_: String,
},
				"OrganizationAggregationSource": &Reference{
	ref: "AWS::Config::ConfigurationAggregator_OrganizationAggregationSource",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Config::ConfigurationAggregator_Tag",
},
},
		},
	},
	"AWS::Config::ConfigurationRecorder": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RecordingGroup": &Reference{
	ref: "AWS::Config::ConfigurationRecorder_RecordingGroup",
},
				"RoleARN": &Reference{
	type_: String,
},
		},
	},
	"AWS::Config::ConformancePack": {
		Properties: map[string]*Reference{
				"ConformancePackInputParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Config::ConformancePack_ConformancePackInputParameter",
},
},
				"ConformancePackName": &Reference{
	type_: String,
},
				"DeliveryS3Bucket": &Reference{
	type_: String,
},
				"DeliveryS3KeyPrefix": &Reference{
	type_: String,
},
				"TemplateBody": &Reference{
	type_: String,
},
				"TemplateS3Uri": &Reference{
	type_: String,
},
		},
	},
	"AWS::Config::DeliveryChannel": {
		Properties: map[string]*Reference{
				"ConfigSnapshotDeliveryProperties": &Reference{
	ref: "AWS::Config::DeliveryChannel_ConfigSnapshotDeliveryProperties",
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"S3BucketName": &Reference{
	type_: String,
},
				"S3KeyPrefix": &Reference{
	type_: String,
},
				"S3KmsKeyArn": &Reference{
	type_: String,
},
				"SnsTopicARN": &Reference{
	type_: String,
},
		},
	},
	"AWS::Config::OrganizationConfigRule": {
		Properties: map[string]*Reference{
				"ExcludedAccounts": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Id": &Reference{
	type_: String,
},
				"OrganizationConfigRuleName": &Reference{
	type_: String,
},
				"OrganizationCustomRuleMetadata": &Reference{
	ref: "AWS::Config::OrganizationConfigRule_OrganizationCustomRuleMetadata",
},
				"OrganizationManagedRuleMetadata": &Reference{
	ref: "AWS::Config::OrganizationConfigRule_OrganizationManagedRuleMetadata",
},
		},
	},
	"AWS::Config::OrganizationConformancePack": {
		Properties: map[string]*Reference{
				"ConformancePackInputParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Config::OrganizationConformancePack_ConformancePackInputParameter",
},
},
				"DeliveryS3Bucket": &Reference{
	type_: String,
},
				"DeliveryS3KeyPrefix": &Reference{
	type_: String,
},
				"ExcludedAccounts": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Config::OrganizationConformancePack_AccountId",
},
},
				"OrganizationConformancePackName": &Reference{
	type_: String,
},
				"TemplateBody": &Reference{
	type_: String,
},
				"TemplateS3Uri": &Reference{
	type_: String,
},
		},
	},
	"AWS::Config::RemediationConfiguration": {
		Properties: map[string]*Reference{
				"Automatic": &Reference{
	type_: Boolean,
},
				"ConfigRuleName": &Reference{
	type_: String,
},
				"ExecutionControls": &Reference{
	ref: "AWS::Config::RemediationConfiguration_ExecutionControls",
},
				"Id": &Reference{
	type_: String,
},
				"MaximumAutomaticAttempts": &Reference{
	type_: Integer,
},
				"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"ResourceType": &Reference{
	type_: String,
},
				"RetryAttemptSeconds": &Reference{
	type_: Integer,
},
				"TargetId": &Reference{
	type_: String,
},
				"TargetType": &Reference{
	type_: String,
},
				"TargetVersion": &Reference{
	type_: String,
},
		},
	},
	"AWS::Config::StoredQuery": {
		Properties: map[string]*Reference{
				"QueryArn": &Reference{
	type_: String,
},
				"QueryDescription": &Reference{
	type_: String,
},
				"QueryExpression": &Reference{
	type_: String,
},
				"QueryId": &Reference{
	type_: String,
},
				"QueryName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Config::StoredQuery_Tag",
},
},
		},
	},
	"AWS::DAX::Cluster": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AvailabilityZones": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"ClusterDiscoveryEndpoint": &Reference{
	type_: String,
},
				"ClusterDiscoveryEndpointURL": &Reference{
	type_: String,
},
				"ClusterEndpointEncryptionType": &Reference{
	type_: String,
},
				"ClusterName": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"IAMRoleARN": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"NodeType": &Reference{
	type_: String,
},
				"NotificationTopicARN": &Reference{
	type_: String,
},
				"ParameterGroupName": &Reference{
	type_: String,
},
				"PreferredMaintenanceWindow": &Reference{
	type_: String,
},
				"ReplicationFactor": &Reference{
	type_: Integer,
},
				"SSESpecification": &Reference{
	ref: "AWS::DAX::Cluster_SSESpecification",
},
				"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SubnetGroupName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::DAX::ParameterGroup": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"ParameterGroupName": &Reference{
	type_: String,
},
				"ParameterNameValues": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::DAX::SubnetGroup": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"SubnetGroupName": &Reference{
	type_: String,
},
				"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::DLM::LifecyclePolicy": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"ExecutionRoleArn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"PolicyDetails": &Reference{
	ref: "AWS::DLM::LifecyclePolicy_PolicyDetails",
},
				"State": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DLM::LifecyclePolicy_Tag",
},
},
		},
	},
	"AWS::DMS::Certificate": {
		Properties: map[string]*Reference{
				"CertificateIdentifier": &Reference{
	type_: String,
},
				"CertificatePem": &Reference{
	type_: String,
},
				"CertificateWallet": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::DMS::Endpoint": {
		Properties: map[string]*Reference{
				"CertificateArn": &Reference{
	type_: String,
},
				"DatabaseName": &Reference{
	type_: String,
},
				"DocDbSettings": &Reference{
	ref: "AWS::DMS::Endpoint_DocDbSettings",
},
				"DynamoDbSettings": &Reference{
	ref: "AWS::DMS::Endpoint_DynamoDbSettings",
},
				"ElasticsearchSettings": &Reference{
	ref: "AWS::DMS::Endpoint_ElasticsearchSettings",
},
				"EndpointIdentifier": &Reference{
	type_: String,
},
				"EndpointType": &Reference{
	type_: String,
},
				"EngineName": &Reference{
	type_: String,
},
				"ExternalId": &Reference{
	type_: String,
},
				"ExtraConnectionAttributes": &Reference{
	type_: String,
},
				"GcpMySQLSettings": &Reference{
	ref: "AWS::DMS::Endpoint_GcpMySQLSettings",
},
				"IbmDb2Settings": &Reference{
	ref: "AWS::DMS::Endpoint_IbmDb2Settings",
},
				"Id": &Reference{
	type_: String,
},
				"KafkaSettings": &Reference{
	ref: "AWS::DMS::Endpoint_KafkaSettings",
},
				"KinesisSettings": &Reference{
	ref: "AWS::DMS::Endpoint_KinesisSettings",
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"MicrosoftSqlServerSettings": &Reference{
	ref: "AWS::DMS::Endpoint_MicrosoftSqlServerSettings",
},
				"MongoDbSettings": &Reference{
	ref: "AWS::DMS::Endpoint_MongoDbSettings",
},
				"MySqlSettings": &Reference{
	ref: "AWS::DMS::Endpoint_MySqlSettings",
},
				"NeptuneSettings": &Reference{
	ref: "AWS::DMS::Endpoint_NeptuneSettings",
},
				"OracleSettings": &Reference{
	ref: "AWS::DMS::Endpoint_OracleSettings",
},
				"Password": &Reference{
	type_: String,
},
				"Port": &Reference{
	type_: Integer,
},
				"PostgreSqlSettings": &Reference{
	ref: "AWS::DMS::Endpoint_PostgreSqlSettings",
},
				"RedisSettings": &Reference{
	ref: "AWS::DMS::Endpoint_RedisSettings",
},
				"RedshiftSettings": &Reference{
	ref: "AWS::DMS::Endpoint_RedshiftSettings",
},
				"ResourceIdentifier": &Reference{
	type_: String,
},
				"S3Settings": &Reference{
	ref: "AWS::DMS::Endpoint_S3Settings",
},
				"ServerName": &Reference{
	type_: String,
},
				"SslMode": &Reference{
	type_: String,
},
				"SybaseSettings": &Reference{
	ref: "AWS::DMS::Endpoint_SybaseSettings",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DMS::Endpoint_Tag",
},
},
				"Username": &Reference{
	type_: String,
},
		},
	},
	"AWS::DMS::EventSubscription": {
		Properties: map[string]*Reference{
				"Enabled": &Reference{
	type_: Boolean,
},
				"EventCategories": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Id": &Reference{
	type_: String,
},
				"SnsTopicArn": &Reference{
	type_: String,
},
				"SourceIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SourceType": &Reference{
	type_: String,
},
				"SubscriptionName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DMS::EventSubscription_Tag",
},
},
		},
	},
	"AWS::DMS::ReplicationInstance": {
		Properties: map[string]*Reference{
				"AllocatedStorage": &Reference{
	type_: Integer,
},
				"AllowMajorVersionUpgrade": &Reference{
	type_: Boolean,
},
				"AutoMinorVersionUpgrade": &Reference{
	type_: Boolean,
},
				"AvailabilityZone": &Reference{
	type_: String,
},
				"EngineVersion": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"MultiAZ": &Reference{
	type_: Boolean,
},
				"PreferredMaintenanceWindow": &Reference{
	type_: String,
},
				"PubliclyAccessible": &Reference{
	type_: Boolean,
},
				"ReplicationInstanceClass": &Reference{
	type_: String,
},
				"ReplicationInstanceIdentifier": &Reference{
	type_: String,
},
				"ReplicationInstancePrivateIpAddresses": &Reference{
	type_: String,
},
				"ReplicationInstancePublicIpAddresses": &Reference{
	type_: String,
},
				"ReplicationSubnetGroupIdentifier": &Reference{
	type_: String,
},
				"ResourceIdentifier": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DMS::ReplicationInstance_Tag",
},
},
				"VpcSecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::DMS::ReplicationSubnetGroup": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"ReplicationSubnetGroupDescription": &Reference{
	type_: String,
},
				"ReplicationSubnetGroupIdentifier": &Reference{
	type_: String,
},
				"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DMS::ReplicationSubnetGroup_Tag",
},
},
		},
	},
	"AWS::DMS::ReplicationTask": {
		Properties: map[string]*Reference{
				"CdcStartPosition": &Reference{
	type_: String,
},
				"CdcStartTime": &Reference{
	type_: Number,
},
				"CdcStopPosition": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"MigrationType": &Reference{
	type_: String,
},
				"ReplicationInstanceArn": &Reference{
	type_: String,
},
				"ReplicationTaskIdentifier": &Reference{
	type_: String,
},
				"ReplicationTaskSettings": &Reference{
	type_: String,
},
				"ResourceIdentifier": &Reference{
	type_: String,
},
				"SourceEndpointArn": &Reference{
	type_: String,
},
				"TableMappings": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DMS::ReplicationTask_Tag",
},
},
				"TargetEndpointArn": &Reference{
	type_: String,
},
				"TaskData": &Reference{
	type_: String,
},
		},
	},
	"AWS::DataBrew::Dataset": {
		Properties: map[string]*Reference{
				"Format": &Reference{
	type_: String,
},
				"FormatOptions": &Reference{
	ref: "AWS::DataBrew::Dataset_FormatOptions",
},
				"Input": &Reference{
	ref: "AWS::DataBrew::Dataset_Input",
},
				"Name": &Reference{
	type_: String,
},
				"PathOptions": &Reference{
	ref: "AWS::DataBrew::Dataset_PathOptions",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Dataset_Tag",
},
},
		},
	},
	"AWS::DataBrew::Job": {
		Properties: map[string]*Reference{
				"DataCatalogOutputs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Job_DataCatalogOutput",
},
},
				"DatabaseOutputs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Job_DatabaseOutput",
},
},
				"DatasetName": &Reference{
	type_: String,
},
				"EncryptionKeyArn": &Reference{
	type_: String,
},
				"EncryptionMode": &Reference{
	type_: String,
},
				"JobSample": &Reference{
	ref: "AWS::DataBrew::Job_JobSample",
},
				"LogSubscription": &Reference{
	type_: String,
},
				"MaxCapacity": &Reference{
	type_: Integer,
},
				"MaxRetries": &Reference{
	type_: Integer,
},
				"Name": &Reference{
	type_: String,
},
				"OutputLocation": &Reference{
	ref: "AWS::DataBrew::Job_OutputLocation",
},
				"Outputs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Job_Output",
},
},
				"ProfileConfiguration": &Reference{
	ref: "AWS::DataBrew::Job_ProfileConfiguration",
},
				"ProjectName": &Reference{
	type_: String,
},
				"Recipe": &Reference{
	ref: "AWS::DataBrew::Job_Recipe",
},
				"RoleArn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Job_Tag",
},
},
				"Timeout": &Reference{
	type_: Integer,
},
				"Type": &Reference{
	type_: String,
},
				"ValidationConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Job_ValidationConfiguration",
},
},
		},
	},
	"AWS::DataBrew::Project": {
		Properties: map[string]*Reference{
				"DatasetName": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RecipeName": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
				"Sample": &Reference{
	ref: "AWS::DataBrew::Project_Sample",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Project_Tag",
},
},
		},
	},
	"AWS::DataBrew::Recipe": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Steps": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Recipe_RecipeStep",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Recipe_Tag",
},
},
		},
	},
	"AWS::DataBrew::Ruleset": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Rules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Ruleset_Rule",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Ruleset_Tag",
},
},
				"TargetArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::DataBrew::Schedule": {
		Properties: map[string]*Reference{
				"CronExpression": &Reference{
	type_: String,
},
				"JobNames": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Schedule_JobName",
},
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Schedule_Tag",
},
},
		},
	},
	"AWS::DataPipeline::Pipeline": {
		Properties: map[string]*Reference{
				"Activate": &Reference{
	type_: Boolean,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"ParameterObjects": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataPipeline::Pipeline_ParameterObject",
},
},
				"ParameterValues": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataPipeline::Pipeline_ParameterValue",
},
},
				"PipelineObjects": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataPipeline::Pipeline_PipelineObject",
},
},
				"PipelineTags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataPipeline::Pipeline_PipelineTag",
},
},
		},
	},
	"AWS::DataSync::Agent": {
		Properties: map[string]*Reference{
				"ActivationKey": &Reference{
	type_: String,
},
				"AgentArn": &Reference{
	type_: String,
},
				"AgentName": &Reference{
	type_: String,
},
				"EndpointType": &Reference{
	type_: String,
},
				"SecurityGroupArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SubnetArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataSync::Agent_Tag",
},
},
				"VpcEndpointId": &Reference{
	type_: String,
},
		},
	},
	"AWS::DataSync::LocationEFS": {
		Properties: map[string]*Reference{
				"AccessPointArn": &Reference{
	type_: String,
},
				"Ec2Config": &Reference{
	ref: "AWS::DataSync::LocationEFS_Ec2Config",
},
				"EfsFilesystemArn": &Reference{
	type_: String,
},
				"FileSystemAccessRoleArn": &Reference{
	type_: String,
},
				"InTransitEncryption": &Reference{
	type_: String,
},
				"LocationArn": &Reference{
	type_: String,
},
				"LocationUri": &Reference{
	type_: String,
},
				"Subdirectory": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataSync::LocationEFS_Tag",
},
},
		},
	},
	"AWS::DataSync::LocationFSxLustre": {
		Properties: map[string]*Reference{
				"FsxFilesystemArn": &Reference{
	type_: String,
},
				"LocationArn": &Reference{
	type_: String,
},
				"LocationUri": &Reference{
	type_: String,
},
				"SecurityGroupArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Subdirectory": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataSync::LocationFSxLustre_Tag",
},
},
		},
	},
	"AWS::DataSync::LocationFSxONTAP": {
		Properties: map[string]*Reference{
				"FsxFilesystemArn": &Reference{
	type_: String,
},
				"LocationArn": &Reference{
	type_: String,
},
				"LocationUri": &Reference{
	type_: String,
},
				"Protocol": &Reference{
	ref: "AWS::DataSync::LocationFSxONTAP_Protocol",
},
				"SecurityGroupArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"StorageVirtualMachineArn": &Reference{
	type_: String,
},
				"Subdirectory": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataSync::LocationFSxONTAP_Tag",
},
},
		},
	},
	"AWS::DataSync::LocationFSxOpenZFS": {
		Properties: map[string]*Reference{
				"FsxFilesystemArn": &Reference{
	type_: String,
},
				"LocationArn": &Reference{
	type_: String,
},
				"LocationUri": &Reference{
	type_: String,
},
				"Protocol": &Reference{
	ref: "AWS::DataSync::LocationFSxOpenZFS_Protocol",
},
				"SecurityGroupArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Subdirectory": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataSync::LocationFSxOpenZFS_Tag",
},
},
		},
	},
	"AWS::DataSync::LocationFSxWindows": {
		Properties: map[string]*Reference{
				"Domain": &Reference{
	type_: String,
},
				"FsxFilesystemArn": &Reference{
	type_: String,
},
				"LocationArn": &Reference{
	type_: String,
},
				"LocationUri": &Reference{
	type_: String,
},
				"Password": &Reference{
	type_: String,
},
				"SecurityGroupArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Subdirectory": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataSync::LocationFSxWindows_Tag",
},
},
				"User": &Reference{
	type_: String,
},
		},
	},
	"AWS::DataSync::LocationHDFS": {
		Properties: map[string]*Reference{
				"AgentArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"AuthenticationType": &Reference{
	type_: String,
},
				"BlockSize": &Reference{
	type_: Integer,
},
				"KerberosKeytab": &Reference{
	type_: String,
},
				"KerberosKrb5Conf": &Reference{
	type_: String,
},
				"KerberosPrincipal": &Reference{
	type_: String,
},
				"KmsKeyProviderUri": &Reference{
	type_: String,
},
				"LocationArn": &Reference{
	type_: String,
},
				"LocationUri": &Reference{
	type_: String,
},
				"NameNodes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataSync::LocationHDFS_NameNode",
},
},
				"QopConfiguration": &Reference{
	ref: "AWS::DataSync::LocationHDFS_QopConfiguration",
},
				"ReplicationFactor": &Reference{
	type_: Integer,
},
				"SimpleUser": &Reference{
	type_: String,
},
				"Subdirectory": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataSync::LocationHDFS_Tag",
},
},
		},
	},
	"AWS::DataSync::LocationNFS": {
		Properties: map[string]*Reference{
				"LocationArn": &Reference{
	type_: String,
},
				"LocationUri": &Reference{
	type_: String,
},
				"MountOptions": &Reference{
	ref: "AWS::DataSync::LocationNFS_MountOptions",
},
				"OnPremConfig": &Reference{
	ref: "AWS::DataSync::LocationNFS_OnPremConfig",
},
				"ServerHostname": &Reference{
	type_: String,
},
				"Subdirectory": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataSync::LocationNFS_Tag",
},
},
		},
	},
	"AWS::DataSync::LocationObjectStorage": {
		Properties: map[string]*Reference{
				"AccessKey": &Reference{
	type_: String,
},
				"AgentArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"BucketName": &Reference{
	type_: String,
},
				"LocationArn": &Reference{
	type_: String,
},
				"LocationUri": &Reference{
	type_: String,
},
				"SecretKey": &Reference{
	type_: String,
},
				"ServerHostname": &Reference{
	type_: String,
},
				"ServerPort": &Reference{
	type_: Integer,
},
				"ServerProtocol": &Reference{
	type_: String,
},
				"Subdirectory": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataSync::LocationObjectStorage_Tag",
},
},
		},
	},
	"AWS::DataSync::LocationS3": {
		Properties: map[string]*Reference{
				"LocationArn": &Reference{
	type_: String,
},
				"LocationUri": &Reference{
	type_: String,
},
				"S3BucketArn": &Reference{
	type_: String,
},
				"S3Config": &Reference{
	ref: "AWS::DataSync::LocationS3_S3Config",
},
				"S3StorageClass": &Reference{
	type_: String,
},
				"Subdirectory": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataSync::LocationS3_Tag",
},
},
		},
	},
	"AWS::DataSync::LocationSMB": {
		Properties: map[string]*Reference{
				"AgentArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Domain": &Reference{
	type_: String,
},
				"LocationArn": &Reference{
	type_: String,
},
				"LocationUri": &Reference{
	type_: String,
},
				"MountOptions": &Reference{
	ref: "AWS::DataSync::LocationSMB_MountOptions",
},
				"Password": &Reference{
	type_: String,
},
				"ServerHostname": &Reference{
	type_: String,
},
				"Subdirectory": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataSync::LocationSMB_Tag",
},
},
				"User": &Reference{
	type_: String,
},
		},
	},
	"AWS::DataSync::Task": {
		Properties: map[string]*Reference{
				"CloudWatchLogGroupArn": &Reference{
	type_: String,
},
				"DestinationLocationArn": &Reference{
	type_: String,
},
				"DestinationNetworkInterfaceArns": &Reference{
	ref: "AWS::DataSync::Task_DestinationNetworkInterfaceArns",
},
				"ErrorCode": &Reference{
	type_: String,
},
				"ErrorDetail": &Reference{
	type_: String,
},
				"Excludes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataSync::Task_FilterRule",
},
},
				"Includes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataSync::Task_FilterRule",
},
},
				"Name": &Reference{
	type_: String,
},
				"Options": &Reference{
	ref: "AWS::DataSync::Task_Options",
},
				"Schedule": &Reference{
	ref: "AWS::DataSync::Task_TaskSchedule",
},
				"SourceLocationArn": &Reference{
	type_: String,
},
				"SourceNetworkInterfaceArns": &Reference{
	ref: "AWS::DataSync::Task_SourceNetworkInterfaceArns",
},
				"Status": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataSync::Task_Tag",
},
},
				"TaskArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::Detective::Graph": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Detective::Graph_Tag",
},
},
		},
	},
	"AWS::Detective::MemberInvitation": {
		Properties: map[string]*Reference{
				"DisableEmailNotification": &Reference{
	type_: Boolean,
},
				"GraphArn": &Reference{
	type_: String,
},
				"MemberEmailAddress": &Reference{
	type_: String,
},
				"MemberId": &Reference{
	type_: String,
},
				"Message": &Reference{
	type_: String,
},
		},
	},
	"AWS::DevOpsGuru::NotificationChannel": {
		Properties: map[string]*Reference{
				"Config": &Reference{
	ref: "AWS::DevOpsGuru::NotificationChannel_NotificationChannelConfig",
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::DevOpsGuru::ResourceCollection": {
		Properties: map[string]*Reference{
				"ResourceCollectionFilter": &Reference{
	ref: "AWS::DevOpsGuru::ResourceCollection_ResourceCollectionFilter",
},
				"ResourceCollectionType": &Reference{
	type_: String,
},
		},
	},
	"AWS::DirectoryService::MicrosoftAD": {
		Properties: map[string]*Reference{
				"Alias": &Reference{
	type_: String,
},
				"CreateAlias": &Reference{
	type_: Boolean,
},
				"DnsIpAddresses": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Edition": &Reference{
	type_: String,
},
				"EnableSso": &Reference{
	type_: Boolean,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Password": &Reference{
	type_: String,
},
				"ShortName": &Reference{
	type_: String,
},
				"VpcSettings": &Reference{
	ref: "AWS::DirectoryService::MicrosoftAD_VpcSettings",
},
		},
	},
	"AWS::DirectoryService::SimpleAD": {
		Properties: map[string]*Reference{
				"Alias": &Reference{
	type_: String,
},
				"CreateAlias": &Reference{
	type_: Boolean,
},
				"Description": &Reference{
	type_: String,
},
				"DnsIpAddresses": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"EnableSso": &Reference{
	type_: Boolean,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Password": &Reference{
	type_: String,
},
				"ShortName": &Reference{
	type_: String,
},
				"Size": &Reference{
	type_: String,
},
				"VpcSettings": &Reference{
	ref: "AWS::DirectoryService::SimpleAD_VpcSettings",
},
		},
	},
	"AWS::DocDB::DBCluster": {
		Properties: map[string]*Reference{
				"AvailabilityZones": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"BackupRetentionPeriod": &Reference{
	type_: Integer,
},
				"ClusterResourceId": &Reference{
	type_: String,
},
				"CopyTagsToSnapshot": &Reference{
	type_: Boolean,
},
				"DBClusterIdentifier": &Reference{
	type_: String,
},
				"DBClusterParameterGroupName": &Reference{
	type_: String,
},
				"DBSubnetGroupName": &Reference{
	type_: String,
},
				"DeletionProtection": &Reference{
	type_: Boolean,
},
				"EnableCloudwatchLogsExports": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Endpoint": &Reference{
	type_: String,
},
				"EngineVersion": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"MasterUserPassword": &Reference{
	type_: String,
},
				"MasterUsername": &Reference{
	type_: String,
},
				"Port": &Reference{
	type_: Integer,
},
				"PreferredBackupWindow": &Reference{
	type_: String,
},
				"PreferredMaintenanceWindow": &Reference{
	type_: String,
},
				"ReadEndpoint": &Reference{
	type_: String,
},
				"SnapshotIdentifier": &Reference{
	type_: String,
},
				"StorageEncrypted": &Reference{
	type_: Boolean,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DocDB::DBCluster_Tag",
},
},
				"VpcSecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::DocDB::DBClusterParameterGroup": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Family": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DocDB::DBClusterParameterGroup_Tag",
},
},
		},
	},
	"AWS::DocDB::DBInstance": {
		Properties: map[string]*Reference{
				"AutoMinorVersionUpgrade": &Reference{
	type_: Boolean,
},
				"AvailabilityZone": &Reference{
	type_: String,
},
				"DBClusterIdentifier": &Reference{
	type_: String,
},
				"DBInstanceClass": &Reference{
	type_: String,
},
				"DBInstanceIdentifier": &Reference{
	type_: String,
},
				"EnablePerformanceInsights": &Reference{
	type_: Boolean,
},
				"Endpoint": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Port": &Reference{
	type_: String,
},
				"PreferredMaintenanceWindow": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DocDB::DBInstance_Tag",
},
},
		},
	},
	"AWS::DocDB::DBSubnetGroup": {
		Properties: map[string]*Reference{
				"DBSubnetGroupDescription": &Reference{
	type_: String,
},
				"DBSubnetGroupName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DocDB::DBSubnetGroup_Tag",
},
},
		},
	},
	"AWS::DynamoDB::GlobalTable": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AttributeDefinitions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DynamoDB::GlobalTable_AttributeDefinition",
},
},
				"BillingMode": &Reference{
	type_: String,
},
				"GlobalSecondaryIndexes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DynamoDB::GlobalTable_GlobalSecondaryIndex",
},
},
				"KeySchema": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DynamoDB::GlobalTable_KeySchema",
},
},
				"LocalSecondaryIndexes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DynamoDB::GlobalTable_LocalSecondaryIndex",
},
},
				"Replicas": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DynamoDB::GlobalTable_ReplicaSpecification",
},
},
				"SSESpecification": &Reference{
	ref: "AWS::DynamoDB::GlobalTable_SSESpecification",
},
				"StreamArn": &Reference{
	type_: String,
},
				"StreamSpecification": &Reference{
	ref: "AWS::DynamoDB::GlobalTable_StreamSpecification",
},
				"TableId": &Reference{
	type_: String,
},
				"TableName": &Reference{
	type_: String,
},
				"TimeToLiveSpecification": &Reference{
	ref: "AWS::DynamoDB::GlobalTable_TimeToLiveSpecification",
},
				"WriteProvisionedThroughputSettings": &Reference{
	ref: "AWS::DynamoDB::GlobalTable_WriteProvisionedThroughputSettings",
},
		},
	},
	"AWS::DynamoDB::Table": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AttributeDefinitions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DynamoDB::Table_AttributeDefinition",
},
},
				"BillingMode": &Reference{
	type_: String,
},
				"ContributorInsightsSpecification": &Reference{
	ref: "AWS::DynamoDB::Table_ContributorInsightsSpecification",
},
				"GlobalSecondaryIndexes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DynamoDB::Table_GlobalSecondaryIndex",
},
},
				"Id": &Reference{
	type_: String,
},
				"KeySchema": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DynamoDB::Table_KeySchema",
},
},
				"KinesisStreamSpecification": &Reference{
	ref: "AWS::DynamoDB::Table_KinesisStreamSpecification",
},
				"LocalSecondaryIndexes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DynamoDB::Table_LocalSecondaryIndex",
},
},
				"PointInTimeRecoverySpecification": &Reference{
	ref: "AWS::DynamoDB::Table_PointInTimeRecoverySpecification",
},
				"ProvisionedThroughput": &Reference{
	ref: "AWS::DynamoDB::Table_ProvisionedThroughput",
},
				"SSESpecification": &Reference{
	ref: "AWS::DynamoDB::Table_SSESpecification",
},
				"StreamArn": &Reference{
	type_: String,
},
				"StreamSpecification": &Reference{
	ref: "AWS::DynamoDB::Table_StreamSpecification",
},
				"TableClass": &Reference{
	type_: String,
},
				"TableName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DynamoDB::Table_Tag",
},
},
				"TimeToLiveSpecification": &Reference{
	ref: "AWS::DynamoDB::Table_TimeToLiveSpecification",
},
		},
	},
	"AWS::EC2::CapacityReservation": {
		Properties: map[string]*Reference{
				"AvailabilityZone": &Reference{
	type_: String,
},
				"AvailableInstanceCount": &Reference{
	type_: Integer,
},
				"EbsOptimized": &Reference{
	type_: Boolean,
},
				"EndDate": &Reference{
	type_: String,
},
				"EndDateType": &Reference{
	type_: String,
},
				"EphemeralStorage": &Reference{
	type_: Boolean,
},
				"Id": &Reference{
	type_: String,
},
				"InstanceCount": &Reference{
	type_: Integer,
},
				"InstanceMatchCriteria": &Reference{
	type_: String,
},
				"InstancePlatform": &Reference{
	type_: String,
},
				"InstanceType": &Reference{
	type_: String,
},
				"OutPostArn": &Reference{
	type_: String,
},
				"PlacementGroupArn": &Reference{
	type_: String,
},
				"TagSpecifications": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::CapacityReservation_TagSpecification",
},
},
				"Tenancy": &Reference{
	type_: String,
},
				"TotalInstanceCount": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::EC2::CapacityReservationFleet": {
		Properties: map[string]*Reference{
				"AllocationStrategy": &Reference{
	type_: String,
},
				"CapacityReservationFleetId": &Reference{
	type_: String,
},
				"EndDate": &Reference{
	type_: String,
},
				"InstanceMatchCriteria": &Reference{
	type_: String,
},
				"InstanceTypeSpecifications": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::CapacityReservationFleet_InstanceTypeSpecification",
},
},
				"NoRemoveEndDate": &Reference{
	type_: Boolean,
},
				"RemoveEndDate": &Reference{
	type_: Boolean,
},
				"TagSpecifications": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::CapacityReservationFleet_TagSpecification",
},
},
				"Tenancy": &Reference{
	type_: String,
},
				"TotalTargetCapacity": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::EC2::CarrierGateway": {
		Properties: map[string]*Reference{
				"CarrierGatewayId": &Reference{
	type_: String,
},
				"OwnerId": &Reference{
	type_: String,
},
				"State": &Reference{
	type_: String,
},
				"Tags": &Reference{
	ref: "AWS::EC2::CarrierGateway_Tags",
},
				"VpcId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::ClientVpnAuthorizationRule": {
		Properties: map[string]*Reference{
				"AccessGroupId": &Reference{
	type_: String,
},
				"AuthorizeAllGroups": &Reference{
	type_: Boolean,
},
				"ClientVpnEndpointId": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"TargetNetworkCidr": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::ClientVpnEndpoint": {
		Properties: map[string]*Reference{
				"AuthenticationOptions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::ClientVpnEndpoint_ClientAuthenticationRequest",
},
},
				"ClientCidrBlock": &Reference{
	type_: String,
},
				"ClientConnectOptions": &Reference{
	ref: "AWS::EC2::ClientVpnEndpoint_ClientConnectOptions",
},
				"ClientLoginBannerOptions": &Reference{
	ref: "AWS::EC2::ClientVpnEndpoint_ClientLoginBannerOptions",
},
				"ConnectionLogOptions": &Reference{
	ref: "AWS::EC2::ClientVpnEndpoint_ConnectionLogOptions",
},
				"Description": &Reference{
	type_: String,
},
				"DnsServers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Id": &Reference{
	type_: String,
},
				"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SelfServicePortal": &Reference{
	type_: String,
},
				"ServerCertificateArn": &Reference{
	type_: String,
},
				"SessionTimeoutHours": &Reference{
	type_: Integer,
},
				"SplitTunnel": &Reference{
	type_: Boolean,
},
				"TagSpecifications": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::ClientVpnEndpoint_TagSpecification",
},
},
				"TransportProtocol": &Reference{
	type_: String,
},
				"VpcId": &Reference{
	type_: String,
},
				"VpnPort": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::EC2::ClientVpnRoute": {
		Properties: map[string]*Reference{
				"ClientVpnEndpointId": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"DestinationCidrBlock": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"TargetVpcSubnetId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::ClientVpnTargetNetworkAssociation": {
		Properties: map[string]*Reference{
				"ClientVpnEndpointId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"SubnetId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::CustomerGateway": {
		Properties: map[string]*Reference{
				"BgpAsn": &Reference{
	type_: Integer,
},
				"CustomerGatewayId": &Reference{
	type_: String,
},
				"IpAddress": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::CustomerGateway_Tag",
},
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::DHCPOptions": {
		Properties: map[string]*Reference{
				"DhcpOptionsId": &Reference{
	type_: String,
},
				"DomainName": &Reference{
	type_: String,
},
				"DomainNameServers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"NetbiosNameServers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"NetbiosNodeType": &Reference{
	type_: Integer,
},
				"NtpServers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::DHCPOptions_Tag",
},
},
		},
	},
	"AWS::EC2::EC2Fleet": {
		Properties: map[string]*Reference{
				"Context": &Reference{
	type_: String,
},
				"ExcessCapacityTerminationPolicy": &Reference{
	type_: String,
},
				"FleetId": &Reference{
	type_: String,
},
				"LaunchTemplateConfigs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::EC2Fleet_FleetLaunchTemplateConfigRequest",
},
},
				"OnDemandOptions": &Reference{
	ref: "AWS::EC2::EC2Fleet_OnDemandOptionsRequest",
},
				"ReplaceUnhealthyInstances": &Reference{
	type_: Boolean,
},
				"SpotOptions": &Reference{
	ref: "AWS::EC2::EC2Fleet_SpotOptionsRequest",
},
				"TagSpecifications": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::EC2Fleet_TagSpecification",
},
},
				"TargetCapacitySpecification": &Reference{
	ref: "AWS::EC2::EC2Fleet_TargetCapacitySpecificationRequest",
},
				"TerminateInstancesWithExpiration": &Reference{
	type_: Boolean,
},
				"Type": &Reference{
	type_: String,
},
				"ValidFrom": &Reference{
	type_: String,
},
				"ValidUntil": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::EIP": {
		Properties: map[string]*Reference{
				"AllocationId": &Reference{
	type_: String,
},
				"Domain": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InstanceId": &Reference{
	type_: String,
},
				"NetworkBorderGroup": &Reference{
	type_: String,
},
				"PublicIpv4Pool": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::EIP_Tag",
},
},
		},
	},
	"AWS::EC2::EIPAssociation": {
		Properties: map[string]*Reference{
				"AllocationId": &Reference{
	type_: String,
},
				"EIP": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InstanceId": &Reference{
	type_: String,
},
				"NetworkInterfaceId": &Reference{
	type_: String,
},
				"PrivateIpAddress": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::EgressOnlyInternetGateway": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"VpcId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::EnclaveCertificateIamRoleAssociation": {
		Properties: map[string]*Reference{
				"CertificateArn": &Reference{
	type_: String,
},
				"CertificateS3BucketName": &Reference{
	type_: String,
},
				"CertificateS3ObjectKey": &Reference{
	type_: String,
},
				"EncryptionKmsKeyId": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::FlowLog": {
		Properties: map[string]*Reference{
				"DeliverLogsPermissionArn": &Reference{
	type_: String,
},
				"DestinationOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FileFormat": &Reference{
	type_: String,
},
			"HiveCompatiblePartitions": &Reference{
	type_: Boolean,
},
			"PerHourPartition": &Reference{
	type_: Boolean,
},
	},
},
				"Id": &Reference{
	type_: String,
},
				"LogDestination": &Reference{
	type_: String,
},
				"LogDestinationType": &Reference{
	type_: String,
},
				"LogFormat": &Reference{
	type_: String,
},
				"LogGroupName": &Reference{
	type_: String,
},
				"MaxAggregationInterval": &Reference{
	type_: Integer,
},
				"ResourceId": &Reference{
	type_: String,
},
				"ResourceType": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::FlowLog_Tag",
},
},
				"TrafficType": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::GatewayRouteTableAssociation": {
		Properties: map[string]*Reference{
				"AssociationId": &Reference{
	type_: String,
},
				"GatewayId": &Reference{
	type_: String,
},
				"RouteTableId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::Host": {
		Properties: map[string]*Reference{
				"AutoPlacement": &Reference{
	type_: String,
},
				"AvailabilityZone": &Reference{
	type_: String,
},
				"HostId": &Reference{
	type_: String,
},
				"HostRecovery": &Reference{
	type_: String,
},
				"InstanceType": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::IPAM": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"IpamId": &Reference{
	type_: String,
},
				"OperatingRegions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::IPAM_IpamOperatingRegion",
},
},
				"PrivateDefaultScopeId": &Reference{
	type_: String,
},
				"PublicDefaultScopeId": &Reference{
	type_: String,
},
				"ScopeCount": &Reference{
	type_: Integer,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::IPAM_Tag",
},
},
		},
	},
	"AWS::EC2::IPAMAllocation": {
		Properties: map[string]*Reference{
				"Cidr": &Reference{
	ref: "AWS::EC2::IPAMAllocation_Cidr",
},
				"Description": &Reference{
	type_: String,
},
				"IpamPoolAllocationId": &Reference{
	type_: String,
},
				"IpamPoolId": &Reference{
	type_: String,
},
				"NetmaskLength": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::EC2::IPAMPool": {
		Properties: map[string]*Reference{
				"AddressFamily": &Reference{
	type_: String,
},
				"AllocationDefaultNetmaskLength": &Reference{
	type_: Integer,
},
				"AllocationMaxNetmaskLength": &Reference{
	type_: Integer,
},
				"AllocationMinNetmaskLength": &Reference{
	type_: Integer,
},
				"AllocationResourceTags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::IPAMPool_Tag",
},
},
				"Arn": &Reference{
	type_: String,
},
				"AutoImport": &Reference{
	type_: Boolean,
},
				"Description": &Reference{
	type_: String,
},
				"IpamArn": &Reference{
	type_: String,
},
				"IpamPoolId": &Reference{
	type_: String,
},
				"IpamScopeArn": &Reference{
	type_: String,
},
				"IpamScopeId": &Reference{
	type_: String,
},
				"IpamScopeType": &Reference{
	type_: String,
},
				"Locale": &Reference{
	type_: String,
},
				"PoolDepth": &Reference{
	type_: Integer,
},
				"ProvisionedCidrs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::IPAMPool_ProvisionedCidr",
},
},
				"PubliclyAdvertisable": &Reference{
	type_: Boolean,
},
				"SourceIpamPoolId": &Reference{
	type_: String,
},
				"State": &Reference{
	type_: String,
},
				"StateMessage": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::IPAMPool_Tag",
},
},
		},
	},
	"AWS::EC2::IPAMScope": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"IpamArn": &Reference{
	type_: String,
},
				"IpamId": &Reference{
	type_: String,
},
				"IpamScopeId": &Reference{
	type_: String,
},
				"IpamScopeType": &Reference{
	type_: String,
},
				"IsDefault": &Reference{
	type_: Boolean,
},
				"PoolCount": &Reference{
	type_: Integer,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::IPAMScope_Tag",
},
},
		},
	},
	"AWS::EC2::Instance": {
		Properties: map[string]*Reference{
				"AdditionalInfo": &Reference{
	type_: String,
},
				"Affinity": &Reference{
	type_: String,
},
				"AvailabilityZone": &Reference{
	type_: String,
},
				"BlockDeviceMappings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::Instance_BlockDeviceMapping",
},
},
				"CpuOptions": &Reference{
	ref: "AWS::EC2::Instance_CpuOptions",
},
				"CreditSpecification": &Reference{
	ref: "AWS::EC2::Instance_CreditSpecification",
},
				"DisableApiTermination": &Reference{
	type_: Boolean,
},
				"EbsOptimized": &Reference{
	type_: Boolean,
},
				"ElasticGpuSpecifications": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::Instance_ElasticGpuSpecification",
},
},
				"ElasticInferenceAccelerators": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::Instance_ElasticInferenceAccelerator",
},
},
				"EnclaveOptions": &Reference{
	ref: "AWS::EC2::Instance_EnclaveOptions",
},
				"HibernationOptions": &Reference{
	ref: "AWS::EC2::Instance_HibernationOptions",
},
				"HostId": &Reference{
	type_: String,
},
				"HostResourceGroupArn": &Reference{
	type_: String,
},
				"IamInstanceProfile": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"ImageId": &Reference{
	type_: String,
},
				"InstanceInitiatedShutdownBehavior": &Reference{
	type_: String,
},
				"InstanceType": &Reference{
	type_: String,
},
				"Ipv6AddressCount": &Reference{
	type_: Integer,
},
				"Ipv6Addresses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::Instance_InstanceIpv6Address",
},
},
				"KernelId": &Reference{
	type_: String,
},
				"KeyName": &Reference{
	type_: String,
},
				"LaunchTemplate": &Reference{
	ref: "AWS::EC2::Instance_LaunchTemplateSpecification",
},
				"LicenseSpecifications": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::Instance_LicenseSpecification",
},
},
				"Monitoring": &Reference{
	type_: Boolean,
},
				"NetworkInterfaces": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::Instance_NetworkInterface",
},
},
				"PlacementGroupName": &Reference{
	type_: String,
},
				"PrivateDnsName": &Reference{
	type_: String,
},
				"PrivateDnsNameOptions": &Reference{
	ref: "AWS::EC2::Instance_PrivateDnsNameOptions",
},
				"PrivateIp": &Reference{
	type_: String,
},
				"PrivateIpAddress": &Reference{
	type_: String,
},
				"PropagateTagsToVolumeOnCreation": &Reference{
	type_: Boolean,
},
				"PublicDnsName": &Reference{
	type_: String,
},
				"PublicIp": &Reference{
	type_: String,
},
				"RamdiskId": &Reference{
	type_: String,
},
				"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SourceDestCheck": &Reference{
	type_: Boolean,
},
				"SsmAssociations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::Instance_SsmAssociation",
},
},
				"SubnetId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::Instance_Tag",
},
},
				"Tenancy": &Reference{
	type_: String,
},
				"UserData": &Reference{
	type_: String,
},
				"Volumes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::Instance_Volume",
},
},
		},
	},
	"AWS::EC2::InternetGateway": {
		Properties: map[string]*Reference{
				"InternetGatewayId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::InternetGateway_Tag",
},
},
		},
	},
	"AWS::EC2::KeyPair": {
		Properties: map[string]*Reference{
				"KeyFingerprint": &Reference{
	type_: String,
},
				"KeyName": &Reference{
	type_: String,
},
				"KeyPairId": &Reference{
	type_: String,
},
				"KeyType": &Reference{
	type_: String,
},
				"PublicKeyMaterial": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::KeyPair_Tag",
},
},
		},
	},
	"AWS::EC2::LaunchTemplate": {
		Properties: map[string]*Reference{
				"DefaultVersionNumber": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"LatestVersionNumber": &Reference{
	type_: String,
},
				"LaunchTemplateData": &Reference{
	ref: "AWS::EC2::LaunchTemplate_LaunchTemplateData",
},
				"LaunchTemplateName": &Reference{
	type_: String,
},
				"TagSpecifications": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::LaunchTemplate_LaunchTemplateTagSpecification",
},
},
		},
	},
	"AWS::EC2::LocalGatewayRoute": {
		Properties: map[string]*Reference{
				"DestinationCidrBlock": &Reference{
	type_: String,
},
				"LocalGatewayRouteTableId": &Reference{
	type_: String,
},
				"LocalGatewayVirtualInterfaceGroupId": &Reference{
	type_: String,
},
				"State": &Reference{
	type_: String,
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::LocalGatewayRouteTableVPCAssociation": {
		Properties: map[string]*Reference{
				"LocalGatewayId": &Reference{
	type_: String,
},
				"LocalGatewayRouteTableId": &Reference{
	type_: String,
},
				"LocalGatewayRouteTableVpcAssociationId": &Reference{
	type_: String,
},
				"State": &Reference{
	type_: String,
},
				"Tags": &Reference{
	ref: "AWS::EC2::LocalGatewayRouteTableVPCAssociation_Tags",
},
				"VpcId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::NatGateway": {
		Properties: map[string]*Reference{
				"AllocationId": &Reference{
	type_: String,
},
				"ConnectivityType": &Reference{
	type_: String,
},
				"NatGatewayId": &Reference{
	type_: String,
},
				"SubnetId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NatGateway_Tag",
},
},
		},
	},
	"AWS::EC2::NetworkAcl": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkAcl_Tag",
},
},
				"VpcId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::NetworkAclEntry": {
		Properties: map[string]*Reference{
				"CidrBlock": &Reference{
	type_: String,
},
				"Egress": &Reference{
	type_: Boolean,
},
				"Icmp": &Reference{
	ref: "AWS::EC2::NetworkAclEntry_Icmp",
},
				"Id": &Reference{
	type_: String,
},
				"Ipv6CidrBlock": &Reference{
	type_: String,
},
				"NetworkAclId": &Reference{
	type_: String,
},
				"PortRange": &Reference{
	ref: "AWS::EC2::NetworkAclEntry_PortRange",
},
				"Protocol": &Reference{
	type_: Integer,
},
				"RuleAction": &Reference{
	type_: String,
},
				"RuleNumber": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::EC2::NetworkInsightsAccessScope": {
		Properties: map[string]*Reference{
				"CreatedDate": &Reference{
	type_: String,
},
				"ExcludePaths": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAccessScope_AccessScopePathRequest",
},
},
				"MatchPaths": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAccessScope_AccessScopePathRequest",
},
},
				"NetworkInsightsAccessScopeArn": &Reference{
	type_: String,
},
				"NetworkInsightsAccessScopeId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAccessScope_Tag",
},
},
				"UpdatedDate": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::NetworkInsightsAccessScopeAnalysis": {
		Properties: map[string]*Reference{
				"AnalyzedEniCount": &Reference{
	type_: Integer,
},
				"EndDate": &Reference{
	type_: String,
},
				"FindingsFound": &Reference{
	type_: String,
},
				"NetworkInsightsAccessScopeAnalysisArn": &Reference{
	type_: String,
},
				"NetworkInsightsAccessScopeAnalysisId": &Reference{
	type_: String,
},
				"NetworkInsightsAccessScopeId": &Reference{
	type_: String,
},
				"StartDate": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
				"StatusMessage": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAccessScopeAnalysis_Tag",
},
},
		},
	},
	"AWS::EC2::NetworkInsightsAnalysis": {
		Properties: map[string]*Reference{
				"AlternatePathHints": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AlternatePathHint",
},
},
				"Explanations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_Explanation",
},
},
				"FilterInArns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_ResourceArn",
},
},
				"ForwardPathComponents": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_PathComponent",
},
},
				"NetworkInsightsAnalysisArn": &Reference{
	type_: String,
},
				"NetworkInsightsAnalysisId": &Reference{
	type_: String,
},
				"NetworkInsightsPathId": &Reference{
	type_: String,
},
				"NetworkPathFound": &Reference{
	type_: Boolean,
},
				"ReturnPathComponents": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_PathComponent",
},
},
				"StartDate": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
				"StatusMessage": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_Tag",
},
},
		},
	},
	"AWS::EC2::NetworkInsightsPath": {
		Properties: map[string]*Reference{
				"CreatedDate": &Reference{
	type_: String,
},
				"Destination": &Reference{
	type_: String,
},
				"DestinationIp": &Reference{
	ref: "AWS::EC2::NetworkInsightsPath_IpAddress",
},
				"DestinationPort": &Reference{
	ref: "AWS::EC2::NetworkInsightsPath_Port",
},
				"NetworkInsightsPathArn": &Reference{
	type_: String,
},
				"NetworkInsightsPathId": &Reference{
	type_: String,
},
				"Protocol": &Reference{
	ref: "AWS::EC2::NetworkInsightsPath_Protocol",
},
				"Source": &Reference{
	type_: String,
},
				"SourceIp": &Reference{
	ref: "AWS::EC2::NetworkInsightsPath_IpAddress",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsPath_Tag",
},
},
		},
	},
	"AWS::EC2::NetworkInterface": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"GroupSet": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Id": &Reference{
	type_: String,
},
				"InterfaceType": &Reference{
	type_: String,
},
				"Ipv6AddressCount": &Reference{
	type_: Integer,
},
				"Ipv6Addresses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInterface_InstanceIpv6Address",
},
},
				"PrimaryPrivateIpAddress": &Reference{
	type_: String,
},
				"PrivateIpAddress": &Reference{
	type_: String,
},
				"PrivateIpAddresses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInterface_PrivateIpAddressSpecification",
},
},
				"SecondaryPrivateIpAddressCount": &Reference{
	type_: Integer,
},
				"SecondaryPrivateIpAddresses": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SourceDestCheck": &Reference{
	type_: Boolean,
},
				"SubnetId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInterface_Tag",
},
},
		},
	},
	"AWS::EC2::NetworkInterfaceAttachment": {
		Properties: map[string]*Reference{
				"DeleteOnTermination": &Reference{
	type_: Boolean,
},
				"DeviceIndex": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InstanceId": &Reference{
	type_: String,
},
				"NetworkInterfaceId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::NetworkInterfacePermission": {
		Properties: map[string]*Reference{
				"AwsAccountId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"NetworkInterfaceId": &Reference{
	type_: String,
},
				"Permission": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::PlacementGroup": {
		Properties: map[string]*Reference{
				"GroupName": &Reference{
	type_: String,
},
				"Strategy": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::PrefixList": {
		Properties: map[string]*Reference{
				"AddressFamily": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"Entries": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::PrefixList_Entry",
},
},
				"MaxEntries": &Reference{
	type_: Integer,
},
				"OwnerId": &Reference{
	type_: String,
},
				"PrefixListId": &Reference{
	type_: String,
},
				"PrefixListName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::PrefixList_Tag",
},
},
				"Version": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::EC2::Route": {
		Properties: map[string]*Reference{
				"CarrierGatewayId": &Reference{
	type_: String,
},
				"DestinationCidrBlock": &Reference{
	type_: String,
},
				"DestinationIpv6CidrBlock": &Reference{
	type_: String,
},
				"EgressOnlyInternetGatewayId": &Reference{
	type_: String,
},
				"GatewayId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InstanceId": &Reference{
	type_: String,
},
				"LocalGatewayId": &Reference{
	type_: String,
},
				"NatGatewayId": &Reference{
	type_: String,
},
				"NetworkInterfaceId": &Reference{
	type_: String,
},
				"RouteTableId": &Reference{
	type_: String,
},
				"TransitGatewayId": &Reference{
	type_: String,
},
				"VpcEndpointId": &Reference{
	type_: String,
},
				"VpcPeeringConnectionId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::RouteTable": {
		Properties: map[string]*Reference{
				"RouteTableId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::RouteTable_Tag",
},
},
				"VpcId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::SecurityGroup": {
		Properties: map[string]*Reference{
				"GroupDescription": &Reference{
	type_: String,
},
				"GroupId": &Reference{
	type_: String,
},
				"GroupName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"SecurityGroupEgress": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::SecurityGroup_Egress",
},
},
				"SecurityGroupIngress": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::SecurityGroup_Ingress",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::SecurityGroup_Tag",
},
},
				"VpcId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::SecurityGroupEgress": {
		Properties: map[string]*Reference{
				"CidrIp": &Reference{
	type_: String,
},
				"CidrIpv6": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"DestinationPrefixListId": &Reference{
	type_: String,
},
				"DestinationSecurityGroupId": &Reference{
	type_: String,
},
				"FromPort": &Reference{
	type_: Integer,
},
				"GroupId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"IpProtocol": &Reference{
	type_: String,
},
				"ToPort": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::EC2::SecurityGroupIngress": {
		Properties: map[string]*Reference{
				"CidrIp": &Reference{
	type_: String,
},
				"CidrIpv6": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"FromPort": &Reference{
	type_: Integer,
},
				"GroupId": &Reference{
	type_: String,
},
				"GroupName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"IpProtocol": &Reference{
	type_: String,
},
				"SourcePrefixListId": &Reference{
	type_: String,
},
				"SourceSecurityGroupId": &Reference{
	type_: String,
},
				"SourceSecurityGroupName": &Reference{
	type_: String,
},
				"SourceSecurityGroupOwnerId": &Reference{
	type_: String,
},
				"ToPort": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::EC2::SpotFleet": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"SpotFleetRequestConfigData": &Reference{
	ref: "AWS::EC2::SpotFleet_SpotFleetRequestConfigData",
},
		},
	},
	"AWS::EC2::Subnet": {
		Properties: map[string]*Reference{
				"AssignIpv6AddressOnCreation": &Reference{
	type_: Boolean,
},
				"AvailabilityZone": &Reference{
	type_: String,
},
				"AvailabilityZoneId": &Reference{
	type_: String,
},
				"CidrBlock": &Reference{
	type_: String,
},
				"EnableDns64": &Reference{
	type_: Boolean,
},
				"Ipv6CidrBlock": &Reference{
	type_: String,
},
				"Ipv6CidrBlocks": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Ipv6Native": &Reference{
	type_: Boolean,
},
				"MapPublicIpOnLaunch": &Reference{
	type_: Boolean,
},
				"NetworkAclAssociationId": &Reference{
	type_: String,
},
				"OutpostArn": &Reference{
	type_: String,
},
				"PrivateDnsNameOptionsOnLaunch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EnableResourceNameDnsAAAARecord": &Reference{
	type_: Boolean,
},
			"EnableResourceNameDnsARecord": &Reference{
	type_: Boolean,
},
			"HostnameType": &Reference{
	type_: String,
},
	},
},
				"SubnetId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::Subnet_Tag",
},
},
				"VpcId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::SubnetCidrBlock": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Ipv6CidrBlock": &Reference{
	type_: String,
},
				"SubnetId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::SubnetNetworkAclAssociation": {
		Properties: map[string]*Reference{
				"AssociationId": &Reference{
	type_: String,
},
				"NetworkAclId": &Reference{
	type_: String,
},
				"SubnetId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::SubnetRouteTableAssociation": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"RouteTableId": &Reference{
	type_: String,
},
				"SubnetId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::TrafficMirrorFilter": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"NetworkServices": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::TrafficMirrorFilter_Tag",
},
},
		},
	},
	"AWS::EC2::TrafficMirrorFilterRule": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"DestinationCidrBlock": &Reference{
	type_: String,
},
				"DestinationPortRange": &Reference{
	ref: "AWS::EC2::TrafficMirrorFilterRule_TrafficMirrorPortRange",
},
				"Id": &Reference{
	type_: String,
},
				"Protocol": &Reference{
	type_: Integer,
},
				"RuleAction": &Reference{
	type_: String,
},
				"RuleNumber": &Reference{
	type_: Integer,
},
				"SourceCidrBlock": &Reference{
	type_: String,
},
				"SourcePortRange": &Reference{
	ref: "AWS::EC2::TrafficMirrorFilterRule_TrafficMirrorPortRange",
},
				"TrafficDirection": &Reference{
	type_: String,
},
				"TrafficMirrorFilterId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::TrafficMirrorSession": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"NetworkInterfaceId": &Reference{
	type_: String,
},
				"PacketLength": &Reference{
	type_: Integer,
},
				"SessionNumber": &Reference{
	type_: Integer,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::TrafficMirrorSession_Tag",
},
},
				"TrafficMirrorFilterId": &Reference{
	type_: String,
},
				"TrafficMirrorTargetId": &Reference{
	type_: String,
},
				"VirtualNetworkId": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::EC2::TrafficMirrorTarget": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"GatewayLoadBalancerEndpointId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"NetworkInterfaceId": &Reference{
	type_: String,
},
				"NetworkLoadBalancerArn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::TrafficMirrorTarget_Tag",
},
},
		},
	},
	"AWS::EC2::TransitGateway": {
		Properties: map[string]*Reference{
				"AmazonSideAsn": &Reference{
	type_: Integer,
},
				"AssociationDefaultRouteTableId": &Reference{
	type_: String,
},
				"AutoAcceptSharedAttachments": &Reference{
	type_: String,
},
				"DefaultRouteTableAssociation": &Reference{
	type_: String,
},
				"DefaultRouteTablePropagation": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"DnsSupport": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"MulticastSupport": &Reference{
	type_: String,
},
				"PropagationDefaultRouteTableId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::TransitGateway_Tag",
},
},
				"TransitGatewayCidrBlocks": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"VpnEcmpSupport": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::TransitGatewayAttachment": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Options": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApplianceModeSupport": &Reference{
	type_: String,
},
			"DnsSupport": &Reference{
	type_: String,
},
			"Ipv6Support": &Reference{
	type_: String,
},
	},
},
				"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::TransitGatewayAttachment_Tag",
},
},
				"TransitGatewayId": &Reference{
	type_: String,
},
				"VpcId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::TransitGatewayConnect": {
		Properties: map[string]*Reference{
				"CreationTime": &Reference{
	type_: String,
},
				"Options": &Reference{
	ref: "AWS::EC2::TransitGatewayConnect_TransitGatewayConnectOptions",
},
				"State": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::TransitGatewayConnect_Tag",
},
},
				"TransitGatewayAttachmentId": &Reference{
	type_: String,
},
				"TransitGatewayId": &Reference{
	type_: String,
},
				"TransportTransitGatewayAttachmentId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::TransitGatewayMulticastDomain": {
		Properties: map[string]*Reference{
				"CreationTime": &Reference{
	type_: String,
},
				"Options": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AutoAcceptSharedAssociations": &Reference{
	type_: String,
},
			"Igmpv2Support": &Reference{
	type_: String,
},
			"StaticSourcesSupport": &Reference{
	type_: String,
},
	},
},
				"State": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::TransitGatewayMulticastDomain_Tag",
},
},
				"TransitGatewayId": &Reference{
	type_: String,
},
				"TransitGatewayMulticastDomainArn": &Reference{
	type_: String,
},
				"TransitGatewayMulticastDomainId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::TransitGatewayMulticastDomainAssociation": {
		Properties: map[string]*Reference{
				"ResourceId": &Reference{
	type_: String,
},
				"ResourceType": &Reference{
	type_: String,
},
				"State": &Reference{
	type_: String,
},
				"SubnetId": &Reference{
	type_: String,
},
				"TransitGatewayAttachmentId": &Reference{
	type_: String,
},
				"TransitGatewayMulticastDomainId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::TransitGatewayMulticastGroupMember": {
		Properties: map[string]*Reference{
				"GroupIpAddress": &Reference{
	type_: String,
},
				"GroupMember": &Reference{
	type_: Boolean,
},
				"GroupSource": &Reference{
	type_: Boolean,
},
				"MemberType": &Reference{
	type_: String,
},
				"NetworkInterfaceId": &Reference{
	type_: String,
},
				"ResourceId": &Reference{
	type_: String,
},
				"ResourceType": &Reference{
	type_: String,
},
				"SourceType": &Reference{
	type_: String,
},
				"SubnetId": &Reference{
	type_: String,
},
				"TransitGatewayAttachmentId": &Reference{
	type_: String,
},
				"TransitGatewayMulticastDomainId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::TransitGatewayMulticastGroupSource": {
		Properties: map[string]*Reference{
				"GroupIpAddress": &Reference{
	type_: String,
},
				"GroupMember": &Reference{
	type_: Boolean,
},
				"GroupSource": &Reference{
	type_: Boolean,
},
				"MemberType": &Reference{
	type_: String,
},
				"NetworkInterfaceId": &Reference{
	type_: String,
},
				"ResourceId": &Reference{
	type_: String,
},
				"ResourceType": &Reference{
	type_: String,
},
				"SourceType": &Reference{
	type_: String,
},
				"SubnetId": &Reference{
	type_: String,
},
				"TransitGatewayAttachmentId": &Reference{
	type_: String,
},
				"TransitGatewayMulticastDomainId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::TransitGatewayPeeringAttachment": {
		Properties: map[string]*Reference{
				"CreationTime": &Reference{
	type_: String,
},
				"PeerAccountId": &Reference{
	type_: String,
},
				"PeerRegion": &Reference{
	type_: String,
},
				"PeerTransitGatewayId": &Reference{
	type_: String,
},
				"State": &Reference{
	type_: String,
},
				"Status": &Reference{
	ref: "AWS::EC2::TransitGatewayPeeringAttachment_PeeringAttachmentStatus",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::TransitGatewayPeeringAttachment_Tag",
},
},
				"TransitGatewayAttachmentId": &Reference{
	type_: String,
},
				"TransitGatewayId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::TransitGatewayRoute": {
		Properties: map[string]*Reference{
				"Blackhole": &Reference{
	type_: Boolean,
},
				"DestinationCidrBlock": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"TransitGatewayAttachmentId": &Reference{
	type_: String,
},
				"TransitGatewayRouteTableId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::TransitGatewayRouteTable": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::TransitGatewayRouteTable_Tag",
},
},
				"TransitGatewayId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::TransitGatewayRouteTableAssociation": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"TransitGatewayAttachmentId": &Reference{
	type_: String,
},
				"TransitGatewayRouteTableId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::TransitGatewayRouteTablePropagation": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"TransitGatewayAttachmentId": &Reference{
	type_: String,
},
				"TransitGatewayRouteTableId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::TransitGatewayVpcAttachment": {
		Properties: map[string]*Reference{
				"AddSubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Id": &Reference{
	type_: String,
},
				"Options": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApplianceModeSupport": &Reference{
	type_: String,
},
			"DnsSupport": &Reference{
	type_: String,
},
			"Ipv6Support": &Reference{
	type_: String,
},
	},
},
				"RemoveSubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::TransitGatewayVpcAttachment_Tag",
},
},
				"TransitGatewayId": &Reference{
	type_: String,
},
				"VpcId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::VPC": {
		Properties: map[string]*Reference{
				"CidrBlock": &Reference{
	type_: String,
},
				"CidrBlockAssociations": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"DefaultNetworkAcl": &Reference{
	type_: String,
},
				"DefaultSecurityGroup": &Reference{
	type_: String,
},
				"EnableDnsHostnames": &Reference{
	type_: Boolean,
},
				"EnableDnsSupport": &Reference{
	type_: Boolean,
},
				"InstanceTenancy": &Reference{
	type_: String,
},
				"Ipv4IpamPoolId": &Reference{
	type_: String,
},
				"Ipv4NetmaskLength": &Reference{
	type_: Integer,
},
				"Ipv6CidrBlocks": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::VPC_Tag",
},
},
				"VpcId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::VPCCidrBlock": {
		Properties: map[string]*Reference{
				"AmazonProvidedIpv6CidrBlock": &Reference{
	type_: Boolean,
},
				"CidrBlock": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Ipv4IpamPoolId": &Reference{
	type_: String,
},
				"Ipv4NetmaskLength": &Reference{
	type_: Integer,
},
				"Ipv6CidrBlock": &Reference{
	type_: String,
},
				"Ipv6IpamPoolId": &Reference{
	type_: String,
},
				"Ipv6NetmaskLength": &Reference{
	type_: Integer,
},
				"Ipv6Pool": &Reference{
	type_: String,
},
				"VpcId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::VPCDHCPOptionsAssociation": {
		Properties: map[string]*Reference{
				"DhcpOptionsId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"VpcId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::VPCEndpoint": {
		Properties: map[string]*Reference{
				"CreationTimestamp": &Reference{
	type_: String,
},
				"DnsEntries": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Id": &Reference{
	type_: String,
},
				"NetworkInterfaceIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"PolicyDocument": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"PrivateDnsEnabled": &Reference{
	type_: Boolean,
},
				"RouteTableIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"ServiceName": &Reference{
	type_: String,
},
				"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"VpcEndpointType": &Reference{
	type_: String,
},
				"VpcId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::VPCEndpointConnectionNotification": {
		Properties: map[string]*Reference{
				"ConnectionEvents": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"ConnectionNotificationArn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"ServiceId": &Reference{
	type_: String,
},
				"VPCEndpointId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::VPCEndpointService": {
		Properties: map[string]*Reference{
				"AcceptanceRequired": &Reference{
	type_: Boolean,
},
				"GatewayLoadBalancerArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Id": &Reference{
	type_: String,
},
				"NetworkLoadBalancerArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"PayerResponsibility": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::VPCEndpointServicePermissions": {
		Properties: map[string]*Reference{
				"AllowedPrincipals": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Id": &Reference{
	type_: String,
},
				"ServiceId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::VPCGatewayAttachment": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"InternetGatewayId": &Reference{
	type_: String,
},
				"VpcId": &Reference{
	type_: String,
},
				"VpnGatewayId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::VPCPeeringConnection": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"PeerOwnerId": &Reference{
	type_: String,
},
				"PeerRegion": &Reference{
	type_: String,
},
				"PeerRoleArn": &Reference{
	type_: String,
},
				"PeerVpcId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::VPCPeeringConnection_Tag",
},
},
				"VpcId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::VPNConnection": {
		Properties: map[string]*Reference{
				"CustomerGatewayId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"StaticRoutesOnly": &Reference{
	type_: Boolean,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::VPNConnection_Tag",
},
},
				"TransitGatewayId": &Reference{
	type_: String,
},
				"Type": &Reference{
	type_: String,
},
				"VpnGatewayId": &Reference{
	type_: String,
},
				"VpnTunnelOptionsSpecifications": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::VPNConnection_VpnTunnelOptionsSpecification",
},
},
		},
	},
	"AWS::EC2::VPNConnectionRoute": {
		Properties: map[string]*Reference{
				"DestinationCidrBlock": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"VpnConnectionId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::VPNGateway": {
		Properties: map[string]*Reference{
				"AmazonSideAsn": &Reference{
	type_: Integer,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::VPNGateway_Tag",
},
},
				"Type": &Reference{
	type_: String,
},
				"VPNGatewayId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::VPNGatewayRoutePropagation": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"RouteTableIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"VpnGatewayId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::Volume": {
		Properties: map[string]*Reference{
				"AutoEnableIO": &Reference{
	type_: Boolean,
},
				"AvailabilityZone": &Reference{
	type_: String,
},
				"Encrypted": &Reference{
	type_: Boolean,
},
				"Id": &Reference{
	type_: String,
},
				"Iops": &Reference{
	type_: Integer,
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"MultiAttachEnabled": &Reference{
	type_: Boolean,
},
				"OutpostArn": &Reference{
	type_: String,
},
				"Size": &Reference{
	type_: Integer,
},
				"SnapshotId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::Volume_Tag",
},
},
				"Throughput": &Reference{
	type_: Integer,
},
				"VolumeType": &Reference{
	type_: String,
},
		},
	},
	"AWS::EC2::VolumeAttachment": {
		Properties: map[string]*Reference{
				"Device": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InstanceId": &Reference{
	type_: String,
},
				"VolumeId": &Reference{
	type_: String,
},
		},
	},
	"AWS::ECR::PullThroughCacheRule": {
		Properties: map[string]*Reference{
				"EcrRepositoryPrefix": &Reference{
	type_: String,
},
				"UpstreamRegistryUrl": &Reference{
	type_: String,
},
		},
	},
	"AWS::ECR::RegistryPolicy": {
		Properties: map[string]*Reference{
				"PolicyText": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"RegistryId": &Reference{
	ref: "AWS::ECR::RegistryPolicy_RegistryId",
},
		},
	},
	"AWS::ECR::ReplicationConfiguration": {
		Properties: map[string]*Reference{
				"RegistryId": &Reference{
	type_: String,
},
				"ReplicationConfiguration": &Reference{
	ref: "AWS::ECR::ReplicationConfiguration_ReplicationConfiguration",
},
		},
	},
	"AWS::ECR::Repository": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"EncryptionConfiguration": &Reference{
	ref: "AWS::ECR::Repository_EncryptionConfiguration",
},
				"ImageScanningConfiguration": &Reference{
	ref: "AWS::ECR::Repository_ImageScanningConfiguration",
},
				"ImageTagMutability": &Reference{
	type_: String,
},
				"LifecyclePolicy": &Reference{
	ref: "AWS::ECR::Repository_LifecyclePolicy",
},
				"RepositoryName": &Reference{
	type_: String,
},
				"RepositoryPolicyText": &Reference{
	type_: Unknown,
},
				"RepositoryUri": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECR::Repository_Tag",
},
},
		},
	},
	"AWS::ECS::CapacityProvider": {
		Properties: map[string]*Reference{
				"AutoScalingGroupProvider": &Reference{
	ref: "AWS::ECS::CapacityProvider_AutoScalingGroupProvider",
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::CapacityProvider_Tag",
},
},
		},
	},
	"AWS::ECS::Cluster": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CapacityProviders": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"ClusterName": &Reference{
	type_: String,
},
				"ClusterSettings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::Cluster_ClusterSettings",
},
},
				"Configuration": &Reference{
	ref: "AWS::ECS::Cluster_ClusterConfiguration",
},
				"DefaultCapacityProviderStrategy": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::Cluster_CapacityProviderStrategyItem",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::Cluster_Tag",
},
},
		},
	},
	"AWS::ECS::ClusterCapacityProviderAssociations": {
		Properties: map[string]*Reference{
				"CapacityProviders": &Reference{
	ref: "AWS::ECS::ClusterCapacityProviderAssociations_CapacityProviders",
},
				"Cluster": &Reference{
	ref: "AWS::ECS::ClusterCapacityProviderAssociations_Cluster",
},
				"DefaultCapacityProviderStrategy": &Reference{
	ref: "AWS::ECS::ClusterCapacityProviderAssociations_DefaultCapacityProviderStrategy",
},
		},
	},
	"AWS::ECS::PrimaryTaskSet": {
		Properties: map[string]*Reference{
				"Cluster": &Reference{
	type_: String,
},
				"Service": &Reference{
	type_: String,
},
				"TaskSetId": &Reference{
	type_: String,
},
		},
	},
	"AWS::ECS::Service": {
		Properties: map[string]*Reference{
				"CapacityProviderStrategy": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::Service_CapacityProviderStrategyItem",
},
},
				"Cluster": &Reference{
	type_: String,
},
				"DeploymentConfiguration": &Reference{
	ref: "AWS::ECS::Service_DeploymentConfiguration",
},
				"DeploymentController": &Reference{
	ref: "AWS::ECS::Service_DeploymentController",
},
				"DesiredCount": &Reference{
	type_: Integer,
},
				"EnableECSManagedTags": &Reference{
	type_: Boolean,
},
				"EnableExecuteCommand": &Reference{
	type_: Boolean,
},
				"HealthCheckGracePeriodSeconds": &Reference{
	type_: Integer,
},
				"LaunchType": &Reference{
	type_: String,
},
				"LoadBalancers": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::Service_LoadBalancer",
},
},
				"Name": &Reference{
	type_: String,
},
				"NetworkConfiguration": &Reference{
	ref: "AWS::ECS::Service_NetworkConfiguration",
},
				"PlacementConstraints": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::Service_PlacementConstraint",
},
},
				"PlacementStrategies": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::Service_PlacementStrategy",
},
},
				"PlatformVersion": &Reference{
	type_: String,
},
				"PropagateTags": &Reference{
	type_: String,
},
				"Role": &Reference{
	type_: String,
},
				"SchedulingStrategy": &Reference{
	type_: String,
},
				"ServiceArn": &Reference{
	type_: String,
},
				"ServiceName": &Reference{
	type_: String,
},
				"ServiceRegistries": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::Service_ServiceRegistry",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::Service_Tag",
},
},
				"TaskDefinition": &Reference{
	type_: String,
},
		},
	},
	"AWS::ECS::TaskDefinition": {
		Properties: map[string]*Reference{
				"ContainerDefinitions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskDefinition_ContainerDefinition",
},
},
				"Cpu": &Reference{
	type_: String,
},
				"EphemeralStorage": &Reference{
	ref: "AWS::ECS::TaskDefinition_EphemeralStorage",
},
				"ExecutionRoleArn": &Reference{
	type_: String,
},
				"Family": &Reference{
	type_: String,
},
				"InferenceAccelerators": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskDefinition_InferenceAccelerator",
},
},
				"IpcMode": &Reference{
	type_: String,
},
				"Memory": &Reference{
	type_: String,
},
				"NetworkMode": &Reference{
	type_: String,
},
				"PidMode": &Reference{
	type_: String,
},
				"PlacementConstraints": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskDefinition_TaskDefinitionPlacementConstraint",
},
},
				"ProxyConfiguration": &Reference{
	ref: "AWS::ECS::TaskDefinition_ProxyConfiguration",
},
				"RequiresCompatibilities": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"RuntimePlatform": &Reference{
	ref: "AWS::ECS::TaskDefinition_RuntimePlatform",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskDefinition_Tag",
},
},
				"TaskDefinitionArn": &Reference{
	type_: String,
},
				"TaskRoleArn": &Reference{
	type_: String,
},
				"Volumes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskDefinition_Volume",
},
},
		},
	},
	"AWS::ECS::TaskSet": {
		Properties: map[string]*Reference{
				"Cluster": &Reference{
	type_: String,
},
				"ExternalId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"LaunchType": &Reference{
	type_: String,
},
				"LoadBalancers": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskSet_LoadBalancer",
},
},
				"NetworkConfiguration": &Reference{
	ref: "AWS::ECS::TaskSet_NetworkConfiguration",
},
				"PlatformVersion": &Reference{
	type_: String,
},
				"Scale": &Reference{
	ref: "AWS::ECS::TaskSet_Scale",
},
				"Service": &Reference{
	type_: String,
},
				"ServiceRegistries": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskSet_ServiceRegistry",
},
},
				"TaskDefinition": &Reference{
	type_: String,
},
		},
	},
	"AWS::EFS::AccessPoint": {
		Properties: map[string]*Reference{
				"AccessPointId": &Reference{
	type_: String,
},
				"AccessPointTags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EFS::AccessPoint_AccessPointTag",
},
},
				"Arn": &Reference{
	type_: String,
},
				"ClientToken": &Reference{
	type_: String,
},
				"FileSystemId": &Reference{
	type_: String,
},
				"PosixUser": &Reference{
	ref: "AWS::EFS::AccessPoint_PosixUser",
},
				"RootDirectory": &Reference{
	ref: "AWS::EFS::AccessPoint_RootDirectory",
},
		},
	},
	"AWS::EFS::FileSystem": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AvailabilityZoneName": &Reference{
	type_: String,
},
				"BackupPolicy": &Reference{
	ref: "AWS::EFS::FileSystem_BackupPolicy",
},
				"BypassPolicyLockoutSafetyCheck": &Reference{
	type_: Boolean,
},
				"Encrypted": &Reference{
	type_: Boolean,
},
				"FileSystemId": &Reference{
	type_: String,
},
				"FileSystemPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"FileSystemTags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EFS::FileSystem_ElasticFileSystemTag",
},
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"LifecyclePolicies": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EFS::FileSystem_LifecyclePolicy",
},
},
				"PerformanceMode": &Reference{
	type_: String,
},
				"ProvisionedThroughputInMibps": &Reference{
	type_: Number,
},
				"ThroughputMode": &Reference{
	type_: String,
},
		},
	},
	"AWS::EFS::MountTarget": {
		Properties: map[string]*Reference{
				"FileSystemId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"IpAddress": &Reference{
	type_: String,
},
				"SecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SubnetId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EKS::Addon": {
		Properties: map[string]*Reference{
				"AddonName": &Reference{
	type_: String,
},
				"AddonVersion": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"ClusterName": &Reference{
	type_: String,
},
				"ResolveConflicts": &Reference{
	type_: String,
},
				"ServiceAccountRoleArn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EKS::Addon_Tag",
},
},
		},
	},
	"AWS::EKS::Cluster": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CertificateAuthorityData": &Reference{
	type_: String,
},
				"ClusterSecurityGroupId": &Reference{
	type_: String,
},
				"EncryptionConfig": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EKS::Cluster_EncryptionConfig",
},
},
				"EncryptionConfigKeyArn": &Reference{
	type_: String,
},
				"Endpoint": &Reference{
	type_: String,
},
				"KubernetesNetworkConfig": &Reference{
	ref: "AWS::EKS::Cluster_KubernetesNetworkConfig",
},
				"Logging": &Reference{
	ref: "AWS::EKS::Cluster_Logging",
},
				"Name": &Reference{
	type_: String,
},
				"OpenIdConnectIssuerUrl": &Reference{
	type_: String,
},
				"ResourcesVpcConfig": &Reference{
	ref: "AWS::EKS::Cluster_ResourcesVpcConfig",
},
				"RoleArn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EKS::Cluster_Tag",
},
},
				"Version": &Reference{
	type_: String,
},
		},
	},
	"AWS::EKS::FargateProfile": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"ClusterName": &Reference{
	type_: String,
},
				"FargateProfileName": &Reference{
	type_: String,
},
				"PodExecutionRoleArn": &Reference{
	type_: String,
},
				"Selectors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EKS::FargateProfile_Selector",
},
},
				"Subnets": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EKS::FargateProfile_Tag",
},
},
		},
	},
	"AWS::EKS::IdentityProviderConfig": {
		Properties: map[string]*Reference{
				"ClusterName": &Reference{
	type_: String,
},
				"IdentityProviderConfigArn": &Reference{
	type_: String,
},
				"IdentityProviderConfigName": &Reference{
	type_: String,
},
				"Oidc": &Reference{
	ref: "AWS::EKS::IdentityProviderConfig_OidcIdentityProviderConfig",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EKS::IdentityProviderConfig_Tag",
},
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::EKS::Nodegroup": {
		Properties: map[string]*Reference{
				"AmiType": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"CapacityType": &Reference{
	type_: String,
},
				"ClusterName": &Reference{
	type_: String,
},
				"DiskSize": &Reference{
	type_: Integer,
},
				"ForceUpdateEnabled": &Reference{
	type_: Boolean,
},
				"Id": &Reference{
	type_: String,
},
				"InstanceTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Labels": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"LaunchTemplate": &Reference{
	ref: "AWS::EKS::Nodegroup_LaunchTemplateSpecification",
},
				"NodeRole": &Reference{
	type_: String,
},
				"NodegroupName": &Reference{
	type_: String,
},
				"ReleaseVersion": &Reference{
	type_: String,
},
				"RemoteAccess": &Reference{
	ref: "AWS::EKS::Nodegroup_RemoteAccess",
},
				"ScalingConfig": &Reference{
	ref: "AWS::EKS::Nodegroup_ScalingConfig",
},
				"Subnets": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Taints": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EKS::Nodegroup_Taint",
},
},
				"UpdateConfig": &Reference{
	ref: "AWS::EKS::Nodegroup_UpdateConfig",
},
				"Version": &Reference{
	type_: String,
},
		},
	},
	"AWS::EMR::Cluster": {
		Properties: map[string]*Reference{
				"AdditionalInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Applications": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::Cluster_Application",
},
},
				"AutoScalingRole": &Reference{
	type_: String,
},
				"AutoTerminationPolicy": &Reference{
	ref: "AWS::EMR::Cluster_AutoTerminationPolicy",
},
				"BootstrapActions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::Cluster_BootstrapActionConfig",
},
},
				"Configurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::Cluster_Configuration",
},
},
				"CustomAmiId": &Reference{
	type_: String,
},
				"EbsRootVolumeSize": &Reference{
	type_: Integer,
},
				"Id": &Reference{
	type_: String,
},
				"Instances": &Reference{
	ref: "AWS::EMR::Cluster_JobFlowInstancesConfig",
},
				"JobFlowRole": &Reference{
	type_: String,
},
				"KerberosAttributes": &Reference{
	ref: "AWS::EMR::Cluster_KerberosAttributes",
},
				"LogEncryptionKmsKeyId": &Reference{
	type_: String,
},
				"LogUri": &Reference{
	type_: String,
},
				"ManagedScalingPolicy": &Reference{
	ref: "AWS::EMR::Cluster_ManagedScalingPolicy",
},
				"MasterPublicDNS": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"ReleaseLabel": &Reference{
	type_: String,
},
				"ScaleDownBehavior": &Reference{
	type_: String,
},
				"SecurityConfiguration": &Reference{
	type_: String,
},
				"ServiceRole": &Reference{
	type_: String,
},
				"StepConcurrencyLevel": &Reference{
	type_: Integer,
},
				"Steps": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::Cluster_StepConfig",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::Cluster_Tag",
},
},
				"VisibleToAllUsers": &Reference{
	type_: Boolean,
},
		},
	},
	"AWS::EMR::InstanceFleetConfig": {
		Properties: map[string]*Reference{
				"ClusterId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InstanceFleetType": &Reference{
	type_: String,
},
				"InstanceTypeConfigs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::InstanceFleetConfig_InstanceTypeConfig",
},
},
				"LaunchSpecifications": &Reference{
	ref: "AWS::EMR::InstanceFleetConfig_InstanceFleetProvisioningSpecifications",
},
				"Name": &Reference{
	type_: String,
},
				"TargetOnDemandCapacity": &Reference{
	type_: Integer,
},
				"TargetSpotCapacity": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::EMR::InstanceGroupConfig": {
		Properties: map[string]*Reference{
				"AutoScalingPolicy": &Reference{
	ref: "AWS::EMR::InstanceGroupConfig_AutoScalingPolicy",
},
				"BidPrice": &Reference{
	type_: String,
},
				"Configurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::InstanceGroupConfig_Configuration",
},
},
				"CustomAmiId": &Reference{
	type_: String,
},
				"EbsConfiguration": &Reference{
	ref: "AWS::EMR::InstanceGroupConfig_EbsConfiguration",
},
				"Id": &Reference{
	type_: String,
},
				"InstanceCount": &Reference{
	type_: Integer,
},
				"InstanceRole": &Reference{
	type_: String,
},
				"InstanceType": &Reference{
	type_: String,
},
				"JobFlowId": &Reference{
	type_: String,
},
				"Market": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
		},
	},
	"AWS::EMR::SecurityConfiguration": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"SecurityConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::EMR::Step": {
		Properties: map[string]*Reference{
				"ActionOnFailure": &Reference{
	type_: String,
},
				"HadoopJarStep": &Reference{
	ref: "AWS::EMR::Step_HadoopJarStepConfig",
},
				"Id": &Reference{
	type_: String,
},
				"JobFlowId": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
		},
	},
	"AWS::EMR::Studio": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::EMR::Studio_Arn",
},
				"AuthMode": &Reference{
	type_: String,
},
				"DefaultS3Location": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"EngineSecurityGroupId": &Reference{
	type_: String,
},
				"IdpAuthUrl": &Reference{
	type_: String,
},
				"IdpRelayStateParameterName": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"ServiceRole": &Reference{
	ref: "AWS::EMR::Studio_Arn",
},
				"StudioId": &Reference{
	type_: String,
},
				"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::Studio_SubnetId",
},
},
				"Tags": &Reference{
	ref: "AWS::EMR::Studio_Tags",
},
				"Url": &Reference{
	type_: String,
},
				"UserRole": &Reference{
	ref: "AWS::EMR::Studio_Arn",
},
				"VpcId": &Reference{
	type_: String,
},
				"WorkspaceSecurityGroupId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EMR::StudioSessionMapping": {
		Properties: map[string]*Reference{
				"IdentityName": &Reference{
	type_: String,
},
				"IdentityType": &Reference{
	type_: String,
},
				"SessionPolicyArn": &Reference{
	ref: "AWS::EMR::StudioSessionMapping_IamPolicyArn",
},
				"StudioId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EMRContainers::VirtualCluster": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"ContainerProvider": &Reference{
	ref: "AWS::EMRContainers::VirtualCluster_ContainerProvider",
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMRContainers::VirtualCluster_Tag",
},
},
		},
	},
	"AWS::ElastiCache::CacheCluster": {
		Properties: map[string]*Reference{
				"AZMode": &Reference{
	type_: String,
},
				"AutoMinorVersionUpgrade": &Reference{
	type_: Boolean,
},
				"CacheNodeType": &Reference{
	type_: String,
},
				"CacheParameterGroupName": &Reference{
	type_: String,
},
				"CacheSecurityGroupNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"CacheSubnetGroupName": &Reference{
	type_: String,
},
				"ClusterName": &Reference{
	type_: String,
},
				"ConfigurationEndpointAddress": &Reference{
	type_: String,
},
				"ConfigurationEndpointPort": &Reference{
	type_: String,
},
				"Engine": &Reference{
	type_: String,
},
				"EngineVersion": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"LogDeliveryConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElastiCache::CacheCluster_LogDeliveryConfigurationRequest",
},
},
				"NotificationTopicArn": &Reference{
	type_: String,
},
				"NumCacheNodes": &Reference{
	type_: Integer,
},
				"Port": &Reference{
	type_: Integer,
},
				"PreferredAvailabilityZone": &Reference{
	type_: String,
},
				"PreferredAvailabilityZones": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"PreferredMaintenanceWindow": &Reference{
	type_: String,
},
				"RedisEndpointAddress": &Reference{
	type_: String,
},
				"RedisEndpointPort": &Reference{
	type_: String,
},
				"SnapshotArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SnapshotName": &Reference{
	type_: String,
},
				"SnapshotRetentionLimit": &Reference{
	type_: Integer,
},
				"SnapshotWindow": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElastiCache::CacheCluster_Tag",
},
},
				"VpcSecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::ElastiCache::GlobalReplicationGroup": {
		Properties: map[string]*Reference{
				"AutomaticFailoverEnabled": &Reference{
	type_: Boolean,
},
				"CacheNodeType": &Reference{
	type_: String,
},
				"CacheParameterGroupName": &Reference{
	type_: String,
},
				"EngineVersion": &Reference{
	type_: String,
},
				"GlobalNodeGroupCount": &Reference{
	type_: Integer,
},
				"GlobalReplicationGroupDescription": &Reference{
	type_: String,
},
				"GlobalReplicationGroupId": &Reference{
	type_: String,
},
				"GlobalReplicationGroupIdSuffix": &Reference{
	type_: String,
},
				"Members": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElastiCache::GlobalReplicationGroup_GlobalReplicationGroupMember",
},
},
				"RegionalConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElastiCache::GlobalReplicationGroup_RegionalConfiguration",
},
},
				"Status": &Reference{
	type_: String,
},
		},
	},
	"AWS::ElastiCache::ParameterGroup": {
		Properties: map[string]*Reference{
				"CacheParameterGroupFamily": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Properties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElastiCache::ParameterGroup_Tag",
},
},
		},
	},
	"AWS::ElastiCache::ReplicationGroup": {
		Properties: map[string]*Reference{
				"AtRestEncryptionEnabled": &Reference{
	type_: Boolean,
},
				"AuthToken": &Reference{
	type_: String,
},
				"AutoMinorVersionUpgrade": &Reference{
	type_: Boolean,
},
				"AutomaticFailoverEnabled": &Reference{
	type_: Boolean,
},
				"CacheNodeType": &Reference{
	type_: String,
},
				"CacheParameterGroupName": &Reference{
	type_: String,
},
				"CacheSecurityGroupNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"CacheSubnetGroupName": &Reference{
	type_: String,
},
				"ConfigurationEndPointAddress": &Reference{
	type_: String,
},
				"ConfigurationEndPointPort": &Reference{
	type_: String,
},
				"DataTieringEnabled": &Reference{
	type_: Boolean,
},
				"Engine": &Reference{
	type_: String,
},
				"EngineVersion": &Reference{
	type_: String,
},
				"GlobalReplicationGroupId": &Reference{
	type_: String,
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"LogDeliveryConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElastiCache::ReplicationGroup_LogDeliveryConfigurationRequest",
},
},
				"MultiAZEnabled": &Reference{
	type_: Boolean,
},
				"NodeGroupConfiguration": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElastiCache::ReplicationGroup_NodeGroupConfiguration",
},
},
				"NotificationTopicArn": &Reference{
	type_: String,
},
				"NumCacheClusters": &Reference{
	type_: Integer,
},
				"NumNodeGroups": &Reference{
	type_: Integer,
},
				"Port": &Reference{
	type_: Integer,
},
				"PreferredCacheClusterAZs": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"PreferredMaintenanceWindow": &Reference{
	type_: String,
},
				"PrimaryClusterId": &Reference{
	type_: String,
},
				"PrimaryEndPointAddress": &Reference{
	type_: String,
},
				"PrimaryEndPointPort": &Reference{
	type_: String,
},
				"ReadEndPointAddresses": &Reference{
	type_: String,
},
				"ReadEndPointAddressesList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"ReadEndPointPorts": &Reference{
	type_: String,
},
				"ReadEndPointPortsList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"ReaderEndPointAddress": &Reference{
	type_: String,
},
				"ReaderEndPointPort": &Reference{
	type_: String,
},
				"ReplicasPerNodeGroup": &Reference{
	type_: Integer,
},
				"ReplicationGroupDescription": &Reference{
	type_: String,
},
				"ReplicationGroupId": &Reference{
	type_: String,
},
				"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SnapshotArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SnapshotName": &Reference{
	type_: String,
},
				"SnapshotRetentionLimit": &Reference{
	type_: Integer,
},
				"SnapshotWindow": &Reference{
	type_: String,
},
				"SnapshottingClusterId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElastiCache::ReplicationGroup_Tag",
},
},
				"TransitEncryptionEnabled": &Reference{
	type_: Boolean,
},
				"UserGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::ElastiCache::SecurityGroup": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElastiCache::SecurityGroup_Tag",
},
},
		},
	},
	"AWS::ElastiCache::SecurityGroupIngress": {
		Properties: map[string]*Reference{
				"CacheSecurityGroupName": &Reference{
	type_: String,
},
				"EC2SecurityGroupName": &Reference{
	type_: String,
},
				"EC2SecurityGroupOwnerId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::ElastiCache::SubnetGroup": {
		Properties: map[string]*Reference{
				"CacheSubnetGroupName": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElastiCache::SubnetGroup_Tag",
},
},
		},
	},
	"AWS::ElastiCache::User": {
		Properties: map[string]*Reference{
				"AccessString": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"Engine": &Reference{
	type_: String,
},
				"NoPasswordRequired": &Reference{
	type_: Boolean,
},
				"Passwords": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Status": &Reference{
	type_: String,
},
				"UserId": &Reference{
	type_: String,
},
				"UserName": &Reference{
	type_: String,
},
		},
	},
	"AWS::ElastiCache::UserGroup": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Engine": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
				"UserGroupId": &Reference{
	type_: String,
},
				"UserIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::ElasticBeanstalk::Application": {
		Properties: map[string]*Reference{
				"ApplicationName": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"ResourceLifecycleConfig": &Reference{
	ref: "AWS::ElasticBeanstalk::Application_ApplicationResourceLifecycleConfig",
},
		},
	},
	"AWS::ElasticBeanstalk::ApplicationVersion": {
		Properties: map[string]*Reference{
				"ApplicationName": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"SourceBundle": &Reference{
	ref: "AWS::ElasticBeanstalk::ApplicationVersion_SourceBundle",
},
		},
	},
	"AWS::ElasticBeanstalk::ConfigurationTemplate": {
		Properties: map[string]*Reference{
				"ApplicationName": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"EnvironmentId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"OptionSettings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticBeanstalk::ConfigurationTemplate_ConfigurationOptionSetting",
},
},
				"PlatformArn": &Reference{
	type_: String,
},
				"SolutionStackName": &Reference{
	type_: String,
},
				"SourceConfiguration": &Reference{
	ref: "AWS::ElasticBeanstalk::ConfigurationTemplate_SourceConfiguration",
},
		},
	},
	"AWS::ElasticBeanstalk::Environment": {
		Properties: map[string]*Reference{
				"ApplicationName": &Reference{
	type_: String,
},
				"CNAMEPrefix": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"EndpointURL": &Reference{
	type_: String,
},
				"EnvironmentName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"OperationsRole": &Reference{
	type_: String,
},
				"OptionSettings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticBeanstalk::Environment_OptionSetting",
},
},
				"PlatformArn": &Reference{
	type_: String,
},
				"SolutionStackName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticBeanstalk::Environment_Tag",
},
},
				"TemplateName": &Reference{
	type_: String,
},
				"Tier": &Reference{
	ref: "AWS::ElasticBeanstalk::Environment_Tier",
},
				"VersionLabel": &Reference{
	type_: String,
},
		},
	},
	"AWS::ElasticLoadBalancing::LoadBalancer": {
		Properties: map[string]*Reference{
				"AccessLoggingPolicy": &Reference{
	ref: "AWS::ElasticLoadBalancing::LoadBalancer_AccessLoggingPolicy",
},
				"AppCookieStickinessPolicy": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticLoadBalancing::LoadBalancer_AppCookieStickinessPolicy",
},
},
				"AvailabilityZones": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"CanonicalHostedZoneName": &Reference{
	type_: String,
},
				"CanonicalHostedZoneNameID": &Reference{
	type_: String,
},
				"ConnectionDrainingPolicy": &Reference{
	ref: "AWS::ElasticLoadBalancing::LoadBalancer_ConnectionDrainingPolicy",
},
				"ConnectionSettings": &Reference{
	ref: "AWS::ElasticLoadBalancing::LoadBalancer_ConnectionSettings",
},
				"CrossZone": &Reference{
	type_: Boolean,
},
				"DNSName": &Reference{
	type_: String,
},
				"HealthCheck": &Reference{
	ref: "AWS::ElasticLoadBalancing::LoadBalancer_HealthCheck",
},
				"Id": &Reference{
	type_: String,
},
				"Instances": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"LBCookieStickinessPolicy": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticLoadBalancing::LoadBalancer_LBCookieStickinessPolicy",
},
},
				"Listeners": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticLoadBalancing::LoadBalancer_Listeners",
},
},
				"LoadBalancerName": &Reference{
	type_: String,
},
				"Policies": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticLoadBalancing::LoadBalancer_Policies",
},
},
				"Scheme": &Reference{
	type_: String,
},
				"SecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SourceSecurityGroupGroupName": &Reference{
	type_: String,
},
				"SourceSecurityGroupOwnerAlias": &Reference{
	type_: String,
},
				"Subnets": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticLoadBalancing::LoadBalancer_Tag",
},
},
		},
	},
	"AWS::ElasticLoadBalancingV2::Listener": {
		Properties: map[string]*Reference{
				"AlpnPolicy": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Certificates": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticLoadBalancingV2::Listener_Certificate",
},
},
				"DefaultActions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticLoadBalancingV2::Listener_Action",
},
},
				"ListenerArn": &Reference{
	type_: String,
},
				"LoadBalancerArn": &Reference{
	type_: String,
},
				"Port": &Reference{
	type_: Integer,
},
				"Protocol": &Reference{
	type_: String,
},
				"SslPolicy": &Reference{
	type_: String,
},
		},
	},
	"AWS::ElasticLoadBalancingV2::ListenerCertificate": {
		Properties: map[string]*Reference{
				"Certificates": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticLoadBalancingV2::ListenerCertificate_Certificate",
},
},
				"Id": &Reference{
	type_: String,
},
				"ListenerArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::ElasticLoadBalancingV2::ListenerRule": {
		Properties: map[string]*Reference{
				"Actions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticLoadBalancingV2::ListenerRule_Action",
},
},
				"Conditions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticLoadBalancingV2::ListenerRule_RuleCondition",
},
},
				"IsDefault": &Reference{
	type_: Boolean,
},
				"ListenerArn": &Reference{
	type_: String,
},
				"Priority": &Reference{
	type_: Integer,
},
				"RuleArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::ElasticLoadBalancingV2::LoadBalancer": {
		Properties: map[string]*Reference{
				"CanonicalHostedZoneID": &Reference{
	type_: String,
},
				"DNSName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"IpAddressType": &Reference{
	type_: String,
},
				"LoadBalancerAttributes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticLoadBalancingV2::LoadBalancer_LoadBalancerAttribute",
},
},
				"LoadBalancerFullName": &Reference{
	type_: String,
},
				"LoadBalancerName": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Scheme": &Reference{
	type_: String,
},
				"SecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SubnetMappings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticLoadBalancingV2::LoadBalancer_SubnetMapping",
},
},
				"Subnets": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticLoadBalancingV2::LoadBalancer_Tag",
},
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::ElasticLoadBalancingV2::TargetGroup": {
		Properties: map[string]*Reference{
				"HealthCheckEnabled": &Reference{
	type_: Boolean,
},
				"HealthCheckIntervalSeconds": &Reference{
	type_: Integer,
},
				"HealthCheckPath": &Reference{
	type_: String,
},
				"HealthCheckPort": &Reference{
	type_: String,
},
				"HealthCheckProtocol": &Reference{
	type_: String,
},
				"HealthCheckTimeoutSeconds": &Reference{
	type_: Integer,
},
				"HealthyThresholdCount": &Reference{
	type_: Integer,
},
				"Id": &Reference{
	type_: String,
},
				"IpAddressType": &Reference{
	type_: String,
},
				"LoadBalancerArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Matcher": &Reference{
	ref: "AWS::ElasticLoadBalancingV2::TargetGroup_Matcher",
},
				"Name": &Reference{
	type_: String,
},
				"Port": &Reference{
	type_: Integer,
},
				"Protocol": &Reference{
	type_: String,
},
				"ProtocolVersion": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticLoadBalancingV2::TargetGroup_Tag",
},
},
				"TargetGroupAttributes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticLoadBalancingV2::TargetGroup_TargetGroupAttribute",
},
},
				"TargetGroupFullName": &Reference{
	type_: String,
},
				"TargetGroupName": &Reference{
	type_: String,
},
				"TargetType": &Reference{
	type_: String,
},
				"Targets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticLoadBalancingV2::TargetGroup_TargetDescription",
},
},
				"UnhealthyThresholdCount": &Reference{
	type_: Integer,
},
				"VpcId": &Reference{
	type_: String,
},
		},
	},
	"AWS::Elasticsearch::Domain": {
		Properties: map[string]*Reference{
				"AccessPolicies": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"AdvancedOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"AdvancedSecurityOptions": &Reference{
	ref: "AWS::Elasticsearch::Domain_AdvancedSecurityOptionsInput",
},
				"Arn": &Reference{
	type_: String,
},
				"CognitoOptions": &Reference{
	ref: "AWS::Elasticsearch::Domain_CognitoOptions",
},
				"DomainArn": &Reference{
	type_: String,
},
				"DomainEndpoint": &Reference{
	type_: String,
},
				"DomainEndpointOptions": &Reference{
	ref: "AWS::Elasticsearch::Domain_DomainEndpointOptions",
},
				"DomainName": &Reference{
	type_: String,
},
				"EBSOptions": &Reference{
	ref: "AWS::Elasticsearch::Domain_EBSOptions",
},
				"ElasticsearchClusterConfig": &Reference{
	ref: "AWS::Elasticsearch::Domain_ElasticsearchClusterConfig",
},
				"ElasticsearchVersion": &Reference{
	type_: String,
},
				"EncryptionAtRestOptions": &Reference{
	ref: "AWS::Elasticsearch::Domain_EncryptionAtRestOptions",
},
				"Id": &Reference{
	type_: String,
},
				"LogPublishingOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"NodeToNodeEncryptionOptions": &Reference{
	ref: "AWS::Elasticsearch::Domain_NodeToNodeEncryptionOptions",
},
				"SnapshotOptions": &Reference{
	ref: "AWS::Elasticsearch::Domain_SnapshotOptions",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Elasticsearch::Domain_Tag",
},
},
				"VPCOptions": &Reference{
	ref: "AWS::Elasticsearch::Domain_VPCOptions",
},
		},
	},
	"AWS::EventSchemas::Discoverer": {
		Properties: map[string]*Reference{
				"CrossAccount": &Reference{
	type_: Boolean,
},
				"Description": &Reference{
	type_: String,
},
				"DiscovererArn": &Reference{
	type_: String,
},
				"DiscovererId": &Reference{
	type_: String,
},
				"SourceArn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EventSchemas::Discoverer_TagsEntry",
},
},
		},
	},
	"AWS::EventSchemas::Registry": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"RegistryArn": &Reference{
	type_: String,
},
				"RegistryName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EventSchemas::Registry_TagsEntry",
},
},
		},
	},
	"AWS::EventSchemas::RegistryPolicy": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Policy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"RegistryName": &Reference{
	type_: String,
},
				"RevisionId": &Reference{
	type_: String,
},
		},
	},
	"AWS::EventSchemas::Schema": {
		Properties: map[string]*Reference{
				"Content": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"RegistryName": &Reference{
	type_: String,
},
				"SchemaArn": &Reference{
	type_: String,
},
				"SchemaName": &Reference{
	type_: String,
},
				"SchemaVersion": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EventSchemas::Schema_TagsEntry",
},
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::Events::ApiDestination": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"ConnectionArn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"HttpMethod": &Reference{
	type_: String,
},
				"InvocationEndpoint": &Reference{
	type_: String,
},
				"InvocationRateLimitPerSecond": &Reference{
	type_: Integer,
},
				"Name": &Reference{
	type_: String,
},
		},
	},
	"AWS::Events::Archive": {
		Properties: map[string]*Reference{
				"ArchiveName": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"EventPattern": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"RetentionDays": &Reference{
	type_: Integer,
},
				"SourceArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::Events::Connection": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AuthParameters": &Reference{
	ref: "AWS::Events::Connection_AuthParameters",
},
				"AuthorizationType": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"SecretArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::Events::Endpoint": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"EndpointId": &Reference{
	type_: String,
},
				"EndpointUrl": &Reference{
	type_: String,
},
				"EventBuses": &Reference{
	ref: "AWS::Events::Endpoint_EventBuses",
},
				"Name": &Reference{
	type_: String,
},
				"ReplicationConfig": &Reference{
	ref: "AWS::Events::Endpoint_ReplicationConfig",
},
				"RoleArn": &Reference{
	type_: String,
},
				"RoutingConfig": &Reference{
	ref: "AWS::Events::Endpoint_RoutingConfig",
},
				"State": &Reference{
	type_: String,
},
				"StateReason": &Reference{
	type_: String,
},
		},
	},
	"AWS::Events::EventBus": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"EventSourceName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Policy": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Events::EventBus_TagEntry",
},
},
		},
	},
	"AWS::Events::EventBusPolicy": {
		Properties: map[string]*Reference{
				"Action": &Reference{
	type_: String,
},
				"Condition": &Reference{
	ref: "AWS::Events::EventBusPolicy_Condition",
},
				"EventBusName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Principal": &Reference{
	type_: String,
},
				"Statement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"StatementId": &Reference{
	type_: String,
},
		},
	},
	"AWS::Events::Rule": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"EventBusName": &Reference{
	type_: String,
},
				"EventPattern": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
				"ScheduleExpression": &Reference{
	type_: String,
},
				"State": &Reference{
	type_: String,
},
				"Targets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Events::Rule_Target",
},
},
		},
	},
	"AWS::Evidently::Experiment": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"MetricGoals": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Evidently::Experiment_MetricGoalObject",
},
},
				"Name": &Reference{
	type_: String,
},
				"OnlineAbConfig": &Reference{
	ref: "AWS::Evidently::Experiment_OnlineAbConfigObject",
},
				"Project": &Reference{
	type_: String,
},
				"RandomizationSalt": &Reference{
	type_: String,
},
				"RunningStatus": &Reference{
	ref: "AWS::Evidently::Experiment_RunningStatusObject",
},
				"SamplingRate": &Reference{
	type_: Integer,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Evidently::Experiment_Tag",
},
},
				"Treatments": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Evidently::Experiment_TreatmentObject",
},
},
		},
	},
	"AWS::Evidently::Feature": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"DefaultVariation": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"EntityOverrides": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Evidently::Feature_EntityOverride",
},
},
				"EvaluationStrategy": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Project": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Evidently::Feature_Tag",
},
},
				"Variations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Evidently::Feature_VariationObject",
},
},
		},
	},
	"AWS::Evidently::Launch": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"ExecutionStatus": &Reference{
	ref: "AWS::Evidently::Launch_ExecutionStatusObject",
},
				"Groups": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Evidently::Launch_LaunchGroupObject",
},
},
				"MetricMonitors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Evidently::Launch_MetricDefinitionObject",
},
},
				"Name": &Reference{
	type_: String,
},
				"Project": &Reference{
	type_: String,
},
				"RandomizationSalt": &Reference{
	type_: String,
},
				"ScheduledSplitsConfig": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Evidently::Launch_StepConfig",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Evidently::Launch_Tag",
},
},
		},
	},
	"AWS::Evidently::Project": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"DataDelivery": &Reference{
	ref: "AWS::Evidently::Project_DataDeliveryObject",
},
				"Description": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Evidently::Project_Tag",
},
},
		},
	},
	"AWS::FIS::ExperimentTemplate": {
		Properties: map[string]*Reference{
				"Actions": &Reference{
	ref: "AWS::FIS::ExperimentTemplate_ExperimentTemplateActionMap",
},
				"Description": &Reference{
	ref: "AWS::FIS::ExperimentTemplate_ExperimentTemplateDescription",
},
				"Id": &Reference{
	ref: "AWS::FIS::ExperimentTemplate_ExperimentTemplateId",
},
				"LogConfiguration": &Reference{
	ref: "AWS::FIS::ExperimentTemplate_ExperimentTemplateLogConfiguration",
},
				"RoleArn": &Reference{
	ref: "AWS::FIS::ExperimentTemplate_RoleArn",
},
				"StopConditions": &Reference{
	ref: "AWS::FIS::ExperimentTemplate_ExperimentTemplateStopConditionList",
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Targets": &Reference{
	ref: "AWS::FIS::ExperimentTemplate_ExperimentTemplateTargetMap",
},
		},
	},
	"AWS::FMS::NotificationChannel": {
		Properties: map[string]*Reference{
				"SnsRoleName": &Reference{
	ref: "AWS::FMS::NotificationChannel_ResourceArn",
},
				"SnsTopicArn": &Reference{
	ref: "AWS::FMS::NotificationChannel_ResourceArn",
},
		},
	},
	"AWS::FMS::Policy": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::FMS::Policy_ResourceArn",
},
				"DeleteAllPolicyResources": &Reference{
	type_: Boolean,
},
				"ExcludeMap": &Reference{
	ref: "AWS::FMS::Policy_IEMap",
},
				"ExcludeResourceTags": &Reference{
	type_: Boolean,
},
				"Id": &Reference{
	type_: String,
},
				"IncludeMap": &Reference{
	ref: "AWS::FMS::Policy_IEMap",
},
				"PolicyName": &Reference{
	type_: String,
},
				"RemediationEnabled": &Reference{
	type_: Boolean,
},
				"ResourceTags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FMS::Policy_ResourceTag",
},
},
				"ResourceType": &Reference{
	ref: "AWS::FMS::Policy_ResourceType",
},
				"ResourceTypeList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FMS::Policy_ResourceType",
},
},
				"ResourcesCleanUp": &Reference{
	type_: Boolean,
},
				"SecurityServicePolicyData": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ManagedServiceData": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FMS::Policy_PolicyTag",
},
},
		},
	},
	"AWS::FSx::FileSystem": {
		Properties: map[string]*Reference{
				"BackupId": &Reference{
	type_: String,
},
				"DNSName": &Reference{
	type_: String,
},
				"FileSystemType": &Reference{
	type_: String,
},
				"FileSystemTypeVersion": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"LustreConfiguration": &Reference{
	ref: "AWS::FSx::FileSystem_LustreConfiguration",
},
				"LustreMountName": &Reference{
	type_: String,
},
				"OntapConfiguration": &Reference{
	ref: "AWS::FSx::FileSystem_OntapConfiguration",
},
				"OpenZFSConfiguration": &Reference{
	ref: "AWS::FSx::FileSystem_OpenZFSConfiguration",
},
				"RootVolumeId": &Reference{
	type_: String,
},
				"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"StorageCapacity": &Reference{
	type_: Integer,
},
				"StorageType": &Reference{
	type_: String,
},
				"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FSx::FileSystem_Tag",
},
},
				"WindowsConfiguration": &Reference{
	ref: "AWS::FSx::FileSystem_WindowsConfiguration",
},
		},
	},
	"AWS::FSx::Snapshot": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"ResourceARN": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FSx::Snapshot_Tag",
},
},
				"VolumeId": &Reference{
	type_: String,
},
		},
	},
	"AWS::FSx::StorageVirtualMachine": {
		Properties: map[string]*Reference{
				"ActiveDirectoryConfiguration": &Reference{
	ref: "AWS::FSx::StorageVirtualMachine_ActiveDirectoryConfiguration",
},
				"FileSystemId": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"ResourceARN": &Reference{
	type_: String,
},
				"RootVolumeSecurityStyle": &Reference{
	type_: String,
},
				"StorageVirtualMachineId": &Reference{
	type_: String,
},
				"SvmAdminPassword": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FSx::StorageVirtualMachine_Tag",
},
},
				"UUID": &Reference{
	type_: String,
},
		},
	},
	"AWS::FSx::Volume": {
		Properties: map[string]*Reference{
				"BackupId": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"OntapConfiguration": &Reference{
	ref: "AWS::FSx::Volume_OntapConfiguration",
},
				"OpenZFSConfiguration": &Reference{
	ref: "AWS::FSx::Volume_OpenZFSConfiguration",
},
				"ResourceARN": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FSx::Volume_Tag",
},
},
				"UUID": &Reference{
	type_: String,
},
				"VolumeId": &Reference{
	type_: String,
},
				"VolumeType": &Reference{
	type_: String,
},
		},
	},
	"AWS::FinSpace::Environment": {
		Properties: map[string]*Reference{
				"AwsAccountId": &Reference{
	type_: String,
},
				"DataBundles": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FinSpace::Environment_DataBundleArn",
},
},
				"DedicatedServiceAccountId": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"EnvironmentArn": &Reference{
	type_: String,
},
				"EnvironmentId": &Reference{
	type_: String,
},
				"EnvironmentUrl": &Reference{
	type_: String,
},
				"FederationMode": &Reference{
	type_: String,
},
				"FederationParameters": &Reference{
	ref: "AWS::FinSpace::Environment_FederationParameters",
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"SageMakerStudioDomainUrl": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
				"SuperuserParameters": &Reference{
	ref: "AWS::FinSpace::Environment_SuperuserParameters",
},
		},
	},
	"AWS::Forecast::Dataset": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"DataFrequency": &Reference{
	type_: String,
},
				"DatasetName": &Reference{
	type_: String,
},
				"DatasetType": &Reference{
	type_: String,
},
				"Domain": &Reference{
	type_: String,
},
				"EncryptionConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KmsKeyArn": &Reference{
	ref: "AWS::Forecast::Dataset_KmsKeyArn",
},
			"RoleArn": &Reference{
	ref: "AWS::Forecast::Dataset_RoleArn",
},
	},
},
				"Schema": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Attributes": &Reference{
	ref: "AWS::Forecast::Dataset_Attributes",
},
	},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	ref: "AWS::Forecast::Dataset_Key",
},
			"Value": &Reference{
	ref: "AWS::Forecast::Dataset_Value",
},
	},
},
},
		},
	},
	"AWS::Forecast::DatasetGroup": {
		Properties: map[string]*Reference{
				"DatasetArns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Forecast::DatasetGroup_Arn",
},
},
				"DatasetGroupArn": &Reference{
	type_: String,
},
				"DatasetGroupName": &Reference{
	type_: String,
},
				"Domain": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Forecast::DatasetGroup_Tag",
},
},
		},
	},
	"AWS::FraudDetector::Detector": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AssociatedModels": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::Detector_Model",
},
},
				"CreatedTime": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"DetectorId": &Reference{
	type_: String,
},
				"DetectorVersionId": &Reference{
	type_: String,
},
				"DetectorVersionStatus": &Reference{
	type_: String,
},
				"EventType": &Reference{
	ref: "AWS::FraudDetector::Detector_EventType",
},
				"LastUpdatedTime": &Reference{
	type_: String,
},
				"RuleExecutionMode": &Reference{
	type_: String,
},
				"Rules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::Detector_Rule",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::Detector_Tag",
},
},
		},
	},
	"AWS::FraudDetector::EntityType": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CreatedTime": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"LastUpdatedTime": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::EntityType_Tag",
},
},
		},
	},
	"AWS::FraudDetector::EventType": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CreatedTime": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"EntityTypes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::EventType_EntityType",
},
},
				"EventVariables": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::EventType_EventVariable",
},
},
				"Labels": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::EventType_Label",
},
},
				"LastUpdatedTime": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::EventType_Tag",
},
},
		},
	},
	"AWS::FraudDetector::Label": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CreatedTime": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"LastUpdatedTime": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::Label_Tag",
},
},
		},
	},
	"AWS::FraudDetector::Outcome": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CreatedTime": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"LastUpdatedTime": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::Outcome_Tag",
},
},
		},
	},
	"AWS::FraudDetector::Variable": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CreatedTime": &Reference{
	type_: String,
},
				"DataSource": &Reference{
	type_: String,
},
				"DataType": &Reference{
	type_: String,
},
				"DefaultValue": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"LastUpdatedTime": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::Variable_Tag",
},
},
				"VariableType": &Reference{
	type_: String,
},
		},
	},
	"AWS::GameLift::Alias": {
		Properties: map[string]*Reference{
				"AliasId": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RoutingStrategy": &Reference{
	ref: "AWS::GameLift::Alias_RoutingStrategy",
},
		},
	},
	"AWS::GameLift::Build": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"OperatingSystem": &Reference{
	type_: String,
},
				"StorageLocation": &Reference{
	ref: "AWS::GameLift::Build_S3Location",
},
				"Version": &Reference{
	type_: String,
},
		},
	},
	"AWS::GameLift::Fleet": {
		Properties: map[string]*Reference{
				"BuildId": &Reference{
	type_: String,
},
				"CertificateConfiguration": &Reference{
	ref: "AWS::GameLift::Fleet_CertificateConfiguration",
},
				"Description": &Reference{
	type_: String,
},
				"DesiredEC2Instances": &Reference{
	type_: Integer,
},
				"EC2InboundPermissions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GameLift::Fleet_IpPermission",
},
},
				"EC2InstanceType": &Reference{
	type_: String,
},
				"FleetId": &Reference{
	type_: String,
},
				"FleetType": &Reference{
	type_: String,
},
				"InstanceRoleARN": &Reference{
	type_: String,
},
				"Locations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GameLift::Fleet_LocationConfiguration",
},
},
				"LogPaths": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"MaxSize": &Reference{
	type_: Integer,
},
				"MetricGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"MinSize": &Reference{
	type_: Integer,
},
				"Name": &Reference{
	type_: String,
},
				"NewGameSessionProtectionPolicy": &Reference{
	type_: String,
},
				"PeerVpcAwsAccountId": &Reference{
	type_: String,
},
				"PeerVpcId": &Reference{
	type_: String,
},
				"ResourceCreationLimitPolicy": &Reference{
	ref: "AWS::GameLift::Fleet_ResourceCreationLimitPolicy",
},
				"RuntimeConfiguration": &Reference{
	ref: "AWS::GameLift::Fleet_RuntimeConfiguration",
},
				"ScriptId": &Reference{
	type_: String,
},
				"ServerLaunchParameters": &Reference{
	type_: String,
},
				"ServerLaunchPath": &Reference{
	type_: String,
},
		},
	},
	"AWS::GameLift::GameServerGroup": {
		Properties: map[string]*Reference{
				"AutoScalingGroupArn": &Reference{
	ref: "AWS::GameLift::GameServerGroup_AutoScalingGroupArn",
},
				"AutoScalingPolicy": &Reference{
	ref: "AWS::GameLift::GameServerGroup_AutoScalingPolicy",
},
				"BalancingStrategy": &Reference{
	ref: "AWS::GameLift::GameServerGroup_BalancingStrategy",
},
				"DeleteOption": &Reference{
	ref: "AWS::GameLift::GameServerGroup_DeleteOption",
},
				"GameServerGroupArn": &Reference{
	ref: "AWS::GameLift::GameServerGroup_GameServerGroupArn",
},
				"GameServerGroupName": &Reference{
	ref: "AWS::GameLift::GameServerGroup_GameServerGroupName",
},
				"GameServerProtectionPolicy": &Reference{
	ref: "AWS::GameLift::GameServerGroup_GameServerProtectionPolicy",
},
				"InstanceDefinitions": &Reference{
	ref: "AWS::GameLift::GameServerGroup_InstanceDefinitions",
},
				"LaunchTemplate": &Reference{
	ref: "AWS::GameLift::GameServerGroup_LaunchTemplate",
},
				"MaxSize": &Reference{
	ref: "AWS::GameLift::GameServerGroup_MaxSize",
},
				"MinSize": &Reference{
	ref: "AWS::GameLift::GameServerGroup_MinSize",
},
				"RoleArn": &Reference{
	ref: "AWS::GameLift::GameServerGroup_RoleArn",
},
				"Tags": &Reference{
	ref: "AWS::GameLift::GameServerGroup_Tags",
},
				"VpcSubnets": &Reference{
	ref: "AWS::GameLift::GameServerGroup_VpcSubnets",
},
		},
	},
	"AWS::GameLift::GameSessionQueue": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CustomEventData": &Reference{
	type_: String,
},
				"Destinations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GameLift::GameSessionQueue_Destination",
},
},
				"FilterConfiguration": &Reference{
	ref: "AWS::GameLift::GameSessionQueue_FilterConfiguration",
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"NotificationTarget": &Reference{
	type_: String,
},
				"PlayerLatencyPolicies": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GameLift::GameSessionQueue_PlayerLatencyPolicy",
},
},
				"PriorityConfiguration": &Reference{
	ref: "AWS::GameLift::GameSessionQueue_PriorityConfiguration",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GameLift::GameSessionQueue_Tag",
},
},
				"TimeoutInSeconds": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::GameLift::MatchmakingConfiguration": {
		Properties: map[string]*Reference{
				"AcceptanceRequired": &Reference{
	type_: Boolean,
},
				"AcceptanceTimeoutSeconds": &Reference{
	type_: Integer,
},
				"AdditionalPlayerCount": &Reference{
	type_: Integer,
},
				"Arn": &Reference{
	type_: String,
},
				"BackfillMode": &Reference{
	type_: String,
},
				"CustomEventData": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"FlexMatchMode": &Reference{
	type_: String,
},
				"GameProperties": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GameLift::MatchmakingConfiguration_GameProperty",
},
},
				"GameSessionData": &Reference{
	type_: String,
},
				"GameSessionQueueArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"NotificationTarget": &Reference{
	type_: String,
},
				"RequestTimeoutSeconds": &Reference{
	type_: Integer,
},
				"RuleSetName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GameLift::MatchmakingConfiguration_Tag",
},
},
		},
	},
	"AWS::GameLift::MatchmakingRuleSet": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RuleSetBody": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GameLift::MatchmakingRuleSet_Tag",
},
},
		},
	},
	"AWS::GameLift::Script": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"StorageLocation": &Reference{
	ref: "AWS::GameLift::Script_S3Location",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GameLift::Script_Tag",
},
},
				"Version": &Reference{
	type_: String,
},
		},
	},
	"AWS::GlobalAccelerator::Accelerator": {
		Properties: map[string]*Reference{
				"AcceleratorArn": &Reference{
	type_: String,
},
				"DnsName": &Reference{
	type_: String,
},
				"Enabled": &Reference{
	type_: Boolean,
},
				"IpAddressType": &Reference{
	type_: String,
},
				"IpAddresses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GlobalAccelerator::Accelerator_IpAddress",
},
},
				"Ipv4Addresses": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GlobalAccelerator::Accelerator_Tag",
},
},
		},
	},
	"AWS::GlobalAccelerator::EndpointGroup": {
		Properties: map[string]*Reference{
				"EndpointConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GlobalAccelerator::EndpointGroup_EndpointConfiguration",
},
},
				"EndpointGroupArn": &Reference{
	type_: String,
},
				"EndpointGroupRegion": &Reference{
	type_: String,
},
				"HealthCheckIntervalSeconds": &Reference{
	type_: Integer,
},
				"HealthCheckPath": &Reference{
	type_: String,
},
				"HealthCheckPort": &Reference{
	type_: Integer,
},
				"HealthCheckProtocol": &Reference{
	type_: String,
},
				"ListenerArn": &Reference{
	type_: String,
},
				"PortOverrides": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GlobalAccelerator::EndpointGroup_PortOverride",
},
},
				"ThresholdCount": &Reference{
	type_: Integer,
},
				"TrafficDialPercentage": &Reference{
	type_: Number,
},
		},
	},
	"AWS::GlobalAccelerator::Listener": {
		Properties: map[string]*Reference{
				"AcceleratorArn": &Reference{
	type_: String,
},
				"ClientAffinity": &Reference{
	type_: String,
},
				"ListenerArn": &Reference{
	type_: String,
},
				"PortRanges": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GlobalAccelerator::Listener_PortRange",
},
},
				"Protocol": &Reference{
	type_: String,
},
		},
	},
	"AWS::Glue::Classifier": {
		Properties: map[string]*Reference{
				"CsvClassifier": &Reference{
	ref: "AWS::Glue::Classifier_CsvClassifier",
},
				"GrokClassifier": &Reference{
	ref: "AWS::Glue::Classifier_GrokClassifier",
},
				"Id": &Reference{
	type_: String,
},
				"JsonClassifier": &Reference{
	ref: "AWS::Glue::Classifier_JsonClassifier",
},
				"XMLClassifier": &Reference{
	ref: "AWS::Glue::Classifier_XMLClassifier",
},
		},
	},
	"AWS::Glue::Connection": {
		Properties: map[string]*Reference{
				"CatalogId": &Reference{
	type_: String,
},
				"ConnectionInput": &Reference{
	ref: "AWS::Glue::Connection_ConnectionInput",
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::Glue::Crawler": {
		Properties: map[string]*Reference{
				"Classifiers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Configuration": &Reference{
	type_: String,
},
				"CrawlerSecurityConfiguration": &Reference{
	type_: String,
},
				"DatabaseName": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RecrawlPolicy": &Reference{
	ref: "AWS::Glue::Crawler_RecrawlPolicy",
},
				"Role": &Reference{
	type_: String,
},
				"Schedule": &Reference{
	ref: "AWS::Glue::Crawler_Schedule",
},
				"SchemaChangePolicy": &Reference{
	ref: "AWS::Glue::Crawler_SchemaChangePolicy",
},
				"TablePrefix": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Targets": &Reference{
	ref: "AWS::Glue::Crawler_Targets",
},
		},
	},
	"AWS::Glue::DataCatalogEncryptionSettings": {
		Properties: map[string]*Reference{
				"CatalogId": &Reference{
	type_: String,
},
				"DataCatalogEncryptionSettings": &Reference{
	ref: "AWS::Glue::DataCatalogEncryptionSettings_DataCatalogEncryptionSettings",
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::Glue::Database": {
		Properties: map[string]*Reference{
				"CatalogId": &Reference{
	type_: String,
},
				"DatabaseInput": &Reference{
	ref: "AWS::Glue::Database_DatabaseInput",
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::Glue::DevEndpoint": {
		Properties: map[string]*Reference{
				"Arguments": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"EndpointName": &Reference{
	type_: String,
},
				"ExtraJarsS3Path": &Reference{
	type_: String,
},
				"ExtraPythonLibsS3Path": &Reference{
	type_: String,
},
				"GlueVersion": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"NumberOfNodes": &Reference{
	type_: Integer,
},
				"NumberOfWorkers": &Reference{
	type_: Integer,
},
				"PublicKey": &Reference{
	type_: String,
},
				"PublicKeys": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"RoleArn": &Reference{
	type_: String,
},
				"SecurityConfiguration": &Reference{
	type_: String,
},
				"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SubnetId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"WorkerType": &Reference{
	type_: String,
},
		},
	},
	"AWS::Glue::Job": {
		Properties: map[string]*Reference{
				"AllocatedCapacity": &Reference{
	type_: Number,
},
				"Command": &Reference{
	ref: "AWS::Glue::Job_JobCommand",
},
				"Connections": &Reference{
	ref: "AWS::Glue::Job_ConnectionsList",
},
				"DefaultArguments": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Description": &Reference{
	type_: String,
},
				"ExecutionProperty": &Reference{
	ref: "AWS::Glue::Job_ExecutionProperty",
},
				"GlueVersion": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"LogUri": &Reference{
	type_: String,
},
				"MaxCapacity": &Reference{
	type_: Number,
},
				"MaxRetries": &Reference{
	type_: Number,
},
				"Name": &Reference{
	type_: String,
},
				"NotificationProperty": &Reference{
	ref: "AWS::Glue::Job_NotificationProperty",
},
				"NumberOfWorkers": &Reference{
	type_: Integer,
},
				"Role": &Reference{
	type_: String,
},
				"SecurityConfiguration": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Timeout": &Reference{
	type_: Integer,
},
				"WorkerType": &Reference{
	type_: String,
},
		},
	},
	"AWS::Glue::MLTransform": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"GlueVersion": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InputRecordTables": &Reference{
	ref: "AWS::Glue::MLTransform_InputRecordTables",
},
				"MaxCapacity": &Reference{
	type_: Number,
},
				"MaxRetries": &Reference{
	type_: Integer,
},
				"Name": &Reference{
	type_: String,
},
				"NumberOfWorkers": &Reference{
	type_: Integer,
},
				"Role": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Timeout": &Reference{
	type_: Integer,
},
				"TransformEncryption": &Reference{
	ref: "AWS::Glue::MLTransform_TransformEncryption",
},
				"TransformParameters": &Reference{
	ref: "AWS::Glue::MLTransform_TransformParameters",
},
				"WorkerType": &Reference{
	type_: String,
},
		},
	},
	"AWS::Glue::Partition": {
		Properties: map[string]*Reference{
				"CatalogId": &Reference{
	type_: String,
},
				"DatabaseName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"PartitionInput": &Reference{
	ref: "AWS::Glue::Partition_PartitionInput",
},
				"TableName": &Reference{
	type_: String,
},
		},
	},
	"AWS::Glue::Registry": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Glue::Registry_Tag",
},
},
		},
	},
	"AWS::Glue::Schema": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CheckpointVersion": &Reference{
	ref: "AWS::Glue::Schema_SchemaVersion",
},
				"Compatibility": &Reference{
	type_: String,
},
				"DataFormat": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"InitialSchemaVersionId": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Registry": &Reference{
	ref: "AWS::Glue::Schema_Registry",
},
				"SchemaDefinition": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Glue::Schema_Tag",
},
},
		},
	},
	"AWS::Glue::SchemaVersion": {
		Properties: map[string]*Reference{
				"Schema": &Reference{
	ref: "AWS::Glue::SchemaVersion_Schema",
},
				"SchemaDefinition": &Reference{
	type_: String,
},
				"VersionId": &Reference{
	type_: String,
},
		},
	},
	"AWS::Glue::SchemaVersionMetadata": {
		Properties: map[string]*Reference{
				"Key": &Reference{
	type_: String,
},
				"SchemaVersionId": &Reference{
	type_: String,
},
				"Value": &Reference{
	type_: String,
},
		},
	},
	"AWS::Glue::SecurityConfiguration": {
		Properties: map[string]*Reference{
				"EncryptionConfiguration": &Reference{
	ref: "AWS::Glue::SecurityConfiguration_EncryptionConfiguration",
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
		},
	},
	"AWS::Glue::Table": {
		Properties: map[string]*Reference{
				"CatalogId": &Reference{
	type_: String,
},
				"DatabaseName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"TableInput": &Reference{
	ref: "AWS::Glue::Table_TableInput",
},
		},
	},
	"AWS::Glue::Trigger": {
		Properties: map[string]*Reference{
				"Actions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Glue::Trigger_Action",
},
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Predicate": &Reference{
	ref: "AWS::Glue::Trigger_Predicate",
},
				"Schedule": &Reference{
	type_: String,
},
				"StartOnCreation": &Reference{
	type_: Boolean,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Type": &Reference{
	type_: String,
},
				"WorkflowName": &Reference{
	type_: String,
},
		},
	},
	"AWS::Glue::Workflow": {
		Properties: map[string]*Reference{
				"DefaultRunProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::Greengrass::ConnectorDefinition": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InitialVersion": &Reference{
	ref: "AWS::Greengrass::ConnectorDefinition_ConnectorDefinitionVersion",
},
				"LatestVersionArn": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::Greengrass::ConnectorDefinitionVersion": {
		Properties: map[string]*Reference{
				"ConnectorDefinitionId": &Reference{
	type_: String,
},
				"Connectors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Greengrass::ConnectorDefinitionVersion_Connector",
},
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::Greengrass::CoreDefinition": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InitialVersion": &Reference{
	ref: "AWS::Greengrass::CoreDefinition_CoreDefinitionVersion",
},
				"LatestVersionArn": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::Greengrass::CoreDefinitionVersion": {
		Properties: map[string]*Reference{
				"CoreDefinitionId": &Reference{
	type_: String,
},
				"Cores": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Greengrass::CoreDefinitionVersion_Core",
},
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::Greengrass::DeviceDefinition": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InitialVersion": &Reference{
	ref: "AWS::Greengrass::DeviceDefinition_DeviceDefinitionVersion",
},
				"LatestVersionArn": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::Greengrass::DeviceDefinitionVersion": {
		Properties: map[string]*Reference{
				"DeviceDefinitionId": &Reference{
	type_: String,
},
				"Devices": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Greengrass::DeviceDefinitionVersion_Device",
},
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::Greengrass::FunctionDefinition": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InitialVersion": &Reference{
	ref: "AWS::Greengrass::FunctionDefinition_FunctionDefinitionVersion",
},
				"LatestVersionArn": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::Greengrass::FunctionDefinitionVersion": {
		Properties: map[string]*Reference{
				"DefaultConfig": &Reference{
	ref: "AWS::Greengrass::FunctionDefinitionVersion_DefaultConfig",
},
				"FunctionDefinitionId": &Reference{
	type_: String,
},
				"Functions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Greengrass::FunctionDefinitionVersion_Function",
},
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::Greengrass::Group": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InitialVersion": &Reference{
	ref: "AWS::Greengrass::Group_GroupVersion",
},
				"LatestVersionArn": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
				"RoleAttachedAt": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::Greengrass::GroupVersion": {
		Properties: map[string]*Reference{
				"ConnectorDefinitionVersionArn": &Reference{
	type_: String,
},
				"CoreDefinitionVersionArn": &Reference{
	type_: String,
},
				"DeviceDefinitionVersionArn": &Reference{
	type_: String,
},
				"FunctionDefinitionVersionArn": &Reference{
	type_: String,
},
				"GroupId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"LoggerDefinitionVersionArn": &Reference{
	type_: String,
},
				"ResourceDefinitionVersionArn": &Reference{
	type_: String,
},
				"SubscriptionDefinitionVersionArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::Greengrass::LoggerDefinition": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InitialVersion": &Reference{
	ref: "AWS::Greengrass::LoggerDefinition_LoggerDefinitionVersion",
},
				"LatestVersionArn": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::Greengrass::LoggerDefinitionVersion": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"LoggerDefinitionId": &Reference{
	type_: String,
},
				"Loggers": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Greengrass::LoggerDefinitionVersion_Logger",
},
},
		},
	},
	"AWS::Greengrass::ResourceDefinition": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InitialVersion": &Reference{
	ref: "AWS::Greengrass::ResourceDefinition_ResourceDefinitionVersion",
},
				"LatestVersionArn": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::Greengrass::ResourceDefinitionVersion": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"ResourceDefinitionId": &Reference{
	type_: String,
},
				"Resources": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Greengrass::ResourceDefinitionVersion_ResourceInstance",
},
},
		},
	},
	"AWS::Greengrass::SubscriptionDefinition": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InitialVersion": &Reference{
	ref: "AWS::Greengrass::SubscriptionDefinition_SubscriptionDefinitionVersion",
},
				"LatestVersionArn": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::Greengrass::SubscriptionDefinitionVersion": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"SubscriptionDefinitionId": &Reference{
	type_: String,
},
				"Subscriptions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Greengrass::SubscriptionDefinitionVersion_Subscription",
},
},
		},
	},
	"AWS::GreengrassV2::ComponentVersion": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"ComponentName": &Reference{
	type_: String,
},
				"ComponentVersion": &Reference{
	type_: String,
},
				"InlineRecipe": &Reference{
	type_: String,
},
				"LambdaFunction": &Reference{
	ref: "AWS::GreengrassV2::ComponentVersion_LambdaFunctionRecipeSource",
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::GroundStation::Config": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"ConfigData": &Reference{
	ref: "AWS::GroundStation::Config_ConfigData",
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GroundStation::Config_Tag",
},
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::GroundStation::DataflowEndpointGroup": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"EndpointDetails": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GroundStation::DataflowEndpointGroup_EndpointDetails",
},
},
				"Id": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GroundStation::DataflowEndpointGroup_Tag",
},
},
		},
	},
	"AWS::GroundStation::MissionProfile": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"ContactPostPassDurationSeconds": &Reference{
	type_: Integer,
},
				"ContactPrePassDurationSeconds": &Reference{
	type_: Integer,
},
				"DataflowEdges": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GroundStation::MissionProfile_DataflowEdge",
},
},
				"Id": &Reference{
	type_: String,
},
				"MinimumViableContactDurationSeconds": &Reference{
	type_: Integer,
},
				"Name": &Reference{
	type_: String,
},
				"Region": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GroundStation::MissionProfile_Tag",
},
},
				"TrackingConfigArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::GuardDuty::Detector": {
		Properties: map[string]*Reference{
				"DataSources": &Reference{
	ref: "AWS::GuardDuty::Detector_CFNDataSourceConfigurations",
},
				"Enable": &Reference{
	type_: Boolean,
},
				"FindingPublishingFrequency": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::GuardDuty::Filter": {
		Properties: map[string]*Reference{
				"Action": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"DetectorId": &Reference{
	type_: String,
},
				"FindingCriteria": &Reference{
	ref: "AWS::GuardDuty::Filter_FindingCriteria",
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Rank": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::GuardDuty::IPSet": {
		Properties: map[string]*Reference{
				"Activate": &Reference{
	type_: Boolean,
},
				"DetectorId": &Reference{
	type_: String,
},
				"Format": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Location": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
		},
	},
	"AWS::GuardDuty::Master": {
		Properties: map[string]*Reference{
				"DetectorId": &Reference{
	type_: String,
},
				"InvitationId": &Reference{
	type_: String,
},
				"MasterId": &Reference{
	type_: String,
},
		},
	},
	"AWS::GuardDuty::Member": {
		Properties: map[string]*Reference{
				"DetectorId": &Reference{
	type_: String,
},
				"DisableEmailNotification": &Reference{
	type_: Boolean,
},
				"Email": &Reference{
	type_: String,
},
				"MemberId": &Reference{
	type_: String,
},
				"Message": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
		},
	},
	"AWS::GuardDuty::ThreatIntelSet": {
		Properties: map[string]*Reference{
				"Activate": &Reference{
	type_: Boolean,
},
				"DetectorId": &Reference{
	type_: String,
},
				"Format": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Location": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
		},
	},
	"AWS::HealthLake::FHIRDatastore": {
		Properties: map[string]*Reference{
				"CreatedAt": &Reference{
	ref: "AWS::HealthLake::FHIRDatastore_CreatedAt",
},
				"DatastoreArn": &Reference{
	ref: "AWS::HealthLake::FHIRDatastore_DatastoreArn",
},
				"DatastoreEndpoint": &Reference{
	ref: "AWS::HealthLake::FHIRDatastore_DatastoreEndpoint",
},
				"DatastoreId": &Reference{
	ref: "AWS::HealthLake::FHIRDatastore_DatastoreId",
},
				"DatastoreName": &Reference{
	ref: "AWS::HealthLake::FHIRDatastore_DatastoreName",
},
				"DatastoreStatus": &Reference{
	ref: "AWS::HealthLake::FHIRDatastore_DatastoreStatus",
},
				"DatastoreTypeVersion": &Reference{
	ref: "AWS::HealthLake::FHIRDatastore_DatastoreTypeVersion",
},
				"PreloadDataConfig": &Reference{
	ref: "AWS::HealthLake::FHIRDatastore_PreloadDataConfig",
},
				"SseConfiguration": &Reference{
	ref: "AWS::HealthLake::FHIRDatastore_SseConfiguration",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::HealthLake::FHIRDatastore_Tag",
},
},
		},
	},
	"AWS::IAM::AccessKey": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"SecretAccessKey": &Reference{
	type_: String,
},
				"Serial": &Reference{
	type_: Integer,
},
				"Status": &Reference{
	type_: String,
},
				"UserName": &Reference{
	type_: String,
},
		},
	},
	"AWS::IAM::Group": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"GroupName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"ManagedPolicyArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Path": &Reference{
	type_: String,
},
				"Policies": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IAM::Group_Policy",
},
},
		},
	},
	"AWS::IAM::InstanceProfile": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"InstanceProfileName": &Reference{
	type_: String,
},
				"Path": &Reference{
	type_: String,
},
				"Roles": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::IAM::ManagedPolicy": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Groups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Id": &Reference{
	type_: String,
},
				"ManagedPolicyName": &Reference{
	type_: String,
},
				"Path": &Reference{
	type_: String,
},
				"PolicyDocument": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Roles": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Users": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::IAM::OIDCProvider": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"ClientIdList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IAM::OIDCProvider_Tag",
},
},
				"ThumbprintList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Url": &Reference{
	type_: String,
},
		},
	},
	"AWS::IAM::Policy": {
		Properties: map[string]*Reference{
				"Groups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Id": &Reference{
	type_: String,
},
				"PolicyDocument": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"PolicyName": &Reference{
	type_: String,
},
				"Roles": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Users": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::IAM::Role": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AssumeRolePolicyDocument": &Reference{
	type_: Unknown,
},
				"Description": &Reference{
	type_: String,
},
				"ManagedPolicyArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"MaxSessionDuration": &Reference{
	type_: Integer,
},
				"Path": &Reference{
	type_: String,
},
				"PermissionsBoundary": &Reference{
	type_: String,
},
				"Policies": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IAM::Role_Policy",
},
},
				"RoleId": &Reference{
	type_: String,
},
				"RoleName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IAM::Role_Tag",
},
},
		},
	},
	"AWS::IAM::SAMLProvider": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"SamlMetadataDocument": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IAM::SAMLProvider_Tag",
},
},
		},
	},
	"AWS::IAM::ServerCertificate": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CertificateBody": &Reference{
	type_: String,
},
				"CertificateChain": &Reference{
	type_: String,
},
				"Path": &Reference{
	type_: String,
},
				"PrivateKey": &Reference{
	type_: String,
},
				"ServerCertificateName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IAM::ServerCertificate_Tag",
},
},
		},
	},
	"AWS::IAM::ServiceLinkedRole": {
		Properties: map[string]*Reference{
				"AWSServiceName": &Reference{
	type_: String,
},
				"CustomSuffix": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::IAM::User": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Groups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Id": &Reference{
	type_: String,
},
				"LoginProfile": &Reference{
	ref: "AWS::IAM::User_LoginProfile",
},
				"ManagedPolicyArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Path": &Reference{
	type_: String,
},
				"PermissionsBoundary": &Reference{
	type_: String,
},
				"Policies": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IAM::User_Policy",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IAM::User_Tag",
},
},
				"UserName": &Reference{
	type_: String,
},
		},
	},
	"AWS::IAM::UserToGroupAddition": {
		Properties: map[string]*Reference{
				"GroupName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Users": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::IAM::VirtualMFADevice": {
		Properties: map[string]*Reference{
				"Path": &Reference{
	type_: String,
},
				"SerialNumber": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IAM::VirtualMFADevice_Tag",
},
},
				"Users": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"VirtualMfaDeviceName": &Reference{
	type_: String,
},
		},
	},
	"AWS::ImageBuilder::Component": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"ChangeDescription": &Reference{
	type_: String,
},
				"Data": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Encrypted": &Reference{
	type_: Boolean,
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Platform": &Reference{
	type_: String,
},
				"SupportedOsVersions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Type": &Reference{
	type_: String,
},
				"Uri": &Reference{
	type_: String,
},
				"Version": &Reference{
	type_: String,
},
		},
	},
	"AWS::ImageBuilder::ContainerRecipe": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Components": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ImageBuilder::ContainerRecipe_ComponentConfiguration",
},
},
				"ContainerType": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"DockerfileTemplateData": &Reference{
	type_: String,
},
				"DockerfileTemplateUri": &Reference{
	type_: String,
},
				"ImageOsVersionOverride": &Reference{
	type_: String,
},
				"InstanceConfiguration": &Reference{
	ref: "AWS::ImageBuilder::ContainerRecipe_InstanceConfiguration",
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"ParentImage": &Reference{
	type_: String,
},
				"PlatformOverride": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"TargetRepository": &Reference{
	ref: "AWS::ImageBuilder::ContainerRecipe_TargetContainerRepository",
},
				"Version": &Reference{
	type_: String,
},
				"WorkingDirectory": &Reference{
	type_: String,
},
		},
	},
	"AWS::ImageBuilder::DistributionConfiguration": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Distributions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ImageBuilder::DistributionConfiguration_Distribution",
},
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::ImageBuilder::Image": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"ContainerRecipeArn": &Reference{
	type_: String,
},
				"DistributionConfigurationArn": &Reference{
	type_: String,
},
				"EnhancedImageMetadataEnabled": &Reference{
	type_: Boolean,
},
				"ImageId": &Reference{
	type_: String,
},
				"ImageRecipeArn": &Reference{
	type_: String,
},
				"ImageTestsConfiguration": &Reference{
	ref: "AWS::ImageBuilder::Image_ImageTestsConfiguration",
},
				"ImageUri": &Reference{
	type_: String,
},
				"InfrastructureConfigurationArn": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::ImageBuilder::ImagePipeline": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"ContainerRecipeArn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"DistributionConfigurationArn": &Reference{
	type_: String,
},
				"EnhancedImageMetadataEnabled": &Reference{
	type_: Boolean,
},
				"ImageRecipeArn": &Reference{
	type_: String,
},
				"ImageTestsConfiguration": &Reference{
	ref: "AWS::ImageBuilder::ImagePipeline_ImageTestsConfiguration",
},
				"InfrastructureConfigurationArn": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Schedule": &Reference{
	ref: "AWS::ImageBuilder::ImagePipeline_Schedule",
},
				"Status": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::ImageBuilder::ImageRecipe": {
		Properties: map[string]*Reference{
				"AdditionalInstanceConfiguration": &Reference{
	ref: "AWS::ImageBuilder::ImageRecipe_AdditionalInstanceConfiguration",
},
				"Arn": &Reference{
	type_: String,
},
				"BlockDeviceMappings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ImageBuilder::ImageRecipe_InstanceBlockDeviceMapping",
},
},
				"Components": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ImageBuilder::ImageRecipe_ComponentConfiguration",
},
},
				"Description": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"ParentImage": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Version": &Reference{
	type_: String,
},
				"WorkingDirectory": &Reference{
	type_: String,
},
		},
	},
	"AWS::ImageBuilder::InfrastructureConfiguration": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"InstanceMetadataOptions": &Reference{
	ref: "AWS::ImageBuilder::InfrastructureConfiguration_InstanceMetadataOptions",
},
				"InstanceProfileName": &Reference{
	type_: String,
},
				"InstanceTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"KeyPair": &Reference{
	type_: String,
},
				"Logging": &Reference{
	ref: "AWS::ImageBuilder::InfrastructureConfiguration_Logging",
},
				"Name": &Reference{
	type_: String,
},
				"ResourceTags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SnsTopicArn": &Reference{
	type_: String,
},
				"SubnetId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"TerminateInstanceOnFailure": &Reference{
	type_: Boolean,
},
		},
	},
	"AWS::Inspector::AssessmentTarget": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AssessmentTargetName": &Reference{
	type_: String,
},
				"ResourceGroupArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::Inspector::AssessmentTemplate": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AssessmentTargetArn": &Reference{
	type_: String,
},
				"AssessmentTemplateName": &Reference{
	type_: String,
},
				"DurationInSeconds": &Reference{
	type_: Integer,
},
				"RulesPackageArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"UserAttributesForFindings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Inspector::AssessmentTemplate_Tag",
},
},
		},
	},
	"AWS::Inspector::ResourceGroup": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"ResourceGroupTags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Inspector::ResourceGroup_Tag",
},
},
		},
	},
	"AWS::InspectorV2::Filter": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"FilterAction": &Reference{
	ref: "AWS::InspectorV2::Filter_FilterAction",
},
				"FilterCriteria": &Reference{
	ref: "AWS::InspectorV2::Filter_FilterCriteria",
},
				"Name": &Reference{
	type_: String,
},
		},
	},
	"AWS::IoT1Click::Device": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"DeviceId": &Reference{
	type_: String,
},
				"Enabled": &Reference{
	type_: Boolean,
},
		},
	},
	"AWS::IoT1Click::Placement": {
		Properties: map[string]*Reference{
				"AssociatedDevices": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Attributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Id": &Reference{
	type_: String,
},
				"PlacementName": &Reference{
	type_: String,
},
				"ProjectName": &Reference{
	type_: String,
},
		},
	},
	"AWS::IoT1Click::Project": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"PlacementTemplate": &Reference{
	ref: "AWS::IoT1Click::Project_PlacementTemplate",
},
				"ProjectName": &Reference{
	type_: String,
},
		},
	},
	"AWS::IoT::AccountAuditConfiguration": {
		Properties: map[string]*Reference{
				"AccountId": &Reference{
	type_: String,
},
				"AuditCheckConfigurations": &Reference{
	ref: "AWS::IoT::AccountAuditConfiguration_AuditCheckConfigurations",
},
				"AuditNotificationTargetConfigurations": &Reference{
	ref: "AWS::IoT::AccountAuditConfiguration_AuditNotificationTargetConfigurations",
},
				"RoleArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::IoT::Authorizer": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AuthorizerFunctionArn": &Reference{
	type_: String,
},
				"AuthorizerName": &Reference{
	type_: String,
},
				"EnableCachingForHttp": &Reference{
	type_: Boolean,
},
				"SigningDisabled": &Reference{
	type_: Boolean,
},
				"Status": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::Authorizer_Tag",
},
},
				"TokenKeyName": &Reference{
	type_: String,
},
				"TokenSigningPublicKeys": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::IoT::CACertificate": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AutoRegistrationStatus": &Reference{
	type_: String,
},
				"CACertificatePem": &Reference{
	type_: String,
},
				"CertificateMode": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"RegistrationConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RoleArn": &Reference{
	type_: String,
},
			"TemplateBody": &Reference{
	type_: String,
},
	},
},
				"Status": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::CACertificate_Tag",
},
},
				"VerificationCertificatePem": &Reference{
	type_: String,
},
		},
	},
	"AWS::IoT::Certificate": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CACertificatePem": &Reference{
	type_: String,
},
				"CertificateMode": &Reference{
	type_: String,
},
				"CertificatePem": &Reference{
	type_: String,
},
				"CertificateSigningRequest": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
		},
	},
	"AWS::IoT::CustomMetric": {
		Properties: map[string]*Reference{
				"DisplayName": &Reference{
	type_: String,
},
				"MetricArn": &Reference{
	type_: String,
},
				"MetricName": &Reference{
	type_: String,
},
				"MetricType": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::CustomMetric_Tag",
},
},
		},
	},
	"AWS::IoT::Dimension": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"StringValues": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::Dimension_Tag",
},
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::IoT::DomainConfiguration": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AuthorizerConfig": &Reference{
	ref: "AWS::IoT::DomainConfiguration_AuthorizerConfig",
},
				"DomainConfigurationName": &Reference{
	type_: String,
},
				"DomainConfigurationStatus": &Reference{
	type_: String,
},
				"DomainName": &Reference{
	type_: String,
},
				"DomainType": &Reference{
	type_: String,
},
				"ServerCertificateArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"ServerCertificates": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::DomainConfiguration_ServerCertificateSummary",
},
},
				"ServiceType": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::DomainConfiguration_Tag",
},
},
				"ValidationCertificateArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::IoT::FleetMetric": {
		Properties: map[string]*Reference{
				"AggregationField": &Reference{
	type_: String,
},
				"AggregationType": &Reference{
	ref: "AWS::IoT::FleetMetric_AggregationType",
},
				"CreationDate": &Reference{
	type_: Number,
},
				"Description": &Reference{
	type_: String,
},
				"IndexName": &Reference{
	type_: String,
},
				"LastModifiedDate": &Reference{
	type_: Number,
},
				"MetricArn": &Reference{
	type_: String,
},
				"MetricName": &Reference{
	type_: String,
},
				"Period": &Reference{
	type_: Integer,
},
				"QueryString": &Reference{
	type_: String,
},
				"QueryVersion": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::FleetMetric_Tag",
},
},
				"Unit": &Reference{
	type_: String,
},
				"Version": &Reference{
	type_: Number,
},
		},
	},
	"AWS::IoT::JobTemplate": {
		Properties: map[string]*Reference{
				"AbortConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CriteriaList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::JobTemplate_AbortCriteria",
},
},
	},
},
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Document": &Reference{
	type_: String,
},
				"DocumentSource": &Reference{
	type_: String,
},
				"JobArn": &Reference{
	type_: String,
},
				"JobExecutionsRetryConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RetryCriteriaList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::JobTemplate_RetryCriteria",
},
},
	},
},
				"JobExecutionsRolloutConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExponentialRolloutRate": &Reference{
	ref: "AWS::IoT::JobTemplate_ExponentialRolloutRate",
},
			"MaximumPerMinute": &Reference{
	ref: "AWS::IoT::JobTemplate_MaximumPerMinute",
},
	},
},
				"JobTemplateId": &Reference{
	type_: String,
},
				"PresignedUrlConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExpiresInSec": &Reference{
	ref: "AWS::IoT::JobTemplate_ExpiresInSec",
},
			"RoleArn": &Reference{
	ref: "AWS::IoT::JobTemplate_RoleArn",
},
	},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::JobTemplate_Tag",
},
},
				"TimeoutConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InProgressTimeoutInMinutes": &Reference{
	ref: "AWS::IoT::JobTemplate_InProgressTimeoutInMinutes",
},
	},
},
		},
	},
	"AWS::IoT::Logging": {
		Properties: map[string]*Reference{
				"AccountId": &Reference{
	type_: String,
},
				"DefaultLogLevel": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::IoT::MitigationAction": {
		Properties: map[string]*Reference{
				"ActionName": &Reference{
	type_: String,
},
				"ActionParams": &Reference{
	ref: "AWS::IoT::MitigationAction_ActionParams",
},
				"MitigationActionArn": &Reference{
	type_: String,
},
				"MitigationActionId": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::MitigationAction_Tag",
},
},
		},
	},
	"AWS::IoT::Policy": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"PolicyDocument": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"PolicyName": &Reference{
	type_: String,
},
		},
	},
	"AWS::IoT::PolicyPrincipalAttachment": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"PolicyName": &Reference{
	type_: String,
},
				"Principal": &Reference{
	type_: String,
},
		},
	},
	"AWS::IoT::ProvisioningTemplate": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Enabled": &Reference{
	type_: Boolean,
},
				"PreProvisioningHook": &Reference{
	ref: "AWS::IoT::ProvisioningTemplate_ProvisioningHook",
},
				"ProvisioningRoleArn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::ProvisioningTemplate_Tag",
},
},
				"TemplateArn": &Reference{
	type_: String,
},
				"TemplateBody": &Reference{
	type_: String,
},
				"TemplateName": &Reference{
	type_: String,
},
		},
	},
	"AWS::IoT::ResourceSpecificLogging": {
		Properties: map[string]*Reference{
				"LogLevel": &Reference{
	type_: String,
},
				"TargetId": &Reference{
	type_: String,
},
				"TargetName": &Reference{
	type_: String,
},
				"TargetType": &Reference{
	type_: String,
},
		},
	},
	"AWS::IoT::RoleAlias": {
		Properties: map[string]*Reference{
				"CredentialDurationSeconds": &Reference{
	type_: Integer,
},
				"RoleAlias": &Reference{
	type_: String,
},
				"RoleAliasArn": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::RoleAlias_Tag",
},
},
		},
	},
	"AWS::IoT::ScheduledAudit": {
		Properties: map[string]*Reference{
				"DayOfMonth": &Reference{
	type_: String,
},
				"DayOfWeek": &Reference{
	type_: String,
},
				"Frequency": &Reference{
	type_: String,
},
				"ScheduledAuditArn": &Reference{
	type_: String,
},
				"ScheduledAuditName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::ScheduledAudit_Tag",
},
},
				"TargetCheckNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::IoT::SecurityProfile": {
		Properties: map[string]*Reference{
				"AdditionalMetricsToRetainV2": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::SecurityProfile_MetricToRetain",
},
},
				"AlertTargets": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Behaviors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::SecurityProfile_Behavior",
},
},
				"SecurityProfileArn": &Reference{
	type_: String,
},
				"SecurityProfileDescription": &Reference{
	type_: String,
},
				"SecurityProfileName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::SecurityProfile_Tag",
},
},
				"TargetArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::IoT::Thing": {
		Properties: map[string]*Reference{
				"AttributePayload": &Reference{
	ref: "AWS::IoT::Thing_AttributePayload",
},
				"Id": &Reference{
	type_: String,
},
				"ThingName": &Reference{
	type_: String,
},
		},
	},
	"AWS::IoT::ThingPrincipalAttachment": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Principal": &Reference{
	type_: String,
},
				"ThingName": &Reference{
	type_: String,
},
		},
	},
	"AWS::IoT::TopicRule": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"RuleName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::TopicRule_Tag",
},
},
				"TopicRulePayload": &Reference{
	ref: "AWS::IoT::TopicRule_TopicRulePayload",
},
		},
	},
	"AWS::IoT::TopicRuleDestination": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"HttpUrlProperties": &Reference{
	ref: "AWS::IoT::TopicRuleDestination_HttpUrlDestinationSummary",
},
				"Status": &Reference{
	ref: "AWS::IoT::TopicRuleDestination_TopicRuleDestinationStatus",
},
				"StatusReason": &Reference{
	type_: String,
},
				"VpcProperties": &Reference{
	ref: "AWS::IoT::TopicRuleDestination_VpcDestinationProperties",
},
		},
	},
	"AWS::IoTAnalytics::Channel": {
		Properties: map[string]*Reference{
				"ChannelName": &Reference{
	type_: String,
},
				"ChannelStorage": &Reference{
	ref: "AWS::IoTAnalytics::Channel_ChannelStorage",
},
				"Id": &Reference{
	type_: String,
},
				"RetentionPeriod": &Reference{
	ref: "AWS::IoTAnalytics::Channel_RetentionPeriod",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTAnalytics::Channel_Tag",
},
},
		},
	},
	"AWS::IoTAnalytics::Dataset": {
		Properties: map[string]*Reference{
				"Actions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTAnalytics::Dataset_Action",
},
},
				"ContentDeliveryRules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTAnalytics::Dataset_DatasetContentDeliveryRule",
},
},
				"DatasetName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"LateDataRules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTAnalytics::Dataset_LateDataRule",
},
},
				"RetentionPeriod": &Reference{
	ref: "AWS::IoTAnalytics::Dataset_RetentionPeriod",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTAnalytics::Dataset_Tag",
},
},
				"Triggers": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTAnalytics::Dataset_Trigger",
},
},
				"VersioningConfiguration": &Reference{
	ref: "AWS::IoTAnalytics::Dataset_VersioningConfiguration",
},
		},
	},
	"AWS::IoTAnalytics::Datastore": {
		Properties: map[string]*Reference{
				"DatastoreName": &Reference{
	type_: String,
},
				"DatastorePartitions": &Reference{
	ref: "AWS::IoTAnalytics::Datastore_DatastorePartitions",
},
				"DatastoreStorage": &Reference{
	ref: "AWS::IoTAnalytics::Datastore_DatastoreStorage",
},
				"FileFormatConfiguration": &Reference{
	ref: "AWS::IoTAnalytics::Datastore_FileFormatConfiguration",
},
				"Id": &Reference{
	type_: String,
},
				"RetentionPeriod": &Reference{
	ref: "AWS::IoTAnalytics::Datastore_RetentionPeriod",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTAnalytics::Datastore_Tag",
},
},
		},
	},
	"AWS::IoTAnalytics::Pipeline": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"PipelineActivities": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTAnalytics::Pipeline_Activity",
},
},
				"PipelineName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTAnalytics::Pipeline_Tag",
},
},
		},
	},
	"AWS::IoTEvents::AlarmModel": {
		Properties: map[string]*Reference{
				"AlarmCapabilities": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_AlarmCapabilities",
},
				"AlarmEventActions": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_AlarmEventActions",
},
				"AlarmModelDescription": &Reference{
	type_: String,
},
				"AlarmModelName": &Reference{
	type_: String,
},
				"AlarmRule": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_AlarmRule",
},
				"Key": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
				"Severity": &Reference{
	type_: Integer,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTEvents::AlarmModel_Tag",
},
},
		},
	},
	"AWS::IoTEvents::DetectorModel": {
		Properties: map[string]*Reference{
				"DetectorModelDefinition": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_DetectorModelDefinition",
},
				"DetectorModelDescription": &Reference{
	type_: String,
},
				"DetectorModelName": &Reference{
	type_: String,
},
				"EvaluationMethod": &Reference{
	type_: String,
},
				"Key": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTEvents::DetectorModel_Tag",
},
},
		},
	},
	"AWS::IoTEvents::Input": {
		Properties: map[string]*Reference{
				"InputDefinition": &Reference{
	ref: "AWS::IoTEvents::Input_InputDefinition",
},
				"InputDescription": &Reference{
	type_: String,
},
				"InputName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTEvents::Input_Tag",
},
},
		},
	},
	"AWS::IoTFleetHub::Application": {
		Properties: map[string]*Reference{
				"ApplicationArn": &Reference{
	type_: String,
},
				"ApplicationCreationDate": &Reference{
	type_: Integer,
},
				"ApplicationDescription": &Reference{
	type_: String,
},
				"ApplicationId": &Reference{
	type_: String,
},
				"ApplicationLastUpdateDate": &Reference{
	type_: Integer,
},
				"ApplicationName": &Reference{
	type_: String,
},
				"ApplicationState": &Reference{
	type_: String,
},
				"ApplicationUrl": &Reference{
	type_: String,
},
				"ErrorMessage": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
				"SsoClientId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTFleetHub::Application_Tag",
},
},
		},
	},
	"AWS::IoTSiteWise::AccessPolicy": {
		Properties: map[string]*Reference{
				"AccessPolicyArn": &Reference{
	type_: String,
},
				"AccessPolicyId": &Reference{
	type_: String,
},
				"AccessPolicyIdentity": &Reference{
	ref: "AWS::IoTSiteWise::AccessPolicy_AccessPolicyIdentity",
},
				"AccessPolicyPermission": &Reference{
	type_: String,
},
				"AccessPolicyResource": &Reference{
	ref: "AWS::IoTSiteWise::AccessPolicy_AccessPolicyResource",
},
		},
	},
	"AWS::IoTSiteWise::Asset": {
		Properties: map[string]*Reference{
				"AssetArn": &Reference{
	type_: String,
},
				"AssetDescription": &Reference{
	type_: String,
},
				"AssetHierarchies": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTSiteWise::Asset_AssetHierarchy",
},
},
				"AssetId": &Reference{
	type_: String,
},
				"AssetModelId": &Reference{
	type_: String,
},
				"AssetName": &Reference{
	type_: String,
},
				"AssetProperties": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTSiteWise::Asset_AssetProperty",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTSiteWise::Asset_Tag",
},
},
		},
	},
	"AWS::IoTSiteWise::AssetModel": {
		Properties: map[string]*Reference{
				"AssetModelArn": &Reference{
	type_: String,
},
				"AssetModelCompositeModels": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTSiteWise::AssetModel_AssetModelCompositeModel",
},
},
				"AssetModelDescription": &Reference{
	type_: String,
},
				"AssetModelHierarchies": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTSiteWise::AssetModel_AssetModelHierarchy",
},
},
				"AssetModelId": &Reference{
	type_: String,
},
				"AssetModelName": &Reference{
	type_: String,
},
				"AssetModelProperties": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTSiteWise::AssetModel_AssetModelProperty",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTSiteWise::AssetModel_Tag",
},
},
		},
	},
	"AWS::IoTSiteWise::Dashboard": {
		Properties: map[string]*Reference{
				"DashboardArn": &Reference{
	type_: String,
},
				"DashboardDefinition": &Reference{
	type_: String,
},
				"DashboardDescription": &Reference{
	type_: String,
},
				"DashboardId": &Reference{
	type_: String,
},
				"DashboardName": &Reference{
	type_: String,
},
				"ProjectId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTSiteWise::Dashboard_Tag",
},
},
		},
	},
	"AWS::IoTSiteWise::Gateway": {
		Properties: map[string]*Reference{
				"GatewayCapabilitySummaries": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTSiteWise::Gateway_GatewayCapabilitySummary",
},
},
				"GatewayId": &Reference{
	type_: String,
},
				"GatewayName": &Reference{
	type_: String,
},
				"GatewayPlatform": &Reference{
	ref: "AWS::IoTSiteWise::Gateway_GatewayPlatform",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTSiteWise::Gateway_Tag",
},
},
		},
	},
	"AWS::IoTSiteWise::Portal": {
		Properties: map[string]*Reference{
				"Alarms": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AlarmRoleArn": &Reference{
	type_: String,
},
			"NotificationLambdaArn": &Reference{
	type_: String,
},
	},
},
				"NotificationSenderEmail": &Reference{
	type_: String,
},
				"PortalArn": &Reference{
	type_: String,
},
				"PortalAuthMode": &Reference{
	type_: String,
},
				"PortalClientId": &Reference{
	type_: String,
},
				"PortalContactEmail": &Reference{
	type_: String,
},
				"PortalDescription": &Reference{
	type_: String,
},
				"PortalId": &Reference{
	type_: String,
},
				"PortalName": &Reference{
	type_: String,
},
				"PortalStartUrl": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTSiteWise::Portal_Tag",
},
},
		},
	},
	"AWS::IoTSiteWise::Project": {
		Properties: map[string]*Reference{
				"AssetIds": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTSiteWise::Project_AssetId",
},
},
				"PortalId": &Reference{
	type_: String,
},
				"ProjectArn": &Reference{
	type_: String,
},
				"ProjectDescription": &Reference{
	type_: String,
},
				"ProjectId": &Reference{
	type_: String,
},
				"ProjectName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTSiteWise::Project_Tag",
},
},
		},
	},
	"AWS::KMS::Alias": {
		Properties: map[string]*Reference{
				"AliasName": &Reference{
	type_: String,
},
				"TargetKeyId": &Reference{
	type_: String,
},
		},
	},
	"AWS::KMS::Key": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"EnableKeyRotation": &Reference{
	type_: Boolean,
},
				"Enabled": &Reference{
	type_: Boolean,
},
				"KeyId": &Reference{
	type_: String,
},
				"KeyPolicy": &Reference{
	type_: Unknown,
},
				"KeySpec": &Reference{
	type_: String,
},
				"KeyUsage": &Reference{
	type_: String,
},
				"MultiRegion": &Reference{
	type_: Boolean,
},
				"PendingWindowInDays": &Reference{
	type_: Integer,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::KMS::Key_Tag",
},
},
		},
	},
	"AWS::KMS::ReplicaKey": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Enabled": &Reference{
	type_: Boolean,
},
				"KeyId": &Reference{
	type_: String,
},
				"KeyPolicy": &Reference{
	type_: Unknown,
},
				"PendingWindowInDays": &Reference{
	type_: Integer,
},
				"PrimaryKeyArn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::KMS::ReplicaKey_Tag",
},
},
		},
	},
	"AWS::KafkaConnect::Connector": {
		Properties: map[string]*Reference{
				"Capacity": &Reference{
	ref: "AWS::KafkaConnect::Connector_Capacity",
},
				"ConnectorArn": &Reference{
	type_: String,
},
				"ConnectorConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"ConnectorDescription": &Reference{
	type_: String,
},
				"ConnectorName": &Reference{
	type_: String,
},
				"KafkaCluster": &Reference{
	ref: "AWS::KafkaConnect::Connector_KafkaCluster",
},
				"KafkaClusterClientAuthentication": &Reference{
	ref: "AWS::KafkaConnect::Connector_KafkaClusterClientAuthentication",
},
				"KafkaClusterEncryptionInTransit": &Reference{
	ref: "AWS::KafkaConnect::Connector_KafkaClusterEncryptionInTransit",
},
				"KafkaConnectVersion": &Reference{
	type_: String,
},
				"LogDelivery": &Reference{
	ref: "AWS::KafkaConnect::Connector_LogDelivery",
},
				"Plugins": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::KafkaConnect::Connector_Plugin",
},
},
				"ServiceExecutionRoleArn": &Reference{
	type_: String,
},
				"WorkerConfiguration": &Reference{
	ref: "AWS::KafkaConnect::Connector_WorkerConfiguration",
},
		},
	},
	"AWS::Kendra::DataSource": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::Kendra::DataSource_Arn",
},
				"CustomDocumentEnrichmentConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_CustomDocumentEnrichmentConfiguration",
},
				"DataSourceConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceConfiguration",
},
				"Description": &Reference{
	ref: "AWS::Kendra::DataSource_Description",
},
				"Id": &Reference{
	ref: "AWS::Kendra::DataSource_Id",
},
				"IndexId": &Reference{
	ref: "AWS::Kendra::DataSource_IndexId",
},
				"Name": &Reference{
	ref: "AWS::Kendra::DataSource_Name",
},
				"RoleArn": &Reference{
	ref: "AWS::Kendra::DataSource_RoleArn",
},
				"Schedule": &Reference{
	ref: "AWS::Kendra::DataSource_Schedule",
},
				"Tags": &Reference{
	ref: "AWS::Kendra::DataSource_TagList",
},
				"Type": &Reference{
	ref: "AWS::Kendra::DataSource_Type",
},
		},
	},
	"AWS::Kendra::Faq": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	ref: "AWS::Kendra::Faq_Description",
},
				"FileFormat": &Reference{
	ref: "AWS::Kendra::Faq_FileFormat",
},
				"Id": &Reference{
	ref: "AWS::Kendra::Faq_Id",
},
				"IndexId": &Reference{
	ref: "AWS::Kendra::Faq_IndexId",
},
				"Name": &Reference{
	ref: "AWS::Kendra::Faq_FaqName",
},
				"RoleArn": &Reference{
	ref: "AWS::Kendra::Faq_RoleArn",
},
				"S3Path": &Reference{
	ref: "AWS::Kendra::Faq_S3Path",
},
				"Tags": &Reference{
	ref: "AWS::Kendra::Faq_TagList",
},
		},
	},
	"AWS::Kendra::Index": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::Kendra::Index_Arn",
},
				"CapacityUnits": &Reference{
	ref: "AWS::Kendra::Index_CapacityUnitsConfiguration",
},
				"Description": &Reference{
	ref: "AWS::Kendra::Index_Description",
},
				"DocumentMetadataConfigurations": &Reference{
	ref: "AWS::Kendra::Index_DocumentMetadataConfigurationList",
},
				"Edition": &Reference{
	ref: "AWS::Kendra::Index_Edition",
},
				"Id": &Reference{
	ref: "AWS::Kendra::Index_Id",
},
				"Name": &Reference{
	ref: "AWS::Kendra::Index_Name",
},
				"RoleArn": &Reference{
	ref: "AWS::Kendra::Index_RoleArn",
},
				"ServerSideEncryptionConfiguration": &Reference{
	ref: "AWS::Kendra::Index_ServerSideEncryptionConfiguration",
},
				"Tags": &Reference{
	ref: "AWS::Kendra::Index_TagList",
},
				"UserContextPolicy": &Reference{
	ref: "AWS::Kendra::Index_UserContextPolicy",
},
				"UserTokenConfigurations": &Reference{
	ref: "AWS::Kendra::Index_UserTokenConfigurationList",
},
		},
	},
	"AWS::Kinesis::Stream": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RetentionPeriodHours": &Reference{
	type_: Integer,
},
				"ShardCount": &Reference{
	type_: Integer,
},
				"StreamEncryption": &Reference{
	ref: "AWS::Kinesis::Stream_StreamEncryption",
},
				"StreamModeDetails": &Reference{
	ref: "AWS::Kinesis::Stream_StreamModeDetails",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kinesis::Stream_Tag",
},
},
		},
	},
	"AWS::Kinesis::StreamConsumer": {
		Properties: map[string]*Reference{
				"ConsumerARN": &Reference{
	type_: String,
},
				"ConsumerCreationTimestamp": &Reference{
	type_: String,
},
				"ConsumerName": &Reference{
	type_: String,
},
				"ConsumerStatus": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"StreamARN": &Reference{
	type_: String,
},
		},
	},
	"AWS::KinesisAnalytics::Application": {
		Properties: map[string]*Reference{
				"ApplicationCode": &Reference{
	type_: String,
},
				"ApplicationDescription": &Reference{
	type_: String,
},
				"ApplicationName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Inputs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::KinesisAnalytics::Application_Input",
},
},
		},
	},
	"AWS::KinesisAnalytics::ApplicationOutput": {
		Properties: map[string]*Reference{
				"ApplicationName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Output": &Reference{
	ref: "AWS::KinesisAnalytics::ApplicationOutput_Output",
},
		},
	},
	"AWS::KinesisAnalytics::ApplicationReferenceDataSource": {
		Properties: map[string]*Reference{
				"ApplicationName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"ReferenceDataSource": &Reference{
	ref: "AWS::KinesisAnalytics::ApplicationReferenceDataSource_ReferenceDataSource",
},
		},
	},
	"AWS::KinesisAnalyticsV2::Application": {
		Properties: map[string]*Reference{
				"ApplicationConfiguration": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_ApplicationConfiguration",
},
				"ApplicationDescription": &Reference{
	type_: String,
},
				"ApplicationMaintenanceConfiguration": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_ApplicationMaintenanceConfiguration",
},
				"ApplicationMode": &Reference{
	type_: String,
},
				"ApplicationName": &Reference{
	type_: String,
},
				"RunConfiguration": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_RunConfiguration",
},
				"RuntimeEnvironment": &Reference{
	type_: String,
},
				"ServiceExecutionRole": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_Arn",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_Tag",
},
},
		},
	},
	"AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption": {
		Properties: map[string]*Reference{
				"ApplicationName": &Reference{
	type_: String,
},
				"CloudWatchLoggingOption": &Reference{
	ref: "AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption_CloudWatchLoggingOption",
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::KinesisAnalyticsV2::ApplicationOutput": {
		Properties: map[string]*Reference{
				"ApplicationName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Output": &Reference{
	ref: "AWS::KinesisAnalyticsV2::ApplicationOutput_Output",
},
		},
	},
	"AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource": {
		Properties: map[string]*Reference{
				"ApplicationName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"ReferenceDataSource": &Reference{
	ref: "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource_ReferenceDataSource",
},
		},
	},
	"AWS::KinesisFirehose::DeliveryStream": {
		Properties: map[string]*Reference{
				"AmazonopensearchserviceDestinationConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_AmazonopensearchserviceDestinationConfiguration",
},
				"Arn": &Reference{
	type_: String,
},
				"DeliveryStreamEncryptionConfigurationInput": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_DeliveryStreamEncryptionConfigurationInput",
},
				"DeliveryStreamName": &Reference{
	type_: String,
},
				"DeliveryStreamType": &Reference{
	type_: String,
},
				"ElasticsearchDestinationConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_ElasticsearchDestinationConfiguration",
},
				"ExtendedS3DestinationConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_ExtendedS3DestinationConfiguration",
},
				"HttpEndpointDestinationConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_HttpEndpointDestinationConfiguration",
},
				"KinesisStreamSourceConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_KinesisStreamSourceConfiguration",
},
				"RedshiftDestinationConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_RedshiftDestinationConfiguration",
},
				"S3DestinationConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_S3DestinationConfiguration",
},
				"SplunkDestinationConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_SplunkDestinationConfiguration",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_Tag",
},
},
		},
	},
	"AWS::KinesisVideo::SignalingChannel": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"MessageTtlSeconds": &Reference{
	type_: Integer,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::KinesisVideo::SignalingChannel_Tag",
},
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::KinesisVideo::Stream": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"DataRetentionInHours": &Reference{
	type_: Integer,
},
				"DeviceName": &Reference{
	type_: String,
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"MediaType": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::KinesisVideo::Stream_Tag",
},
},
		},
	},
	"AWS::LakeFormation::DataCellsFilter": {
		Properties: map[string]*Reference{
				"ColumnNames": &Reference{
	ref: "AWS::LakeFormation::DataCellsFilter_ColumnNames",
},
				"ColumnWildcard": &Reference{
	ref: "AWS::LakeFormation::DataCellsFilter_ColumnWildcard",
},
				"DatabaseName": &Reference{
	ref: "AWS::LakeFormation::DataCellsFilter_NameString",
},
				"Name": &Reference{
	ref: "AWS::LakeFormation::DataCellsFilter_NameString",
},
				"RowFilter": &Reference{
	ref: "AWS::LakeFormation::DataCellsFilter_RowFilter",
},
				"TableCatalogId": &Reference{
	ref: "AWS::LakeFormation::DataCellsFilter_CatalogIdString",
},
				"TableName": &Reference{
	ref: "AWS::LakeFormation::DataCellsFilter_NameString",
},
		},
	},
	"AWS::LakeFormation::DataLakeSettings": {
		Properties: map[string]*Reference{
				"Admins": &Reference{
	ref: "AWS::LakeFormation::DataLakeSettings_Admins",
},
				"Id": &Reference{
	type_: String,
},
				"TrustedResourceOwners": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::LakeFormation::Permissions": {
		Properties: map[string]*Reference{
				"DataLakePrincipal": &Reference{
	ref: "AWS::LakeFormation::Permissions_DataLakePrincipal",
},
				"Id": &Reference{
	type_: String,
},
				"Permissions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"PermissionsWithGrantOption": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Resource": &Reference{
	ref: "AWS::LakeFormation::Permissions_Resource",
},
		},
	},
	"AWS::LakeFormation::PrincipalPermissions": {
		Properties: map[string]*Reference{
				"Catalog": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_CatalogIdString",
},
				"Permissions": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_PermissionList",
},
				"PermissionsWithGrantOption": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_PermissionList",
},
				"Principal": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_DataLakePrincipal",
},
				"PrincipalIdentifier": &Reference{
	type_: String,
},
				"Resource": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_Resource",
},
				"ResourceIdentifier": &Reference{
	type_: String,
},
		},
	},
	"AWS::LakeFormation::Resource": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"ResourceArn": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
				"UseServiceLinkedRole": &Reference{
	type_: Boolean,
},
		},
	},
	"AWS::LakeFormation::Tag": {
		Properties: map[string]*Reference{
				"CatalogId": &Reference{
	ref: "AWS::LakeFormation::Tag_CatalogIdString",
},
				"TagKey": &Reference{
	ref: "AWS::LakeFormation::Tag_LFTagKey",
},
				"TagValues": &Reference{
	ref: "AWS::LakeFormation::Tag_TagValueList",
},
		},
	},
	"AWS::LakeFormation::TagAssociation": {
		Properties: map[string]*Reference{
				"LFTags": &Reference{
	ref: "AWS::LakeFormation::TagAssociation_LFTagsList",
},
				"Resource": &Reference{
	ref: "AWS::LakeFormation::TagAssociation_Resource",
},
				"ResourceIdentifier": &Reference{
	type_: String,
},
				"TagsIdentifier": &Reference{
	type_: String,
},
		},
	},
	"AWS::Lambda::Alias": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"FunctionName": &Reference{
	type_: String,
},
				"FunctionVersion": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"ProvisionedConcurrencyConfig": &Reference{
	ref: "AWS::Lambda::Alias_ProvisionedConcurrencyConfiguration",
},
				"RoutingConfig": &Reference{
	ref: "AWS::Lambda::Alias_AliasRoutingConfiguration",
},
		},
	},
	"AWS::Lambda::CodeSigningConfig": {
		Properties: map[string]*Reference{
				"AllowedPublishers": &Reference{
	ref: "AWS::Lambda::CodeSigningConfig_AllowedPublishers",
},
				"CodeSigningConfigArn": &Reference{
	type_: String,
},
				"CodeSigningConfigId": &Reference{
	type_: String,
},
				"CodeSigningPolicies": &Reference{
	ref: "AWS::Lambda::CodeSigningConfig_CodeSigningPolicies",
},
				"Description": &Reference{
	type_: String,
},
		},
	},
	"AWS::Lambda::EventInvokeConfig": {
		Properties: map[string]*Reference{
				"DestinationConfig": &Reference{
	ref: "AWS::Lambda::EventInvokeConfig_DestinationConfig",
},
				"FunctionName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"MaximumEventAgeInSeconds": &Reference{
	type_: Integer,
},
				"MaximumRetryAttempts": &Reference{
	type_: Integer,
},
				"Qualifier": &Reference{
	type_: String,
},
		},
	},
	"AWS::Lambda::EventSourceMapping": {
		Properties: map[string]*Reference{
				"BatchSize": &Reference{
	type_: Integer,
},
				"BisectBatchOnFunctionError": &Reference{
	type_: Boolean,
},
				"DestinationConfig": &Reference{
	ref: "AWS::Lambda::EventSourceMapping_DestinationConfig",
},
				"Enabled": &Reference{
	type_: Boolean,
},
				"EventSourceArn": &Reference{
	type_: String,
},
				"FilterCriteria": &Reference{
	ref: "AWS::Lambda::EventSourceMapping_FilterCriteria",
},
				"FunctionName": &Reference{
	type_: String,
},
				"FunctionResponseTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Id": &Reference{
	type_: String,
},
				"MaximumBatchingWindowInSeconds": &Reference{
	type_: Integer,
},
				"MaximumRecordAgeInSeconds": &Reference{
	type_: Integer,
},
				"MaximumRetryAttempts": &Reference{
	type_: Integer,
},
				"ParallelizationFactor": &Reference{
	type_: Integer,
},
				"Queues": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SelfManagedEventSource": &Reference{
	ref: "AWS::Lambda::EventSourceMapping_SelfManagedEventSource",
},
				"SourceAccessConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lambda::EventSourceMapping_SourceAccessConfiguration",
},
},
				"StartingPosition": &Reference{
	type_: String,
},
				"StartingPositionTimestamp": &Reference{
	type_: Number,
},
				"Topics": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"TumblingWindowInSeconds": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::Lambda::Function": {
		Properties: map[string]*Reference{
				"Architectures": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Arn": &Reference{
	type_: String,
},
				"Code": &Reference{
	ref: "AWS::Lambda::Function_Code",
},
				"CodeSigningConfigArn": &Reference{
	type_: String,
},
				"DeadLetterConfig": &Reference{
	ref: "AWS::Lambda::Function_DeadLetterConfig",
},
				"Description": &Reference{
	type_: String,
},
				"Environment": &Reference{
	ref: "AWS::Lambda::Function_Environment",
},
				"EphemeralStorage": &Reference{
	ref: "AWS::Lambda::Function_EphemeralStorage",
},
				"FileSystemConfigs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lambda::Function_FileSystemConfig",
},
},
				"FunctionName": &Reference{
	type_: String,
},
				"Handler": &Reference{
	type_: String,
},
				"ImageConfig": &Reference{
	ref: "AWS::Lambda::Function_ImageConfig",
},
				"KmsKeyArn": &Reference{
	type_: String,
},
				"Layers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"MemorySize": &Reference{
	type_: Integer,
},
				"PackageType": &Reference{
	type_: String,
},
				"ReservedConcurrentExecutions": &Reference{
	type_: Integer,
},
				"Role": &Reference{
	type_: String,
},
				"Runtime": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lambda::Function_Tag",
},
},
				"Timeout": &Reference{
	type_: Integer,
},
				"TracingConfig": &Reference{
	ref: "AWS::Lambda::Function_TracingConfig",
},
				"VpcConfig": &Reference{
	ref: "AWS::Lambda::Function_VpcConfig",
},
		},
	},
	"AWS::Lambda::LayerVersion": {
		Properties: map[string]*Reference{
				"CompatibleArchitectures": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"CompatibleRuntimes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Content": &Reference{
	ref: "AWS::Lambda::LayerVersion_Content",
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"LayerName": &Reference{
	type_: String,
},
				"LicenseInfo": &Reference{
	type_: String,
},
		},
	},
	"AWS::Lambda::LayerVersionPermission": {
		Properties: map[string]*Reference{
				"Action": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"LayerVersionArn": &Reference{
	type_: String,
},
				"OrganizationId": &Reference{
	type_: String,
},
				"Principal": &Reference{
	type_: String,
},
		},
	},
	"AWS::Lambda::Permission": {
		Properties: map[string]*Reference{
				"Action": &Reference{
	type_: String,
},
				"EventSourceToken": &Reference{
	type_: String,
},
				"FunctionName": &Reference{
	type_: String,
},
				"FunctionUrlAuthType": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Principal": &Reference{
	type_: String,
},
				"PrincipalOrgID": &Reference{
	type_: String,
},
				"SourceAccount": &Reference{
	type_: String,
},
				"SourceArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::Lambda::Url": {
		Properties: map[string]*Reference{
				"AuthType": &Reference{
	type_: String,
},
				"Cors": &Reference{
	ref: "AWS::Lambda::Url_Cors",
},
				"FunctionArn": &Reference{
	type_: String,
},
				"FunctionUrl": &Reference{
	type_: String,
},
				"InvokeMode": &Reference{
	type_: String,
},
				"Qualifier": &Reference{
	type_: String,
},
				"TargetFunctionArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::Lambda::Version": {
		Properties: map[string]*Reference{
				"CodeSha256": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"FunctionName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"ProvisionedConcurrencyConfig": &Reference{
	ref: "AWS::Lambda::Version_ProvisionedConcurrencyConfiguration",
},
				"Version": &Reference{
	type_: String,
},
		},
	},
	"AWS::LicenseManager::Grant": {
		Properties: map[string]*Reference{
				"AllowedOperations": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"GrantArn": &Reference{
	ref: "AWS::LicenseManager::Grant_Arn",
},
				"GrantName": &Reference{
	type_: String,
},
				"HomeRegion": &Reference{
	type_: String,
},
				"LicenseArn": &Reference{
	ref: "AWS::LicenseManager::Grant_Arn",
},
				"Principals": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::LicenseManager::Grant_Arn",
},
},
				"Status": &Reference{
	type_: String,
},
				"Version": &Reference{
	type_: String,
},
		},
	},
	"AWS::LicenseManager::License": {
		Properties: map[string]*Reference{
				"Beneficiary": &Reference{
	type_: String,
},
				"ConsumptionConfiguration": &Reference{
	ref: "AWS::LicenseManager::License_ConsumptionConfiguration",
},
				"Entitlements": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::LicenseManager::License_Entitlement",
},
},
				"HomeRegion": &Reference{
	type_: String,
},
				"Issuer": &Reference{
	ref: "AWS::LicenseManager::License_IssuerData",
},
				"LicenseArn": &Reference{
	ref: "AWS::LicenseManager::License_Arn",
},
				"LicenseMetadata": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::LicenseManager::License_Metadata",
},
},
				"LicenseName": &Reference{
	type_: String,
},
				"ProductName": &Reference{
	type_: String,
},
				"ProductSKU": &Reference{
	type_: String,
},
				"Status": &Reference{
	ref: "AWS::LicenseManager::License_LicenseStatus",
},
				"Validity": &Reference{
	ref: "AWS::LicenseManager::License_ValidityDateFormat",
},
				"Version": &Reference{
	type_: String,
},
		},
	},
	"AWS::Lightsail::Alarm": {
		Properties: map[string]*Reference{
				"AlarmArn": &Reference{
	type_: String,
},
				"AlarmName": &Reference{
	type_: String,
},
				"ComparisonOperator": &Reference{
	type_: String,
},
				"ContactProtocols": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"DatapointsToAlarm": &Reference{
	type_: Integer,
},
				"EvaluationPeriods": &Reference{
	type_: Integer,
},
				"MetricName": &Reference{
	type_: String,
},
				"MonitoredResourceName": &Reference{
	type_: String,
},
				"NotificationEnabled": &Reference{
	type_: Boolean,
},
				"NotificationTriggers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"State": &Reference{
	type_: String,
},
				"Threshold": &Reference{
	type_: Number,
},
				"TreatMissingData": &Reference{
	type_: String,
},
		},
	},
	"AWS::Lightsail::Bucket": {
		Properties: map[string]*Reference{
				"AbleToUpdateBundle": &Reference{
	type_: Boolean,
},
				"AccessRules": &Reference{
	ref: "AWS::Lightsail::Bucket_AccessRules",
},
				"BucketArn": &Reference{
	type_: String,
},
				"BucketName": &Reference{
	type_: String,
},
				"BundleId": &Reference{
	type_: String,
},
				"ObjectVersioning": &Reference{
	type_: Boolean,
},
				"ReadOnlyAccessAccounts": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"ResourcesReceivingAccess": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lightsail::Bucket_Tag",
},
},
				"Url": &Reference{
	type_: String,
},
		},
	},
	"AWS::Lightsail::Certificate": {
		Properties: map[string]*Reference{
				"CertificateArn": &Reference{
	type_: String,
},
				"CertificateName": &Reference{
	type_: String,
},
				"DomainName": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
				"SubjectAlternativeNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lightsail::Certificate_Tag",
},
},
		},
	},
	"AWS::Lightsail::Container": {
		Properties: map[string]*Reference{
				"ContainerArn": &Reference{
	type_: String,
},
				"ContainerServiceDeployment": &Reference{
	ref: "AWS::Lightsail::Container_ContainerServiceDeployment",
},
				"IsDisabled": &Reference{
	type_: Boolean,
},
				"Power": &Reference{
	type_: String,
},
				"PublicDomainNames": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lightsail::Container_PublicDomainName",
},
},
				"Scale": &Reference{
	type_: Integer,
},
				"ServiceName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lightsail::Container_Tag",
},
},
				"Url": &Reference{
	type_: String,
},
		},
	},
	"AWS::Lightsail::Database": {
		Properties: map[string]*Reference{
				"AvailabilityZone": &Reference{
	type_: String,
},
				"BackupRetention": &Reference{
	type_: Boolean,
},
				"CaCertificateIdentifier": &Reference{
	type_: String,
},
				"DatabaseArn": &Reference{
	type_: String,
},
				"MasterDatabaseName": &Reference{
	type_: String,
},
				"MasterUserPassword": &Reference{
	type_: String,
},
				"MasterUsername": &Reference{
	type_: String,
},
				"PreferredBackupWindow": &Reference{
	type_: String,
},
				"PreferredMaintenanceWindow": &Reference{
	type_: String,
},
				"PubliclyAccessible": &Reference{
	type_: Boolean,
},
				"RelationalDatabaseBlueprintId": &Reference{
	type_: String,
},
				"RelationalDatabaseBundleId": &Reference{
	type_: String,
},
				"RelationalDatabaseName": &Reference{
	type_: String,
},
				"RelationalDatabaseParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lightsail::Database_RelationalDatabaseParameter",
},
},
				"RotateMasterUserPassword": &Reference{
	type_: Boolean,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lightsail::Database_Tag",
},
},
		},
	},
	"AWS::Lightsail::Disk": {
		Properties: map[string]*Reference{
				"AddOns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lightsail::Disk_AddOn",
},
},
				"AttachedTo": &Reference{
	type_: String,
},
				"AttachmentState": &Reference{
	type_: String,
},
				"AvailabilityZone": &Reference{
	type_: String,
},
				"DiskArn": &Reference{
	type_: String,
},
				"DiskName": &Reference{
	type_: String,
},
				"Iops": &Reference{
	type_: Integer,
},
				"IsAttached": &Reference{
	type_: Boolean,
},
				"Location": &Reference{
	ref: "AWS::Lightsail::Disk_Location",
},
				"Path": &Reference{
	type_: String,
},
				"ResourceType": &Reference{
	type_: String,
},
				"SizeInGb": &Reference{
	type_: Integer,
},
				"State": &Reference{
	type_: String,
},
				"SupportCode": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lightsail::Disk_Tag",
},
},
		},
	},
	"AWS::Lightsail::Instance": {
		Properties: map[string]*Reference{
				"AddOns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lightsail::Instance_AddOn",
},
},
				"AvailabilityZone": &Reference{
	type_: String,
},
				"BlueprintId": &Reference{
	type_: String,
},
				"BundleId": &Reference{
	type_: String,
},
				"Hardware": &Reference{
	ref: "AWS::Lightsail::Instance_Hardware",
},
				"InstanceArn": &Reference{
	type_: String,
},
				"InstanceName": &Reference{
	type_: String,
},
				"IsStaticIp": &Reference{
	type_: Boolean,
},
				"KeyPairName": &Reference{
	type_: String,
},
				"Location": &Reference{
	ref: "AWS::Lightsail::Instance_Location",
},
				"Networking": &Reference{
	ref: "AWS::Lightsail::Instance_Networking",
},
				"PrivateIpAddress": &Reference{
	type_: String,
},
				"PublicIpAddress": &Reference{
	type_: String,
},
				"ResourceType": &Reference{
	type_: String,
},
				"SshKeyName": &Reference{
	type_: String,
},
				"State": &Reference{
	ref: "AWS::Lightsail::Instance_State",
},
				"SupportCode": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lightsail::Instance_Tag",
},
},
				"UserData": &Reference{
	type_: String,
},
				"UserName": &Reference{
	type_: String,
},
		},
	},
	"AWS::Lightsail::LoadBalancer": {
		Properties: map[string]*Reference{
				"AttachedInstances": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"HealthCheckPath": &Reference{
	type_: String,
},
				"InstancePort": &Reference{
	type_: Integer,
},
				"IpAddressType": &Reference{
	type_: String,
},
				"LoadBalancerArn": &Reference{
	type_: String,
},
				"LoadBalancerName": &Reference{
	type_: String,
},
				"SessionStickinessEnabled": &Reference{
	type_: Boolean,
},
				"SessionStickinessLBCookieDurationSeconds": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lightsail::LoadBalancer_Tag",
},
},
				"TlsPolicyName": &Reference{
	type_: String,
},
		},
	},
	"AWS::Lightsail::LoadBalancerTlsCertificate": {
		Properties: map[string]*Reference{
				"CertificateAlternativeNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"CertificateDomainName": &Reference{
	type_: String,
},
				"CertificateName": &Reference{
	type_: String,
},
				"HttpsRedirectionEnabled": &Reference{
	type_: Boolean,
},
				"IsAttached": &Reference{
	type_: Boolean,
},
				"LoadBalancerName": &Reference{
	type_: String,
},
				"LoadBalancerTlsCertificateArn": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
		},
	},
	"AWS::Lightsail::StaticIp": {
		Properties: map[string]*Reference{
				"AttachedTo": &Reference{
	type_: String,
},
				"IpAddress": &Reference{
	type_: String,
},
				"IsAttached": &Reference{
	type_: Boolean,
},
				"StaticIpArn": &Reference{
	type_: String,
},
				"StaticIpName": &Reference{
	type_: String,
},
		},
	},
	"AWS::Location::GeofenceCollection": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CollectionArn": &Reference{
	type_: String,
},
				"CollectionName": &Reference{
	type_: String,
},
				"CreateTime": &Reference{
	ref: "AWS::Location::GeofenceCollection_iso8601UTC",
},
				"Description": &Reference{
	type_: String,
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"PricingPlan": &Reference{
	ref: "AWS::Location::GeofenceCollection_PricingPlan",
},
				"PricingPlanDataSource": &Reference{
	type_: String,
},
				"UpdateTime": &Reference{
	ref: "AWS::Location::GeofenceCollection_iso8601UTC",
},
		},
	},
	"AWS::Location::Map": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Configuration": &Reference{
	ref: "AWS::Location::Map_MapConfiguration",
},
				"CreateTime": &Reference{
	ref: "AWS::Location::Map_iso8601UTC",
},
				"DataSource": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"MapArn": &Reference{
	type_: String,
},
				"MapName": &Reference{
	type_: String,
},
				"PricingPlan": &Reference{
	ref: "AWS::Location::Map_PricingPlan",
},
				"UpdateTime": &Reference{
	ref: "AWS::Location::Map_iso8601UTC",
},
		},
	},
	"AWS::Location::PlaceIndex": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CreateTime": &Reference{
	ref: "AWS::Location::PlaceIndex_iso8601UTC",
},
				"DataSource": &Reference{
	type_: String,
},
				"DataSourceConfiguration": &Reference{
	ref: "AWS::Location::PlaceIndex_DataSourceConfiguration",
},
				"Description": &Reference{
	type_: String,
},
				"IndexArn": &Reference{
	type_: String,
},
				"IndexName": &Reference{
	type_: String,
},
				"PricingPlan": &Reference{
	ref: "AWS::Location::PlaceIndex_PricingPlan",
},
				"UpdateTime": &Reference{
	ref: "AWS::Location::PlaceIndex_iso8601UTC",
},
		},
	},
	"AWS::Location::RouteCalculator": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CalculatorArn": &Reference{
	type_: String,
},
				"CalculatorName": &Reference{
	type_: String,
},
				"CreateTime": &Reference{
	ref: "AWS::Location::RouteCalculator_iso8601UTC",
},
				"DataSource": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"PricingPlan": &Reference{
	ref: "AWS::Location::RouteCalculator_PricingPlan",
},
				"UpdateTime": &Reference{
	ref: "AWS::Location::RouteCalculator_iso8601UTC",
},
		},
	},
	"AWS::Location::Tracker": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CreateTime": &Reference{
	ref: "AWS::Location::Tracker_iso8601UTC",
},
				"Description": &Reference{
	type_: String,
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"PositionFiltering": &Reference{
	ref: "AWS::Location::Tracker_PositionFiltering",
},
				"PricingPlan": &Reference{
	ref: "AWS::Location::Tracker_PricingPlan",
},
				"PricingPlanDataSource": &Reference{
	type_: String,
},
				"TrackerArn": &Reference{
	type_: String,
},
				"TrackerName": &Reference{
	type_: String,
},
				"UpdateTime": &Reference{
	ref: "AWS::Location::Tracker_iso8601UTC",
},
		},
	},
	"AWS::Location::TrackerConsumer": {
		Properties: map[string]*Reference{
				"ConsumerArn": &Reference{
	type_: String,
},
				"TrackerName": &Reference{
	type_: String,
},
		},
	},
	"AWS::Logs::Destination": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"DestinationName": &Reference{
	type_: String,
},
				"DestinationPolicy": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
				"TargetArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::Logs::LogGroup": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"LogGroupName": &Reference{
	type_: String,
},
				"RetentionInDays": &Reference{
	type_: Integer,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Logs::LogGroup_Tag",
},
},
		},
	},
	"AWS::Logs::LogStream": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"LogGroupName": &Reference{
	type_: String,
},
				"LogStreamName": &Reference{
	type_: String,
},
		},
	},
	"AWS::Logs::MetricFilter": {
		Properties: map[string]*Reference{
				"FilterPattern": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"LogGroupName": &Reference{
	type_: String,
},
				"MetricTransformations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Logs::MetricFilter_MetricTransformation",
},
},
		},
	},
	"AWS::Logs::QueryDefinition": {
		Properties: map[string]*Reference{
				"LogGroupNames": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Logs::QueryDefinition_LogGroup",
},
},
				"Name": &Reference{
	type_: String,
},
				"QueryDefinitionId": &Reference{
	type_: String,
},
				"QueryString": &Reference{
	type_: String,
},
		},
	},
	"AWS::Logs::ResourcePolicy": {
		Properties: map[string]*Reference{
				"PolicyDocument": &Reference{
	type_: String,
},
				"PolicyName": &Reference{
	type_: String,
},
		},
	},
	"AWS::Logs::SubscriptionFilter": {
		Properties: map[string]*Reference{
				"DestinationArn": &Reference{
	type_: String,
},
				"FilterPattern": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"LogGroupName": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::LookoutMetrics::Alert": {
		Properties: map[string]*Reference{
				"Action": &Reference{
	ref: "AWS::LookoutMetrics::Alert_Action",
},
				"AlertDescription": &Reference{
	type_: String,
},
				"AlertName": &Reference{
	type_: String,
},
				"AlertSensitivityThreshold": &Reference{
	type_: Integer,
},
				"AnomalyDetectorArn": &Reference{
	type_: String,
},
				"Arn": &Reference{
	ref: "AWS::LookoutMetrics::Alert_Arn",
},
		},
	},
	"AWS::LookoutMetrics::AnomalyDetector": {
		Properties: map[string]*Reference{
				"AnomalyDetectorConfig": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_AnomalyDetectorConfig",
},
				"AnomalyDetectorDescription": &Reference{
	type_: String,
},
				"AnomalyDetectorName": &Reference{
	type_: String,
},
				"Arn": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_Arn",
},
				"KmsKeyArn": &Reference{
	type_: String,
},
				"MetricSetList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_MetricSet",
},
},
		},
	},
	"AWS::LookoutVision::Project": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::LookoutVision::Project_Arn",
},
				"ProjectName": &Reference{
	ref: "AWS::LookoutVision::Project_ProjectName",
},
		},
	},
	"AWS::MSK::BatchScramSecret": {
		Properties: map[string]*Reference{
				"ClusterArn": &Reference{
	type_: String,
},
				"SecretArnList": &Reference{
	ref: "AWS::MSK::BatchScramSecret_SecretArnList",
},
		},
	},
	"AWS::MSK::Cluster": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"BrokerNodeGroupInfo": &Reference{
	ref: "AWS::MSK::Cluster_BrokerNodeGroupInfo",
},
				"ClientAuthentication": &Reference{
	ref: "AWS::MSK::Cluster_ClientAuthentication",
},
				"ClusterName": &Reference{
	type_: String,
},
				"ConfigurationInfo": &Reference{
	ref: "AWS::MSK::Cluster_ConfigurationInfo",
},
				"CurrentVersion": &Reference{
	type_: String,
},
				"EncryptionInfo": &Reference{
	ref: "AWS::MSK::Cluster_EncryptionInfo",
},
				"EnhancedMonitoring": &Reference{
	type_: String,
},
				"KafkaVersion": &Reference{
	type_: String,
},
				"LoggingInfo": &Reference{
	ref: "AWS::MSK::Cluster_LoggingInfo",
},
				"NumberOfBrokerNodes": &Reference{
	type_: Integer,
},
				"OpenMonitoring": &Reference{
	ref: "AWS::MSK::Cluster_OpenMonitoring",
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::MSK::Configuration": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"KafkaVersionsList": &Reference{
	ref: "AWS::MSK::Configuration_KafkaVersionsList",
},
				"Name": &Reference{
	type_: String,
},
				"ServerProperties": &Reference{
	type_: String,
},
		},
	},
	"AWS::MWAA::Environment": {
		Properties: map[string]*Reference{
				"AirflowConfigurationOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"AirflowVersion": &Reference{
	ref: "AWS::MWAA::Environment_AirflowVersion",
},
				"Arn": &Reference{
	ref: "AWS::MWAA::Environment_EnvironmentArn",
},
				"DagS3Path": &Reference{
	ref: "AWS::MWAA::Environment_RelativePath",
},
				"EnvironmentClass": &Reference{
	ref: "AWS::MWAA::Environment_EnvironmentClass",
},
				"ExecutionRoleArn": &Reference{
	ref: "AWS::MWAA::Environment_ExecutionRoleArn",
},
				"KmsKey": &Reference{
	ref: "AWS::MWAA::Environment_KmsKey",
},
				"LoggingConfiguration": &Reference{
	ref: "AWS::MWAA::Environment_LoggingConfiguration",
},
				"MaxWorkers": &Reference{
	ref: "AWS::MWAA::Environment_MaxWorkers",
},
				"MinWorkers": &Reference{
	ref: "AWS::MWAA::Environment_MinWorkers",
},
				"Name": &Reference{
	ref: "AWS::MWAA::Environment_EnvironmentName",
},
				"NetworkConfiguration": &Reference{
	ref: "AWS::MWAA::Environment_NetworkConfiguration",
},
				"PluginsS3ObjectVersion": &Reference{
	ref: "AWS::MWAA::Environment_S3ObjectVersion",
},
				"PluginsS3Path": &Reference{
	ref: "AWS::MWAA::Environment_RelativePath",
},
				"RequirementsS3ObjectVersion": &Reference{
	ref: "AWS::MWAA::Environment_S3ObjectVersion",
},
				"RequirementsS3Path": &Reference{
	ref: "AWS::MWAA::Environment_RelativePath",
},
				"Schedulers": &Reference{
	ref: "AWS::MWAA::Environment_Schedulers",
},
				"SourceBucketArn": &Reference{
	ref: "AWS::MWAA::Environment_S3BucketArn",
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"WebserverAccessMode": &Reference{
	ref: "AWS::MWAA::Environment_WebserverAccessMode",
},
				"WebserverUrl": &Reference{
	ref: "AWS::MWAA::Environment_WebserverUrl",
},
				"WeeklyMaintenanceWindowStart": &Reference{
	ref: "AWS::MWAA::Environment_WeeklyMaintenanceWindowStart",
},
		},
	},
	"AWS::Macie::CustomDataIdentifier": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"IgnoreWords": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Keywords": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"MaximumMatchDistance": &Reference{
	type_: Integer,
},
				"Name": &Reference{
	type_: String,
},
				"Regex": &Reference{
	type_: String,
},
		},
	},
	"AWS::Macie::FindingsFilter": {
		Properties: map[string]*Reference{
				"Action": &Reference{
	ref: "AWS::Macie::FindingsFilter_FindingFilterAction",
},
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"FindingCriteria": &Reference{
	ref: "AWS::Macie::FindingsFilter_FindingCriteria",
},
				"FindingsFilterListItems": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Macie::FindingsFilter_FindingsFilterListItem",
},
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Position": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::Macie::Session": {
		Properties: map[string]*Reference{
				"AwsAccountId": &Reference{
	type_: String,
},
				"FindingPublishingFrequency": &Reference{
	type_: String,
},
				"ServiceRole": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
		},
	},
	"AWS::ManagedBlockchain::Member": {
		Properties: map[string]*Reference{
				"InvitationId": &Reference{
	type_: String,
},
				"MemberConfiguration": &Reference{
	ref: "AWS::ManagedBlockchain::Member_MemberConfiguration",
},
				"MemberId": &Reference{
	type_: String,
},
				"NetworkConfiguration": &Reference{
	ref: "AWS::ManagedBlockchain::Member_NetworkConfiguration",
},
				"NetworkId": &Reference{
	type_: String,
},
		},
	},
	"AWS::ManagedBlockchain::Node": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"MemberId": &Reference{
	type_: String,
},
				"NetworkId": &Reference{
	type_: String,
},
				"NodeConfiguration": &Reference{
	ref: "AWS::ManagedBlockchain::Node_NodeConfiguration",
},
				"NodeId": &Reference{
	type_: String,
},
		},
	},
	"AWS::MediaConnect::Flow": {
		Properties: map[string]*Reference{
				"AvailabilityZone": &Reference{
	type_: String,
},
				"FlowArn": &Reference{
	type_: String,
},
				"FlowAvailabilityZone": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Source": &Reference{
	ref: "AWS::MediaConnect::Flow_Source",
},
				"SourceFailoverConfig": &Reference{
	ref: "AWS::MediaConnect::Flow_FailoverConfig",
},
		},
	},
	"AWS::MediaConnect::FlowEntitlement": {
		Properties: map[string]*Reference{
				"DataTransferSubscriberFeePercent": &Reference{
	type_: Integer,
},
				"Description": &Reference{
	type_: String,
},
				"Encryption": &Reference{
	ref: "AWS::MediaConnect::FlowEntitlement_Encryption",
},
				"EntitlementArn": &Reference{
	type_: String,
},
				"EntitlementStatus": &Reference{
	type_: String,
},
				"FlowArn": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Subscribers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::MediaConnect::FlowOutput": {
		Properties: map[string]*Reference{
				"CidrAllowList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Description": &Reference{
	type_: String,
},
				"Destination": &Reference{
	type_: String,
},
				"Encryption": &Reference{
	ref: "AWS::MediaConnect::FlowOutput_Encryption",
},
				"FlowArn": &Reference{
	type_: String,
},
				"MaxLatency": &Reference{
	type_: Integer,
},
				"MinLatency": &Reference{
	type_: Integer,
},
				"Name": &Reference{
	type_: String,
},
				"OutputArn": &Reference{
	type_: String,
},
				"Port": &Reference{
	type_: Integer,
},
				"Protocol": &Reference{
	type_: String,
},
				"RemoteId": &Reference{
	type_: String,
},
				"SmoothingLatency": &Reference{
	type_: Integer,
},
				"StreamId": &Reference{
	type_: String,
},
				"VpcInterfaceAttachment": &Reference{
	ref: "AWS::MediaConnect::FlowOutput_VpcInterfaceAttachment",
},
		},
	},
	"AWS::MediaConnect::FlowSource": {
		Properties: map[string]*Reference{
				"Decryption": &Reference{
	ref: "AWS::MediaConnect::FlowSource_Encryption",
},
				"Description": &Reference{
	type_: String,
},
				"EntitlementArn": &Reference{
	type_: String,
},
				"FlowArn": &Reference{
	type_: String,
},
				"IngestIp": &Reference{
	type_: String,
},
				"IngestPort": &Reference{
	type_: Integer,
},
				"MaxBitrate": &Reference{
	type_: Integer,
},
				"MaxLatency": &Reference{
	type_: Integer,
},
				"Name": &Reference{
	type_: String,
},
				"Protocol": &Reference{
	type_: String,
},
				"SourceArn": &Reference{
	type_: String,
},
				"SourceIngestPort": &Reference{
	type_: String,
},
				"StreamId": &Reference{
	type_: String,
},
				"VpcInterfaceName": &Reference{
	type_: String,
},
				"WhitelistCidr": &Reference{
	type_: String,
},
		},
	},
	"AWS::MediaConnect::FlowVpcInterface": {
		Properties: map[string]*Reference{
				"FlowArn": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"NetworkInterfaceIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"RoleArn": &Reference{
	type_: String,
},
				"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SubnetId": &Reference{
	type_: String,
},
		},
	},
	"AWS::MediaConvert::JobTemplate": {
		Properties: map[string]*Reference{
				"AccelerationSettings": &Reference{
	ref: "AWS::MediaConvert::JobTemplate_AccelerationSettings",
},
				"Arn": &Reference{
	type_: String,
},
				"Category": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"HopDestinations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaConvert::JobTemplate_HopDestination",
},
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Priority": &Reference{
	type_: Integer,
},
				"Queue": &Reference{
	type_: String,
},
				"SettingsJson": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"StatusUpdateInterval": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::MediaConvert::Preset": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Category": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"SettingsJson": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::MediaConvert::Queue": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"PricingPlan": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::MediaLive::Channel": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CdiInputSpecification": &Reference{
	ref: "AWS::MediaLive::Channel_CdiInputSpecification",
},
				"ChannelClass": &Reference{
	type_: String,
},
				"Destinations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaLive::Channel_OutputDestination",
},
},
				"EncoderSettings": &Reference{
	ref: "AWS::MediaLive::Channel_EncoderSettings",
},
				"Id": &Reference{
	type_: String,
},
				"InputAttachments": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaLive::Channel_InputAttachment",
},
},
				"InputSpecification": &Reference{
	ref: "AWS::MediaLive::Channel_InputSpecification",
},
				"Inputs": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"LogLevel": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Vpc": &Reference{
	ref: "AWS::MediaLive::Channel_VpcOutputSettings",
},
		},
	},
	"AWS::MediaLive::InputSecurityGroup": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"WhitelistRules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaLive::InputSecurityGroup_InputWhitelistRuleCidr",
},
},
		},
	},
	"AWS::MediaPackage::Asset": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CreatedAt": &Reference{
	type_: String,
},
				"EgressEndpoints": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaPackage::Asset_EgressEndpoint",
},
},
				"Id": &Reference{
	type_: String,
},
				"PackagingGroupId": &Reference{
	type_: String,
},
				"ResourceId": &Reference{
	type_: String,
},
				"SourceArn": &Reference{
	type_: String,
},
				"SourceRoleArn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaPackage::Asset_Tag",
},
},
		},
	},
	"AWS::MediaPackage::Channel": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"EgressAccessLogs": &Reference{
	ref: "AWS::MediaPackage::Channel_LogConfiguration",
},
				"HlsIngest": &Reference{
	ref: "AWS::MediaPackage::Channel_HlsIngest",
},
				"Id": &Reference{
	type_: String,
},
				"IngressAccessLogs": &Reference{
	ref: "AWS::MediaPackage::Channel_LogConfiguration",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaPackage::Channel_Tag",
},
},
		},
	},
	"AWS::MediaPackage::OriginEndpoint": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Authorization": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_Authorization",
},
				"ChannelId": &Reference{
	type_: String,
},
				"CmafPackage": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_CmafPackage",
},
				"DashPackage": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_DashPackage",
},
				"Description": &Reference{
	type_: String,
},
				"HlsPackage": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_HlsPackage",
},
				"Id": &Reference{
	type_: String,
},
				"ManifestName": &Reference{
	type_: String,
},
				"MssPackage": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_MssPackage",
},
				"Origination": &Reference{
	type_: String,
},
				"StartoverWindowSeconds": &Reference{
	type_: Integer,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_Tag",
},
},
				"TimeDelaySeconds": &Reference{
	type_: Integer,
},
				"Url": &Reference{
	type_: String,
},
				"Whitelist": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::MediaPackage::PackagingConfiguration": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CmafPackage": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_CmafPackage",
},
				"DashPackage": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_DashPackage",
},
				"HlsPackage": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_HlsPackage",
},
				"Id": &Reference{
	type_: String,
},
				"MssPackage": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_MssPackage",
},
				"PackagingGroupId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_Tag",
},
},
		},
	},
	"AWS::MediaPackage::PackagingGroup": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Authorization": &Reference{
	ref: "AWS::MediaPackage::PackagingGroup_Authorization",
},
				"DomainName": &Reference{
	type_: String,
},
				"EgressAccessLogs": &Reference{
	ref: "AWS::MediaPackage::PackagingGroup_LogConfiguration",
},
				"Id": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaPackage::PackagingGroup_Tag",
},
},
		},
	},
	"AWS::MemoryDB::ACL": {
		Properties: map[string]*Reference{
				"ACLName": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MemoryDB::ACL_Tag",
},
},
				"UserNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::MemoryDB::Cluster": {
		Properties: map[string]*Reference{
				"ACLName": &Reference{
	type_: String,
},
				"ARN": &Reference{
	type_: String,
},
				"AutoMinorVersionUpgrade": &Reference{
	type_: Boolean,
},
				"ClusterEndpoint": &Reference{
	ref: "AWS::MemoryDB::Cluster_Endpoint",
},
				"ClusterName": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"EngineVersion": &Reference{
	type_: String,
},
				"FinalSnapshotName": &Reference{
	type_: String,
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"MaintenanceWindow": &Reference{
	type_: String,
},
				"NodeType": &Reference{
	type_: String,
},
				"NumReplicasPerShard": &Reference{
	type_: Integer,
},
				"NumShards": &Reference{
	type_: Integer,
},
				"ParameterGroupName": &Reference{
	type_: String,
},
				"ParameterGroupStatus": &Reference{
	type_: String,
},
				"Port": &Reference{
	type_: Integer,
},
				"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SnapshotArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SnapshotName": &Reference{
	type_: String,
},
				"SnapshotRetentionLimit": &Reference{
	type_: Integer,
},
				"SnapshotWindow": &Reference{
	type_: String,
},
				"SnsTopicArn": &Reference{
	type_: String,
},
				"SnsTopicStatus": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
				"SubnetGroupName": &Reference{
	type_: String,
},
				"TLSEnabled": &Reference{
	type_: Boolean,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MemoryDB::Cluster_Tag",
},
},
		},
	},
	"AWS::MemoryDB::ParameterGroup": {
		Properties: map[string]*Reference{
				"ARN": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Family": &Reference{
	type_: String,
},
				"ParameterGroupName": &Reference{
	type_: String,
},
				"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MemoryDB::ParameterGroup_Tag",
},
},
		},
	},
	"AWS::MemoryDB::SubnetGroup": {
		Properties: map[string]*Reference{
				"ARN": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"SubnetGroupName": &Reference{
	type_: String,
},
				"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MemoryDB::SubnetGroup_Tag",
},
},
		},
	},
	"AWS::MemoryDB::User": {
		Properties: map[string]*Reference{
				"AccessString": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"AuthenticationMode": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Passwords": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Type": &Reference{
	type_: String,
},
	},
},
				"Status": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MemoryDB::User_Tag",
},
},
				"UserName": &Reference{
	type_: String,
},
		},
	},
	"AWS::Neptune::DBCluster": {
		Properties: map[string]*Reference{
				"AssociatedRoles": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Neptune::DBCluster_DBClusterRole",
},
},
				"AvailabilityZones": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"BackupRetentionPeriod": &Reference{
	type_: Integer,
},
				"ClusterResourceId": &Reference{
	type_: String,
},
				"DBClusterIdentifier": &Reference{
	type_: String,
},
				"DBClusterParameterGroupName": &Reference{
	type_: String,
},
				"DBSubnetGroupName": &Reference{
	type_: String,
},
				"DeletionProtection": &Reference{
	type_: Boolean,
},
				"EnableCloudwatchLogsExports": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Endpoint": &Reference{
	type_: String,
},
				"EngineVersion": &Reference{
	type_: String,
},
				"IamAuthEnabled": &Reference{
	type_: Boolean,
},
				"Id": &Reference{
	type_: String,
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"Port": &Reference{
	type_: Integer,
},
				"PreferredBackupWindow": &Reference{
	type_: String,
},
				"PreferredMaintenanceWindow": &Reference{
	type_: String,
},
				"ReadEndpoint": &Reference{
	type_: String,
},
				"RestoreToTime": &Reference{
	type_: String,
},
				"RestoreType": &Reference{
	type_: String,
},
				"SnapshotIdentifier": &Reference{
	type_: String,
},
				"SourceDBClusterIdentifier": &Reference{
	type_: String,
},
				"StorageEncrypted": &Reference{
	type_: Boolean,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Neptune::DBCluster_Tag",
},
},
				"UseLatestRestorableTime": &Reference{
	type_: Boolean,
},
				"VpcSecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::Neptune::DBClusterParameterGroup": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Family": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Neptune::DBClusterParameterGroup_Tag",
},
},
		},
	},
	"AWS::Neptune::DBInstance": {
		Properties: map[string]*Reference{
				"AllowMajorVersionUpgrade": &Reference{
	type_: Boolean,
},
				"AutoMinorVersionUpgrade": &Reference{
	type_: Boolean,
},
				"AvailabilityZone": &Reference{
	type_: String,
},
				"DBClusterIdentifier": &Reference{
	type_: String,
},
				"DBInstanceClass": &Reference{
	type_: String,
},
				"DBInstanceIdentifier": &Reference{
	type_: String,
},
				"DBParameterGroupName": &Reference{
	type_: String,
},
				"DBSnapshotIdentifier": &Reference{
	type_: String,
},
				"DBSubnetGroupName": &Reference{
	type_: String,
},
				"Endpoint": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Port": &Reference{
	type_: String,
},
				"PreferredMaintenanceWindow": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Neptune::DBInstance_Tag",
},
},
		},
	},
	"AWS::Neptune::DBParameterGroup": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Family": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Neptune::DBParameterGroup_Tag",
},
},
		},
	},
	"AWS::Neptune::DBSubnetGroup": {
		Properties: map[string]*Reference{
				"DBSubnetGroupDescription": &Reference{
	type_: String,
},
				"DBSubnetGroupName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Neptune::DBSubnetGroup_Tag",
},
},
		},
	},
	"AWS::NetworkFirewall::Firewall": {
		Properties: map[string]*Reference{
				"DeleteProtection": &Reference{
	type_: Boolean,
},
				"Description": &Reference{
	type_: String,
},
				"EndpointIds": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::Firewall_EndpointId",
},
},
				"FirewallArn": &Reference{
	ref: "AWS::NetworkFirewall::Firewall_ResourceArn",
},
				"FirewallId": &Reference{
	type_: String,
},
				"FirewallName": &Reference{
	type_: String,
},
				"FirewallPolicyArn": &Reference{
	ref: "AWS::NetworkFirewall::Firewall_ResourceArn",
},
				"FirewallPolicyChangeProtection": &Reference{
	type_: Boolean,
},
				"SubnetChangeProtection": &Reference{
	type_: Boolean,
},
				"SubnetMappings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::Firewall_SubnetMapping",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::Firewall_Tag",
},
},
				"VpcId": &Reference{
	type_: String,
},
		},
	},
	"AWS::NetworkFirewall::FirewallPolicy": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"FirewallPolicy": &Reference{
	ref: "AWS::NetworkFirewall::FirewallPolicy_FirewallPolicy",
},
				"FirewallPolicyArn": &Reference{
	ref: "AWS::NetworkFirewall::FirewallPolicy_ResourceArn",
},
				"FirewallPolicyId": &Reference{
	type_: String,
},
				"FirewallPolicyName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::FirewallPolicy_Tag",
},
},
		},
	},
	"AWS::NetworkFirewall::LoggingConfiguration": {
		Properties: map[string]*Reference{
				"FirewallArn": &Reference{
	ref: "AWS::NetworkFirewall::LoggingConfiguration_ResourceArn",
},
				"FirewallName": &Reference{
	type_: String,
},
				"LoggingConfiguration": &Reference{
	ref: "AWS::NetworkFirewall::LoggingConfiguration_LoggingConfiguration",
},
		},
	},
	"AWS::NetworkFirewall::RuleGroup": {
		Properties: map[string]*Reference{
				"Capacity": &Reference{
	type_: Integer,
},
				"Description": &Reference{
	type_: String,
},
				"RuleGroup": &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_RuleGroup",
},
				"RuleGroupArn": &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_ResourceArn",
},
				"RuleGroupId": &Reference{
	type_: String,
},
				"RuleGroupName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_Tag",
},
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::NetworkManager::CustomerGatewayAssociation": {
		Properties: map[string]*Reference{
				"CustomerGatewayArn": &Reference{
	type_: String,
},
				"DeviceId": &Reference{
	type_: String,
},
				"GlobalNetworkId": &Reference{
	type_: String,
},
				"LinkId": &Reference{
	type_: String,
},
		},
	},
	"AWS::NetworkManager::Device": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"DeviceArn": &Reference{
	type_: String,
},
				"DeviceId": &Reference{
	type_: String,
},
				"GlobalNetworkId": &Reference{
	type_: String,
},
				"Location": &Reference{
	ref: "AWS::NetworkManager::Device_Location",
},
				"Model": &Reference{
	type_: String,
},
				"SerialNumber": &Reference{
	type_: String,
},
				"SiteId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkManager::Device_Tag",
},
},
				"Type": &Reference{
	type_: String,
},
				"Vendor": &Reference{
	type_: String,
},
		},
	},
	"AWS::NetworkManager::GlobalNetwork": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkManager::GlobalNetwork_Tag",
},
},
		},
	},
	"AWS::NetworkManager::Link": {
		Properties: map[string]*Reference{
				"Bandwidth": &Reference{
	ref: "AWS::NetworkManager::Link_Bandwidth",
},
				"Description": &Reference{
	type_: String,
},
				"GlobalNetworkId": &Reference{
	type_: String,
},
				"LinkArn": &Reference{
	type_: String,
},
				"LinkId": &Reference{
	type_: String,
},
				"Provider": &Reference{
	type_: String,
},
				"SiteId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkManager::Link_Tag",
},
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::NetworkManager::LinkAssociation": {
		Properties: map[string]*Reference{
				"DeviceId": &Reference{
	type_: String,
},
				"GlobalNetworkId": &Reference{
	type_: String,
},
				"LinkId": &Reference{
	type_: String,
},
		},
	},
	"AWS::NetworkManager::Site": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"GlobalNetworkId": &Reference{
	type_: String,
},
				"Location": &Reference{
	ref: "AWS::NetworkManager::Site_Location",
},
				"SiteArn": &Reference{
	type_: String,
},
				"SiteId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkManager::Site_Tag",
},
},
		},
	},
	"AWS::NetworkManager::TransitGatewayRegistration": {
		Properties: map[string]*Reference{
				"GlobalNetworkId": &Reference{
	type_: String,
},
				"TransitGatewayArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::OpenSearchService::Domain": {
		Properties: map[string]*Reference{
				"AccessPolicies": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"AdvancedOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"AdvancedSecurityOptions": &Reference{
	ref: "AWS::OpenSearchService::Domain_AdvancedSecurityOptionsInput",
},
				"Arn": &Reference{
	type_: String,
},
				"ClusterConfig": &Reference{
	ref: "AWS::OpenSearchService::Domain_ClusterConfig",
},
				"CognitoOptions": &Reference{
	ref: "AWS::OpenSearchService::Domain_CognitoOptions",
},
				"DomainArn": &Reference{
	type_: String,
},
				"DomainEndpoint": &Reference{
	type_: String,
},
				"DomainEndpointOptions": &Reference{
	ref: "AWS::OpenSearchService::Domain_DomainEndpointOptions",
},
				"DomainEndpoints": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"DomainName": &Reference{
	type_: String,
},
				"EBSOptions": &Reference{
	ref: "AWS::OpenSearchService::Domain_EBSOptions",
},
				"EncryptionAtRestOptions": &Reference{
	ref: "AWS::OpenSearchService::Domain_EncryptionAtRestOptions",
},
				"EngineVersion": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"LogPublishingOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"NodeToNodeEncryptionOptions": &Reference{
	ref: "AWS::OpenSearchService::Domain_NodeToNodeEncryptionOptions",
},
				"ServiceSoftwareOptions": &Reference{
	ref: "AWS::OpenSearchService::Domain_ServiceSoftwareOptions",
},
				"SnapshotOptions": &Reference{
	ref: "AWS::OpenSearchService::Domain_SnapshotOptions",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::OpenSearchService::Domain_Tag",
},
},
				"VPCOptions": &Reference{
	ref: "AWS::OpenSearchService::Domain_VPCOptions",
},
		},
	},
	"AWS::OpsWorks::App": {
		Properties: map[string]*Reference{
				"AppSource": &Reference{
	ref: "AWS::OpsWorks::App_Source",
},
				"Attributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"DataSources": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::OpsWorks::App_DataSource",
},
},
				"Description": &Reference{
	type_: String,
},
				"Domains": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"EnableSsl": &Reference{
	type_: Boolean,
},
				"Environment": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::OpsWorks::App_EnvironmentVariable",
},
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Shortname": &Reference{
	type_: String,
},
				"SslConfiguration": &Reference{
	ref: "AWS::OpsWorks::App_SslConfiguration",
},
				"StackId": &Reference{
	type_: String,
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::OpsWorks::ElasticLoadBalancerAttachment": {
		Properties: map[string]*Reference{
				"ElasticLoadBalancerName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"LayerId": &Reference{
	type_: String,
},
		},
	},
	"AWS::OpsWorks::Instance": {
		Properties: map[string]*Reference{
				"AgentVersion": &Reference{
	type_: String,
},
				"AmiId": &Reference{
	type_: String,
},
				"Architecture": &Reference{
	type_: String,
},
				"AutoScalingType": &Reference{
	type_: String,
},
				"AvailabilityZone": &Reference{
	type_: String,
},
				"BlockDeviceMappings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::OpsWorks::Instance_BlockDeviceMapping",
},
},
				"EbsOptimized": &Reference{
	type_: Boolean,
},
				"ElasticIps": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Hostname": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InstallUpdatesOnBoot": &Reference{
	type_: Boolean,
},
				"InstanceType": &Reference{
	type_: String,
},
				"LayerIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Os": &Reference{
	type_: String,
},
				"PrivateDnsName": &Reference{
	type_: String,
},
				"PrivateIp": &Reference{
	type_: String,
},
				"PublicDnsName": &Reference{
	type_: String,
},
				"PublicIp": &Reference{
	type_: String,
},
				"RootDeviceType": &Reference{
	type_: String,
},
				"SshKeyName": &Reference{
	type_: String,
},
				"StackId": &Reference{
	type_: String,
},
				"SubnetId": &Reference{
	type_: String,
},
				"Tenancy": &Reference{
	type_: String,
},
				"TimeBasedAutoScaling": &Reference{
	ref: "AWS::OpsWorks::Instance_TimeBasedAutoScaling",
},
				"VirtualizationType": &Reference{
	type_: String,
},
				"Volumes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::OpsWorks::Layer": {
		Properties: map[string]*Reference{
				"Attributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"AutoAssignElasticIps": &Reference{
	type_: Boolean,
},
				"AutoAssignPublicIps": &Reference{
	type_: Boolean,
},
				"CustomInstanceProfileArn": &Reference{
	type_: String,
},
				"CustomJson": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"CustomRecipes": &Reference{
	ref: "AWS::OpsWorks::Layer_Recipes",
},
				"CustomSecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"EnableAutoHealing": &Reference{
	type_: Boolean,
},
				"Id": &Reference{
	type_: String,
},
				"InstallUpdatesOnBoot": &Reference{
	type_: Boolean,
},
				"LifecycleEventConfiguration": &Reference{
	ref: "AWS::OpsWorks::Layer_LifecycleEventConfiguration",
},
				"LoadBasedAutoScaling": &Reference{
	ref: "AWS::OpsWorks::Layer_LoadBasedAutoScaling",
},
				"Name": &Reference{
	type_: String,
},
				"Packages": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Shortname": &Reference{
	type_: String,
},
				"StackId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::OpsWorks::Layer_Tag",
},
},
				"Type": &Reference{
	type_: String,
},
				"UseEbsOptimizedInstances": &Reference{
	type_: Boolean,
},
				"VolumeConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::OpsWorks::Layer_VolumeConfiguration",
},
},
		},
	},
	"AWS::OpsWorks::Stack": {
		Properties: map[string]*Reference{
				"AgentVersion": &Reference{
	type_: String,
},
				"Attributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"ChefConfiguration": &Reference{
	ref: "AWS::OpsWorks::Stack_ChefConfiguration",
},
				"CloneAppIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"ClonePermissions": &Reference{
	type_: Boolean,
},
				"ConfigurationManager": &Reference{
	ref: "AWS::OpsWorks::Stack_StackConfigurationManager",
},
				"CustomCookbooksSource": &Reference{
	ref: "AWS::OpsWorks::Stack_Source",
},
				"CustomJson": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"DefaultAvailabilityZone": &Reference{
	type_: String,
},
				"DefaultInstanceProfileArn": &Reference{
	type_: String,
},
				"DefaultOs": &Reference{
	type_: String,
},
				"DefaultRootDeviceType": &Reference{
	type_: String,
},
				"DefaultSshKeyName": &Reference{
	type_: String,
},
				"DefaultSubnetId": &Reference{
	type_: String,
},
				"EcsClusterArn": &Reference{
	type_: String,
},
				"ElasticIps": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::OpsWorks::Stack_ElasticIp",
},
},
				"HostnameTheme": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RdsDbInstances": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::OpsWorks::Stack_RdsDbInstance",
},
},
				"ServiceRoleArn": &Reference{
	type_: String,
},
				"SourceStackId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::OpsWorks::Stack_Tag",
},
},
				"UseCustomCookbooks": &Reference{
	type_: Boolean,
},
				"UseOpsworksSecurityGroups": &Reference{
	type_: Boolean,
},
				"VpcId": &Reference{
	type_: String,
},
		},
	},
	"AWS::OpsWorks::UserProfile": {
		Properties: map[string]*Reference{
				"AllowSelfManagement": &Reference{
	type_: Boolean,
},
				"IamUserArn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"SshPublicKey": &Reference{
	type_: String,
},
				"SshUsername": &Reference{
	type_: String,
},
		},
	},
	"AWS::OpsWorks::Volume": {
		Properties: map[string]*Reference{
				"Ec2VolumeId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"MountPoint": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"StackId": &Reference{
	type_: String,
},
		},
	},
	"AWS::OpsWorksCM::Server": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AssociatePublicIpAddress": &Reference{
	type_: Boolean,
},
				"BackupId": &Reference{
	type_: String,
},
				"BackupRetentionCount": &Reference{
	type_: Integer,
},
				"CustomCertificate": &Reference{
	type_: String,
},
				"CustomDomain": &Reference{
	type_: String,
},
				"CustomPrivateKey": &Reference{
	type_: String,
},
				"DisableAutomatedBackup": &Reference{
	type_: Boolean,
},
				"Endpoint": &Reference{
	type_: String,
},
				"Engine": &Reference{
	type_: String,
},
				"EngineAttributes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::OpsWorksCM::Server_EngineAttribute",
},
},
				"EngineModel": &Reference{
	type_: String,
},
				"EngineVersion": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InstanceProfileArn": &Reference{
	type_: String,
},
				"InstanceType": &Reference{
	type_: String,
},
				"KeyPair": &Reference{
	type_: String,
},
				"PreferredBackupWindow": &Reference{
	type_: String,
},
				"PreferredMaintenanceWindow": &Reference{
	type_: String,
},
				"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"ServerName": &Reference{
	type_: String,
},
				"ServiceRoleArn": &Reference{
	type_: String,
},
				"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::OpsWorksCM::Server_Tag",
},
},
		},
	},
	"AWS::Personalize::Dataset": {
		Properties: map[string]*Reference{
				"DatasetArn": &Reference{
	type_: String,
},
				"DatasetGroupArn": &Reference{
	type_: String,
},
				"DatasetImportJob": &Reference{
	ref: "AWS::Personalize::Dataset_DatasetImportJob",
},
				"DatasetType": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"SchemaArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::Personalize::DatasetGroup": {
		Properties: map[string]*Reference{
				"DatasetGroupArn": &Reference{
	type_: String,
},
				"Domain": &Reference{
	type_: String,
},
				"KmsKeyArn": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::Personalize::Schema": {
		Properties: map[string]*Reference{
				"Domain": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Schema": &Reference{
	type_: String,
},
				"SchemaArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::Personalize::Solution": {
		Properties: map[string]*Reference{
				"DatasetGroupArn": &Reference{
	type_: String,
},
				"EventType": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"PerformAutoML": &Reference{
	type_: Boolean,
},
				"PerformHPO": &Reference{
	type_: Boolean,
},
				"RecipeArn": &Reference{
	type_: String,
},
				"SolutionArn": &Reference{
	ref: "AWS::Personalize::Solution_SolutionArn",
},
				"SolutionConfig": &Reference{
	ref: "AWS::Personalize::Solution_SolutionConfig",
},
		},
	},
	"AWS::QLDB::Ledger": {
		Properties: map[string]*Reference{
				"DeletionProtection": &Reference{
	type_: Boolean,
},
				"Id": &Reference{
	type_: String,
},
				"KmsKey": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"PermissionsMode": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QLDB::Ledger_Tag",
},
},
		},
	},
	"AWS::QLDB::Stream": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::QLDB::Stream_Arn",
},
				"ExclusiveEndTime": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InclusiveStartTime": &Reference{
	type_: String,
},
				"KinesisConfiguration": &Reference{
	ref: "AWS::QLDB::Stream_KinesisConfiguration",
},
				"LedgerName": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	ref: "AWS::QLDB::Stream_Arn",
},
				"StreamName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QLDB::Stream_Tag",
},
},
		},
	},
	"AWS::QuickSight::Analysis": {
		Properties: map[string]*Reference{
				"AnalysisId": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"AwsAccountId": &Reference{
	type_: String,
},
				"CreatedTime": &Reference{
	type_: String,
},
				"DataSetArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Errors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Analysis_AnalysisError",
},
},
				"LastUpdatedTime": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Parameters": &Reference{
	ref: "AWS::QuickSight::Analysis_Parameters",
},
				"Permissions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Analysis_ResourcePermission",
},
},
				"Sheets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Analysis_Sheet",
},
},
				"SourceEntity": &Reference{
	ref: "AWS::QuickSight::Analysis_AnalysisSourceEntity",
},
				"Status": &Reference{
	ref: "AWS::QuickSight::Analysis_ResourceStatus",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Analysis_Tag",
},
},
				"ThemeArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::QuickSight::Dashboard": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AwsAccountId": &Reference{
	type_: String,
},
				"CreatedTime": &Reference{
	type_: String,
},
				"DashboardId": &Reference{
	type_: String,
},
				"DashboardPublishOptions": &Reference{
	ref: "AWS::QuickSight::Dashboard_DashboardPublishOptions",
},
				"LastPublishedTime": &Reference{
	type_: String,
},
				"LastUpdatedTime": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Parameters": &Reference{
	ref: "AWS::QuickSight::Dashboard_Parameters",
},
				"Permissions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Dashboard_ResourcePermission",
},
},
				"SourceEntity": &Reference{
	ref: "AWS::QuickSight::Dashboard_DashboardSourceEntity",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Dashboard_Tag",
},
},
				"ThemeArn": &Reference{
	type_: String,
},
				"Version": &Reference{
	ref: "AWS::QuickSight::Dashboard_DashboardVersion",
},
				"VersionDescription": &Reference{
	type_: String,
},
		},
	},
	"AWS::QuickSight::DataSet": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AwsAccountId": &Reference{
	type_: String,
},
				"ColumnGroups": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::DataSet_ColumnGroup",
},
},
				"ColumnLevelPermissionRules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::DataSet_ColumnLevelPermissionRule",
},
},
				"ConsumedSpiceCapacityInBytes": &Reference{
	type_: Number,
},
				"CreatedTime": &Reference{
	type_: String,
},
				"DataSetId": &Reference{
	type_: String,
},
				"DataSetUsageConfiguration": &Reference{
	ref: "AWS::QuickSight::DataSet_DataSetUsageConfiguration",
},
				"FieldFolders": &Reference{
	ref: "AWS::QuickSight::DataSet_FieldFolderMap",
},
				"ImportMode": &Reference{
	ref: "AWS::QuickSight::DataSet_DataSetImportMode",
},
				"IngestionWaitPolicy": &Reference{
	ref: "AWS::QuickSight::DataSet_IngestionWaitPolicy",
},
				"LastUpdatedTime": &Reference{
	type_: String,
},
				"LogicalTableMap": &Reference{
	ref: "AWS::QuickSight::DataSet_LogicalTableMap",
},
				"Name": &Reference{
	type_: String,
},
				"OutputColumns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::DataSet_OutputColumn",
},
},
				"Permissions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::DataSet_ResourcePermission",
},
},
				"PhysicalTableMap": &Reference{
	ref: "AWS::QuickSight::DataSet_PhysicalTableMap",
},
				"RowLevelPermissionDataSet": &Reference{
	ref: "AWS::QuickSight::DataSet_RowLevelPermissionDataSet",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::DataSet_Tag",
},
},
		},
	},
	"AWS::QuickSight::DataSource": {
		Properties: map[string]*Reference{
				"AlternateDataSourceParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::DataSource_DataSourceParameters",
},
},
				"Arn": &Reference{
	type_: String,
},
				"AwsAccountId": &Reference{
	type_: String,
},
				"CreatedTime": &Reference{
	type_: String,
},
				"Credentials": &Reference{
	ref: "AWS::QuickSight::DataSource_DataSourceCredentials",
},
				"DataSourceId": &Reference{
	type_: String,
},
				"DataSourceParameters": &Reference{
	ref: "AWS::QuickSight::DataSource_DataSourceParameters",
},
				"ErrorInfo": &Reference{
	ref: "AWS::QuickSight::DataSource_DataSourceErrorInfo",
},
				"LastUpdatedTime": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Permissions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::DataSource_ResourcePermission",
},
},
				"SslProperties": &Reference{
	ref: "AWS::QuickSight::DataSource_SslProperties",
},
				"Status": &Reference{
	ref: "AWS::QuickSight::DataSource_ResourceStatus",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::DataSource_Tag",
},
},
				"Type": &Reference{
	ref: "AWS::QuickSight::DataSource_DataSourceType",
},
				"VpcConnectionProperties": &Reference{
	ref: "AWS::QuickSight::DataSource_VpcConnectionProperties",
},
		},
	},
	"AWS::QuickSight::Template": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AwsAccountId": &Reference{
	type_: String,
},
				"CreatedTime": &Reference{
	type_: String,
},
				"LastUpdatedTime": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Permissions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Template_ResourcePermission",
},
},
				"SourceEntity": &Reference{
	ref: "AWS::QuickSight::Template_TemplateSourceEntity",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Template_Tag",
},
},
				"TemplateId": &Reference{
	type_: String,
},
				"Version": &Reference{
	ref: "AWS::QuickSight::Template_TemplateVersion",
},
				"VersionDescription": &Reference{
	type_: String,
},
		},
	},
	"AWS::QuickSight::Theme": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AwsAccountId": &Reference{
	type_: String,
},
				"BaseThemeId": &Reference{
	type_: String,
},
				"Configuration": &Reference{
	ref: "AWS::QuickSight::Theme_ThemeConfiguration",
},
				"CreatedTime": &Reference{
	type_: String,
},
				"LastUpdatedTime": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Permissions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Theme_ResourcePermission",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Theme_Tag",
},
},
				"ThemeId": &Reference{
	type_: String,
},
				"Type": &Reference{
	ref: "AWS::QuickSight::Theme_ThemeType",
},
				"Version": &Reference{
	ref: "AWS::QuickSight::Theme_ThemeVersion",
},
				"VersionDescription": &Reference{
	type_: String,
},
		},
	},
	"AWS::RAM::ResourceShare": {
		Properties: map[string]*Reference{
				"AllowExternalPrincipals": &Reference{
	type_: Boolean,
},
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"PermissionArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Principals": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"ResourceArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RAM::ResourceShare_Tag",
},
},
		},
	},
	"AWS::RDS::DBCluster": {
		Properties: map[string]*Reference{
				"AssociatedRoles": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RDS::DBCluster_DBClusterRole",
},
},
				"AvailabilityZones": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"BacktrackWindow": &Reference{
	type_: Integer,
},
				"BackupRetentionPeriod": &Reference{
	type_: Integer,
},
				"CopyTagsToSnapshot": &Reference{
	type_: Boolean,
},
				"DBClusterIdentifier": &Reference{
	type_: String,
},
				"DBClusterParameterGroupName": &Reference{
	type_: String,
},
				"DBSubnetGroupName": &Reference{
	type_: String,
},
				"DatabaseName": &Reference{
	type_: String,
},
				"DeletionProtection": &Reference{
	type_: Boolean,
},
				"EnableCloudwatchLogsExports": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"EnableHttpEndpoint": &Reference{
	type_: Boolean,
},
				"EnableIAMDatabaseAuthentication": &Reference{
	type_: Boolean,
},
				"EndpointAddress": &Reference{
	type_: String,
},
				"EndpointPort": &Reference{
	type_: String,
},
				"Engine": &Reference{
	type_: String,
},
				"EngineMode": &Reference{
	type_: String,
},
				"EngineVersion": &Reference{
	type_: String,
},
				"GlobalClusterIdentifier": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"MasterUserPassword": &Reference{
	type_: String,
},
				"MasterUsername": &Reference{
	type_: String,
},
				"Port": &Reference{
	type_: Integer,
},
				"PreferredBackupWindow": &Reference{
	type_: String,
},
				"PreferredMaintenanceWindow": &Reference{
	type_: String,
},
				"ReadEndpointAddress": &Reference{
	type_: String,
},
				"ReplicationSourceIdentifier": &Reference{
	type_: String,
},
				"RestoreType": &Reference{
	type_: String,
},
				"ScalingConfiguration": &Reference{
	ref: "AWS::RDS::DBCluster_ScalingConfiguration",
},
				"SnapshotIdentifier": &Reference{
	type_: String,
},
				"SourceDBClusterIdentifier": &Reference{
	type_: String,
},
				"SourceRegion": &Reference{
	type_: String,
},
				"StorageEncrypted": &Reference{
	type_: Boolean,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RDS::DBCluster_Tag",
},
},
				"UseLatestRestorableTime": &Reference{
	type_: Boolean,
},
				"VpcSecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::RDS::DBClusterParameterGroup": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Family": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RDS::DBClusterParameterGroup_Tag",
},
},
		},
	},
	"AWS::RDS::DBInstance": {
		Properties: map[string]*Reference{
				"AllocatedStorage": &Reference{
	type_: String,
},
				"AllowMajorVersionUpgrade": &Reference{
	type_: Boolean,
},
				"AssociatedRoles": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RDS::DBInstance_DBInstanceRole",
},
},
				"AutoMinorVersionUpgrade": &Reference{
	type_: Boolean,
},
				"AvailabilityZone": &Reference{
	type_: String,
},
				"BackupRetentionPeriod": &Reference{
	type_: Integer,
},
				"CACertificateIdentifier": &Reference{
	type_: String,
},
				"CharacterSetName": &Reference{
	type_: String,
},
				"CopyTagsToSnapshot": &Reference{
	type_: Boolean,
},
				"DBClusterIdentifier": &Reference{
	type_: String,
},
				"DBInstanceClass": &Reference{
	type_: String,
},
				"DBInstanceIdentifier": &Reference{
	type_: String,
},
				"DBName": &Reference{
	type_: String,
},
				"DBParameterGroupName": &Reference{
	type_: String,
},
				"DBSecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"DBSnapshotIdentifier": &Reference{
	type_: String,
},
				"DBSubnetGroupName": &Reference{
	type_: String,
},
				"DeleteAutomatedBackups": &Reference{
	type_: Boolean,
},
				"DeletionProtection": &Reference{
	type_: Boolean,
},
				"Domain": &Reference{
	type_: String,
},
				"DomainIAMRoleName": &Reference{
	type_: String,
},
				"EnableCloudwatchLogsExports": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"EnableIAMDatabaseAuthentication": &Reference{
	type_: Boolean,
},
				"EnablePerformanceInsights": &Reference{
	type_: Boolean,
},
				"EndpointAddress": &Reference{
	type_: String,
},
				"EndpointPort": &Reference{
	type_: String,
},
				"Engine": &Reference{
	type_: String,
},
				"EngineVersion": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Iops": &Reference{
	type_: Integer,
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"LicenseModel": &Reference{
	type_: String,
},
				"MasterUserPassword": &Reference{
	type_: String,
},
				"MasterUsername": &Reference{
	type_: String,
},
				"MaxAllocatedStorage": &Reference{
	type_: Integer,
},
				"MonitoringInterval": &Reference{
	type_: Integer,
},
				"MonitoringRoleArn": &Reference{
	type_: String,
},
				"MultiAZ": &Reference{
	type_: Boolean,
},
				"OptionGroupName": &Reference{
	type_: String,
},
				"PerformanceInsightsKMSKeyId": &Reference{
	type_: String,
},
				"PerformanceInsightsRetentionPeriod": &Reference{
	type_: Integer,
},
				"Port": &Reference{
	type_: String,
},
				"PreferredBackupWindow": &Reference{
	type_: String,
},
				"PreferredMaintenanceWindow": &Reference{
	type_: String,
},
				"ProcessorFeatures": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RDS::DBInstance_ProcessorFeature",
},
},
				"PromotionTier": &Reference{
	type_: Integer,
},
				"PubliclyAccessible": &Reference{
	type_: Boolean,
},
				"SourceDBInstanceIdentifier": &Reference{
	type_: String,
},
				"SourceRegion": &Reference{
	type_: String,
},
				"StorageEncrypted": &Reference{
	type_: Boolean,
},
				"StorageType": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RDS::DBInstance_Tag",
},
},
				"Timezone": &Reference{
	type_: String,
},
				"UseDefaultProcessorFeatures": &Reference{
	type_: Boolean,
},
				"VPCSecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::RDS::DBParameterGroup": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Family": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RDS::DBParameterGroup_Tag",
},
},
		},
	},
	"AWS::RDS::DBProxy": {
		Properties: map[string]*Reference{
				"Auth": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RDS::DBProxy_AuthFormat",
},
},
				"DBProxyArn": &Reference{
	type_: String,
},
				"DBProxyName": &Reference{
	type_: String,
},
				"DebugLogging": &Reference{
	type_: Boolean,
},
				"Endpoint": &Reference{
	type_: String,
},
				"EngineFamily": &Reference{
	type_: String,
},
				"IdleClientTimeout": &Reference{
	type_: Integer,
},
				"RequireTLS": &Reference{
	type_: Boolean,
},
				"RoleArn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RDS::DBProxy_TagFormat",
},
},
				"VpcSecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"VpcSubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::RDS::DBProxyEndpoint": {
		Properties: map[string]*Reference{
				"DBProxyEndpointArn": &Reference{
	type_: String,
},
				"DBProxyEndpointName": &Reference{
	type_: String,
},
				"DBProxyName": &Reference{
	type_: String,
},
				"Endpoint": &Reference{
	type_: String,
},
				"IsDefault": &Reference{
	type_: Boolean,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RDS::DBProxyEndpoint_TagFormat",
},
},
				"TargetRole": &Reference{
	type_: String,
},
				"VpcId": &Reference{
	type_: String,
},
				"VpcSecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"VpcSubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::RDS::DBProxyTargetGroup": {
		Properties: map[string]*Reference{
				"ConnectionPoolConfigurationInfo": &Reference{
	ref: "AWS::RDS::DBProxyTargetGroup_ConnectionPoolConfigurationInfoFormat",
},
				"DBClusterIdentifiers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"DBInstanceIdentifiers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"DBProxyName": &Reference{
	type_: String,
},
				"TargetGroupArn": &Reference{
	type_: String,
},
				"TargetGroupName": &Reference{
	type_: String,
},
		},
	},
	"AWS::RDS::DBSecurityGroup": {
		Properties: map[string]*Reference{
				"DBSecurityGroupIngress": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RDS::DBSecurityGroup_Ingress",
},
},
				"EC2VpcId": &Reference{
	type_: String,
},
				"GroupDescription": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RDS::DBSecurityGroup_Tag",
},
},
		},
	},
	"AWS::RDS::DBSecurityGroupIngress": {
		Properties: map[string]*Reference{
				"CIDRIP": &Reference{
	type_: String,
},
				"DBSecurityGroupName": &Reference{
	type_: String,
},
				"EC2SecurityGroupId": &Reference{
	type_: String,
},
				"EC2SecurityGroupName": &Reference{
	type_: String,
},
				"EC2SecurityGroupOwnerId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::RDS::DBSubnetGroup": {
		Properties: map[string]*Reference{
				"DBSubnetGroupDescription": &Reference{
	type_: String,
},
				"DBSubnetGroupName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RDS::DBSubnetGroup_Tag",
},
},
		},
	},
	"AWS::RDS::EventSubscription": {
		Properties: map[string]*Reference{
				"Enabled": &Reference{
	type_: Boolean,
},
				"EventCategories": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SnsTopicArn": &Reference{
	type_: String,
},
				"SourceIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SourceType": &Reference{
	type_: String,
},
				"SubscriptionName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RDS::EventSubscription_Tag",
},
},
		},
	},
	"AWS::RDS::GlobalCluster": {
		Properties: map[string]*Reference{
				"DeletionProtection": &Reference{
	type_: Boolean,
},
				"Engine": &Reference{
	type_: String,
},
				"EngineVersion": &Reference{
	type_: String,
},
				"GlobalClusterIdentifier": &Reference{
	type_: String,
},
				"SourceDBClusterIdentifier": &Reference{
	type_: String,
},
				"StorageEncrypted": &Reference{
	type_: Boolean,
},
		},
	},
	"AWS::RDS::OptionGroup": {
		Properties: map[string]*Reference{
				"EngineName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"MajorEngineVersion": &Reference{
	type_: String,
},
				"OptionConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RDS::OptionGroup_OptionConfiguration",
},
},
				"OptionGroupDescription": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RDS::OptionGroup_Tag",
},
},
		},
	},
	"AWS::RUM::AppMonitor": {
		Properties: map[string]*Reference{
				"AppMonitorConfiguration": &Reference{
	ref: "AWS::RUM::AppMonitor_AppMonitorConfiguration",
},
				"CwLogEnabled": &Reference{
	type_: Boolean,
},
				"Domain": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	ref: "AWS::RUM::AppMonitor_TagDef",
},
		},
	},
	"AWS::Redshift::Cluster": {
		Properties: map[string]*Reference{
				"AllowVersionUpgrade": &Reference{
	type_: Boolean,
},
				"AquaConfigurationStatus": &Reference{
	type_: String,
},
				"AutomatedSnapshotRetentionPeriod": &Reference{
	type_: Integer,
},
				"AvailabilityZone": &Reference{
	type_: String,
},
				"AvailabilityZoneRelocation": &Reference{
	type_: Boolean,
},
				"AvailabilityZoneRelocationStatus": &Reference{
	type_: String,
},
				"Classic": &Reference{
	type_: Boolean,
},
				"ClusterIdentifier": &Reference{
	type_: String,
},
				"ClusterParameterGroupName": &Reference{
	type_: String,
},
				"ClusterSecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"ClusterSubnetGroupName": &Reference{
	type_: String,
},
				"ClusterType": &Reference{
	type_: String,
},
				"ClusterVersion": &Reference{
	type_: String,
},
				"DBName": &Reference{
	type_: String,
},
				"DeferMaintenance": &Reference{
	type_: Boolean,
},
				"DeferMaintenanceDuration": &Reference{
	type_: Integer,
},
				"DeferMaintenanceEndTime": &Reference{
	type_: String,
},
				"DeferMaintenanceIdentifier": &Reference{
	type_: String,
},
				"DeferMaintenanceStartTime": &Reference{
	type_: String,
},
				"DestinationRegion": &Reference{
	type_: String,
},
				"ElasticIp": &Reference{
	type_: String,
},
				"Encrypted": &Reference{
	type_: Boolean,
},
				"Endpoint": &Reference{
	ref: "AWS::Redshift::Cluster_Endpoint",
},
				"EnhancedVpcRouting": &Reference{
	type_: Boolean,
},
				"HsmClientCertificateIdentifier": &Reference{
	type_: String,
},
				"HsmConfigurationIdentifier": &Reference{
	type_: String,
},
				"IamRoles": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Id": &Reference{
	type_: String,
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"LoggingProperties": &Reference{
	ref: "AWS::Redshift::Cluster_LoggingProperties",
},
				"MaintenanceTrackName": &Reference{
	type_: String,
},
				"ManualSnapshotRetentionPeriod": &Reference{
	type_: Integer,
},
				"MasterUserPassword": &Reference{
	type_: String,
},
				"MasterUsername": &Reference{
	type_: String,
},
				"NodeType": &Reference{
	type_: String,
},
				"NumberOfNodes": &Reference{
	type_: Integer,
},
				"OwnerAccount": &Reference{
	type_: String,
},
				"Port": &Reference{
	type_: Integer,
},
				"PreferredMaintenanceWindow": &Reference{
	type_: String,
},
				"PubliclyAccessible": &Reference{
	type_: Boolean,
},
				"ResourceAction": &Reference{
	type_: String,
},
				"RevisionTarget": &Reference{
	type_: String,
},
				"RotateEncryptionKey": &Reference{
	type_: Boolean,
},
				"SnapshotClusterIdentifier": &Reference{
	type_: String,
},
				"SnapshotCopyGrantName": &Reference{
	type_: String,
},
				"SnapshotCopyManual": &Reference{
	type_: Boolean,
},
				"SnapshotCopyRetentionPeriod": &Reference{
	type_: Integer,
},
				"SnapshotIdentifier": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Redshift::Cluster_Tag",
},
},
				"VpcSecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::Redshift::ClusterParameterGroup": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"ParameterGroupFamily": &Reference{
	type_: String,
},
				"Parameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Redshift::ClusterParameterGroup_Parameter",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Redshift::ClusterParameterGroup_Tag",
},
},
		},
	},
	"AWS::Redshift::ClusterSecurityGroup": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Redshift::ClusterSecurityGroup_Tag",
},
},
		},
	},
	"AWS::Redshift::ClusterSecurityGroupIngress": {
		Properties: map[string]*Reference{
				"CIDRIP": &Reference{
	type_: String,
},
				"ClusterSecurityGroupName": &Reference{
	type_: String,
},
				"EC2SecurityGroupName": &Reference{
	type_: String,
},
				"EC2SecurityGroupOwnerId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::Redshift::ClusterSubnetGroup": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Redshift::ClusterSubnetGroup_Tag",
},
},
		},
	},
	"AWS::Redshift::EndpointAccess": {
		Properties: map[string]*Reference{
				"Address": &Reference{
	type_: String,
},
				"ClusterIdentifier": &Reference{
	type_: String,
},
				"EndpointCreateTime": &Reference{
	type_: String,
},
				"EndpointName": &Reference{
	type_: String,
},
				"EndpointStatus": &Reference{
	type_: String,
},
				"Port": &Reference{
	type_: Integer,
},
				"ResourceOwner": &Reference{
	type_: String,
},
				"SubnetGroupName": &Reference{
	type_: String,
},
				"VpcEndpoint": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NetworkInterfaces": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Redshift::EndpointAccess_NetworkInterface",
},
},
			"VpcEndpointId": &Reference{
	type_: String,
},
			"VpcId": &Reference{
	type_: String,
},
	},
},
				"VpcSecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"VpcSecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Redshift::EndpointAccess_VpcSecurityGroup",
},
},
		},
	},
	"AWS::Redshift::EndpointAuthorization": {
		Properties: map[string]*Reference{
				"Account": &Reference{
	ref: "AWS::Redshift::EndpointAuthorization_AwsAccount",
},
				"AllowedAllVPCs": &Reference{
	type_: Boolean,
},
				"AllowedVPCs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Redshift::EndpointAuthorization_VpcId",
},
},
				"AuthorizeTime": &Reference{
	type_: String,
},
				"ClusterIdentifier": &Reference{
	type_: String,
},
				"ClusterStatus": &Reference{
	type_: String,
},
				"EndpointCount": &Reference{
	type_: Integer,
},
				"Force": &Reference{
	type_: Boolean,
},
				"Grantee": &Reference{
	ref: "AWS::Redshift::EndpointAuthorization_AwsAccount",
},
				"Grantor": &Reference{
	ref: "AWS::Redshift::EndpointAuthorization_AwsAccount",
},
				"Status": &Reference{
	type_: String,
},
				"VpcIds": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Redshift::EndpointAuthorization_VpcId",
},
},
		},
	},
	"AWS::Redshift::EventSubscription": {
		Properties: map[string]*Reference{
				"CustSubscriptionId": &Reference{
	type_: String,
},
				"CustomerAwsId": &Reference{
	type_: String,
},
				"Enabled": &Reference{
	type_: Boolean,
},
				"EventCategories": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"EventCategoriesList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Severity": &Reference{
	type_: String,
},
				"SnsTopicArn": &Reference{
	type_: String,
},
				"SourceIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SourceIdsList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SourceType": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
				"SubscriptionCreationTime": &Reference{
	type_: String,
},
				"SubscriptionName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Redshift::EventSubscription_Tag",
},
},
		},
	},
	"AWS::Redshift::ScheduledAction": {
		Properties: map[string]*Reference{
				"Enable": &Reference{
	type_: Boolean,
},
				"EndTime": &Reference{
	ref: "AWS::Redshift::ScheduledAction_timestamp",
},
				"IamRole": &Reference{
	type_: String,
},
				"NextInvocations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Redshift::ScheduledAction_timestamp",
},
},
				"Schedule": &Reference{
	type_: String,
},
				"ScheduledActionDescription": &Reference{
	type_: String,
},
				"ScheduledActionName": &Reference{
	type_: String,
},
				"StartTime": &Reference{
	ref: "AWS::Redshift::ScheduledAction_timestamp",
},
				"State": &Reference{
	type_: String,
},
				"TargetAction": &Reference{
	ref: "AWS::Redshift::ScheduledAction_ScheduledActionType",
},
		},
	},
	"AWS::RedshiftServerless::Namespace": {
		Properties: map[string]*Reference{
				"AdminUserPassword": &Reference{
	type_: String,
},
				"AdminUsername": &Reference{
	type_: String,
},
				"DbName": &Reference{
	type_: String,
},
				"DefaultIamRoleArn": &Reference{
	type_: String,
},
				"FinalSnapshotName": &Reference{
	type_: String,
},
				"FinalSnapshotRetentionPeriod": &Reference{
	type_: Integer,
},
				"IamRoles": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"LogExports": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RedshiftServerless::Namespace_LogExport",
},
},
				"Namespace": &Reference{
	ref: "AWS::RedshiftServerless::Namespace_Namespace",
},
				"NamespaceName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RedshiftServerless::Namespace_Tag",
},
},
		},
	},
	"AWS::RefactorSpaces::Application": {
		Properties: map[string]*Reference{
				"ApiGatewayId": &Reference{
	type_: String,
},
				"ApiGatewayProxy": &Reference{
	ref: "AWS::RefactorSpaces::Application_ApiGatewayProxyInput",
},
				"ApplicationIdentifier": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"EnvironmentIdentifier": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"NlbArn": &Reference{
	type_: String,
},
				"NlbName": &Reference{
	type_: String,
},
				"ProxyType": &Reference{
	ref: "AWS::RefactorSpaces::Application_ProxyType",
},
				"ProxyUrl": &Reference{
	type_: String,
},
				"StageName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RefactorSpaces::Application_Tag",
},
},
				"VpcId": &Reference{
	type_: String,
},
				"VpcLinkId": &Reference{
	type_: String,
},
		},
	},
	"AWS::RefactorSpaces::Environment": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"EnvironmentIdentifier": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"NetworkFabricType": &Reference{
	ref: "AWS::RefactorSpaces::Environment_NetworkFabricType",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RefactorSpaces::Environment_Tag",
},
},
				"TransitGatewayId": &Reference{
	type_: String,
},
		},
	},
	"AWS::RefactorSpaces::Route": {
		Properties: map[string]*Reference{
				"ApplicationIdentifier": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"DefaultRoute": &Reference{
	ref: "AWS::RefactorSpaces::Route_DefaultRouteInput",
},
				"EnvironmentIdentifier": &Reference{
	type_: String,
},
				"PathResourceToId": &Reference{
	type_: String,
},
				"RouteIdentifier": &Reference{
	type_: String,
},
				"RouteType": &Reference{
	ref: "AWS::RefactorSpaces::Route_RouteType",
},
				"ServiceIdentifier": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RefactorSpaces::Route_Tag",
},
},
				"UriPathRoute": &Reference{
	ref: "AWS::RefactorSpaces::Route_UriPathRouteInput",
},
		},
	},
	"AWS::RefactorSpaces::Service": {
		Properties: map[string]*Reference{
				"ApplicationIdentifier": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"EndpointType": &Reference{
	ref: "AWS::RefactorSpaces::Service_ServiceEndpointType",
},
				"EnvironmentIdentifier": &Reference{
	type_: String,
},
				"LambdaEndpoint": &Reference{
	ref: "AWS::RefactorSpaces::Service_LambdaEndpointInput",
},
				"Name": &Reference{
	type_: String,
},
				"ServiceIdentifier": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RefactorSpaces::Service_Tag",
},
},
				"UrlEndpoint": &Reference{
	ref: "AWS::RefactorSpaces::Service_UrlEndpointInput",
},
				"VpcId": &Reference{
	type_: String,
},
		},
	},
	"AWS::Rekognition::Collection": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::Rekognition::Collection_Arn",
},
				"CollectionId": &Reference{
	ref: "AWS::Rekognition::Collection_CollectionId",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Rekognition::Collection_Tag",
},
},
		},
	},
	"AWS::Rekognition::Project": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::Rekognition::Project_Arn",
},
				"ProjectName": &Reference{
	ref: "AWS::Rekognition::Project_ProjectName",
},
		},
	},
	"AWS::Rekognition::StreamProcessor": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::Rekognition::StreamProcessor_Arn",
},
				"BoundingBoxRegionsOfInterest": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Rekognition::StreamProcessor_BoundingBox",
},
},
				"ConnectedHomeSettings": &Reference{
	ref: "AWS::Rekognition::StreamProcessor_ConnectedHomeSettings",
},
				"DataSharingPreference": &Reference{
	ref: "AWS::Rekognition::StreamProcessor_DataSharingPreference",
},
				"FaceSearchSettings": &Reference{
	ref: "AWS::Rekognition::StreamProcessor_FaceSearchSettings",
},
				"KinesisDataStream": &Reference{
	ref: "AWS::Rekognition::StreamProcessor_KinesisDataStream",
},
				"KinesisVideoStream": &Reference{
	ref: "AWS::Rekognition::StreamProcessor_KinesisVideoStream",
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"NotificationChannel": &Reference{
	ref: "AWS::Rekognition::StreamProcessor_NotificationChannel",
},
				"PolygonRegionsOfInterest": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Rekognition::StreamProcessor_Polygon",
},
},
				"RoleArn": &Reference{
	type_: String,
},
				"S3Destination": &Reference{
	ref: "AWS::Rekognition::StreamProcessor_S3Destination",
},
				"Status": &Reference{
	type_: String,
},
				"StatusMessage": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Rekognition::StreamProcessor_Tag",
},
},
		},
	},
	"AWS::ResilienceHub::App": {
		Properties: map[string]*Reference{
				"AppArn": &Reference{
	type_: String,
},
				"AppAssessmentSchedule": &Reference{
	type_: String,
},
				"AppTemplateBody": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"ResiliencyPolicyArn": &Reference{
	type_: String,
},
				"ResourceMappings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ResilienceHub::App_ResourceMapping",
},
},
				"Tags": &Reference{
	ref: "AWS::ResilienceHub::App_TagMap",
},
		},
	},
	"AWS::ResilienceHub::ResiliencyPolicy": {
		Properties: map[string]*Reference{
				"DataLocationConstraint": &Reference{
	type_: String,
},
				"Policy": &Reference{
	ref: "AWS::ResilienceHub::ResiliencyPolicy_PolicyMap",
},
				"PolicyArn": &Reference{
	type_: String,
},
				"PolicyDescription": &Reference{
	type_: String,
},
				"PolicyName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	ref: "AWS::ResilienceHub::ResiliencyPolicy_TagMap",
},
				"Tier": &Reference{
	type_: String,
},
		},
	},
	"AWS::ResourceGroups::Group": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Configuration": &Reference{
	ref: "AWS::ResourceGroups::Group_Configuration",
},
				"Description": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"ResourceQuery": &Reference{
	ref: "AWS::ResourceGroups::Group_ResourceQuery",
},
				"Resources": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ResourceGroups::Group_Tag",
},
},
		},
	},
	"AWS::RoboMaker::Fleet": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::RoboMaker::Fleet_Arn",
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	ref: "AWS::RoboMaker::Fleet_Tags",
},
		},
	},
	"AWS::RoboMaker::Robot": {
		Properties: map[string]*Reference{
				"Architecture": &Reference{
	type_: String,
},
				"Arn": &Reference{
	ref: "AWS::RoboMaker::Robot_Arn",
},
				"Fleet": &Reference{
	type_: String,
},
				"GreengrassGroupId": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	ref: "AWS::RoboMaker::Robot_Tags",
},
		},
	},
	"AWS::RoboMaker::RobotApplication": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::RoboMaker::RobotApplication_Arn",
},
				"CurrentRevisionId": &Reference{
	type_: String,
},
				"Environment": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RobotSoftwareSuite": &Reference{
	ref: "AWS::RoboMaker::RobotApplication_RobotSoftwareSuite",
},
				"Sources": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RoboMaker::RobotApplication_SourceConfig",
},
},
				"Tags": &Reference{
	ref: "AWS::RoboMaker::RobotApplication_Tags",
},
		},
	},
	"AWS::RoboMaker::RobotApplicationVersion": {
		Properties: map[string]*Reference{
				"Application": &Reference{
	ref: "AWS::RoboMaker::RobotApplicationVersion_Arn",
},
				"ApplicationVersion": &Reference{
	type_: String,
},
				"Arn": &Reference{
	ref: "AWS::RoboMaker::RobotApplicationVersion_Arn",
},
				"CurrentRevisionId": &Reference{
	type_: String,
},
		},
	},
	"AWS::RoboMaker::SimulationApplication": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::RoboMaker::SimulationApplication_Arn",
},
				"CurrentRevisionId": &Reference{
	type_: String,
},
				"Environment": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RenderingEngine": &Reference{
	ref: "AWS::RoboMaker::SimulationApplication_RenderingEngine",
},
				"RobotSoftwareSuite": &Reference{
	ref: "AWS::RoboMaker::SimulationApplication_RobotSoftwareSuite",
},
				"SimulationSoftwareSuite": &Reference{
	ref: "AWS::RoboMaker::SimulationApplication_SimulationSoftwareSuite",
},
				"Sources": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RoboMaker::SimulationApplication_SourceConfig",
},
},
				"Tags": &Reference{
	ref: "AWS::RoboMaker::SimulationApplication_Tags",
},
		},
	},
	"AWS::RoboMaker::SimulationApplicationVersion": {
		Properties: map[string]*Reference{
				"Application": &Reference{
	ref: "AWS::RoboMaker::SimulationApplicationVersion_Arn",
},
				"ApplicationVersion": &Reference{
	type_: String,
},
				"Arn": &Reference{
	ref: "AWS::RoboMaker::SimulationApplicationVersion_Arn",
},
				"CurrentRevisionId": &Reference{
	type_: String,
},
		},
	},
	"AWS::RolesAnywhere::Profile": {
		Properties: map[string]*Reference{
				"DurationSeconds": &Reference{
	type_: Number,
},
				"Enabled": &Reference{
	type_: Boolean,
},
				"ManagedPolicyArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Name": &Reference{
	type_: String,
},
				"ProfileArn": &Reference{
	type_: String,
},
				"ProfileId": &Reference{
	type_: String,
},
				"RequireInstanceProperties": &Reference{
	type_: Boolean,
},
				"RoleArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SessionPolicy": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RolesAnywhere::Profile_Tag",
},
},
		},
	},
	"AWS::RolesAnywhere::TrustAnchor": {
		Properties: map[string]*Reference{
				"Enabled": &Reference{
	type_: Boolean,
},
				"Name": &Reference{
	type_: String,
},
				"Source": &Reference{
	ref: "AWS::RolesAnywhere::TrustAnchor_Source",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RolesAnywhere::TrustAnchor_Tag",
},
},
				"TrustAnchorArn": &Reference{
	type_: String,
},
				"TrustAnchorId": &Reference{
	type_: String,
},
		},
	},
	"AWS::Route53::CidrCollection": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Locations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Route53::CidrCollection_Location",
},
},
				"Name": &Reference{
	type_: String,
},
		},
	},
	"AWS::Route53::DNSSEC": {
		Properties: map[string]*Reference{
				"HostedZoneId": &Reference{
	type_: String,
},
		},
	},
	"AWS::Route53::HealthCheck": {
		Properties: map[string]*Reference{
				"HealthCheckConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AlarmIdentifier": &Reference{
	ref: "AWS::Route53::HealthCheck_AlarmIdentifier",
},
			"ChildHealthChecks": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"EnableSNI": &Reference{
	type_: Boolean,
},
			"FailureThreshold": &Reference{
	type_: Integer,
},
			"FullyQualifiedDomainName": &Reference{
	type_: String,
},
			"HealthThreshold": &Reference{
	type_: Integer,
},
			"IPAddress": &Reference{
	type_: String,
},
			"InsufficientDataHealthStatus": &Reference{
	type_: String,
},
			"Inverted": &Reference{
	type_: Boolean,
},
			"MeasureLatency": &Reference{
	type_: Boolean,
},
			"Port": &Reference{
	type_: Integer,
},
			"Regions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"RequestInterval": &Reference{
	type_: Integer,
},
			"ResourcePath": &Reference{
	type_: String,
},
			"RoutingControlArn": &Reference{
	type_: String,
},
			"SearchString": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
				"HealthCheckId": &Reference{
	type_: String,
},
				"HealthCheckTags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Route53::HealthCheck_HealthCheckTag",
},
},
		},
	},
	"AWS::Route53::HostedZone": {
		Properties: map[string]*Reference{
				"HostedZoneConfig": &Reference{
	ref: "AWS::Route53::HostedZone_HostedZoneConfig",
},
				"HostedZoneTags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Route53::HostedZone_HostedZoneTag",
},
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"NameServers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"QueryLoggingConfig": &Reference{
	ref: "AWS::Route53::HostedZone_QueryLoggingConfig",
},
				"VPCs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Route53::HostedZone_VPC",
},
},
		},
	},
	"AWS::Route53::KeySigningKey": {
		Properties: map[string]*Reference{
				"HostedZoneId": &Reference{
	type_: String,
},
				"KeyManagementServiceArn": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
		},
	},
	"AWS::Route53::RecordSet": {
		Properties: map[string]*Reference{
				"AliasTarget": &Reference{
	ref: "AWS::Route53::RecordSet_AliasTarget",
},
				"CidrRoutingConfig": &Reference{
	ref: "AWS::Route53::RecordSet_CidrRoutingConfig",
},
				"Comment": &Reference{
	type_: String,
},
				"Failover": &Reference{
	type_: String,
},
				"GeoLocation": &Reference{
	ref: "AWS::Route53::RecordSet_GeoLocation",
},
				"HealthCheckId": &Reference{
	type_: String,
},
				"HostedZoneId": &Reference{
	type_: String,
},
				"HostedZoneName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"MultiValueAnswer": &Reference{
	type_: Boolean,
},
				"Name": &Reference{
	type_: String,
},
				"Region": &Reference{
	type_: String,
},
				"ResourceRecords": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SetIdentifier": &Reference{
	type_: String,
},
				"TTL": &Reference{
	type_: String,
},
				"Type": &Reference{
	type_: String,
},
				"Weight": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::Route53::RecordSetGroup": {
		Properties: map[string]*Reference{
				"Comment": &Reference{
	type_: String,
},
				"HostedZoneId": &Reference{
	type_: String,
},
				"HostedZoneName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"RecordSets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Route53::RecordSetGroup_RecordSet",
},
},
		},
	},
	"AWS::Route53Resolver::FirewallDomainList": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CreationTime": &Reference{
	type_: String,
},
				"CreatorRequestId": &Reference{
	type_: String,
},
				"DomainCount": &Reference{
	type_: Integer,
},
				"DomainFileUrl": &Reference{
	type_: String,
},
				"Domains": &Reference{
	ref: "AWS::Route53Resolver::FirewallDomainList_Domains",
},
				"Id": &Reference{
	type_: String,
},
				"ManagedOwnerName": &Reference{
	type_: String,
},
				"ModificationTime": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
				"StatusMessage": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Route53Resolver::FirewallDomainList_Tag",
},
},
		},
	},
	"AWS::Route53Resolver::FirewallRuleGroup": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CreationTime": &Reference{
	type_: String,
},
				"CreatorRequestId": &Reference{
	type_: String,
},
				"FirewallRules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Route53Resolver::FirewallRuleGroup_FirewallRule",
},
},
				"Id": &Reference{
	type_: String,
},
				"ModificationTime": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"OwnerId": &Reference{
	type_: String,
},
				"RuleCount": &Reference{
	type_: Integer,
},
				"ShareStatus": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
				"StatusMessage": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Route53Resolver::FirewallRuleGroup_Tag",
},
},
		},
	},
	"AWS::Route53Resolver::FirewallRuleGroupAssociation": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CreationTime": &Reference{
	type_: String,
},
				"CreatorRequestId": &Reference{
	type_: String,
},
				"FirewallRuleGroupId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"ManagedOwnerName": &Reference{
	type_: String,
},
				"ModificationTime": &Reference{
	type_: String,
},
				"MutationProtection": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Priority": &Reference{
	type_: Integer,
},
				"Status": &Reference{
	type_: String,
},
				"StatusMessage": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Route53Resolver::FirewallRuleGroupAssociation_Tag",
},
},
				"VpcId": &Reference{
	type_: String,
},
		},
	},
	"AWS::Route53Resolver::ResolverConfig": {
		Properties: map[string]*Reference{
				"AutodefinedReverse": &Reference{
	type_: String,
},
				"AutodefinedReverseFlag": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"OwnerId": &Reference{
	type_: String,
},
				"ResourceId": &Reference{
	type_: String,
},
		},
	},
	"AWS::Route53Resolver::ResolverDNSSECConfig": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"OwnerId": &Reference{
	type_: String,
},
				"ResourceId": &Reference{
	type_: String,
},
				"ValidationStatus": &Reference{
	type_: String,
},
		},
	},
	"AWS::Route53Resolver::ResolverEndpoint": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Direction": &Reference{
	type_: String,
},
				"HostVPCId": &Reference{
	type_: String,
},
				"IpAddressCount": &Reference{
	type_: String,
},
				"IpAddresses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Route53Resolver::ResolverEndpoint_IpAddressRequest",
},
},
				"Name": &Reference{
	type_: String,
},
				"ResolverEndpointId": &Reference{
	type_: String,
},
				"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Route53Resolver::ResolverEndpoint_Tag",
},
},
		},
	},
	"AWS::Route53Resolver::ResolverQueryLoggingConfig": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"AssociationCount": &Reference{
	type_: Integer,
},
				"CreationTime": &Reference{
	type_: String,
},
				"CreatorRequestId": &Reference{
	type_: String,
},
				"DestinationArn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"OwnerId": &Reference{
	type_: String,
},
				"ShareStatus": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
		},
	},
	"AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation": {
		Properties: map[string]*Reference{
				"CreationTime": &Reference{
	type_: String,
},
				"Error": &Reference{
	type_: String,
},
				"ErrorMessage": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"ResolverQueryLogConfigId": &Reference{
	type_: String,
},
				"ResourceId": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
		},
	},
	"AWS::Route53Resolver::ResolverRule": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"DomainName": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"ResolverEndpointId": &Reference{
	type_: String,
},
				"ResolverRuleId": &Reference{
	type_: String,
},
				"RuleType": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Route53Resolver::ResolverRule_Tag",
},
},
				"TargetIps": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Route53Resolver::ResolverRule_TargetAddress",
},
},
		},
	},
	"AWS::Route53Resolver::ResolverRuleAssociation": {
		Properties: map[string]*Reference{
				"Name": &Reference{
	type_: String,
},
				"ResolverRuleAssociationId": &Reference{
	type_: String,
},
				"ResolverRuleId": &Reference{
	type_: String,
},
				"VPCId": &Reference{
	type_: String,
},
		},
	},
	"AWS::S3::AccessPoint": {
		Properties: map[string]*Reference{
				"Alias": &Reference{
	type_: String,
},
				"Arn": &Reference{
	ref: "AWS::S3::AccessPoint_Arn",
},
				"Bucket": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"NetworkOrigin": &Reference{
	type_: String,
},
				"Policy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"PolicyStatus": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IsPublic": &Reference{
	type_: String,
},
	},
},
				"PublicAccessBlockConfiguration": &Reference{
	ref: "AWS::S3::AccessPoint_PublicAccessBlockConfiguration",
},
				"VpcConfiguration": &Reference{
	ref: "AWS::S3::AccessPoint_VpcConfiguration",
},
		},
	},
	"AWS::S3::Bucket": {
		Properties: map[string]*Reference{
				"AccelerateConfiguration": &Reference{
	ref: "AWS::S3::Bucket_AccelerateConfiguration",
},
				"AccessControl": &Reference{
	type_: String,
},
				"AnalyticsConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_AnalyticsConfiguration",
},
},
				"Arn": &Reference{
	ref: "AWS::S3::Bucket_Arn",
},
				"BucketEncryption": &Reference{
	ref: "AWS::S3::Bucket_BucketEncryption",
},
				"BucketName": &Reference{
	type_: String,
},
				"CorsConfiguration": &Reference{
	ref: "AWS::S3::Bucket_CorsConfiguration",
},
				"DomainName": &Reference{
	type_: String,
},
				"DualStackDomainName": &Reference{
	type_: String,
},
				"IntelligentTieringConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_IntelligentTieringConfiguration",
},
},
				"InventoryConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_InventoryConfiguration",
},
},
				"LifecycleConfiguration": &Reference{
	ref: "AWS::S3::Bucket_LifecycleConfiguration",
},
				"LoggingConfiguration": &Reference{
	ref: "AWS::S3::Bucket_LoggingConfiguration",
},
				"MetricsConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_MetricsConfiguration",
},
},
				"NotificationConfiguration": &Reference{
	ref: "AWS::S3::Bucket_NotificationConfiguration",
},
				"ObjectLockConfiguration": &Reference{
	ref: "AWS::S3::Bucket_ObjectLockConfiguration",
},
				"ObjectLockEnabled": &Reference{
	type_: Boolean,
},
				"OwnershipControls": &Reference{
	ref: "AWS::S3::Bucket_OwnershipControls",
},
				"PublicAccessBlockConfiguration": &Reference{
	ref: "AWS::S3::Bucket_PublicAccessBlockConfiguration",
},
				"RegionalDomainName": &Reference{
	type_: String,
},
				"ReplicationConfiguration": &Reference{
	ref: "AWS::S3::Bucket_ReplicationConfiguration",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_Tag",
},
},
				"VersioningConfiguration": &Reference{
	ref: "AWS::S3::Bucket_VersioningConfiguration",
},
				"WebsiteConfiguration": &Reference{
	ref: "AWS::S3::Bucket_WebsiteConfiguration",
},
				"WebsiteURL": &Reference{
	type_: String,
},
		},
	},
	"AWS::S3::BucketPolicy": {
		Properties: map[string]*Reference{
				"Bucket": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"PolicyDocument": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::S3::MultiRegionAccessPoint": {
		Properties: map[string]*Reference{
				"Alias": &Reference{
	type_: String,
},
				"CreatedAt": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"PublicAccessBlockConfiguration": &Reference{
	ref: "AWS::S3::MultiRegionAccessPoint_PublicAccessBlockConfiguration",
},
				"Regions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::MultiRegionAccessPoint_Region",
},
},
		},
	},
	"AWS::S3::MultiRegionAccessPointPolicy": {
		Properties: map[string]*Reference{
				"MrapName": &Reference{
	type_: String,
},
				"Policy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"PolicyStatus": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IsPublic": &Reference{
	type_: String,
},
	},
},
		},
	},
	"AWS::S3::StorageLens": {
		Properties: map[string]*Reference{
				"StorageLensConfiguration": &Reference{
	ref: "AWS::S3::StorageLens_StorageLensConfiguration",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::StorageLens_Tag",
},
},
		},
	},
	"AWS::S3ObjectLambda::AccessPoint": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"CreationDate": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"ObjectLambdaConfiguration": &Reference{
	ref: "AWS::S3ObjectLambda::AccessPoint_ObjectLambdaConfiguration",
},
				"PolicyStatus": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IsPublic": &Reference{
	type_: Boolean,
},
	},
},
				"PublicAccessBlockConfiguration": &Reference{
	ref: "AWS::S3ObjectLambda::AccessPoint_PublicAccessBlockConfiguration",
},
		},
	},
	"AWS::S3ObjectLambda::AccessPointPolicy": {
		Properties: map[string]*Reference{
				"ObjectLambdaAccessPoint": &Reference{
	type_: String,
},
				"PolicyDocument": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::S3Outposts::AccessPoint": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Bucket": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Policy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"VpcConfiguration": &Reference{
	ref: "AWS::S3Outposts::AccessPoint_VpcConfiguration",
},
		},
	},
	"AWS::S3Outposts::Bucket": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"BucketName": &Reference{
	type_: String,
},
				"LifecycleConfiguration": &Reference{
	ref: "AWS::S3Outposts::Bucket_LifecycleConfiguration",
},
				"OutpostId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3Outposts::Bucket_Tag",
},
},
		},
	},
	"AWS::S3Outposts::BucketPolicy": {
		Properties: map[string]*Reference{
				"Bucket": &Reference{
	type_: String,
},
				"PolicyDocument": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::S3Outposts::Endpoint": {
		Properties: map[string]*Reference{
				"AccessType": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"CidrBlock": &Reference{
	type_: String,
},
				"CreationTime": &Reference{
	ref: "AWS::S3Outposts::Endpoint_iso8601UTC",
},
				"CustomerOwnedIpv4Pool": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"NetworkInterfaces": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3Outposts::Endpoint_NetworkInterface",
},
},
				"OutpostId": &Reference{
	type_: String,
},
				"SecurityGroupId": &Reference{
	type_: String,
},
				"Status": &Reference{
	type_: String,
},
				"SubnetId": &Reference{
	type_: String,
},
		},
	},
	"AWS::SDB::Domain": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::SES::ConfigurationSet": {
		Properties: map[string]*Reference{
				"DeliveryOptions": &Reference{
	ref: "AWS::SES::ConfigurationSet_DeliveryOptions",
},
				"Name": &Reference{
	type_: String,
},
				"ReputationOptions": &Reference{
	ref: "AWS::SES::ConfigurationSet_ReputationOptions",
},
				"SendingOptions": &Reference{
	ref: "AWS::SES::ConfigurationSet_SendingOptions",
},
				"SuppressionOptions": &Reference{
	ref: "AWS::SES::ConfigurationSet_SuppressionOptions",
},
				"TrackingOptions": &Reference{
	ref: "AWS::SES::ConfigurationSet_TrackingOptions",
},
		},
	},
	"AWS::SES::ConfigurationSetEventDestination": {
		Properties: map[string]*Reference{
				"ConfigurationSetName": &Reference{
	type_: String,
},
				"EventDestination": &Reference{
	ref: "AWS::SES::ConfigurationSetEventDestination_EventDestination",
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::SES::ContactList": {
		Properties: map[string]*Reference{
				"ContactListName": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SES::ContactList_Tag",
},
},
				"Topics": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SES::ContactList_Topic",
},
},
		},
	},
	"AWS::SES::DedicatedIpPool": {
		Properties: map[string]*Reference{
				"PoolName": &Reference{
	type_: String,
},
		},
	},
	"AWS::SES::EmailIdentity": {
		Properties: map[string]*Reference{
				"ConfigurationSetAttributes": &Reference{
	ref: "AWS::SES::EmailIdentity_ConfigurationSetAttributes",
},
				"DkimAttributes": &Reference{
	ref: "AWS::SES::EmailIdentity_DkimAttributes",
},
				"DkimDNSTokenName1": &Reference{
	type_: String,
},
				"DkimDNSTokenName2": &Reference{
	type_: String,
},
				"DkimDNSTokenName3": &Reference{
	type_: String,
},
				"DkimDNSTokenValue1": &Reference{
	type_: String,
},
				"DkimDNSTokenValue2": &Reference{
	type_: String,
},
				"DkimDNSTokenValue3": &Reference{
	type_: String,
},
				"DkimSigningAttributes": &Reference{
	ref: "AWS::SES::EmailIdentity_DkimSigningAttributes",
},
				"EmailIdentity": &Reference{
	type_: String,
},
				"FeedbackAttributes": &Reference{
	ref: "AWS::SES::EmailIdentity_FeedbackAttributes",
},
				"MailFromAttributes": &Reference{
	ref: "AWS::SES::EmailIdentity_MailFromAttributes",
},
		},
	},
	"AWS::SES::Template": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Template": &Reference{
	ref: "AWS::SES::Template_Template",
},
		},
	},
	"AWS::SNS::Subscription": {
		Properties: map[string]*Reference{
				"DeliveryPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Endpoint": &Reference{
	type_: String,
},
				"FilterPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Id": &Reference{
	type_: String,
},
				"Protocol": &Reference{
	type_: String,
},
				"RawMessageDelivery": &Reference{
	type_: Boolean,
},
				"RedrivePolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Region": &Reference{
	type_: String,
},
				"SubscriptionRoleArn": &Reference{
	type_: String,
},
				"TopicArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::SNS::Topic": {
		Properties: map[string]*Reference{
				"ContentBasedDeduplication": &Reference{
	type_: Boolean,
},
				"DisplayName": &Reference{
	type_: String,
},
				"FifoTopic": &Reference{
	type_: Boolean,
},
				"Id": &Reference{
	type_: String,
},
				"KmsMasterKeyId": &Reference{
	type_: String,
},
				"Subscription": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SNS::Topic_Subscription",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SNS::Topic_Tag",
},
},
				"TopicName": &Reference{
	type_: String,
},
		},
	},
	"AWS::SNS::TopicPolicy": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"PolicyDocument": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Topics": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::SQS::Queue": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"ContentBasedDeduplication": &Reference{
	type_: Boolean,
},
				"DeduplicationScope": &Reference{
	type_: String,
},
				"DelaySeconds": &Reference{
	type_: Integer,
},
				"FifoQueue": &Reference{
	type_: Boolean,
},
				"FifoThroughputLimit": &Reference{
	type_: String,
},
				"KmsDataKeyReusePeriodSeconds": &Reference{
	type_: Integer,
},
				"KmsMasterKeyId": &Reference{
	type_: String,
},
				"MaximumMessageSize": &Reference{
	type_: Integer,
},
				"MessageRetentionPeriod": &Reference{
	type_: Integer,
},
				"QueueName": &Reference{
	type_: String,
},
				"QueueUrl": &Reference{
	type_: String,
},
				"ReceiveMessageWaitTimeSeconds": &Reference{
	type_: Integer,
},
				"RedriveAllowPolicy": &Reference{
	type_: Unknown,
},
				"RedrivePolicy": &Reference{
	type_: Unknown,
},
				"SqsManagedSseEnabled": &Reference{
	type_: Boolean,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SQS::Queue_Tag",
},
},
				"VisibilityTimeout": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::SQS::QueuePolicy": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"PolicyDocument": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Queues": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::SSM::Association": {
		Properties: map[string]*Reference{
				"ApplyOnlyAtCronInterval": &Reference{
	type_: Boolean,
},
				"AssociationId": &Reference{
	type_: String,
},
				"AssociationName": &Reference{
	type_: String,
},
				"AutomationTargetParameterName": &Reference{
	type_: String,
},
				"CalendarNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"ComplianceSeverity": &Reference{
	type_: String,
},
				"DocumentVersion": &Reference{
	type_: String,
},
				"InstanceId": &Reference{
	type_: String,
},
				"MaxConcurrency": &Reference{
	type_: String,
},
				"MaxErrors": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"OutputLocation": &Reference{
	ref: "AWS::SSM::Association_InstanceAssociationOutputLocation",
},
				"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"ScheduleExpression": &Reference{
	type_: String,
},
				"ScheduleOffset": &Reference{
	type_: Integer,
},
				"SyncCompliance": &Reference{
	type_: String,
},
				"Targets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSM::Association_Target",
},
},
				"WaitForSuccessTimeoutSeconds": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::SSM::Document": {
		Properties: map[string]*Reference{
				"Attachments": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSM::Document_AttachmentsSource",
},
},
				"Content": &Reference{
	type_: Unknown,
},
				"DocumentFormat": &Reference{
	type_: String,
},
				"DocumentType": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Requires": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSM::Document_DocumentRequires",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSM::Document_Tag",
},
},
				"TargetType": &Reference{
	type_: String,
},
				"UpdateMethod": &Reference{
	type_: String,
},
				"VersionName": &Reference{
	type_: String,
},
		},
	},
	"AWS::SSM::MaintenanceWindow": {
		Properties: map[string]*Reference{
				"AllowUnassociatedTargets": &Reference{
	type_: Boolean,
},
				"Cutoff": &Reference{
	type_: Integer,
},
				"Description": &Reference{
	type_: String,
},
				"Duration": &Reference{
	type_: Integer,
},
				"EndDate": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Schedule": &Reference{
	type_: String,
},
				"ScheduleOffset": &Reference{
	type_: Integer,
},
				"ScheduleTimezone": &Reference{
	type_: String,
},
				"StartDate": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSM::MaintenanceWindow_Tag",
},
},
		},
	},
	"AWS::SSM::MaintenanceWindowTarget": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"OwnerInformation": &Reference{
	type_: String,
},
				"ResourceType": &Reference{
	type_: String,
},
				"Targets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSM::MaintenanceWindowTarget_Targets",
},
},
				"WindowId": &Reference{
	type_: String,
},
		},
	},
	"AWS::SSM::MaintenanceWindowTask": {
		Properties: map[string]*Reference{
				"CutoffBehavior": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"LoggingInfo": &Reference{
	ref: "AWS::SSM::MaintenanceWindowTask_LoggingInfo",
},
				"MaxConcurrency": &Reference{
	type_: String,
},
				"MaxErrors": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Priority": &Reference{
	type_: Integer,
},
				"ServiceRoleArn": &Reference{
	type_: String,
},
				"Targets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSM::MaintenanceWindowTask_Target",
},
},
				"TaskArn": &Reference{
	type_: String,
},
				"TaskInvocationParameters": &Reference{
	ref: "AWS::SSM::MaintenanceWindowTask_TaskInvocationParameters",
},
				"TaskParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"TaskType": &Reference{
	type_: String,
},
				"WindowId": &Reference{
	type_: String,
},
		},
	},
	"AWS::SSM::Parameter": {
		Properties: map[string]*Reference{
				"AllowedPattern": &Reference{
	type_: String,
},
				"DataType": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Policies": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Tier": &Reference{
	type_: String,
},
				"Type": &Reference{
	type_: String,
},
				"Value": &Reference{
	type_: String,
},
		},
	},
	"AWS::SSM::PatchBaseline": {
		Properties: map[string]*Reference{
				"ApprovalRules": &Reference{
	ref: "AWS::SSM::PatchBaseline_RuleGroup",
},
				"ApprovedPatches": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"ApprovedPatchesComplianceLevel": &Reference{
	type_: String,
},
				"ApprovedPatchesEnableNonSecurity": &Reference{
	type_: Boolean,
},
				"Description": &Reference{
	type_: String,
},
				"GlobalFilters": &Reference{
	ref: "AWS::SSM::PatchBaseline_PatchFilterGroup",
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"OperatingSystem": &Reference{
	type_: String,
},
				"PatchGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"RejectedPatches": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"RejectedPatchesAction": &Reference{
	type_: String,
},
				"Sources": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSM::PatchBaseline_PatchSource",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSM::PatchBaseline_Tag",
},
},
		},
	},
	"AWS::SSM::ResourceDataSync": {
		Properties: map[string]*Reference{
				"BucketName": &Reference{
	type_: String,
},
				"BucketPrefix": &Reference{
	type_: String,
},
				"BucketRegion": &Reference{
	type_: String,
},
				"KMSKeyArn": &Reference{
	type_: String,
},
				"S3Destination": &Reference{
	ref: "AWS::SSM::ResourceDataSync_S3Destination",
},
				"SyncFormat": &Reference{
	type_: String,
},
				"SyncName": &Reference{
	type_: String,
},
				"SyncSource": &Reference{
	ref: "AWS::SSM::ResourceDataSync_SyncSource",
},
				"SyncType": &Reference{
	type_: String,
},
		},
	},
	"AWS::SSMContacts::Contact": {
		Properties: map[string]*Reference{
				"Alias": &Reference{
	type_: String,
},
				"Arn": &Reference{
	type_: String,
},
				"DisplayName": &Reference{
	type_: String,
},
				"Plan": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSMContacts::Contact_Stage",
},
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::SSMContacts::ContactChannel": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"ChannelAddress": &Reference{
	type_: String,
},
				"ChannelName": &Reference{
	type_: String,
},
				"ChannelType": &Reference{
	type_: String,
},
				"ContactId": &Reference{
	type_: String,
},
				"DeferActivation": &Reference{
	type_: Boolean,
},
		},
	},
	"AWS::SSMIncidents::ReplicationSet": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::SSMIncidents::ReplicationSet_Arn",
},
				"DeletionProtected": &Reference{
	ref: "AWS::SSMIncidents::ReplicationSet_DeletionProtected",
},
				"Regions": &Reference{
	ref: "AWS::SSMIncidents::ReplicationSet_RegionList",
},
		},
	},
	"AWS::SSMIncidents::ResponsePlan": {
		Properties: map[string]*Reference{
				"Actions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSMIncidents::ResponsePlan_Action",
},
},
				"Arn": &Reference{
	type_: String,
},
				"ChatChannel": &Reference{
	ref: "AWS::SSMIncidents::ResponsePlan_ChatChannel",
},
				"DisplayName": &Reference{
	type_: String,
},
				"Engagements": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSMIncidents::ResponsePlan_SSMContact",
},
},
				"IncidentTemplate": &Reference{
	ref: "AWS::SSMIncidents::ResponsePlan_IncidentTemplate",
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSMIncidents::ResponsePlan_Tag",
},
},
		},
	},
	"AWS::SSO::Assignment": {
		Properties: map[string]*Reference{
				"InstanceArn": &Reference{
	type_: String,
},
				"PermissionSetArn": &Reference{
	type_: String,
},
				"PrincipalId": &Reference{
	type_: String,
},
				"PrincipalType": &Reference{
	type_: String,
},
				"TargetId": &Reference{
	type_: String,
},
				"TargetType": &Reference{
	type_: String,
},
		},
	},
	"AWS::SSO::InstanceAccessControlAttributeConfiguration": {
		Properties: map[string]*Reference{
				"AccessControlAttributes": &Reference{
	ref: "AWS::SSO::InstanceAccessControlAttributeConfiguration_AccessControlAttributeList",
},
				"InstanceAccessControlAttributeConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessControlAttributes": &Reference{
	ref: "AWS::SSO::InstanceAccessControlAttributeConfiguration_AccessControlAttributeList",
},
	},
},
				"InstanceArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::SSO::PermissionSet": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"InlinePolicy": &Reference{
	type_: Unknown,
},
				"InstanceArn": &Reference{
	type_: String,
},
				"ManagedPolicies": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSO::PermissionSet_ManagedPolicyArn",
},
},
				"Name": &Reference{
	type_: String,
},
				"PermissionSetArn": &Reference{
	type_: String,
},
				"RelayStateType": &Reference{
	type_: String,
},
				"SessionDuration": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSO::PermissionSet_Tag",
},
},
		},
	},
	"AWS::SageMaker::App": {
		Properties: map[string]*Reference{
				"AppArn": &Reference{
	type_: String,
},
				"AppName": &Reference{
	type_: String,
},
				"AppType": &Reference{
	type_: String,
},
				"DomainId": &Reference{
	type_: String,
},
				"ResourceSpec": &Reference{
	ref: "AWS::SageMaker::App_ResourceSpec",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::App_Tag",
},
},
				"UserProfileName": &Reference{
	type_: String,
},
		},
	},
	"AWS::SageMaker::AppImageConfig": {
		Properties: map[string]*Reference{
				"AppImageConfigArn": &Reference{
	type_: String,
},
				"AppImageConfigName": &Reference{
	type_: String,
},
				"KernelGatewayImageConfig": &Reference{
	ref: "AWS::SageMaker::AppImageConfig_KernelGatewayImageConfig",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::AppImageConfig_Tag",
},
},
		},
	},
	"AWS::SageMaker::CodeRepository": {
		Properties: map[string]*Reference{
				"CodeRepositoryName": &Reference{
	type_: String,
},
				"GitConfig": &Reference{
	ref: "AWS::SageMaker::CodeRepository_GitConfig",
},
				"Id": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::CodeRepository_Tag",
},
},
		},
	},
	"AWS::SageMaker::DataQualityJobDefinition": {
		Properties: map[string]*Reference{
				"CreationTime": &Reference{
	type_: String,
},
				"DataQualityAppSpecification": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_DataQualityAppSpecification",
},
				"DataQualityBaselineConfig": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_DataQualityBaselineConfig",
},
				"DataQualityJobInput": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_DataQualityJobInput",
},
				"DataQualityJobOutputConfig": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_MonitoringOutputConfig",
},
				"EndpointName": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_EndpointName",
},
				"JobDefinitionArn": &Reference{
	type_: String,
},
				"JobDefinitionName": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_JobDefinitionName",
},
				"JobResources": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_MonitoringResources",
},
				"NetworkConfig": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_NetworkConfig",
},
				"RoleArn": &Reference{
	type_: String,
},
				"StoppingCondition": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_StoppingCondition",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_Tag",
},
},
		},
	},
	"AWS::SageMaker::Device": {
		Properties: map[string]*Reference{
				"Device": &Reference{
	ref: "AWS::SageMaker::Device_Device",
},
				"DeviceFleetName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::Device_Tag",
},
},
		},
	},
	"AWS::SageMaker::DeviceFleet": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"DeviceFleetName": &Reference{
	type_: String,
},
				"OutputConfig": &Reference{
	ref: "AWS::SageMaker::DeviceFleet_EdgeOutputConfig",
},
				"RoleArn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::DeviceFleet_Tag",
},
},
		},
	},
	"AWS::SageMaker::Domain": {
		Properties: map[string]*Reference{
				"AppNetworkAccessType": &Reference{
	type_: String,
},
				"AppSecurityGroupManagement": &Reference{
	type_: String,
},
				"AuthMode": &Reference{
	type_: String,
},
				"DefaultUserSettings": &Reference{
	ref: "AWS::SageMaker::Domain_UserSettings",
},
				"DomainArn": &Reference{
	type_: String,
},
				"DomainId": &Reference{
	type_: String,
},
				"DomainName": &Reference{
	type_: String,
},
				"DomainSettings": &Reference{
	ref: "AWS::SageMaker::Domain_DomainSettings",
},
				"HomeEfsFileSystemId": &Reference{
	type_: String,
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"SecurityGroupIdForDomainBoundary": &Reference{
	type_: String,
},
				"SingleSignOnManagedApplicationInstanceId": &Reference{
	type_: String,
},
				"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::Domain_Tag",
},
},
				"Url": &Reference{
	type_: String,
},
				"VpcId": &Reference{
	type_: String,
},
		},
	},
	"AWS::SageMaker::Endpoint": {
		Properties: map[string]*Reference{
				"DeploymentConfig": &Reference{
	ref: "AWS::SageMaker::Endpoint_DeploymentConfig",
},
				"EndpointConfigName": &Reference{
	type_: String,
},
				"EndpointName": &Reference{
	type_: String,
},
				"ExcludeRetainedVariantProperties": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::Endpoint_VariantProperty",
},
},
				"Id": &Reference{
	type_: String,
},
				"RetainAllVariantProperties": &Reference{
	type_: Boolean,
},
				"RetainDeploymentConfig": &Reference{
	type_: Boolean,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::Endpoint_Tag",
},
},
		},
	},
	"AWS::SageMaker::EndpointConfig": {
		Properties: map[string]*Reference{
				"AsyncInferenceConfig": &Reference{
	ref: "AWS::SageMaker::EndpointConfig_AsyncInferenceConfig",
},
				"DataCaptureConfig": &Reference{
	ref: "AWS::SageMaker::EndpointConfig_DataCaptureConfig",
},
				"EndpointConfigName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"ProductionVariants": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::EndpointConfig_ProductionVariant",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::EndpointConfig_Tag",
},
},
		},
	},
	"AWS::SageMaker::FeatureGroup": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"EventTimeFeatureName": &Reference{
	type_: String,
},
				"FeatureDefinitions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::FeatureGroup_FeatureDefinition",
},
},
				"FeatureGroupName": &Reference{
	type_: String,
},
				"OfflineStoreConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataCatalogConfig": &Reference{
	ref: "AWS::SageMaker::FeatureGroup_DataCatalogConfig",
},
			"DisableGlueTableCreation": &Reference{
	type_: Boolean,
},
			"S3StorageConfig": &Reference{
	ref: "AWS::SageMaker::FeatureGroup_S3StorageConfig",
},
	},
},
				"OnlineStoreConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EnableOnlineStore": &Reference{
	type_: Boolean,
},
			"SecurityConfig": &Reference{
	ref: "AWS::SageMaker::FeatureGroup_OnlineStoreSecurityConfig",
},
	},
},
				"RecordIdentifierFeatureName": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::FeatureGroup_Tag",
},
},
		},
	},
	"AWS::SageMaker::Image": {
		Properties: map[string]*Reference{
				"ImageArn": &Reference{
	ref: "AWS::SageMaker::Image_ImageArn",
},
				"ImageDescription": &Reference{
	ref: "AWS::SageMaker::Image_ImageDescription",
},
				"ImageDisplayName": &Reference{
	ref: "AWS::SageMaker::Image_ImageDisplayName",
},
				"ImageName": &Reference{
	ref: "AWS::SageMaker::Image_ImageName",
},
				"ImageRoleArn": &Reference{
	ref: "AWS::SageMaker::Image_ImageRoleArn",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::Image_Tag",
},
},
		},
	},
	"AWS::SageMaker::ImageVersion": {
		Properties: map[string]*Reference{
				"BaseImage": &Reference{
	ref: "AWS::SageMaker::ImageVersion_BaseImage",
},
				"ContainerImage": &Reference{
	ref: "AWS::SageMaker::ImageVersion_ContainerImage",
},
				"ImageArn": &Reference{
	ref: "AWS::SageMaker::ImageVersion_ImageArn",
},
				"ImageName": &Reference{
	ref: "AWS::SageMaker::ImageVersion_ImageName",
},
				"ImageVersionArn": &Reference{
	ref: "AWS::SageMaker::ImageVersion_ImageVersionArn",
},
				"Version": &Reference{
	ref: "AWS::SageMaker::ImageVersion_Version",
},
		},
	},
	"AWS::SageMaker::Model": {
		Properties: map[string]*Reference{
				"Containers": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::Model_ContainerDefinition",
},
},
				"EnableNetworkIsolation": &Reference{
	type_: Boolean,
},
				"ExecutionRoleArn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InferenceExecutionConfig": &Reference{
	ref: "AWS::SageMaker::Model_InferenceExecutionConfig",
},
				"ModelName": &Reference{
	type_: String,
},
				"PrimaryContainer": &Reference{
	ref: "AWS::SageMaker::Model_ContainerDefinition",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::Model_Tag",
},
},
				"VpcConfig": &Reference{
	ref: "AWS::SageMaker::Model_VpcConfig",
},
		},
	},
	"AWS::SageMaker::ModelBiasJobDefinition": {
		Properties: map[string]*Reference{
				"CreationTime": &Reference{
	type_: String,
},
				"EndpointName": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_EndpointName",
},
				"JobDefinitionArn": &Reference{
	type_: String,
},
				"JobDefinitionName": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_JobDefinitionName",
},
				"JobResources": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_MonitoringResources",
},
				"ModelBiasAppSpecification": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_ModelBiasAppSpecification",
},
				"ModelBiasBaselineConfig": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_ModelBiasBaselineConfig",
},
				"ModelBiasJobInput": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_ModelBiasJobInput",
},
				"ModelBiasJobOutputConfig": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_MonitoringOutputConfig",
},
				"NetworkConfig": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_NetworkConfig",
},
				"RoleArn": &Reference{
	type_: String,
},
				"StoppingCondition": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_StoppingCondition",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_Tag",
},
},
		},
	},
	"AWS::SageMaker::ModelExplainabilityJobDefinition": {
		Properties: map[string]*Reference{
				"CreationTime": &Reference{
	type_: String,
},
				"EndpointName": &Reference{
	ref: "AWS::SageMaker::ModelExplainabilityJobDefinition_EndpointName",
},
				"JobDefinitionArn": &Reference{
	type_: String,
},
				"JobDefinitionName": &Reference{
	ref: "AWS::SageMaker::ModelExplainabilityJobDefinition_JobDefinitionName",
},
				"JobResources": &Reference{
	ref: "AWS::SageMaker::ModelExplainabilityJobDefinition_MonitoringResources",
},
				"ModelExplainabilityAppSpecification": &Reference{
	ref: "AWS::SageMaker::ModelExplainabilityJobDefinition_ModelExplainabilityAppSpecification",
},
				"ModelExplainabilityBaselineConfig": &Reference{
	ref: "AWS::SageMaker::ModelExplainabilityJobDefinition_ModelExplainabilityBaselineConfig",
},
				"ModelExplainabilityJobInput": &Reference{
	ref: "AWS::SageMaker::ModelExplainabilityJobDefinition_ModelExplainabilityJobInput",
},
				"ModelExplainabilityJobOutputConfig": &Reference{
	ref: "AWS::SageMaker::ModelExplainabilityJobDefinition_MonitoringOutputConfig",
},
				"NetworkConfig": &Reference{
	ref: "AWS::SageMaker::ModelExplainabilityJobDefinition_NetworkConfig",
},
				"RoleArn": &Reference{
	type_: String,
},
				"StoppingCondition": &Reference{
	ref: "AWS::SageMaker::ModelExplainabilityJobDefinition_StoppingCondition",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelExplainabilityJobDefinition_Tag",
},
},
		},
	},
	"AWS::SageMaker::ModelPackage": {
		Properties: map[string]*Reference{
				"AdditionalInferenceSpecificationDefinition": &Reference{
	ref: "AWS::SageMaker::ModelPackage_AdditionalInferenceSpecificationDefinition",
},
				"AdditionalInferenceSpecifications": &Reference{
	ref: "AWS::SageMaker::ModelPackage_AdditionalInferenceSpecifications",
},
				"AdditionalInferenceSpecificationsToAdd": &Reference{
	ref: "AWS::SageMaker::ModelPackage_AdditionalInferenceSpecifications",
},
				"ApprovalDescription": &Reference{
	ref: "AWS::SageMaker::ModelPackage_ApprovalDescription",
},
				"CertifyForMarketplace": &Reference{
	ref: "AWS::SageMaker::ModelPackage_CertifyForMarketplace",
},
				"ClientToken": &Reference{
	ref: "AWS::SageMaker::ModelPackage_ClientToken",
},
				"CreatedBy": &Reference{
	ref: "AWS::SageMaker::ModelPackage_CreatedBy",
},
				"CreationTime": &Reference{
	ref: "AWS::SageMaker::ModelPackage_CreationTime",
},
				"CustomerMetadataProperties": &Reference{
	ref: "AWS::SageMaker::ModelPackage_CustomerMetadataProperties",
},
				"Domain": &Reference{
	ref: "AWS::SageMaker::ModelPackage_Domain",
},
				"DriftCheckBaselines": &Reference{
	ref: "AWS::SageMaker::ModelPackage_DriftCheckBaselines",
},
				"Environment": &Reference{
	ref: "AWS::SageMaker::ModelPackage_Environment",
},
				"InferenceSpecification": &Reference{
	ref: "AWS::SageMaker::ModelPackage_InferenceSpecification",
},
				"LastModifiedBy": &Reference{
	ref: "AWS::SageMaker::ModelPackage_LastModifiedBy",
},
				"LastModifiedTime": &Reference{
	ref: "AWS::SageMaker::ModelPackage_LastModifiedTime",
},
				"MetadataProperties": &Reference{
	ref: "AWS::SageMaker::ModelPackage_MetadataProperties",
},
				"ModelApprovalStatus": &Reference{
	ref: "AWS::SageMaker::ModelPackage_ModelApprovalStatus",
},
				"ModelMetrics": &Reference{
	ref: "AWS::SageMaker::ModelPackage_ModelMetrics",
},
				"ModelPackageArn": &Reference{
	ref: "AWS::SageMaker::ModelPackage_ModelPackageArn",
},
				"ModelPackageDescription": &Reference{
	ref: "AWS::SageMaker::ModelPackage_ModelPackageDescription",
},
				"ModelPackageGroupName": &Reference{
	ref: "AWS::SageMaker::ModelPackage_ModelPackageGroupName",
},
				"ModelPackageName": &Reference{
	ref: "AWS::SageMaker::ModelPackage_ModelPackageName",
},
				"ModelPackageStatus": &Reference{
	ref: "AWS::SageMaker::ModelPackage_ModelPackageStatus",
},
				"ModelPackageStatusDetails": &Reference{
	ref: "AWS::SageMaker::ModelPackage_ModelPackageStatusDetails",
},
				"ModelPackageStatusItem": &Reference{
	ref: "AWS::SageMaker::ModelPackage_ModelPackageStatusItem",
},
				"ModelPackageVersion": &Reference{
	ref: "AWS::SageMaker::ModelPackage_ModelPackageVersion",
},
				"SamplePayloadUrl": &Reference{
	ref: "AWS::SageMaker::ModelPackage_SamplePayloadUrl",
},
				"SourceAlgorithmSpecification": &Reference{
	ref: "AWS::SageMaker::ModelPackage_SourceAlgorithmSpecification",
},
				"Tag": &Reference{
	ref: "AWS::SageMaker::ModelPackage_Tag",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelPackage_Tag",
},
},
				"Task": &Reference{
	ref: "AWS::SageMaker::ModelPackage_Task",
},
				"ValidationSpecification": &Reference{
	ref: "AWS::SageMaker::ModelPackage_ValidationSpecification",
},
		},
	},
	"AWS::SageMaker::ModelPackageGroup": {
		Properties: map[string]*Reference{
				"CreationTime": &Reference{
	type_: String,
},
				"ModelPackageGroupArn": &Reference{
	ref: "AWS::SageMaker::ModelPackageGroup_ModelPackageGroupArn",
},
				"ModelPackageGroupDescription": &Reference{
	ref: "AWS::SageMaker::ModelPackageGroup_ModelPackageGroupDescription",
},
				"ModelPackageGroupName": &Reference{
	ref: "AWS::SageMaker::ModelPackageGroup_ModelPackageGroupName",
},
				"ModelPackageGroupPolicy": &Reference{
	type_: Unknown,
},
				"ModelPackageGroupStatus": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelPackageGroup_Tag",
},
},
		},
	},
	"AWS::SageMaker::ModelQualityJobDefinition": {
		Properties: map[string]*Reference{
				"CreationTime": &Reference{
	type_: String,
},
				"EndpointName": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_EndpointName",
},
				"JobDefinitionArn": &Reference{
	type_: String,
},
				"JobDefinitionName": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_JobDefinitionName",
},
				"JobResources": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_MonitoringResources",
},
				"ModelQualityAppSpecification": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_ModelQualityAppSpecification",
},
				"ModelQualityBaselineConfig": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_ModelQualityBaselineConfig",
},
				"ModelQualityJobInput": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_ModelQualityJobInput",
},
				"ModelQualityJobOutputConfig": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_MonitoringOutputConfig",
},
				"NetworkConfig": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_NetworkConfig",
},
				"RoleArn": &Reference{
	type_: String,
},
				"StoppingCondition": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_StoppingCondition",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_Tag",
},
},
		},
	},
	"AWS::SageMaker::MonitoringSchedule": {
		Properties: map[string]*Reference{
				"CreationTime": &Reference{
	type_: String,
},
				"EndpointName": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_EndpointName",
},
				"FailureReason": &Reference{
	type_: String,
},
				"LastModifiedTime": &Reference{
	type_: String,
},
				"LastMonitoringExecutionSummary": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_MonitoringExecutionSummary",
},
				"MonitoringScheduleArn": &Reference{
	type_: String,
},
				"MonitoringScheduleConfig": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_MonitoringScheduleConfig",
},
				"MonitoringScheduleName": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_MonitoringScheduleName",
},
				"MonitoringScheduleStatus": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_Tag",
},
},
		},
	},
	"AWS::SageMaker::NotebookInstance": {
		Properties: map[string]*Reference{
				"AcceleratorTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"AdditionalCodeRepositories": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"DefaultCodeRepository": &Reference{
	type_: String,
},
				"DirectInternetAccess": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"InstanceType": &Reference{
	type_: String,
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"LifecycleConfigName": &Reference{
	type_: String,
},
				"NotebookInstanceName": &Reference{
	type_: String,
},
				"PlatformIdentifier": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
				"RootAccess": &Reference{
	type_: String,
},
				"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"SubnetId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::NotebookInstance_Tag",
},
},
				"VolumeSizeInGB": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::SageMaker::NotebookInstanceLifecycleConfig": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"NotebookInstanceLifecycleConfigName": &Reference{
	type_: String,
},
				"OnCreate": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::NotebookInstanceLifecycleConfig_NotebookInstanceLifecycleHook",
},
},
				"OnStart": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::NotebookInstanceLifecycleConfig_NotebookInstanceLifecycleHook",
},
},
		},
	},
	"AWS::SageMaker::Pipeline": {
		Properties: map[string]*Reference{
				"ParallelismConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxParallelExecutionSteps": &Reference{
	type_: Integer,
},
	},
},
				"PipelineDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"PipelineDescription": &Reference{
	type_: String,
},
				"PipelineDisplayName": &Reference{
	type_: String,
},
				"PipelineName": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::Pipeline_Tag",
},
},
		},
	},
	"AWS::SageMaker::Project": {
		Properties: map[string]*Reference{
				"CreationTime": &Reference{
	type_: String,
},
				"ProjectArn": &Reference{
	ref: "AWS::SageMaker::Project_ProjectArn",
},
				"ProjectDescription": &Reference{
	ref: "AWS::SageMaker::Project_ProjectDescription",
},
				"ProjectId": &Reference{
	ref: "AWS::SageMaker::Project_ProjectId",
},
				"ProjectName": &Reference{
	ref: "AWS::SageMaker::Project_ProjectName",
},
				"ProjectStatus": &Reference{
	type_: String,
},
				"ServiceCatalogProvisionedProductDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ProvisionedProductId": &Reference{
	ref: "AWS::SageMaker::Project_ProvisioningArtifactId",
},
			"ProvisionedProductStatusMessage": &Reference{
	ref: "AWS::SageMaker::Project_ProvisionedProductStatusMessage",
},
	},
},
				"ServiceCatalogProvisioningDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PathId": &Reference{
	ref: "AWS::SageMaker::Project_PathId",
},
			"ProductId": &Reference{
	ref: "AWS::SageMaker::Project_ProductId",
},
			"ProvisioningArtifactId": &Reference{
	ref: "AWS::SageMaker::Project_ProvisioningArtifactId",
},
			"ProvisioningParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::Project_ProvisioningParameter",
},
},
	},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::Project_Tag",
},
},
		},
	},
	"AWS::SageMaker::UserProfile": {
		Properties: map[string]*Reference{
				"DomainId": &Reference{
	type_: String,
},
				"SingleSignOnUserIdentifier": &Reference{
	type_: String,
},
				"SingleSignOnUserValue": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::UserProfile_Tag",
},
},
				"UserProfileArn": &Reference{
	type_: String,
},
				"UserProfileName": &Reference{
	type_: String,
},
				"UserSettings": &Reference{
	ref: "AWS::SageMaker::UserProfile_UserSettings",
},
		},
	},
	"AWS::SageMaker::Workteam": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"MemberDefinitions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::Workteam_MemberDefinition",
},
},
				"NotificationConfiguration": &Reference{
	ref: "AWS::SageMaker::Workteam_NotificationConfiguration",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::Workteam_Tag",
},
},
				"WorkteamName": &Reference{
	type_: String,
},
		},
	},
	"AWS::SecretsManager::ResourcePolicy": {
		Properties: map[string]*Reference{
				"BlockPublicPolicy": &Reference{
	type_: Boolean,
},
				"Id": &Reference{
	type_: String,
},
				"ResourcePolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"SecretId": &Reference{
	type_: String,
},
		},
	},
	"AWS::SecretsManager::RotationSchedule": {
		Properties: map[string]*Reference{
				"HostedRotationLambda": &Reference{
	ref: "AWS::SecretsManager::RotationSchedule_HostedRotationLambda",
},
				"Id": &Reference{
	type_: String,
},
				"RotateImmediatelyOnUpdate": &Reference{
	type_: Boolean,
},
				"RotationLambdaARN": &Reference{
	type_: String,
},
				"RotationRules": &Reference{
	ref: "AWS::SecretsManager::RotationSchedule_RotationRules",
},
				"SecretId": &Reference{
	type_: String,
},
		},
	},
	"AWS::SecretsManager::Secret": {
		Properties: map[string]*Reference{
				"Description": &Reference{
	type_: String,
},
				"GenerateSecretString": &Reference{
	ref: "AWS::SecretsManager::Secret_GenerateSecretString",
},
				"Id": &Reference{
	type_: String,
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"ReplicaRegions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SecretsManager::Secret_ReplicaRegion",
},
},
				"SecretString": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SecretsManager::Secret_Tag",
},
},
		},
	},
	"AWS::SecretsManager::SecretTargetAttachment": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"SecretId": &Reference{
	type_: String,
},
				"TargetId": &Reference{
	type_: String,
},
				"TargetType": &Reference{
	type_: String,
},
		},
	},
	"AWS::SecurityHub::Hub": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
		},
	},
	"AWS::ServiceCatalog::AcceptedPortfolioShare": {
		Properties: map[string]*Reference{
				"AcceptLanguage": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"PortfolioId": &Reference{
	type_: String,
},
		},
	},
	"AWS::ServiceCatalog::CloudFormationProduct": {
		Properties: map[string]*Reference{
				"AcceptLanguage": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Distributor": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Owner": &Reference{
	type_: String,
},
				"ProductName": &Reference{
	type_: String,
},
				"ProvisioningArtifactIds": &Reference{
	type_: String,
},
				"ProvisioningArtifactNames": &Reference{
	type_: String,
},
				"ProvisioningArtifactParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ServiceCatalog::CloudFormationProduct_ProvisioningArtifactProperties",
},
},
				"ReplaceProvisioningArtifacts": &Reference{
	type_: Boolean,
},
				"SupportDescription": &Reference{
	type_: String,
},
				"SupportEmail": &Reference{
	type_: String,
},
				"SupportUrl": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ServiceCatalog::CloudFormationProduct_Tag",
},
},
		},
	},
	"AWS::ServiceCatalog::CloudFormationProvisionedProduct": {
		Properties: map[string]*Reference{
				"AcceptLanguage": &Reference{
	type_: String,
},
				"CloudformationStackArn": &Reference{
	type_: String,
},
				"NotificationArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Outputs": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"PathId": &Reference{
	type_: String,
},
				"PathName": &Reference{
	type_: String,
},
				"ProductId": &Reference{
	type_: String,
},
				"ProductName": &Reference{
	type_: String,
},
				"ProvisionedProductId": &Reference{
	type_: String,
},
				"ProvisionedProductName": &Reference{
	type_: String,
},
				"ProvisioningArtifactId": &Reference{
	type_: String,
},
				"ProvisioningArtifactName": &Reference{
	type_: String,
},
				"ProvisioningParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ServiceCatalog::CloudFormationProvisionedProduct_ProvisioningParameter",
},
},
				"ProvisioningPreferences": &Reference{
	ref: "AWS::ServiceCatalog::CloudFormationProvisionedProduct_ProvisioningPreferences",
},
				"RecordId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ServiceCatalog::CloudFormationProvisionedProduct_Tag",
},
},
		},
	},
	"AWS::ServiceCatalog::LaunchNotificationConstraint": {
		Properties: map[string]*Reference{
				"AcceptLanguage": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"NotificationArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"PortfolioId": &Reference{
	type_: String,
},
				"ProductId": &Reference{
	type_: String,
},
		},
	},
	"AWS::ServiceCatalog::LaunchRoleConstraint": {
		Properties: map[string]*Reference{
				"AcceptLanguage": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"LocalRoleName": &Reference{
	type_: String,
},
				"PortfolioId": &Reference{
	type_: String,
},
				"ProductId": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::ServiceCatalog::LaunchTemplateConstraint": {
		Properties: map[string]*Reference{
				"AcceptLanguage": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"PortfolioId": &Reference{
	type_: String,
},
				"ProductId": &Reference{
	type_: String,
},
				"Rules": &Reference{
	type_: String,
},
		},
	},
	"AWS::ServiceCatalog::Portfolio": {
		Properties: map[string]*Reference{
				"AcceptLanguage": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"DisplayName": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"PortfolioName": &Reference{
	type_: String,
},
				"ProviderName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ServiceCatalog::Portfolio_Tag",
},
},
		},
	},
	"AWS::ServiceCatalog::PortfolioPrincipalAssociation": {
		Properties: map[string]*Reference{
				"AcceptLanguage": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"PortfolioId": &Reference{
	type_: String,
},
				"PrincipalARN": &Reference{
	type_: String,
},
				"PrincipalType": &Reference{
	type_: String,
},
		},
	},
	"AWS::ServiceCatalog::PortfolioProductAssociation": {
		Properties: map[string]*Reference{
				"AcceptLanguage": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"PortfolioId": &Reference{
	type_: String,
},
				"ProductId": &Reference{
	type_: String,
},
				"SourcePortfolioId": &Reference{
	type_: String,
},
		},
	},
	"AWS::ServiceCatalog::PortfolioShare": {
		Properties: map[string]*Reference{
				"AcceptLanguage": &Reference{
	type_: String,
},
				"AccountId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"PortfolioId": &Reference{
	type_: String,
},
				"ShareTagOptions": &Reference{
	type_: Boolean,
},
		},
	},
	"AWS::ServiceCatalog::ResourceUpdateConstraint": {
		Properties: map[string]*Reference{
				"AcceptLanguage": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"PortfolioId": &Reference{
	type_: String,
},
				"ProductId": &Reference{
	type_: String,
},
				"TagUpdateOnProvisionedProduct": &Reference{
	type_: String,
},
		},
	},
	"AWS::ServiceCatalog::ServiceAction": {
		Properties: map[string]*Reference{
				"AcceptLanguage": &Reference{
	type_: String,
},
				"Definition": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ServiceCatalog::ServiceAction_DefinitionParameter",
},
},
				"DefinitionType": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
		},
	},
	"AWS::ServiceCatalog::ServiceActionAssociation": {
		Properties: map[string]*Reference{
				"ProductId": &Reference{
	type_: String,
},
				"ProvisioningArtifactId": &Reference{
	type_: String,
},
				"ServiceActionId": &Reference{
	type_: String,
},
		},
	},
	"AWS::ServiceCatalog::StackSetConstraint": {
		Properties: map[string]*Reference{
				"AcceptLanguage": &Reference{
	type_: String,
},
				"AccountList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"AdminRole": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"ExecutionRole": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"PortfolioId": &Reference{
	type_: String,
},
				"ProductId": &Reference{
	type_: String,
},
				"RegionList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"StackInstanceControl": &Reference{
	type_: String,
},
		},
	},
	"AWS::ServiceCatalog::TagOption": {
		Properties: map[string]*Reference{
				"Active": &Reference{
	type_: Boolean,
},
				"Id": &Reference{
	type_: String,
},
				"Key": &Reference{
	type_: String,
},
				"Value": &Reference{
	type_: String,
},
		},
	},
	"AWS::ServiceCatalog::TagOptionAssociation": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"ResourceId": &Reference{
	type_: String,
},
				"TagOptionId": &Reference{
	type_: String,
},
		},
	},
	"AWS::ServiceCatalogAppRegistry::Application": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	ref: "AWS::ServiceCatalogAppRegistry::Application_Tags",
},
		},
	},
	"AWS::ServiceCatalogAppRegistry::AttributeGroup": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Attributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	ref: "AWS::ServiceCatalogAppRegistry::AttributeGroup_Tags",
},
		},
	},
	"AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation": {
		Properties: map[string]*Reference{
				"Application": &Reference{
	type_: String,
},
				"ApplicationArn": &Reference{
	type_: String,
},
				"AttributeGroup": &Reference{
	type_: String,
},
				"AttributeGroupArn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
		},
	},
	"AWS::ServiceCatalogAppRegistry::ResourceAssociation": {
		Properties: map[string]*Reference{
				"Application": &Reference{
	type_: String,
},
				"ApplicationArn": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Resource": &Reference{
	type_: String,
},
				"ResourceArn": &Reference{
	type_: String,
},
				"ResourceType": &Reference{
	type_: String,
},
		},
	},
	"AWS::ServiceDiscovery::HttpNamespace": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ServiceDiscovery::HttpNamespace_Tag",
},
},
		},
	},
	"AWS::ServiceDiscovery::Instance": {
		Properties: map[string]*Reference{
				"InstanceAttributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
				"InstanceId": &Reference{
	type_: String,
},
				"ServiceId": &Reference{
	type_: String,
},
		},
	},
	"AWS::ServiceDiscovery::PrivateDnsNamespace": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"HostedZoneId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Properties": &Reference{
	ref: "AWS::ServiceDiscovery::PrivateDnsNamespace_Properties",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ServiceDiscovery::PrivateDnsNamespace_Tag",
},
},
				"Vpc": &Reference{
	type_: String,
},
		},
	},
	"AWS::ServiceDiscovery::PublicDnsNamespace": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"HostedZoneId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Properties": &Reference{
	ref: "AWS::ServiceDiscovery::PublicDnsNamespace_Properties",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ServiceDiscovery::PublicDnsNamespace_Tag",
},
},
		},
	},
	"AWS::ServiceDiscovery::Service": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"DnsConfig": &Reference{
	ref: "AWS::ServiceDiscovery::Service_DnsConfig",
},
				"HealthCheckConfig": &Reference{
	ref: "AWS::ServiceDiscovery::Service_HealthCheckConfig",
},
				"HealthCheckCustomConfig": &Reference{
	ref: "AWS::ServiceDiscovery::Service_HealthCheckCustomConfig",
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"NamespaceId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ServiceDiscovery::Service_Tag",
},
},
				"Type": &Reference{
	type_: String,
},
		},
	},
	"AWS::Signer::ProfilePermission": {
		Properties: map[string]*Reference{
				"Action": &Reference{
	type_: String,
},
				"Principal": &Reference{
	type_: String,
},
				"ProfileName": &Reference{
	type_: String,
},
				"ProfileVersion": &Reference{
	type_: String,
},
				"StatementId": &Reference{
	type_: String,
},
		},
	},
	"AWS::Signer::SigningProfile": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::Signer::SigningProfile_Arn",
},
				"PlatformId": &Reference{
	ref: "AWS::Signer::SigningProfile_PlatformId",
},
				"ProfileName": &Reference{
	type_: String,
},
				"ProfileVersion": &Reference{
	ref: "AWS::Signer::SigningProfile_ProfileVersion",
},
				"ProfileVersionArn": &Reference{
	ref: "AWS::Signer::SigningProfile_Arn",
},
				"SignatureValidityPeriod": &Reference{
	ref: "AWS::Signer::SigningProfile_SignatureValidityPeriod",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Signer::SigningProfile_Tag",
},
},
		},
	},
	"AWS::StepFunctions::Activity": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::StepFunctions::Activity_TagsEntry",
},
},
		},
	},
	"AWS::StepFunctions::StateMachine": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Definition": &Reference{
	ref: "AWS::StepFunctions::StateMachine_Definition",
},
				"DefinitionS3Location": &Reference{
	ref: "AWS::StepFunctions::StateMachine_S3Location",
},
				"DefinitionString": &Reference{
	type_: String,
},
				"DefinitionSubstitutions": &Reference{
	ref: "AWS::StepFunctions::StateMachine_DefinitionSubstitutions",
},
				"LoggingConfiguration": &Reference{
	ref: "AWS::StepFunctions::StateMachine_LoggingConfiguration",
},
				"Name": &Reference{
	type_: String,
},
				"RoleArn": &Reference{
	type_: String,
},
				"StateMachineName": &Reference{
	type_: String,
},
				"StateMachineType": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::StepFunctions::StateMachine_TagsEntry",
},
},
				"TracingConfiguration": &Reference{
	ref: "AWS::StepFunctions::StateMachine_TracingConfiguration",
},
		},
	},
	"AWS::Synthetics::Canary": {
		Properties: map[string]*Reference{
				"ArtifactConfig": &Reference{
	ref: "AWS::Synthetics::Canary_ArtifactConfig",
},
				"ArtifactS3Location": &Reference{
	type_: String,
},
				"Code": &Reference{
	ref: "AWS::Synthetics::Canary_Code",
},
				"DeleteLambdaResourcesOnCanaryDeletion": &Reference{
	type_: Boolean,
},
				"ExecutionRoleArn": &Reference{
	type_: String,
},
				"FailureRetentionPeriod": &Reference{
	type_: Integer,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RunConfig": &Reference{
	ref: "AWS::Synthetics::Canary_RunConfig",
},
				"RuntimeVersion": &Reference{
	type_: String,
},
				"Schedule": &Reference{
	ref: "AWS::Synthetics::Canary_Schedule",
},
				"StartCanaryAfterCreation": &Reference{
	type_: Boolean,
},
				"State": &Reference{
	type_: String,
},
				"SuccessRetentionPeriod": &Reference{
	type_: Integer,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Synthetics::Canary_Tag",
},
},
				"VPCConfig": &Reference{
	ref: "AWS::Synthetics::Canary_VPCConfig",
},
				"VisualReference": &Reference{
	ref: "AWS::Synthetics::Canary_VisualReference",
},
		},
	},
	"AWS::Timestream::Database": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"DatabaseName": &Reference{
	type_: String,
},
				"KmsKeyId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Timestream::Database_Tag",
},
},
		},
	},
	"AWS::Timestream::ScheduledQuery": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_Arn",
},
				"ClientToken": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_ClientToken",
},
				"ErrorReportConfiguration": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_ErrorReportConfiguration",
},
				"KmsKeyId": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_KmsKeyId",
},
				"NotificationConfiguration": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_NotificationConfiguration",
},
				"QueryString": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_QueryString",
},
				"SQErrorReportConfiguration": &Reference{
	type_: String,
},
				"SQKmsKeyId": &Reference{
	type_: String,
},
				"SQName": &Reference{
	type_: String,
},
				"SQNotificationConfiguration": &Reference{
	type_: String,
},
				"SQQueryString": &Reference{
	type_: String,
},
				"SQScheduleConfiguration": &Reference{
	type_: String,
},
				"SQScheduledQueryExecutionRoleArn": &Reference{
	type_: String,
},
				"SQTargetConfiguration": &Reference{
	type_: String,
},
				"ScheduleConfiguration": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_ScheduleConfiguration",
},
				"ScheduledQueryExecutionRoleArn": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_ScheduledQueryExecutionRoleArn",
},
				"ScheduledQueryName": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_ScheduledQueryName",
},
				"Tags": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_Tags",
},
				"TargetConfiguration": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_TargetConfiguration",
},
		},
	},
	"AWS::Timestream::Table": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"DatabaseName": &Reference{
	type_: String,
},
				"MagneticStoreWriteProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EnableMagneticStoreWrites": &Reference{
	type_: Boolean,
},
			"MagneticStoreRejectedDataLocation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Configuration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketName": &Reference{
	type_: String,
},
			"EncryptionOption": &Reference{
	type_: String,
},
			"KmsKeyId": &Reference{
	type_: String,
},
			"ObjectKeyPrefix": &Reference{
	type_: String,
},
	},
},
	},
},
	},
},
				"Name": &Reference{
	type_: String,
},
				"RetentionProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MagneticStoreRetentionPeriodInDays": &Reference{
	type_: String,
},
			"MemoryStoreRetentionPeriodInHours": &Reference{
	type_: String,
},
	},
},
				"TableName": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Timestream::Table_Tag",
},
},
		},
	},
	"AWS::Transfer::Server": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Certificate": &Reference{
	type_: String,
},
				"Domain": &Reference{
	type_: String,
},
				"EndpointDetails": &Reference{
	ref: "AWS::Transfer::Server_EndpointDetails",
},
				"EndpointType": &Reference{
	type_: String,
},
				"IdentityProviderDetails": &Reference{
	ref: "AWS::Transfer::Server_IdentityProviderDetails",
},
				"IdentityProviderType": &Reference{
	type_: String,
},
				"LoggingRole": &Reference{
	type_: String,
},
				"PostAuthenticationLoginBanner": &Reference{
	type_: String,
},
				"PreAuthenticationLoginBanner": &Reference{
	type_: String,
},
				"ProtocolDetails": &Reference{
	ref: "AWS::Transfer::Server_ProtocolDetails",
},
				"Protocols": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Transfer::Server_Protocol",
},
},
				"SecurityPolicyName": &Reference{
	type_: String,
},
				"ServerId": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Transfer::Server_Tag",
},
},
				"WorkflowDetails": &Reference{
	ref: "AWS::Transfer::Server_WorkflowDetails",
},
		},
	},
	"AWS::Transfer::User": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"HomeDirectory": &Reference{
	type_: String,
},
				"HomeDirectoryMappings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Transfer::User_HomeDirectoryMapEntry",
},
},
				"HomeDirectoryType": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Policy": &Reference{
	type_: String,
},
				"PosixProfile": &Reference{
	ref: "AWS::Transfer::User_PosixProfile",
},
				"Role": &Reference{
	type_: String,
},
				"ServerId": &Reference{
	type_: String,
},
				"SshPublicKeys": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Transfer::User_SshPublicKey",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Transfer::User_Tag",
},
},
				"UserName": &Reference{
	type_: String,
},
		},
	},
	"AWS::Transfer::Workflow": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"OnExceptionSteps": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Transfer::Workflow_WorkflowStep",
},
},
				"Steps": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Transfer::Workflow_WorkflowStep",
},
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Transfer::Workflow_Tag",
},
},
				"WorkflowId": &Reference{
	type_: String,
},
		},
	},
	"AWS::WAF::ByteMatchSet": {
		Properties: map[string]*Reference{
				"ByteMatchTuples": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAF::ByteMatchSet_ByteMatchTuple",
},
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
		},
	},
	"AWS::WAF::IPSet": {
		Properties: map[string]*Reference{
				"IPSetDescriptors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAF::IPSet_IPSetDescriptor",
},
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
		},
	},
	"AWS::WAF::Rule": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"MetricName": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Predicates": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAF::Rule_Predicate",
},
},
		},
	},
	"AWS::WAF::SizeConstraintSet": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"SizeConstraints": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAF::SizeConstraintSet_SizeConstraint",
},
},
		},
	},
	"AWS::WAF::SqlInjectionMatchSet": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"SqlInjectionMatchTuples": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAF::SqlInjectionMatchSet_SqlInjectionMatchTuple",
},
},
		},
	},
	"AWS::WAF::WebACL": {
		Properties: map[string]*Reference{
				"DefaultAction": &Reference{
	ref: "AWS::WAF::WebACL_WafAction",
},
				"Id": &Reference{
	type_: String,
},
				"MetricName": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Rules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAF::WebACL_ActivatedRule",
},
},
		},
	},
	"AWS::WAF::XssMatchSet": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"XssMatchTuples": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAF::XssMatchSet_XssMatchTuple",
},
},
		},
	},
	"AWS::WAFRegional::ByteMatchSet": {
		Properties: map[string]*Reference{
				"ByteMatchTuples": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFRegional::ByteMatchSet_ByteMatchTuple",
},
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
		},
	},
	"AWS::WAFRegional::GeoMatchSet": {
		Properties: map[string]*Reference{
				"GeoMatchConstraints": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFRegional::GeoMatchSet_GeoMatchConstraint",
},
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
		},
	},
	"AWS::WAFRegional::IPSet": {
		Properties: map[string]*Reference{
				"IPSetDescriptors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFRegional::IPSet_IPSetDescriptor",
},
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
		},
	},
	"AWS::WAFRegional::RateBasedRule": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"MatchPredicates": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFRegional::RateBasedRule_Predicate",
},
},
				"MetricName": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RateKey": &Reference{
	type_: String,
},
				"RateLimit": &Reference{
	type_: Integer,
},
		},
	},
	"AWS::WAFRegional::RegexPatternSet": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RegexPatternStrings": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
		},
	},
	"AWS::WAFRegional::Rule": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"MetricName": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Predicates": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFRegional::Rule_Predicate",
},
},
		},
	},
	"AWS::WAFRegional::SizeConstraintSet": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"SizeConstraints": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFRegional::SizeConstraintSet_SizeConstraint",
},
},
		},
	},
	"AWS::WAFRegional::SqlInjectionMatchSet": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"SqlInjectionMatchTuples": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFRegional::SqlInjectionMatchSet_SqlInjectionMatchTuple",
},
},
		},
	},
	"AWS::WAFRegional::WebACL": {
		Properties: map[string]*Reference{
				"DefaultAction": &Reference{
	ref: "AWS::WAFRegional::WebACL_Action",
},
				"Id": &Reference{
	type_: String,
},
				"MetricName": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"Rules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFRegional::WebACL_Rule",
},
},
		},
	},
	"AWS::WAFRegional::WebACLAssociation": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"ResourceArn": &Reference{
	type_: String,
},
				"WebACLId": &Reference{
	type_: String,
},
		},
	},
	"AWS::WAFRegional::XssMatchSet": {
		Properties: map[string]*Reference{
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"XssMatchTuples": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFRegional::XssMatchSet_XssMatchTuple",
},
},
		},
	},
	"AWS::WAFv2::IPSet": {
		Properties: map[string]*Reference{
				"Addresses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::IPSet_IPAddress",
},
},
				"Arn": &Reference{
	ref: "AWS::WAFv2::IPSet_ResourceArn",
},
				"Description": &Reference{
	ref: "AWS::WAFv2::IPSet_EntityDescription",
},
				"IPAddressVersion": &Reference{
	ref: "AWS::WAFv2::IPSet_IPAddressVersion",
},
				"Id": &Reference{
	ref: "AWS::WAFv2::IPSet_EntityId",
},
				"Name": &Reference{
	ref: "AWS::WAFv2::IPSet_EntityName",
},
				"Scope": &Reference{
	ref: "AWS::WAFv2::IPSet_Scope",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::IPSet_Tag",
},
},
		},
	},
	"AWS::WAFv2::LoggingConfiguration": {
		Properties: map[string]*Reference{
				"LogDestinationConfigs": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"LoggingFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DefaultBehavior": &Reference{
	type_: String,
},
			"Filters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::LoggingConfiguration_Filter",
},
},
	},
},
				"ManagedByFirewallManager": &Reference{
	type_: Boolean,
},
				"RedactedFields": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::LoggingConfiguration_FieldToMatch",
},
},
				"ResourceArn": &Reference{
	type_: String,
},
		},
	},
	"AWS::WAFv2::RegexPatternSet": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	type_: String,
},
				"Description": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"Name": &Reference{
	type_: String,
},
				"RegularExpressionList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
				"Scope": &Reference{
	type_: String,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::RegexPatternSet_Tag",
},
},
		},
	},
	"AWS::WAFv2::RuleGroup": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::WAFv2::RuleGroup_ResourceArn",
},
				"AvailableLabels": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::RuleGroup_LabelSummary",
},
},
				"Capacity": &Reference{
	type_: Integer,
},
				"ConsumedLabels": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::RuleGroup_LabelSummary",
},
},
				"CustomResponseBodies": &Reference{
	ref: "AWS::WAFv2::RuleGroup_CustomResponseBodies",
},
				"Description": &Reference{
	ref: "AWS::WAFv2::RuleGroup_EntityDescription",
},
				"Id": &Reference{
	ref: "AWS::WAFv2::RuleGroup_EntityId",
},
				"LabelNamespace": &Reference{
	ref: "AWS::WAFv2::RuleGroup_LabelName",
},
				"Name": &Reference{
	ref: "AWS::WAFv2::RuleGroup_EntityName",
},
				"Rules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::RuleGroup_Rule",
},
},
				"Scope": &Reference{
	ref: "AWS::WAFv2::RuleGroup_Scope",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::RuleGroup_Tag",
},
},
				"VisibilityConfig": &Reference{
	ref: "AWS::WAFv2::RuleGroup_VisibilityConfig",
},
		},
	},
	"AWS::WAFv2::WebACL": {
		Properties: map[string]*Reference{
				"Arn": &Reference{
	ref: "AWS::WAFv2::WebACL_ResourceArn",
},
				"Capacity": &Reference{
	type_: Integer,
},
				"CaptchaConfig": &Reference{
	ref: "AWS::WAFv2::WebACL_CaptchaConfig",
},
				"CustomResponseBodies": &Reference{
	ref: "AWS::WAFv2::WebACL_CustomResponseBodies",
},
				"DefaultAction": &Reference{
	ref: "AWS::WAFv2::WebACL_DefaultAction",
},
				"Description": &Reference{
	ref: "AWS::WAFv2::WebACL_EntityDescription",
},
				"Id": &Reference{
	ref: "AWS::WAFv2::WebACL_EntityId",
},
				"LabelNamespace": &Reference{
	ref: "AWS::WAFv2::WebACL_LabelName",
},
				"Name": &Reference{
	ref: "AWS::WAFv2::WebACL_EntityName",
},
				"Rules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::WebACL_Rule",
},
},
				"Scope": &Reference{
	ref: "AWS::WAFv2::WebACL_Scope",
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::WebACL_Tag",
},
},
				"VisibilityConfig": &Reference{
	ref: "AWS::WAFv2::WebACL_VisibilityConfig",
},
		},
	},
	"AWS::WAFv2::WebACLAssociation": {
		Properties: map[string]*Reference{
				"ResourceArn": &Reference{
	ref: "AWS::WAFv2::WebACLAssociation_ResourceArn",
},
				"WebACLArn": &Reference{
	ref: "AWS::WAFv2::WebACLAssociation_ResourceArn",
},
		},
	},
	"AWS::WorkSpaces::Workspace": {
		Properties: map[string]*Reference{
				"BundleId": &Reference{
	type_: String,
},
				"DirectoryId": &Reference{
	type_: String,
},
				"Id": &Reference{
	type_: String,
},
				"RootVolumeEncryptionEnabled": &Reference{
	type_: Boolean,
},
				"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WorkSpaces::Workspace_Tag",
},
},
				"UserName": &Reference{
	type_: String,
},
				"UserVolumeEncryptionEnabled": &Reference{
	type_: Boolean,
},
				"VolumeEncryptionKey": &Reference{
	type_: String,
},
				"WorkspaceProperties": &Reference{
	ref: "AWS::WorkSpaces::Workspace_WorkspaceProperties",
},
		},
	},
	"AWS::XRay::Group": {
		Properties: map[string]*Reference{
				"FilterExpression": &Reference{
	type_: String,
},
				"GroupARN": &Reference{
	type_: String,
},
				"GroupName": &Reference{
	type_: String,
},
				"InsightsConfiguration": &Reference{
	ref: "AWS::XRay::Group_InsightsConfiguration",
},
				"Tags": &Reference{
	ref: "AWS::XRay::Group_Tags",
},
		},
	},
	"AWS::XRay::SamplingRule": {
		Properties: map[string]*Reference{
				"RuleARN": &Reference{
	ref: "AWS::XRay::SamplingRule_RuleARN",
},
				"RuleName": &Reference{
	ref: "AWS::XRay::SamplingRule_RuleName",
},
				"SamplingRule": &Reference{
	ref: "AWS::XRay::SamplingRule_SamplingRule",
},
				"SamplingRuleRecord": &Reference{
	ref: "AWS::XRay::SamplingRule_SamplingRuleRecord",
},
				"SamplingRuleUpdate": &Reference{
	ref: "AWS::XRay::SamplingRule_SamplingRuleUpdate",
},
				"Tags": &Reference{
	ref: "AWS::XRay::SamplingRule_Tags",
},
		},
	},
	"Alexa::ASK::Skill": {
		Properties: map[string]*Reference{
				"AuthenticationConfiguration": &Reference{
	ref: "Alexa::ASK::Skill_AuthenticationConfiguration",
},
				"Id": &Reference{
	type_: String,
},
				"SkillPackage": &Reference{
	ref: "Alexa::ASK::Skill_SkillPackage",
},
				"VendorId": &Reference{
	type_: String,
},
		},
	},
}

var definitions = map[string]*Reference {
	"AWS::ACMPCA::Certificate_ApiPassthrough": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Extensions": &Reference{
	ref: "AWS::ACMPCA::Certificate_Extensions",
},
			"Subject": &Reference{
	ref: "AWS::ACMPCA::Certificate_Subject",
},
	},
},
	"AWS::ACMPCA::Certificate_Arn": &Reference{
	type_: String,
},
	"AWS::ACMPCA::Certificate_CertificatePolicyList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ACMPCA::Certificate_PolicyInformation",
},
},
	"AWS::ACMPCA::Certificate_CustomAttribute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ObjectIdentifier": &Reference{
	ref: "AWS::ACMPCA::Certificate_CustomObjectIdentifier",
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ACMPCA::Certificate_CustomAttributeList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ACMPCA::Certificate_CustomAttribute",
},
},
	"AWS::ACMPCA::Certificate_CustomExtension": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Critical": &Reference{
	type_: Boolean,
},
			"ObjectIdentifier": &Reference{
	ref: "AWS::ACMPCA::Certificate_CustomObjectIdentifier",
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ACMPCA::Certificate_CustomExtensionList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ACMPCA::Certificate_CustomExtension",
},
},
	"AWS::ACMPCA::Certificate_CustomObjectIdentifier": &Reference{
	type_: String,
},
	"AWS::ACMPCA::Certificate_DnsName": &Reference{
	type_: String,
},
	"AWS::ACMPCA::Certificate_EdiPartyName": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NameAssigner": &Reference{
	type_: String,
},
			"PartyName": &Reference{
	type_: String,
},
	},
},
	"AWS::ACMPCA::Certificate_ExtendedKeyUsage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExtendedKeyUsageObjectIdentifier": &Reference{
	ref: "AWS::ACMPCA::Certificate_CustomObjectIdentifier",
},
			"ExtendedKeyUsageType": &Reference{
	type_: String,
},
	},
},
	"AWS::ACMPCA::Certificate_ExtendedKeyUsageList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ACMPCA::Certificate_ExtendedKeyUsage",
},
},
	"AWS::ACMPCA::Certificate_Extensions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificatePolicies": &Reference{
	ref: "AWS::ACMPCA::Certificate_CertificatePolicyList",
},
			"CustomExtensions": &Reference{
	ref: "AWS::ACMPCA::Certificate_CustomExtensionList",
},
			"ExtendedKeyUsage": &Reference{
	ref: "AWS::ACMPCA::Certificate_ExtendedKeyUsageList",
},
			"KeyUsage": &Reference{
	ref: "AWS::ACMPCA::Certificate_KeyUsage",
},
			"SubjectAlternativeNames": &Reference{
	ref: "AWS::ACMPCA::Certificate_GeneralNameList",
},
	},
},
	"AWS::ACMPCA::Certificate_GeneralName": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DirectoryName": &Reference{
	ref: "AWS::ACMPCA::Certificate_Subject",
},
			"DnsName": &Reference{
	ref: "AWS::ACMPCA::Certificate_DnsName",
},
			"EdiPartyName": &Reference{
	ref: "AWS::ACMPCA::Certificate_EdiPartyName",
},
			"IpAddress": &Reference{
	ref: "AWS::ACMPCA::Certificate_IpAddress",
},
			"OtherName": &Reference{
	ref: "AWS::ACMPCA::Certificate_OtherName",
},
			"RegisteredId": &Reference{
	ref: "AWS::ACMPCA::Certificate_CustomObjectIdentifier",
},
			"Rfc822Name": &Reference{
	ref: "AWS::ACMPCA::Certificate_Rfc822Name",
},
			"UniformResourceIdentifier": &Reference{
	ref: "AWS::ACMPCA::Certificate_UniformResourceIdentifier",
},
	},
},
	"AWS::ACMPCA::Certificate_GeneralNameList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ACMPCA::Certificate_GeneralName",
},
},
	"AWS::ACMPCA::Certificate_IpAddress": &Reference{
	type_: String,
},
	"AWS::ACMPCA::Certificate_KeyUsage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CRLSign": &Reference{
	type_: Boolean,
},
			"DataEncipherment": &Reference{
	type_: Boolean,
},
			"DecipherOnly": &Reference{
	type_: Boolean,
},
			"DigitalSignature": &Reference{
	type_: Boolean,
},
			"EncipherOnly": &Reference{
	type_: Boolean,
},
			"KeyAgreement": &Reference{
	type_: Boolean,
},
			"KeyCertSign": &Reference{
	type_: Boolean,
},
			"KeyEncipherment": &Reference{
	type_: Boolean,
},
			"NonRepudiation": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::ACMPCA::Certificate_OtherName": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TypeId": &Reference{
	ref: "AWS::ACMPCA::Certificate_CustomObjectIdentifier",
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ACMPCA::Certificate_PolicyInformation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertPolicyId": &Reference{
	ref: "AWS::ACMPCA::Certificate_CustomObjectIdentifier",
},
			"PolicyQualifiers": &Reference{
	ref: "AWS::ACMPCA::Certificate_PolicyQualifierInfoList",
},
	},
},
	"AWS::ACMPCA::Certificate_PolicyQualifierInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PolicyQualifierId": &Reference{
	type_: String,
},
			"Qualifier": &Reference{
	ref: "AWS::ACMPCA::Certificate_Qualifier",
},
	},
},
	"AWS::ACMPCA::Certificate_PolicyQualifierInfoList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ACMPCA::Certificate_PolicyQualifierInfo",
},
},
	"AWS::ACMPCA::Certificate_Qualifier": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CpsUri": &Reference{
	type_: String,
},
	},
},
	"AWS::ACMPCA::Certificate_Rfc822Name": &Reference{
	type_: String,
},
	"AWS::ACMPCA::Certificate_Subject": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CommonName": &Reference{
	type_: String,
},
			"Country": &Reference{
	type_: String,
},
			"CustomAttributes": &Reference{
	ref: "AWS::ACMPCA::Certificate_CustomAttributeList",
},
			"DistinguishedNameQualifier": &Reference{
	type_: String,
},
			"GenerationQualifier": &Reference{
	type_: String,
},
			"GivenName": &Reference{
	type_: String,
},
			"Initials": &Reference{
	type_: String,
},
			"Locality": &Reference{
	type_: String,
},
			"Organization": &Reference{
	type_: String,
},
			"OrganizationalUnit": &Reference{
	type_: String,
},
			"Pseudonym": &Reference{
	type_: String,
},
			"SerialNumber": &Reference{
	type_: String,
},
			"State": &Reference{
	type_: String,
},
			"Surname": &Reference{
	type_: String,
},
			"Title": &Reference{
	type_: String,
},
	},
},
	"AWS::ACMPCA::Certificate_UniformResourceIdentifier": &Reference{
	type_: String,
},
	"AWS::ACMPCA::Certificate_Validity": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: Number,
},
	},
},
	"AWS::ACMPCA::CertificateAuthority_AccessDescription": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessLocation": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_GeneralName",
},
			"AccessMethod": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_AccessMethod",
},
	},
},
	"AWS::ACMPCA::CertificateAuthority_AccessMethod": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessMethodType": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_AccessMethodType",
},
			"CustomObjectIdentifier": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_CustomObjectIdentifier",
},
	},
},
	"AWS::ACMPCA::CertificateAuthority_AccessMethodType": &Reference{
	type_: String,
},
	"AWS::ACMPCA::CertificateAuthority_Arn": &Reference{
	type_: String,
},
	"AWS::ACMPCA::CertificateAuthority_CrlConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomCname": &Reference{
	type_: String,
},
			"Enabled": &Reference{
	type_: Boolean,
},
			"ExpirationInDays": &Reference{
	type_: Integer,
},
			"S3BucketName": &Reference{
	type_: String,
},
			"S3ObjectAcl": &Reference{
	type_: String,
},
	},
},
	"AWS::ACMPCA::CertificateAuthority_CsrExtensions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KeyUsage": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_KeyUsage",
},
			"SubjectInformationAccess": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_SubjectInformationAccess",
},
	},
},
	"AWS::ACMPCA::CertificateAuthority_CustomAttribute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ObjectIdentifier": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_CustomObjectIdentifier",
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ACMPCA::CertificateAuthority_CustomAttributeList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_CustomAttribute",
},
},
	"AWS::ACMPCA::CertificateAuthority_CustomObjectIdentifier": &Reference{
	type_: String,
},
	"AWS::ACMPCA::CertificateAuthority_DnsName": &Reference{
	type_: String,
},
	"AWS::ACMPCA::CertificateAuthority_EdiPartyName": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NameAssigner": &Reference{
	type_: String,
},
			"PartyName": &Reference{
	type_: String,
},
	},
},
	"AWS::ACMPCA::CertificateAuthority_GeneralName": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DirectoryName": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_Subject",
},
			"DnsName": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_DnsName",
},
			"EdiPartyName": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_EdiPartyName",
},
			"IpAddress": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_IpAddress",
},
			"OtherName": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_OtherName",
},
			"RegisteredId": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_CustomObjectIdentifier",
},
			"Rfc822Name": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_Rfc822Name",
},
			"UniformResourceIdentifier": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_UniformResourceIdentifier",
},
	},
},
	"AWS::ACMPCA::CertificateAuthority_IpAddress": &Reference{
	type_: String,
},
	"AWS::ACMPCA::CertificateAuthority_KeyUsage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CRLSign": &Reference{
	type_: Boolean,
},
			"DataEncipherment": &Reference{
	type_: Boolean,
},
			"DecipherOnly": &Reference{
	type_: Boolean,
},
			"DigitalSignature": &Reference{
	type_: Boolean,
},
			"EncipherOnly": &Reference{
	type_: Boolean,
},
			"KeyAgreement": &Reference{
	type_: Boolean,
},
			"KeyCertSign": &Reference{
	type_: Boolean,
},
			"KeyEncipherment": &Reference{
	type_: Boolean,
},
			"NonRepudiation": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::ACMPCA::CertificateAuthority_OcspConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
			"OcspCustomCname": &Reference{
	type_: String,
},
	},
},
	"AWS::ACMPCA::CertificateAuthority_OtherName": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TypeId": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_CustomObjectIdentifier",
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ACMPCA::CertificateAuthority_RevocationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CrlConfiguration": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_CrlConfiguration",
},
			"OcspConfiguration": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_OcspConfiguration",
},
	},
},
	"AWS::ACMPCA::CertificateAuthority_Rfc822Name": &Reference{
	type_: String,
},
	"AWS::ACMPCA::CertificateAuthority_Subject": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CommonName": &Reference{
	type_: String,
},
			"Country": &Reference{
	type_: String,
},
			"CustomAttributes": &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_CustomAttributeList",
},
			"DistinguishedNameQualifier": &Reference{
	type_: String,
},
			"GenerationQualifier": &Reference{
	type_: String,
},
			"GivenName": &Reference{
	type_: String,
},
			"Initials": &Reference{
	type_: String,
},
			"Locality": &Reference{
	type_: String,
},
			"Organization": &Reference{
	type_: String,
},
			"OrganizationalUnit": &Reference{
	type_: String,
},
			"Pseudonym": &Reference{
	type_: String,
},
			"SerialNumber": &Reference{
	type_: String,
},
			"State": &Reference{
	type_: String,
},
			"Surname": &Reference{
	type_: String,
},
			"Title": &Reference{
	type_: String,
},
	},
},
	"AWS::ACMPCA::CertificateAuthority_SubjectInformationAccess": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ACMPCA::CertificateAuthority_AccessDescription",
},
},
	"AWS::ACMPCA::CertificateAuthority_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ACMPCA::CertificateAuthority_UniformResourceIdentifier": &Reference{
	type_: String,
},
	"AWS::APS::RuleGroupsNamespace_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::APS::Workspace_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AccessAnalyzer::Analyzer_ArchiveRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Filter": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AccessAnalyzer::Analyzer_Filter",
},
},
			"RuleName": &Reference{
	type_: String,
},
	},
},
	"AWS::AccessAnalyzer::Analyzer_Filter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Contains": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Eq": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Exists": &Reference{
	type_: Boolean,
},
			"Neq": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Property": &Reference{
	type_: String,
},
	},
},
	"AWS::AccessAnalyzer::Analyzer_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AmazonMQ::Broker_ConfigurationId": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Id": &Reference{
	type_: String,
},
			"Revision": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AmazonMQ::Broker_EncryptionOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KmsKeyId": &Reference{
	type_: String,
},
			"UseAwsOwnedKey": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::AmazonMQ::Broker_LdapServerMetadata": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Hosts": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"RoleBase": &Reference{
	type_: String,
},
			"RoleName": &Reference{
	type_: String,
},
			"RoleSearchMatching": &Reference{
	type_: String,
},
			"RoleSearchSubtree": &Reference{
	type_: Boolean,
},
			"ServiceAccountPassword": &Reference{
	type_: String,
},
			"ServiceAccountUsername": &Reference{
	type_: String,
},
			"UserBase": &Reference{
	type_: String,
},
			"UserRoleName": &Reference{
	type_: String,
},
			"UserSearchMatching": &Reference{
	type_: String,
},
			"UserSearchSubtree": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::AmazonMQ::Broker_LogList": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Audit": &Reference{
	type_: Boolean,
},
			"General": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::AmazonMQ::Broker_MaintenanceWindow": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DayOfWeek": &Reference{
	type_: String,
},
			"TimeOfDay": &Reference{
	type_: String,
},
			"TimeZone": &Reference{
	type_: String,
},
	},
},
	"AWS::AmazonMQ::Broker_TagsEntry": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AmazonMQ::Broker_User": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConsoleAccess": &Reference{
	type_: Boolean,
},
			"Groups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Password": &Reference{
	type_: String,
},
			"Username": &Reference{
	type_: String,
},
	},
},
	"AWS::AmazonMQ::Configuration_TagsEntry": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AmazonMQ::ConfigurationAssociation_ConfigurationId": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Id": &Reference{
	type_: String,
},
			"Revision": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Amplify::App_AutoBranchCreationConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AutoBranchCreationPatterns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"BasicAuthConfig": &Reference{
	ref: "AWS::Amplify::App_BasicAuthConfig",
},
			"BuildSpec": &Reference{
	type_: String,
},
			"EnableAutoBranchCreation": &Reference{
	type_: Boolean,
},
			"EnableAutoBuild": &Reference{
	type_: Boolean,
},
			"EnablePerformanceMode": &Reference{
	type_: Boolean,
},
			"EnablePullRequestPreview": &Reference{
	type_: Boolean,
},
			"EnvironmentVariables": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Amplify::App_EnvironmentVariable",
},
},
			"PullRequestEnvironmentName": &Reference{
	type_: String,
},
			"Stage": &Reference{
	type_: String,
},
	},
},
	"AWS::Amplify::App_BasicAuthConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EnableBasicAuth": &Reference{
	type_: Boolean,
},
			"Password": &Reference{
	type_: String,
},
			"Username": &Reference{
	type_: String,
},
	},
},
	"AWS::Amplify::App_CustomRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Condition": &Reference{
	type_: String,
},
			"Source": &Reference{
	type_: String,
},
			"Status": &Reference{
	type_: String,
},
			"Target": &Reference{
	type_: String,
},
	},
},
	"AWS::Amplify::App_EnvironmentVariable": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Amplify::App_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Amplify::Branch_BasicAuthConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EnableBasicAuth": &Reference{
	type_: Boolean,
},
			"Password": &Reference{
	type_: String,
},
			"Username": &Reference{
	type_: String,
},
	},
},
	"AWS::Amplify::Branch_EnvironmentVariable": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Amplify::Branch_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Amplify::Domain_SubDomainSetting": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BranchName": &Reference{
	type_: String,
},
			"Prefix": &Reference{
	type_: String,
},
	},
},
	"AWS::AmplifyUIBuilder::Component_ActionParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Anchor": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentProperty",
},
			"Fields": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentProperties",
},
			"Global": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentProperty",
},
			"Id": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentProperty",
},
			"Model": &Reference{
	type_: String,
},
			"State": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_MutationActionSetStateParameter",
},
			"Target": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentProperty",
},
			"Type": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentProperty",
},
			"Url": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentProperty",
},
	},
},
	"AWS::AmplifyUIBuilder::Component_ComponentBindingProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::AmplifyUIBuilder::Component_ComponentBindingPropertiesValue": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BindingProperties": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentBindingPropertiesValueProperties",
},
			"DefaultValue": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::AmplifyUIBuilder::Component_ComponentBindingPropertiesValueProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"DefaultValue": &Reference{
	type_: String,
},
			"Field": &Reference{
	type_: String,
},
			"Key": &Reference{
	type_: String,
},
			"Model": &Reference{
	type_: String,
},
			"Predicates": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_Predicate",
},
},
			"UserAttribute": &Reference{
	type_: String,
},
	},
},
	"AWS::AmplifyUIBuilder::Component_ComponentChild": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Children": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentChild",
},
},
			"ComponentType": &Reference{
	type_: String,
},
			"Events": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentEvents",
},
			"Name": &Reference{
	type_: String,
},
			"Properties": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentProperties",
},
	},
},
	"AWS::AmplifyUIBuilder::Component_ComponentCollectionProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::AmplifyUIBuilder::Component_ComponentConditionProperty": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Else": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentProperty",
},
			"Field": &Reference{
	type_: String,
},
			"Operand": &Reference{
	type_: String,
},
			"OperandType": &Reference{
	type_: String,
},
			"Operator": &Reference{
	type_: String,
},
			"Property": &Reference{
	type_: String,
},
			"Then": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentProperty",
},
	},
},
	"AWS::AmplifyUIBuilder::Component_ComponentDataConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Identifiers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Model": &Reference{
	type_: String,
},
			"Predicate": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_Predicate",
},
			"Sort": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_SortProperty",
},
},
	},
},
	"AWS::AmplifyUIBuilder::Component_ComponentEvent": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	type_: String,
},
			"Parameters": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ActionParameters",
},
	},
},
	"AWS::AmplifyUIBuilder::Component_ComponentEvents": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::AmplifyUIBuilder::Component_ComponentOverrides": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::AmplifyUIBuilder::Component_ComponentOverridesValue": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::AmplifyUIBuilder::Component_ComponentProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::AmplifyUIBuilder::Component_ComponentProperty": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BindingProperties": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentPropertyBindingProperties",
},
			"Bindings": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_FormBindings",
},
			"CollectionBindingProperties": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentPropertyBindingProperties",
},
			"ComponentName": &Reference{
	type_: String,
},
			"Concat": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentProperty",
},
},
			"Condition": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentConditionProperty",
},
			"Configured": &Reference{
	type_: Boolean,
},
			"DefaultValue": &Reference{
	type_: String,
},
			"Event": &Reference{
	type_: String,
},
			"ImportedValue": &Reference{
	type_: String,
},
			"Model": &Reference{
	type_: String,
},
			"Property": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
			"UserAttribute": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AmplifyUIBuilder::Component_ComponentPropertyBindingProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Field": &Reference{
	type_: String,
},
			"Property": &Reference{
	type_: String,
},
	},
},
	"AWS::AmplifyUIBuilder::Component_ComponentVariant": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Overrides": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentOverrides",
},
			"VariantValues": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentVariantValues",
},
	},
},
	"AWS::AmplifyUIBuilder::Component_ComponentVariantValues": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::AmplifyUIBuilder::Component_FormBindingElement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Element": &Reference{
	type_: String,
},
			"Property": &Reference{
	type_: String,
},
	},
},
	"AWS::AmplifyUIBuilder::Component_FormBindings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::AmplifyUIBuilder::Component_MutationActionSetStateParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComponentName": &Reference{
	type_: String,
},
			"Property": &Reference{
	type_: String,
},
			"Set": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_ComponentProperty",
},
	},
},
	"AWS::AmplifyUIBuilder::Component_Predicate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"And": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_Predicate",
},
},
			"Field": &Reference{
	type_: String,
},
			"Operand": &Reference{
	type_: String,
},
			"Operator": &Reference{
	type_: String,
},
			"Or": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_Predicate",
},
},
	},
},
	"AWS::AmplifyUIBuilder::Component_SortDirection": &Reference{
	type_: String,
},
	"AWS::AmplifyUIBuilder::Component_SortProperty": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Direction": &Reference{
	ref: "AWS::AmplifyUIBuilder::Component_SortDirection",
},
			"Field": &Reference{
	type_: String,
},
	},
},
	"AWS::AmplifyUIBuilder::Component_Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::AmplifyUIBuilder::Theme_Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::AmplifyUIBuilder::Theme_ThemeValue": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Children": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AmplifyUIBuilder::Theme_ThemeValues",
},
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AmplifyUIBuilder::Theme_ThemeValues": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	ref: "AWS::AmplifyUIBuilder::Theme_ThemeValue",
},
	},
},
	"AWS::ApiGateway::ApiKey_StageKey": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RestApiId": &Reference{
	type_: String,
},
			"StageName": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGateway::ApiKey_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGateway::ClientCertificate_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGateway::Deployment_AccessLogSetting": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationArn": &Reference{
	type_: String,
},
			"Format": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGateway::Deployment_CanarySetting": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PercentTraffic": &Reference{
	type_: Number,
},
			"StageVariableOverrides": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"UseStageCache": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::ApiGateway::Deployment_DeploymentCanarySettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PercentTraffic": &Reference{
	type_: Number,
},
			"StageVariableOverrides": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"UseStageCache": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::ApiGateway::Deployment_MethodSetting": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CacheDataEncrypted": &Reference{
	type_: Boolean,
},
			"CacheTtlInSeconds": &Reference{
	type_: Integer,
},
			"CachingEnabled": &Reference{
	type_: Boolean,
},
			"DataTraceEnabled": &Reference{
	type_: Boolean,
},
			"HttpMethod": &Reference{
	type_: String,
},
			"LoggingLevel": &Reference{
	type_: String,
},
			"MetricsEnabled": &Reference{
	type_: Boolean,
},
			"ResourcePath": &Reference{
	type_: String,
},
			"ThrottlingBurstLimit": &Reference{
	type_: Integer,
},
			"ThrottlingRateLimit": &Reference{
	type_: Number,
},
	},
},
	"AWS::ApiGateway::Deployment_StageDescription": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessLogSetting": &Reference{
	ref: "AWS::ApiGateway::Deployment_AccessLogSetting",
},
			"CacheClusterEnabled": &Reference{
	type_: Boolean,
},
			"CacheClusterSize": &Reference{
	type_: String,
},
			"CacheDataEncrypted": &Reference{
	type_: Boolean,
},
			"CacheTtlInSeconds": &Reference{
	type_: Integer,
},
			"CachingEnabled": &Reference{
	type_: Boolean,
},
			"CanarySetting": &Reference{
	ref: "AWS::ApiGateway::Deployment_CanarySetting",
},
			"ClientCertificateId": &Reference{
	type_: String,
},
			"DataTraceEnabled": &Reference{
	type_: Boolean,
},
			"Description": &Reference{
	type_: String,
},
			"DocumentationVersion": &Reference{
	type_: String,
},
			"LoggingLevel": &Reference{
	type_: String,
},
			"MethodSettings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApiGateway::Deployment_MethodSetting",
},
},
			"MetricsEnabled": &Reference{
	type_: Boolean,
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApiGateway::Deployment_Tag",
},
},
			"ThrottlingBurstLimit": &Reference{
	type_: Integer,
},
			"ThrottlingRateLimit": &Reference{
	type_: Number,
},
			"TracingEnabled": &Reference{
	type_: Boolean,
},
			"Variables": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::ApiGateway::Deployment_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGateway::DocumentationPart_Location": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Method": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Path": &Reference{
	type_: String,
},
			"StatusCode": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGateway::DomainName_EndpointConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Types": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::ApiGateway::DomainName_MutualTlsAuthentication": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TruststoreUri": &Reference{
	type_: String,
},
			"TruststoreVersion": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGateway::DomainName_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGateway::Method_Integration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CacheKeyParameters": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"CacheNamespace": &Reference{
	type_: String,
},
			"ConnectionId": &Reference{
	type_: String,
},
			"ConnectionType": &Reference{
	type_: String,
},
			"ContentHandling": &Reference{
	type_: String,
},
			"Credentials": &Reference{
	type_: String,
},
			"IntegrationHttpMethod": &Reference{
	type_: String,
},
			"IntegrationResponses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApiGateway::Method_IntegrationResponse",
},
},
			"PassthroughBehavior": &Reference{
	type_: String,
},
			"RequestParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"RequestTemplates": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"TimeoutInMillis": &Reference{
	type_: Integer,
},
			"Type": &Reference{
	type_: String,
},
			"Uri": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGateway::Method_IntegrationResponse": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContentHandling": &Reference{
	type_: String,
},
			"ResponseParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"ResponseTemplates": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"SelectionPattern": &Reference{
	type_: String,
},
			"StatusCode": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGateway::Method_MethodResponse": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResponseModels": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"ResponseParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"StatusCode": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGateway::RestApi_EndpointConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Types": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"VpcEndpointIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::ApiGateway::RestApi_S3Location": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"ETag": &Reference{
	type_: String,
},
			"Key": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGateway::RestApi_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGateway::Stage_AccessLogSetting": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationArn": &Reference{
	type_: String,
},
			"Format": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGateway::Stage_CanarySetting": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeploymentId": &Reference{
	type_: String,
},
			"PercentTraffic": &Reference{
	type_: Number,
},
			"StageVariableOverrides": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"UseStageCache": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::ApiGateway::Stage_MethodSetting": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CacheDataEncrypted": &Reference{
	type_: Boolean,
},
			"CacheTtlInSeconds": &Reference{
	type_: Integer,
},
			"CachingEnabled": &Reference{
	type_: Boolean,
},
			"DataTraceEnabled": &Reference{
	type_: Boolean,
},
			"HttpMethod": &Reference{
	type_: String,
},
			"LoggingLevel": &Reference{
	type_: String,
},
			"MetricsEnabled": &Reference{
	type_: Boolean,
},
			"ResourcePath": &Reference{
	type_: String,
},
			"ThrottlingBurstLimit": &Reference{
	type_: Integer,
},
			"ThrottlingRateLimit": &Reference{
	type_: Number,
},
	},
},
	"AWS::ApiGateway::Stage_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGateway::UsagePlan_ApiStage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApiId": &Reference{
	type_: String,
},
			"Stage": &Reference{
	type_: String,
},
			"Throttle": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::ApiGateway::UsagePlan_QuotaSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Limit": &Reference{
	type_: Integer,
},
			"Offset": &Reference{
	type_: Integer,
},
			"Period": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGateway::UsagePlan_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGateway::UsagePlan_ThrottleSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BurstLimit": &Reference{
	type_: Integer,
},
			"RateLimit": &Reference{
	type_: Number,
},
	},
},
	"AWS::ApiGateway::VpcLink_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGatewayV2::Api_BodyS3Location": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"Etag": &Reference{
	type_: String,
},
			"Key": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGatewayV2::Api_Cors": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllowCredentials": &Reference{
	type_: Boolean,
},
			"AllowHeaders": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"AllowMethods": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"AllowOrigins": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ExposeHeaders": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"MaxAge": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ApiGatewayV2::ApiGatewayManagedOverrides_AccessLogSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationArn": &Reference{
	type_: String,
},
			"Format": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGatewayV2::ApiGatewayManagedOverrides_IntegrationOverrides": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Description": &Reference{
	type_: String,
},
			"IntegrationMethod": &Reference{
	type_: String,
},
			"PayloadFormatVersion": &Reference{
	type_: String,
},
			"TimeoutInMillis": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ApiGatewayV2::ApiGatewayManagedOverrides_RouteOverrides": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthorizationScopes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"AuthorizationType": &Reference{
	type_: String,
},
			"AuthorizerId": &Reference{
	type_: String,
},
			"OperationName": &Reference{
	type_: String,
},
			"Target": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGatewayV2::ApiGatewayManagedOverrides_RouteSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataTraceEnabled": &Reference{
	type_: Boolean,
},
			"DetailedMetricsEnabled": &Reference{
	type_: Boolean,
},
			"LoggingLevel": &Reference{
	type_: String,
},
			"ThrottlingBurstLimit": &Reference{
	type_: Integer,
},
			"ThrottlingRateLimit": &Reference{
	type_: Number,
},
	},
},
	"AWS::ApiGatewayV2::ApiGatewayManagedOverrides_StageOverrides": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessLogSettings": &Reference{
	ref: "AWS::ApiGatewayV2::ApiGatewayManagedOverrides_AccessLogSettings",
},
			"AutoDeploy": &Reference{
	type_: Boolean,
},
			"DefaultRouteSettings": &Reference{
	ref: "AWS::ApiGatewayV2::ApiGatewayManagedOverrides_RouteSettings",
},
			"Description": &Reference{
	type_: String,
},
			"RouteSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"StageVariables": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::ApiGatewayV2::Authorizer_JWTConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Audience": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Issuer": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGatewayV2::DomainName_DomainNameConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateArn": &Reference{
	type_: String,
},
			"CertificateName": &Reference{
	type_: String,
},
			"EndpointType": &Reference{
	type_: String,
},
			"OwnershipVerificationCertificateArn": &Reference{
	type_: String,
},
			"SecurityPolicy": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGatewayV2::DomainName_MutualTlsAuthentication": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TruststoreUri": &Reference{
	type_: String,
},
			"TruststoreVersion": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGatewayV2::Integration_TlsConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ServerNameToVerify": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGatewayV2::Stage_AccessLogSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationArn": &Reference{
	type_: String,
},
			"Format": &Reference{
	type_: String,
},
	},
},
	"AWS::ApiGatewayV2::Stage_RouteSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataTraceEnabled": &Reference{
	type_: Boolean,
},
			"DetailedMetricsEnabled": &Reference{
	type_: Boolean,
},
			"LoggingLevel": &Reference{
	type_: String,
},
			"ThrottlingBurstLimit": &Reference{
	type_: Integer,
},
			"ThrottlingRateLimit": &Reference{
	type_: Number,
},
	},
},
	"AWS::AppConfig::Application_Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppConfig::ConfigurationProfile_Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppConfig::ConfigurationProfile_Validators": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Content": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::AppConfig::Deployment_Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppConfig::DeploymentStrategy_Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppConfig::Environment_Monitors": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AlarmArn": &Reference{
	type_: String,
},
			"AlarmRoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::AppConfig::Environment_Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppFlow::ConnectorProfile_AccessKeyId": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_AccessToken": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_AccountName": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_AmplitudeConnectorProfileCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApiKey": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ApiKey",
},
			"SecretKey": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_SecretKey",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_ApiKey": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_ApiKeyCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApiKey": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ApiKey",
},
			"ApiSecretKey": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ApiSecretKey",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_ApiSecretKey": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_ApiToken": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_ApplicationHostUrl": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_ApplicationKey": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_ApplicationServicePath": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_AuthCode": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_AuthenticationType": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_BasicAuthCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Password": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_Password",
},
			"Username": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_Username",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_BucketName": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_BucketPrefix": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_ClientCredentialsArn": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_ClientId": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_ClientNumber": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_ClientSecret": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_ConnectorOAuthRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthCode": &Reference{
	type_: String,
},
			"RedirectUri": &Reference{
	type_: String,
},
	},
},
	"AWS::AppFlow::ConnectorProfile_ConnectorProfileConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConnectorProfileCredentials": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ConnectorProfileCredentials",
},
			"ConnectorProfileProperties": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ConnectorProfileProperties",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_ConnectorProfileCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Amplitude": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_AmplitudeConnectorProfileCredentials",
},
			"CustomConnector": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_CustomConnectorProfileCredentials",
},
			"Datadog": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_DatadogConnectorProfileCredentials",
},
			"Dynatrace": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_DynatraceConnectorProfileCredentials",
},
			"GoogleAnalytics": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_GoogleAnalyticsConnectorProfileCredentials",
},
			"InforNexus": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_InforNexusConnectorProfileCredentials",
},
			"Marketo": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_MarketoConnectorProfileCredentials",
},
			"Redshift": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_RedshiftConnectorProfileCredentials",
},
			"SAPOData": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_SAPODataConnectorProfileCredentials",
},
			"Salesforce": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_SalesforceConnectorProfileCredentials",
},
			"ServiceNow": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ServiceNowConnectorProfileCredentials",
},
			"Singular": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_SingularConnectorProfileCredentials",
},
			"Slack": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_SlackConnectorProfileCredentials",
},
			"Snowflake": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_SnowflakeConnectorProfileCredentials",
},
			"Trendmicro": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_TrendmicroConnectorProfileCredentials",
},
			"Veeva": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_VeevaConnectorProfileCredentials",
},
			"Zendesk": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ZendeskConnectorProfileCredentials",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_ConnectorProfileProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomConnector": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_CustomConnectorProfileProperties",
},
			"Datadog": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_DatadogConnectorProfileProperties",
},
			"Dynatrace": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_DynatraceConnectorProfileProperties",
},
			"InforNexus": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_InforNexusConnectorProfileProperties",
},
			"Marketo": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_MarketoConnectorProfileProperties",
},
			"Redshift": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_RedshiftConnectorProfileProperties",
},
			"SAPOData": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_SAPODataConnectorProfileProperties",
},
			"Salesforce": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_SalesforceConnectorProfileProperties",
},
			"ServiceNow": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ServiceNowConnectorProfileProperties",
},
			"Slack": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_SlackConnectorProfileProperties",
},
			"Snowflake": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_SnowflakeConnectorProfileProperties",
},
			"Veeva": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_VeevaConnectorProfileProperties",
},
			"Zendesk": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ZendeskConnectorProfileProperties",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_ConnectorType": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_CredentialsMap": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::AppFlow::ConnectorProfile_CustomAuthCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CredentialsMap": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_CredentialsMap",
},
			"CustomAuthenticationType": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_CustomAuthenticationType",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_CustomAuthenticationType": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_CustomConnectorProfileCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApiKey": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ApiKeyCredentials",
},
			"AuthenticationType": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_AuthenticationType",
},
			"Basic": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_BasicAuthCredentials",
},
			"Custom": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_CustomAuthCredentials",
},
			"Oauth2": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_OAuth2Credentials",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_CustomConnectorProfileProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OAuth2Properties": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_OAuth2Properties",
},
			"ProfileProperties": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ProfileProperties",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_DatabaseUrl": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_DatadogConnectorProfileCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApiKey": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ApiKey",
},
			"ApplicationKey": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ApplicationKey",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_DatadogConnectorProfileProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceUrl": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_InstanceUrl",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_DynatraceConnectorProfileCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApiToken": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ApiToken",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_DynatraceConnectorProfileProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceUrl": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_InstanceUrl",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_GoogleAnalyticsConnectorProfileCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessToken": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_AccessToken",
},
			"ClientId": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ClientId",
},
			"ClientSecret": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ClientSecret",
},
			"ConnectorOAuthRequest": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ConnectorOAuthRequest",
},
			"RefreshToken": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_RefreshToken",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_InforNexusConnectorProfileCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessKeyId": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_AccessKeyId",
},
			"Datakey": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_Key",
},
			"SecretAccessKey": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_Key",
},
			"UserId": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_Username",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_InforNexusConnectorProfileProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceUrl": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_InstanceUrl",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_InstanceUrl": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_Key": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_LogonLanguage": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_MarketoConnectorProfileCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessToken": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_AccessToken",
},
			"ClientId": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ClientId",
},
			"ClientSecret": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ClientSecret",
},
			"ConnectorOAuthRequest": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ConnectorOAuthRequest",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_MarketoConnectorProfileProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceUrl": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_InstanceUrl",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_OAuth2Credentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessToken": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_AccessToken",
},
			"ClientId": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ClientId",
},
			"ClientSecret": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ClientSecret",
},
			"OAuthRequest": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ConnectorOAuthRequest",
},
			"RefreshToken": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_RefreshToken",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_OAuth2GrantType": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_OAuth2Properties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OAuth2GrantType": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_OAuth2GrantType",
},
			"TokenUrl": &Reference{
	type_: String,
},
			"TokenUrlCustomProperties": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_TokenUrlCustomProperties",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_OAuthProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthCodeUrl": &Reference{
	type_: String,
},
			"OAuthScopes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"TokenUrl": &Reference{
	type_: String,
},
	},
},
	"AWS::AppFlow::ConnectorProfile_Password": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_PortNumber": &Reference{
	type_: Integer,
},
	"AWS::AppFlow::ConnectorProfile_PrivateLinkServiceName": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_ProfileProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::AppFlow::ConnectorProfile_RedshiftConnectorProfileCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Password": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_Password",
},
			"Username": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_Username",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_RedshiftConnectorProfileProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketName": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_BucketName",
},
			"BucketPrefix": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_BucketPrefix",
},
			"DatabaseUrl": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_DatabaseUrl",
},
			"RoleArn": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_RoleArn",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_RefreshToken": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_Region": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_RoleArn": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_SAPODataConnectorProfileCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BasicAuthCredentials": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_BasicAuthCredentials",
},
			"OAuthCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessToken": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_AccessToken",
},
			"ClientId": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ClientId",
},
			"ClientSecret": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ClientSecret",
},
			"ConnectorOAuthRequest": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ConnectorOAuthRequest",
},
			"RefreshToken": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_RefreshToken",
},
	},
},
	},
},
	"AWS::AppFlow::ConnectorProfile_SAPODataConnectorProfileProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApplicationHostUrl": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ApplicationHostUrl",
},
			"ApplicationServicePath": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ApplicationServicePath",
},
			"ClientNumber": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ClientNumber",
},
			"LogonLanguage": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_LogonLanguage",
},
			"OAuthProperties": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_OAuthProperties",
},
			"PortNumber": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_PortNumber",
},
			"PrivateLinkServiceName": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_PrivateLinkServiceName",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_SalesforceConnectorProfileCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessToken": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_AccessToken",
},
			"ClientCredentialsArn": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ClientCredentialsArn",
},
			"ConnectorOAuthRequest": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ConnectorOAuthRequest",
},
			"RefreshToken": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_RefreshToken",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_SalesforceConnectorProfileProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceUrl": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_InstanceUrl",
},
			"isSandboxEnvironment": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::AppFlow::ConnectorProfile_SecretKey": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_ServiceNowConnectorProfileCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Password": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_Password",
},
			"Username": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_Username",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_ServiceNowConnectorProfileProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceUrl": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_InstanceUrl",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_SingularConnectorProfileCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApiKey": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ApiKey",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_SlackConnectorProfileCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessToken": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_AccessToken",
},
			"ClientId": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ClientId",
},
			"ClientSecret": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ClientSecret",
},
			"ConnectorOAuthRequest": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ConnectorOAuthRequest",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_SlackConnectorProfileProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceUrl": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_InstanceUrl",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_SnowflakeConnectorProfileCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Password": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_Password",
},
			"Username": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_Username",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_SnowflakeConnectorProfileProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccountName": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_AccountName",
},
			"BucketName": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_BucketName",
},
			"BucketPrefix": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_BucketPrefix",
},
			"PrivateLinkServiceName": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_PrivateLinkServiceName",
},
			"Region": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_Region",
},
			"Stage": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_Stage",
},
			"Warehouse": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_Warehouse",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_Stage": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_TokenUrlCustomProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::AppFlow::ConnectorProfile_TrendmicroConnectorProfileCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApiSecretKey": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ApiSecretKey",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_Username": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_VeevaConnectorProfileCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Password": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_Password",
},
			"Username": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_Username",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_VeevaConnectorProfileProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceUrl": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_InstanceUrl",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_Warehouse": &Reference{
	type_: String,
},
	"AWS::AppFlow::ConnectorProfile_ZendeskConnectorProfileCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessToken": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_AccessToken",
},
			"ClientId": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ClientId",
},
			"ClientSecret": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ClientSecret",
},
			"ConnectorOAuthRequest": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_ConnectorOAuthRequest",
},
	},
},
	"AWS::AppFlow::ConnectorProfile_ZendeskConnectorProfileProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceUrl": &Reference{
	ref: "AWS::AppFlow::ConnectorProfile_InstanceUrl",
},
	},
},
	"AWS::AppFlow::Flow_AggregationConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AggregationType": &Reference{
	ref: "AWS::AppFlow::Flow_AggregationType",
},
	},
},
	"AWS::AppFlow::Flow_AggregationType": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_AmplitudeConnectorOperator": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_AmplitudeSourceProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Object": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
	},
},
	"AWS::AppFlow::Flow_ApiVersion": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_BucketName": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_BucketPrefix": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_ConnectorOperator": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Amplitude": &Reference{
	ref: "AWS::AppFlow::Flow_AmplitudeConnectorOperator",
},
			"CustomConnector": &Reference{
	ref: "AWS::AppFlow::Flow_Operator",
},
			"Datadog": &Reference{
	ref: "AWS::AppFlow::Flow_DatadogConnectorOperator",
},
			"Dynatrace": &Reference{
	ref: "AWS::AppFlow::Flow_DynatraceConnectorOperator",
},
			"GoogleAnalytics": &Reference{
	ref: "AWS::AppFlow::Flow_GoogleAnalyticsConnectorOperator",
},
			"InforNexus": &Reference{
	ref: "AWS::AppFlow::Flow_InforNexusConnectorOperator",
},
			"Marketo": &Reference{
	ref: "AWS::AppFlow::Flow_MarketoConnectorOperator",
},
			"S3": &Reference{
	ref: "AWS::AppFlow::Flow_S3ConnectorOperator",
},
			"SAPOData": &Reference{
	ref: "AWS::AppFlow::Flow_SAPODataConnectorOperator",
},
			"Salesforce": &Reference{
	ref: "AWS::AppFlow::Flow_SalesforceConnectorOperator",
},
			"ServiceNow": &Reference{
	ref: "AWS::AppFlow::Flow_ServiceNowConnectorOperator",
},
			"Singular": &Reference{
	ref: "AWS::AppFlow::Flow_SingularConnectorOperator",
},
			"Slack": &Reference{
	ref: "AWS::AppFlow::Flow_SlackConnectorOperator",
},
			"Trendmicro": &Reference{
	ref: "AWS::AppFlow::Flow_TrendmicroConnectorOperator",
},
			"Veeva": &Reference{
	ref: "AWS::AppFlow::Flow_VeevaConnectorOperator",
},
			"Zendesk": &Reference{
	ref: "AWS::AppFlow::Flow_ZendeskConnectorOperator",
},
	},
},
	"AWS::AppFlow::Flow_ConnectorProfileName": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_ConnectorType": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_CustomConnectorDestinationProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomProperties": &Reference{
	ref: "AWS::AppFlow::Flow_CustomProperties",
},
			"EntityName": &Reference{
	ref: "AWS::AppFlow::Flow_EntityName",
},
			"ErrorHandlingConfig": &Reference{
	ref: "AWS::AppFlow::Flow_ErrorHandlingConfig",
},
			"IdFieldNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"WriteOperationType": &Reference{
	ref: "AWS::AppFlow::Flow_WriteOperationType",
},
	},
},
	"AWS::AppFlow::Flow_CustomConnectorSourceProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomProperties": &Reference{
	ref: "AWS::AppFlow::Flow_CustomProperties",
},
			"EntityName": &Reference{
	ref: "AWS::AppFlow::Flow_EntityName",
},
	},
},
	"AWS::AppFlow::Flow_CustomProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::AppFlow::Flow_DatadogConnectorOperator": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_DatadogSourceProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Object": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
	},
},
	"AWS::AppFlow::Flow_DatetimeTypeFieldName": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_DestinationConnectorProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomConnector": &Reference{
	ref: "AWS::AppFlow::Flow_CustomConnectorDestinationProperties",
},
			"EventBridge": &Reference{
	ref: "AWS::AppFlow::Flow_EventBridgeDestinationProperties",
},
			"LookoutMetrics": &Reference{
	ref: "AWS::AppFlow::Flow_LookoutMetricsDestinationProperties",
},
			"Marketo": &Reference{
	ref: "AWS::AppFlow::Flow_MarketoDestinationProperties",
},
			"Redshift": &Reference{
	ref: "AWS::AppFlow::Flow_RedshiftDestinationProperties",
},
			"S3": &Reference{
	ref: "AWS::AppFlow::Flow_S3DestinationProperties",
},
			"SAPOData": &Reference{
	ref: "AWS::AppFlow::Flow_SAPODataDestinationProperties",
},
			"Salesforce": &Reference{
	ref: "AWS::AppFlow::Flow_SalesforceDestinationProperties",
},
			"Snowflake": &Reference{
	ref: "AWS::AppFlow::Flow_SnowflakeDestinationProperties",
},
			"Upsolver": &Reference{
	ref: "AWS::AppFlow::Flow_UpsolverDestinationProperties",
},
			"Zendesk": &Reference{
	ref: "AWS::AppFlow::Flow_ZendeskDestinationProperties",
},
	},
},
	"AWS::AppFlow::Flow_DestinationFlowConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApiVersion": &Reference{
	ref: "AWS::AppFlow::Flow_ApiVersion",
},
			"ConnectorProfileName": &Reference{
	ref: "AWS::AppFlow::Flow_ConnectorProfileName",
},
			"ConnectorType": &Reference{
	ref: "AWS::AppFlow::Flow_ConnectorType",
},
			"DestinationConnectorProperties": &Reference{
	ref: "AWS::AppFlow::Flow_DestinationConnectorProperties",
},
	},
},
	"AWS::AppFlow::Flow_DocumentType": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_DynatraceConnectorOperator": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_DynatraceSourceProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Object": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
	},
},
	"AWS::AppFlow::Flow_EnableDynamicFieldUpdate": &Reference{
	type_: Boolean,
},
	"AWS::AppFlow::Flow_EntityName": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_ErrorHandlingConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketName": &Reference{
	ref: "AWS::AppFlow::Flow_BucketName",
},
			"BucketPrefix": &Reference{
	ref: "AWS::AppFlow::Flow_BucketPrefix",
},
			"FailOnFirstError": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::AppFlow::Flow_EventBridgeDestinationProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ErrorHandlingConfig": &Reference{
	ref: "AWS::AppFlow::Flow_ErrorHandlingConfig",
},
			"Object": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
	},
},
	"AWS::AppFlow::Flow_FileType": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_GoogleAnalyticsConnectorOperator": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_GoogleAnalyticsSourceProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Object": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
	},
},
	"AWS::AppFlow::Flow_IncludeAllVersions": &Reference{
	type_: Boolean,
},
	"AWS::AppFlow::Flow_IncludeDeletedRecords": &Reference{
	type_: Boolean,
},
	"AWS::AppFlow::Flow_IncludeRenditions": &Reference{
	type_: Boolean,
},
	"AWS::AppFlow::Flow_IncludeSourceFiles": &Reference{
	type_: Boolean,
},
	"AWS::AppFlow::Flow_IncrementalPullConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DatetimeTypeFieldName": &Reference{
	ref: "AWS::AppFlow::Flow_DatetimeTypeFieldName",
},
	},
},
	"AWS::AppFlow::Flow_InforNexusConnectorOperator": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_InforNexusSourceProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Object": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
	},
},
	"AWS::AppFlow::Flow_LookoutMetricsDestinationProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Object": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
	},
},
	"AWS::AppFlow::Flow_MarketoConnectorOperator": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_MarketoDestinationProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ErrorHandlingConfig": &Reference{
	ref: "AWS::AppFlow::Flow_ErrorHandlingConfig",
},
			"Object": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
	},
},
	"AWS::AppFlow::Flow_MarketoSourceProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Object": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
	},
},
	"AWS::AppFlow::Flow_Name": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_Object": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_Operator": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_OperatorPropertiesKeys": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_PrefixConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PrefixFormat": &Reference{
	ref: "AWS::AppFlow::Flow_PrefixFormat",
},
			"PrefixType": &Reference{
	ref: "AWS::AppFlow::Flow_PrefixType",
},
	},
},
	"AWS::AppFlow::Flow_PrefixFormat": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_PrefixType": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_PreserveSourceDataTyping": &Reference{
	type_: Boolean,
},
	"AWS::AppFlow::Flow_RedshiftDestinationProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketPrefix": &Reference{
	ref: "AWS::AppFlow::Flow_BucketPrefix",
},
			"ErrorHandlingConfig": &Reference{
	ref: "AWS::AppFlow::Flow_ErrorHandlingConfig",
},
			"IntermediateBucketName": &Reference{
	ref: "AWS::AppFlow::Flow_BucketName",
},
			"Object": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
	},
},
	"AWS::AppFlow::Flow_S3ConnectorOperator": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_S3DestinationProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketName": &Reference{
	ref: "AWS::AppFlow::Flow_BucketName",
},
			"BucketPrefix": &Reference{
	ref: "AWS::AppFlow::Flow_BucketPrefix",
},
			"S3OutputFormatConfig": &Reference{
	ref: "AWS::AppFlow::Flow_S3OutputFormatConfig",
},
	},
},
	"AWS::AppFlow::Flow_S3InputFormatConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3InputFileType": &Reference{
	type_: String,
},
	},
},
	"AWS::AppFlow::Flow_S3OutputFormatConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AggregationConfig": &Reference{
	ref: "AWS::AppFlow::Flow_AggregationConfig",
},
			"FileType": &Reference{
	ref: "AWS::AppFlow::Flow_FileType",
},
			"PrefixConfig": &Reference{
	ref: "AWS::AppFlow::Flow_PrefixConfig",
},
			"PreserveSourceDataTyping": &Reference{
	ref: "AWS::AppFlow::Flow_PreserveSourceDataTyping",
},
	},
},
	"AWS::AppFlow::Flow_S3SourceProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketName": &Reference{
	ref: "AWS::AppFlow::Flow_BucketName",
},
			"BucketPrefix": &Reference{
	ref: "AWS::AppFlow::Flow_BucketPrefix",
},
			"S3InputFormatConfig": &Reference{
	ref: "AWS::AppFlow::Flow_S3InputFormatConfig",
},
	},
},
	"AWS::AppFlow::Flow_SAPODataConnectorOperator": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_SAPODataDestinationProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ErrorHandlingConfig": &Reference{
	ref: "AWS::AppFlow::Flow_ErrorHandlingConfig",
},
			"IdFieldNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ObjectPath": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
			"SuccessResponseHandlingConfig": &Reference{
	ref: "AWS::AppFlow::Flow_SuccessResponseHandlingConfig",
},
			"WriteOperationType": &Reference{
	ref: "AWS::AppFlow::Flow_WriteOperationType",
},
	},
},
	"AWS::AppFlow::Flow_SAPODataSourceProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ObjectPath": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
	},
},
	"AWS::AppFlow::Flow_SalesforceConnectorOperator": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_SalesforceDestinationProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ErrorHandlingConfig": &Reference{
	ref: "AWS::AppFlow::Flow_ErrorHandlingConfig",
},
			"IdFieldNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Object": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
			"WriteOperationType": &Reference{
	ref: "AWS::AppFlow::Flow_WriteOperationType",
},
	},
},
	"AWS::AppFlow::Flow_SalesforceSourceProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EnableDynamicFieldUpdate": &Reference{
	ref: "AWS::AppFlow::Flow_EnableDynamicFieldUpdate",
},
			"IncludeDeletedRecords": &Reference{
	ref: "AWS::AppFlow::Flow_IncludeDeletedRecords",
},
			"Object": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
	},
},
	"AWS::AppFlow::Flow_ScheduledTriggerProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataPullMode": &Reference{
	type_: String,
},
			"FlowErrorDeactivationThreshold": &Reference{
	type_: Integer,
},
			"ScheduleEndTime": &Reference{
	type_: Number,
},
			"ScheduleExpression": &Reference{
	type_: String,
},
			"ScheduleOffset": &Reference{
	type_: Number,
},
			"ScheduleStartTime": &Reference{
	type_: Number,
},
			"TimeZone": &Reference{
	type_: String,
},
	},
},
	"AWS::AppFlow::Flow_ServiceNowConnectorOperator": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_ServiceNowSourceProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Object": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
	},
},
	"AWS::AppFlow::Flow_SingularConnectorOperator": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_SingularSourceProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Object": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
	},
},
	"AWS::AppFlow::Flow_SlackConnectorOperator": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_SlackSourceProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Object": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
	},
},
	"AWS::AppFlow::Flow_SnowflakeDestinationProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketPrefix": &Reference{
	ref: "AWS::AppFlow::Flow_BucketPrefix",
},
			"ErrorHandlingConfig": &Reference{
	ref: "AWS::AppFlow::Flow_ErrorHandlingConfig",
},
			"IntermediateBucketName": &Reference{
	ref: "AWS::AppFlow::Flow_BucketName",
},
			"Object": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
	},
},
	"AWS::AppFlow::Flow_SourceConnectorProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Amplitude": &Reference{
	ref: "AWS::AppFlow::Flow_AmplitudeSourceProperties",
},
			"CustomConnector": &Reference{
	ref: "AWS::AppFlow::Flow_CustomConnectorSourceProperties",
},
			"Datadog": &Reference{
	ref: "AWS::AppFlow::Flow_DatadogSourceProperties",
},
			"Dynatrace": &Reference{
	ref: "AWS::AppFlow::Flow_DynatraceSourceProperties",
},
			"GoogleAnalytics": &Reference{
	ref: "AWS::AppFlow::Flow_GoogleAnalyticsSourceProperties",
},
			"InforNexus": &Reference{
	ref: "AWS::AppFlow::Flow_InforNexusSourceProperties",
},
			"Marketo": &Reference{
	ref: "AWS::AppFlow::Flow_MarketoSourceProperties",
},
			"S3": &Reference{
	ref: "AWS::AppFlow::Flow_S3SourceProperties",
},
			"SAPOData": &Reference{
	ref: "AWS::AppFlow::Flow_SAPODataSourceProperties",
},
			"Salesforce": &Reference{
	ref: "AWS::AppFlow::Flow_SalesforceSourceProperties",
},
			"ServiceNow": &Reference{
	ref: "AWS::AppFlow::Flow_ServiceNowSourceProperties",
},
			"Singular": &Reference{
	ref: "AWS::AppFlow::Flow_SingularSourceProperties",
},
			"Slack": &Reference{
	ref: "AWS::AppFlow::Flow_SlackSourceProperties",
},
			"Trendmicro": &Reference{
	ref: "AWS::AppFlow::Flow_TrendmicroSourceProperties",
},
			"Veeva": &Reference{
	ref: "AWS::AppFlow::Flow_VeevaSourceProperties",
},
			"Zendesk": &Reference{
	ref: "AWS::AppFlow::Flow_ZendeskSourceProperties",
},
	},
},
	"AWS::AppFlow::Flow_SourceFlowConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApiVersion": &Reference{
	ref: "AWS::AppFlow::Flow_ApiVersion",
},
			"ConnectorProfileName": &Reference{
	ref: "AWS::AppFlow::Flow_ConnectorProfileName",
},
			"ConnectorType": &Reference{
	ref: "AWS::AppFlow::Flow_ConnectorType",
},
			"IncrementalPullConfig": &Reference{
	ref: "AWS::AppFlow::Flow_IncrementalPullConfig",
},
			"SourceConnectorProperties": &Reference{
	ref: "AWS::AppFlow::Flow_SourceConnectorProperties",
},
	},
},
	"AWS::AppFlow::Flow_Status": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_SuccessResponseHandlingConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketName": &Reference{
	ref: "AWS::AppFlow::Flow_BucketName",
},
			"BucketPrefix": &Reference{
	ref: "AWS::AppFlow::Flow_BucketPrefix",
},
	},
},
	"AWS::AppFlow::Flow_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppFlow::Flow_Task": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConnectorOperator": &Reference{
	ref: "AWS::AppFlow::Flow_ConnectorOperator",
},
			"DestinationField": &Reference{
	type_: String,
},
			"SourceFields": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"TaskProperties": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppFlow::Flow_TaskPropertiesObject",
},
},
			"TaskType": &Reference{
	ref: "AWS::AppFlow::Flow_TaskType",
},
	},
},
	"AWS::AppFlow::Flow_TaskPropertiesObject": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	ref: "AWS::AppFlow::Flow_OperatorPropertiesKeys",
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppFlow::Flow_TaskType": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_TrendmicroConnectorOperator": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_TrendmicroSourceProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Object": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
	},
},
	"AWS::AppFlow::Flow_TriggerConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TriggerProperties": &Reference{
	ref: "AWS::AppFlow::Flow_ScheduledTriggerProperties",
},
			"TriggerType": &Reference{
	ref: "AWS::AppFlow::Flow_TriggerType",
},
	},
},
	"AWS::AppFlow::Flow_TriggerType": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_UpsolverBucketName": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_UpsolverDestinationProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketName": &Reference{
	ref: "AWS::AppFlow::Flow_UpsolverBucketName",
},
			"BucketPrefix": &Reference{
	ref: "AWS::AppFlow::Flow_BucketPrefix",
},
			"S3OutputFormatConfig": &Reference{
	ref: "AWS::AppFlow::Flow_UpsolverS3OutputFormatConfig",
},
	},
},
	"AWS::AppFlow::Flow_UpsolverS3OutputFormatConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AggregationConfig": &Reference{
	ref: "AWS::AppFlow::Flow_AggregationConfig",
},
			"FileType": &Reference{
	ref: "AWS::AppFlow::Flow_FileType",
},
			"PrefixConfig": &Reference{
	ref: "AWS::AppFlow::Flow_PrefixConfig",
},
	},
},
	"AWS::AppFlow::Flow_VeevaConnectorOperator": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_VeevaSourceProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DocumentType": &Reference{
	ref: "AWS::AppFlow::Flow_DocumentType",
},
			"IncludeAllVersions": &Reference{
	ref: "AWS::AppFlow::Flow_IncludeAllVersions",
},
			"IncludeRenditions": &Reference{
	ref: "AWS::AppFlow::Flow_IncludeRenditions",
},
			"IncludeSourceFiles": &Reference{
	ref: "AWS::AppFlow::Flow_IncludeSourceFiles",
},
			"Object": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
	},
},
	"AWS::AppFlow::Flow_WriteOperationType": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_ZendeskConnectorOperator": &Reference{
	type_: String,
},
	"AWS::AppFlow::Flow_ZendeskDestinationProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ErrorHandlingConfig": &Reference{
	ref: "AWS::AppFlow::Flow_ErrorHandlingConfig",
},
			"IdFieldNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Object": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
			"WriteOperationType": &Reference{
	ref: "AWS::AppFlow::Flow_WriteOperationType",
},
	},
},
	"AWS::AppFlow::Flow_ZendeskSourceProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Object": &Reference{
	ref: "AWS::AppFlow::Flow_Object",
},
	},
},
	"AWS::AppMesh::GatewayRoute_GatewayRouteHostnameMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Exact": &Reference{
	type_: String,
},
			"Suffix": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::GatewayRoute_GatewayRouteHostnameRewrite": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DefaultTargetHostname": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::GatewayRoute_GatewayRouteMetadataMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Exact": &Reference{
	type_: String,
},
			"Prefix": &Reference{
	type_: String,
},
			"Range": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_GatewayRouteRangeMatch",
},
			"Regex": &Reference{
	type_: String,
},
			"Suffix": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::GatewayRoute_GatewayRouteRangeMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"End": &Reference{
	type_: Integer,
},
			"Start": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AppMesh::GatewayRoute_GatewayRouteSpec": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GrpcRoute": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_GrpcGatewayRoute",
},
			"Http2Route": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_HttpGatewayRoute",
},
			"HttpRoute": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_HttpGatewayRoute",
},
			"Priority": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AppMesh::GatewayRoute_GatewayRouteTarget": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"VirtualService": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_GatewayRouteVirtualService",
},
	},
},
	"AWS::AppMesh::GatewayRoute_GatewayRouteVirtualService": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"VirtualServiceName": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::GatewayRoute_GrpcGatewayRoute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_GrpcGatewayRouteAction",
},
			"Match": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_GrpcGatewayRouteMatch",
},
	},
},
	"AWS::AppMesh::GatewayRoute_GrpcGatewayRouteAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Rewrite": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_GrpcGatewayRouteRewrite",
},
			"Target": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_GatewayRouteTarget",
},
	},
},
	"AWS::AppMesh::GatewayRoute_GrpcGatewayRouteMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Hostname": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_GatewayRouteHostnameMatch",
},
			"Metadata": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::GatewayRoute_GrpcGatewayRouteMetadata",
},
},
			"ServiceName": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::GatewayRoute_GrpcGatewayRouteMetadata": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Invert": &Reference{
	type_: Boolean,
},
			"Match": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_GatewayRouteMetadataMatch",
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::GatewayRoute_GrpcGatewayRouteRewrite": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Hostname": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_GatewayRouteHostnameRewrite",
},
	},
},
	"AWS::AppMesh::GatewayRoute_HttpGatewayRoute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_HttpGatewayRouteAction",
},
			"Match": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_HttpGatewayRouteMatch",
},
	},
},
	"AWS::AppMesh::GatewayRoute_HttpGatewayRouteAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Rewrite": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_HttpGatewayRouteRewrite",
},
			"Target": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_GatewayRouteTarget",
},
	},
},
	"AWS::AppMesh::GatewayRoute_HttpGatewayRouteHeader": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Invert": &Reference{
	type_: Boolean,
},
			"Match": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_HttpGatewayRouteHeaderMatch",
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::GatewayRoute_HttpGatewayRouteHeaderMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Exact": &Reference{
	type_: String,
},
			"Prefix": &Reference{
	type_: String,
},
			"Range": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_GatewayRouteRangeMatch",
},
			"Regex": &Reference{
	type_: String,
},
			"Suffix": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::GatewayRoute_HttpGatewayRouteMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Headers": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::GatewayRoute_HttpGatewayRouteHeader",
},
},
			"Hostname": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_GatewayRouteHostnameMatch",
},
			"Method": &Reference{
	type_: String,
},
			"Path": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_HttpPathMatch",
},
			"Prefix": &Reference{
	type_: String,
},
			"QueryParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::GatewayRoute_QueryParameter",
},
},
	},
},
	"AWS::AppMesh::GatewayRoute_HttpGatewayRoutePathRewrite": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Exact": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::GatewayRoute_HttpGatewayRoutePrefixRewrite": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DefaultPrefix": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::GatewayRoute_HttpGatewayRouteRewrite": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Hostname": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_GatewayRouteHostnameRewrite",
},
			"Path": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_HttpGatewayRoutePathRewrite",
},
			"Prefix": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_HttpGatewayRoutePrefixRewrite",
},
	},
},
	"AWS::AppMesh::GatewayRoute_HttpPathMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Exact": &Reference{
	type_: String,
},
			"Regex": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::GatewayRoute_HttpQueryParameterMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Exact": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::GatewayRoute_QueryParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Match": &Reference{
	ref: "AWS::AppMesh::GatewayRoute_HttpQueryParameterMatch",
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::GatewayRoute_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::Mesh_EgressFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::Mesh_MeshServiceDiscovery": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IpPreference": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::Mesh_MeshSpec": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EgressFilter": &Reference{
	ref: "AWS::AppMesh::Mesh_EgressFilter",
},
			"ServiceDiscovery": &Reference{
	ref: "AWS::AppMesh::Mesh_MeshServiceDiscovery",
},
	},
},
	"AWS::AppMesh::Mesh_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::Route_Duration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Unit": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AppMesh::Route_GrpcRetryPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GrpcRetryEvents": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"HttpRetryEvents": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"MaxRetries": &Reference{
	type_: Integer,
},
			"PerRetryTimeout": &Reference{
	ref: "AWS::AppMesh::Route_Duration",
},
			"TcpRetryEvents": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::AppMesh::Route_GrpcRoute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	ref: "AWS::AppMesh::Route_GrpcRouteAction",
},
			"Match": &Reference{
	ref: "AWS::AppMesh::Route_GrpcRouteMatch",
},
			"RetryPolicy": &Reference{
	ref: "AWS::AppMesh::Route_GrpcRetryPolicy",
},
			"Timeout": &Reference{
	ref: "AWS::AppMesh::Route_GrpcTimeout",
},
	},
},
	"AWS::AppMesh::Route_GrpcRouteAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"WeightedTargets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::Route_WeightedTarget",
},
},
	},
},
	"AWS::AppMesh::Route_GrpcRouteMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Metadata": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::Route_GrpcRouteMetadata",
},
},
			"MethodName": &Reference{
	type_: String,
},
			"ServiceName": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::Route_GrpcRouteMetadata": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Invert": &Reference{
	type_: Boolean,
},
			"Match": &Reference{
	ref: "AWS::AppMesh::Route_GrpcRouteMetadataMatchMethod",
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::Route_GrpcRouteMetadataMatchMethod": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Exact": &Reference{
	type_: String,
},
			"Prefix": &Reference{
	type_: String,
},
			"Range": &Reference{
	ref: "AWS::AppMesh::Route_MatchRange",
},
			"Regex": &Reference{
	type_: String,
},
			"Suffix": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::Route_GrpcTimeout": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Idle": &Reference{
	ref: "AWS::AppMesh::Route_Duration",
},
			"PerRequest": &Reference{
	ref: "AWS::AppMesh::Route_Duration",
},
	},
},
	"AWS::AppMesh::Route_HeaderMatchMethod": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Exact": &Reference{
	type_: String,
},
			"Prefix": &Reference{
	type_: String,
},
			"Range": &Reference{
	ref: "AWS::AppMesh::Route_MatchRange",
},
			"Regex": &Reference{
	type_: String,
},
			"Suffix": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::Route_HttpPathMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Exact": &Reference{
	type_: String,
},
			"Regex": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::Route_HttpQueryParameterMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Exact": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::Route_HttpRetryPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HttpRetryEvents": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"MaxRetries": &Reference{
	type_: Integer,
},
			"PerRetryTimeout": &Reference{
	ref: "AWS::AppMesh::Route_Duration",
},
			"TcpRetryEvents": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::AppMesh::Route_HttpRoute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	ref: "AWS::AppMesh::Route_HttpRouteAction",
},
			"Match": &Reference{
	ref: "AWS::AppMesh::Route_HttpRouteMatch",
},
			"RetryPolicy": &Reference{
	ref: "AWS::AppMesh::Route_HttpRetryPolicy",
},
			"Timeout": &Reference{
	ref: "AWS::AppMesh::Route_HttpTimeout",
},
	},
},
	"AWS::AppMesh::Route_HttpRouteAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"WeightedTargets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::Route_WeightedTarget",
},
},
	},
},
	"AWS::AppMesh::Route_HttpRouteHeader": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Invert": &Reference{
	type_: Boolean,
},
			"Match": &Reference{
	ref: "AWS::AppMesh::Route_HeaderMatchMethod",
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::Route_HttpRouteMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Headers": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::Route_HttpRouteHeader",
},
},
			"Method": &Reference{
	type_: String,
},
			"Path": &Reference{
	ref: "AWS::AppMesh::Route_HttpPathMatch",
},
			"Prefix": &Reference{
	type_: String,
},
			"QueryParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::Route_QueryParameter",
},
},
			"Scheme": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::Route_HttpTimeout": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Idle": &Reference{
	ref: "AWS::AppMesh::Route_Duration",
},
			"PerRequest": &Reference{
	ref: "AWS::AppMesh::Route_Duration",
},
	},
},
	"AWS::AppMesh::Route_MatchRange": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"End": &Reference{
	type_: Integer,
},
			"Start": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AppMesh::Route_QueryParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Match": &Reference{
	ref: "AWS::AppMesh::Route_HttpQueryParameterMatch",
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::Route_RouteSpec": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GrpcRoute": &Reference{
	ref: "AWS::AppMesh::Route_GrpcRoute",
},
			"Http2Route": &Reference{
	ref: "AWS::AppMesh::Route_HttpRoute",
},
			"HttpRoute": &Reference{
	ref: "AWS::AppMesh::Route_HttpRoute",
},
			"Priority": &Reference{
	type_: Integer,
},
			"TcpRoute": &Reference{
	ref: "AWS::AppMesh::Route_TcpRoute",
},
	},
},
	"AWS::AppMesh::Route_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::Route_TcpRoute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	ref: "AWS::AppMesh::Route_TcpRouteAction",
},
			"Timeout": &Reference{
	ref: "AWS::AppMesh::Route_TcpTimeout",
},
	},
},
	"AWS::AppMesh::Route_TcpRouteAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"WeightedTargets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::Route_WeightedTarget",
},
},
	},
},
	"AWS::AppMesh::Route_TcpTimeout": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Idle": &Reference{
	ref: "AWS::AppMesh::Route_Duration",
},
	},
},
	"AWS::AppMesh::Route_WeightedTarget": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"VirtualNode": &Reference{
	type_: String,
},
			"Weight": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AppMesh::VirtualGateway_SubjectAlternativeNameMatchers": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Exact": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::AppMesh::VirtualGateway_SubjectAlternativeNames": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Match": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_SubjectAlternativeNameMatchers",
},
	},
},
	"AWS::AppMesh::VirtualGateway_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayAccessLog": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"File": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayFileAccessLog",
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayBackendDefaults": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClientPolicy": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayClientPolicy",
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayClientPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TLS": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayClientPolicyTls",
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayClientPolicyTls": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Certificate": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayClientTlsCertificate",
},
			"Enforce": &Reference{
	type_: Boolean,
},
			"Ports": &Reference{
	type_: Array,
	items: &Reference{
	type_: Integer,
},
},
			"Validation": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayTlsValidationContext",
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayClientTlsCertificate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"File": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayListenerTlsFileCertificate",
},
			"SDS": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayListenerTlsSdsCertificate",
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayConnectionPool": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GRPC": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayGrpcConnectionPool",
},
			"HTTP": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayHttpConnectionPool",
},
			"HTTP2": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayHttp2ConnectionPool",
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayFileAccessLog": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Path": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayGrpcConnectionPool": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxRequests": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayHealthCheckPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HealthyThreshold": &Reference{
	type_: Integer,
},
			"IntervalMillis": &Reference{
	type_: Integer,
},
			"Path": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Integer,
},
			"Protocol": &Reference{
	type_: String,
},
			"TimeoutMillis": &Reference{
	type_: Integer,
},
			"UnhealthyThreshold": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayHttp2ConnectionPool": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxRequests": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayHttpConnectionPool": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxConnections": &Reference{
	type_: Integer,
},
			"MaxPendingRequests": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayListener": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConnectionPool": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayConnectionPool",
},
			"HealthCheck": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayHealthCheckPolicy",
},
			"PortMapping": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayPortMapping",
},
			"TLS": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayListenerTls",
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayListenerTls": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Certificate": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayListenerTlsCertificate",
},
			"Mode": &Reference{
	type_: String,
},
			"Validation": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayListenerTlsValidationContext",
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayListenerTlsAcmCertificate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateArn": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayListenerTlsCertificate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ACM": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayListenerTlsAcmCertificate",
},
			"File": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayListenerTlsFileCertificate",
},
			"SDS": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayListenerTlsSdsCertificate",
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayListenerTlsFileCertificate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateChain": &Reference{
	type_: String,
},
			"PrivateKey": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayListenerTlsSdsCertificate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecretName": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayListenerTlsValidationContext": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SubjectAlternativeNames": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_SubjectAlternativeNames",
},
			"Trust": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayListenerTlsValidationContextTrust",
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayListenerTlsValidationContextTrust": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"File": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayTlsValidationContextFileTrust",
},
			"SDS": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayTlsValidationContextSdsTrust",
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayLogging": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessLog": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayAccessLog",
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayPortMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Port": &Reference{
	type_: Integer,
},
			"Protocol": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewaySpec": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BackendDefaults": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayBackendDefaults",
},
			"Listeners": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayListener",
},
},
			"Logging": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayLogging",
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayTlsValidationContext": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SubjectAlternativeNames": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_SubjectAlternativeNames",
},
			"Trust": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayTlsValidationContextTrust",
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayTlsValidationContextAcmTrust": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateAuthorityArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayTlsValidationContextFileTrust": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateChain": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayTlsValidationContextSdsTrust": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecretName": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualGateway_VirtualGatewayTlsValidationContextTrust": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ACM": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayTlsValidationContextAcmTrust",
},
			"File": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayTlsValidationContextFileTrust",
},
			"SDS": &Reference{
	ref: "AWS::AppMesh::VirtualGateway_VirtualGatewayTlsValidationContextSdsTrust",
},
	},
},
	"AWS::AppMesh::VirtualNode_AccessLog": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"File": &Reference{
	ref: "AWS::AppMesh::VirtualNode_FileAccessLog",
},
	},
},
	"AWS::AppMesh::VirtualNode_AwsCloudMapInstanceAttribute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualNode_AwsCloudMapServiceDiscovery": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Attributes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::VirtualNode_AwsCloudMapInstanceAttribute",
},
},
			"IpPreference": &Reference{
	type_: String,
},
			"NamespaceName": &Reference{
	type_: String,
},
			"ServiceName": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualNode_Backend": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"VirtualService": &Reference{
	ref: "AWS::AppMesh::VirtualNode_VirtualServiceBackend",
},
	},
},
	"AWS::AppMesh::VirtualNode_BackendDefaults": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClientPolicy": &Reference{
	ref: "AWS::AppMesh::VirtualNode_ClientPolicy",
},
	},
},
	"AWS::AppMesh::VirtualNode_ClientPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TLS": &Reference{
	ref: "AWS::AppMesh::VirtualNode_ClientPolicyTls",
},
	},
},
	"AWS::AppMesh::VirtualNode_ClientPolicyTls": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Certificate": &Reference{
	ref: "AWS::AppMesh::VirtualNode_ClientTlsCertificate",
},
			"Enforce": &Reference{
	type_: Boolean,
},
			"Ports": &Reference{
	type_: Array,
	items: &Reference{
	type_: Integer,
},
},
			"Validation": &Reference{
	ref: "AWS::AppMesh::VirtualNode_TlsValidationContext",
},
	},
},
	"AWS::AppMesh::VirtualNode_ClientTlsCertificate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"File": &Reference{
	ref: "AWS::AppMesh::VirtualNode_ListenerTlsFileCertificate",
},
			"SDS": &Reference{
	ref: "AWS::AppMesh::VirtualNode_ListenerTlsSdsCertificate",
},
	},
},
	"AWS::AppMesh::VirtualNode_DnsServiceDiscovery": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Hostname": &Reference{
	type_: String,
},
			"IpPreference": &Reference{
	type_: String,
},
			"ResponseType": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualNode_Duration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Unit": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AppMesh::VirtualNode_FileAccessLog": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Path": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualNode_GrpcTimeout": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Idle": &Reference{
	ref: "AWS::AppMesh::VirtualNode_Duration",
},
			"PerRequest": &Reference{
	ref: "AWS::AppMesh::VirtualNode_Duration",
},
	},
},
	"AWS::AppMesh::VirtualNode_HealthCheck": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HealthyThreshold": &Reference{
	type_: Integer,
},
			"IntervalMillis": &Reference{
	type_: Integer,
},
			"Path": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Integer,
},
			"Protocol": &Reference{
	type_: String,
},
			"TimeoutMillis": &Reference{
	type_: Integer,
},
			"UnhealthyThreshold": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AppMesh::VirtualNode_HttpTimeout": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Idle": &Reference{
	ref: "AWS::AppMesh::VirtualNode_Duration",
},
			"PerRequest": &Reference{
	ref: "AWS::AppMesh::VirtualNode_Duration",
},
	},
},
	"AWS::AppMesh::VirtualNode_Listener": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConnectionPool": &Reference{
	ref: "AWS::AppMesh::VirtualNode_VirtualNodeConnectionPool",
},
			"HealthCheck": &Reference{
	ref: "AWS::AppMesh::VirtualNode_HealthCheck",
},
			"OutlierDetection": &Reference{
	ref: "AWS::AppMesh::VirtualNode_OutlierDetection",
},
			"PortMapping": &Reference{
	ref: "AWS::AppMesh::VirtualNode_PortMapping",
},
			"TLS": &Reference{
	ref: "AWS::AppMesh::VirtualNode_ListenerTls",
},
			"Timeout": &Reference{
	ref: "AWS::AppMesh::VirtualNode_ListenerTimeout",
},
	},
},
	"AWS::AppMesh::VirtualNode_ListenerTimeout": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GRPC": &Reference{
	ref: "AWS::AppMesh::VirtualNode_GrpcTimeout",
},
			"HTTP": &Reference{
	ref: "AWS::AppMesh::VirtualNode_HttpTimeout",
},
			"HTTP2": &Reference{
	ref: "AWS::AppMesh::VirtualNode_HttpTimeout",
},
			"TCP": &Reference{
	ref: "AWS::AppMesh::VirtualNode_TcpTimeout",
},
	},
},
	"AWS::AppMesh::VirtualNode_ListenerTls": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Certificate": &Reference{
	ref: "AWS::AppMesh::VirtualNode_ListenerTlsCertificate",
},
			"Mode": &Reference{
	type_: String,
},
			"Validation": &Reference{
	ref: "AWS::AppMesh::VirtualNode_ListenerTlsValidationContext",
},
	},
},
	"AWS::AppMesh::VirtualNode_ListenerTlsAcmCertificate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateArn": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualNode_ListenerTlsCertificate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ACM": &Reference{
	ref: "AWS::AppMesh::VirtualNode_ListenerTlsAcmCertificate",
},
			"File": &Reference{
	ref: "AWS::AppMesh::VirtualNode_ListenerTlsFileCertificate",
},
			"SDS": &Reference{
	ref: "AWS::AppMesh::VirtualNode_ListenerTlsSdsCertificate",
},
	},
},
	"AWS::AppMesh::VirtualNode_ListenerTlsFileCertificate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateChain": &Reference{
	type_: String,
},
			"PrivateKey": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualNode_ListenerTlsSdsCertificate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecretName": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualNode_ListenerTlsValidationContext": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SubjectAlternativeNames": &Reference{
	ref: "AWS::AppMesh::VirtualNode_SubjectAlternativeNames",
},
			"Trust": &Reference{
	ref: "AWS::AppMesh::VirtualNode_ListenerTlsValidationContextTrust",
},
	},
},
	"AWS::AppMesh::VirtualNode_ListenerTlsValidationContextTrust": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"File": &Reference{
	ref: "AWS::AppMesh::VirtualNode_TlsValidationContextFileTrust",
},
			"SDS": &Reference{
	ref: "AWS::AppMesh::VirtualNode_TlsValidationContextSdsTrust",
},
	},
},
	"AWS::AppMesh::VirtualNode_Logging": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessLog": &Reference{
	ref: "AWS::AppMesh::VirtualNode_AccessLog",
},
	},
},
	"AWS::AppMesh::VirtualNode_OutlierDetection": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BaseEjectionDuration": &Reference{
	ref: "AWS::AppMesh::VirtualNode_Duration",
},
			"Interval": &Reference{
	ref: "AWS::AppMesh::VirtualNode_Duration",
},
			"MaxEjectionPercent": &Reference{
	type_: Integer,
},
			"MaxServerErrors": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AppMesh::VirtualNode_PortMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Port": &Reference{
	type_: Integer,
},
			"Protocol": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualNode_ServiceDiscovery": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AWSCloudMap": &Reference{
	ref: "AWS::AppMesh::VirtualNode_AwsCloudMapServiceDiscovery",
},
			"DNS": &Reference{
	ref: "AWS::AppMesh::VirtualNode_DnsServiceDiscovery",
},
	},
},
	"AWS::AppMesh::VirtualNode_SubjectAlternativeNameMatchers": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Exact": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::AppMesh::VirtualNode_SubjectAlternativeNames": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Match": &Reference{
	ref: "AWS::AppMesh::VirtualNode_SubjectAlternativeNameMatchers",
},
	},
},
	"AWS::AppMesh::VirtualNode_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualNode_TcpTimeout": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Idle": &Reference{
	ref: "AWS::AppMesh::VirtualNode_Duration",
},
	},
},
	"AWS::AppMesh::VirtualNode_TlsValidationContext": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SubjectAlternativeNames": &Reference{
	ref: "AWS::AppMesh::VirtualNode_SubjectAlternativeNames",
},
			"Trust": &Reference{
	ref: "AWS::AppMesh::VirtualNode_TlsValidationContextTrust",
},
	},
},
	"AWS::AppMesh::VirtualNode_TlsValidationContextAcmTrust": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateAuthorityArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::AppMesh::VirtualNode_TlsValidationContextFileTrust": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateChain": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualNode_TlsValidationContextSdsTrust": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecretName": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualNode_TlsValidationContextTrust": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ACM": &Reference{
	ref: "AWS::AppMesh::VirtualNode_TlsValidationContextAcmTrust",
},
			"File": &Reference{
	ref: "AWS::AppMesh::VirtualNode_TlsValidationContextFileTrust",
},
			"SDS": &Reference{
	ref: "AWS::AppMesh::VirtualNode_TlsValidationContextSdsTrust",
},
	},
},
	"AWS::AppMesh::VirtualNode_VirtualNodeConnectionPool": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GRPC": &Reference{
	ref: "AWS::AppMesh::VirtualNode_VirtualNodeGrpcConnectionPool",
},
			"HTTP": &Reference{
	ref: "AWS::AppMesh::VirtualNode_VirtualNodeHttpConnectionPool",
},
			"HTTP2": &Reference{
	ref: "AWS::AppMesh::VirtualNode_VirtualNodeHttp2ConnectionPool",
},
			"TCP": &Reference{
	ref: "AWS::AppMesh::VirtualNode_VirtualNodeTcpConnectionPool",
},
	},
},
	"AWS::AppMesh::VirtualNode_VirtualNodeGrpcConnectionPool": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxRequests": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AppMesh::VirtualNode_VirtualNodeHttp2ConnectionPool": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxRequests": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AppMesh::VirtualNode_VirtualNodeHttpConnectionPool": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxConnections": &Reference{
	type_: Integer,
},
			"MaxPendingRequests": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AppMesh::VirtualNode_VirtualNodeSpec": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BackendDefaults": &Reference{
	ref: "AWS::AppMesh::VirtualNode_BackendDefaults",
},
			"Backends": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::VirtualNode_Backend",
},
},
			"Listeners": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::VirtualNode_Listener",
},
},
			"Logging": &Reference{
	ref: "AWS::AppMesh::VirtualNode_Logging",
},
			"ServiceDiscovery": &Reference{
	ref: "AWS::AppMesh::VirtualNode_ServiceDiscovery",
},
	},
},
	"AWS::AppMesh::VirtualNode_VirtualNodeTcpConnectionPool": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxConnections": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AppMesh::VirtualNode_VirtualServiceBackend": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClientPolicy": &Reference{
	ref: "AWS::AppMesh::VirtualNode_ClientPolicy",
},
			"VirtualServiceName": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualRouter_PortMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Port": &Reference{
	type_: Integer,
},
			"Protocol": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualRouter_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualRouter_VirtualRouterListener": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PortMapping": &Reference{
	ref: "AWS::AppMesh::VirtualRouter_PortMapping",
},
	},
},
	"AWS::AppMesh::VirtualRouter_VirtualRouterSpec": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Listeners": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppMesh::VirtualRouter_VirtualRouterListener",
},
},
	},
},
	"AWS::AppMesh::VirtualService_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualService_VirtualNodeServiceProvider": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"VirtualNodeName": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualService_VirtualRouterServiceProvider": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"VirtualRouterName": &Reference{
	type_: String,
},
	},
},
	"AWS::AppMesh::VirtualService_VirtualServiceProvider": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"VirtualNode": &Reference{
	ref: "AWS::AppMesh::VirtualService_VirtualNodeServiceProvider",
},
			"VirtualRouter": &Reference{
	ref: "AWS::AppMesh::VirtualService_VirtualRouterServiceProvider",
},
	},
},
	"AWS::AppMesh::VirtualService_VirtualServiceSpec": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Provider": &Reference{
	ref: "AWS::AppMesh::VirtualService_VirtualServiceProvider",
},
	},
},
	"AWS::AppRunner::ObservabilityConfiguration_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppRunner::ObservabilityConfiguration_TraceConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Vendor": &Reference{
	type_: String,
},
	},
},
	"AWS::AppRunner::Service_AuthenticationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessRoleArn": &Reference{
	ref: "AWS::AppRunner::Service_RoleArn",
},
			"ConnectionArn": &Reference{
	type_: String,
},
	},
},
	"AWS::AppRunner::Service_CodeConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CodeConfigurationValues": &Reference{
	ref: "AWS::AppRunner::Service_CodeConfigurationValues",
},
			"ConfigurationSource": &Reference{
	type_: String,
},
	},
},
	"AWS::AppRunner::Service_CodeConfigurationValues": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BuildCommand": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: String,
},
			"Runtime": &Reference{
	type_: String,
},
			"RuntimeEnvironmentVariables": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppRunner::Service_KeyValuePair",
},
},
			"StartCommand": &Reference{
	type_: String,
},
	},
},
	"AWS::AppRunner::Service_CodeRepository": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CodeConfiguration": &Reference{
	ref: "AWS::AppRunner::Service_CodeConfiguration",
},
			"RepositoryUrl": &Reference{
	type_: String,
},
			"SourceCodeVersion": &Reference{
	ref: "AWS::AppRunner::Service_SourceCodeVersion",
},
	},
},
	"AWS::AppRunner::Service_EgressConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EgressType": &Reference{
	type_: String,
},
			"VpcConnectorArn": &Reference{
	type_: String,
},
	},
},
	"AWS::AppRunner::Service_EncryptionConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KmsKey": &Reference{
	type_: String,
},
	},
},
	"AWS::AppRunner::Service_HealthCheckConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HealthyThreshold": &Reference{
	type_: Integer,
},
			"Interval": &Reference{
	type_: Integer,
},
			"Path": &Reference{
	type_: String,
},
			"Protocol": &Reference{
	type_: String,
},
			"Timeout": &Reference{
	type_: Integer,
},
			"UnhealthyThreshold": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AppRunner::Service_ImageConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Port": &Reference{
	type_: String,
},
			"RuntimeEnvironmentVariables": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AppRunner::Service_KeyValuePair",
},
},
			"StartCommand": &Reference{
	type_: String,
},
	},
},
	"AWS::AppRunner::Service_ImageRepository": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ImageConfiguration": &Reference{
	ref: "AWS::AppRunner::Service_ImageConfiguration",
},
			"ImageIdentifier": &Reference{
	type_: String,
},
			"ImageRepositoryType": &Reference{
	type_: String,
},
	},
},
	"AWS::AppRunner::Service_InstanceConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Cpu": &Reference{
	type_: String,
},
			"InstanceRoleArn": &Reference{
	ref: "AWS::AppRunner::Service_RoleArn",
},
			"Memory": &Reference{
	type_: String,
},
	},
},
	"AWS::AppRunner::Service_KeyValuePair": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppRunner::Service_NetworkConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EgressConfiguration": &Reference{
	ref: "AWS::AppRunner::Service_EgressConfiguration",
},
	},
},
	"AWS::AppRunner::Service_RoleArn": &Reference{
	type_: String,
},
	"AWS::AppRunner::Service_ServiceObservabilityConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ObservabilityConfigurationArn": &Reference{
	type_: String,
},
			"ObservabilityEnabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::AppRunner::Service_SourceCodeVersion": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppRunner::Service_SourceConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthenticationConfiguration": &Reference{
	ref: "AWS::AppRunner::Service_AuthenticationConfiguration",
},
			"AutoDeploymentsEnabled": &Reference{
	type_: Boolean,
},
			"CodeRepository": &Reference{
	ref: "AWS::AppRunner::Service_CodeRepository",
},
			"ImageRepository": &Reference{
	ref: "AWS::AppRunner::Service_ImageRepository",
},
	},
},
	"AWS::AppRunner::Service_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppRunner::VpcConnector_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppStream::AppBlock_Arn": &Reference{
	type_: String,
},
	"AWS::AppStream::AppBlock_S3Location": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Bucket": &Reference{
	type_: String,
},
			"S3Key": &Reference{
	type_: String,
},
	},
},
	"AWS::AppStream::AppBlock_ScriptDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExecutableParameters": &Reference{
	type_: String,
},
			"ExecutablePath": &Reference{
	type_: String,
},
			"ScriptS3Location": &Reference{
	ref: "AWS::AppStream::AppBlock_S3Location",
},
			"TimeoutInSeconds": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AppStream::AppBlock_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TagKey": &Reference{
	type_: String,
},
			"TagValue": &Reference{
	type_: String,
},
	},
},
	"AWS::AppStream::Application_ApplicationAttribute": &Reference{
	type_: String,
},
	"AWS::AppStream::Application_Arn": &Reference{
	type_: String,
},
	"AWS::AppStream::Application_PlatformType": &Reference{
	type_: String,
},
	"AWS::AppStream::Application_S3Location": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Bucket": &Reference{
	type_: String,
},
			"S3Key": &Reference{
	type_: String,
},
	},
},
	"AWS::AppStream::Application_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TagKey": &Reference{
	type_: String,
},
			"TagValue": &Reference{
	type_: String,
},
	},
},
	"AWS::AppStream::ApplicationFleetAssociation_Arn": &Reference{
	type_: String,
},
	"AWS::AppStream::DirectoryConfig_ServiceAccountCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccountName": &Reference{
	type_: String,
},
			"AccountPassword": &Reference{
	type_: String,
},
	},
},
	"AWS::AppStream::Entitlement_Attribute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppStream::Fleet_ComputeCapacity": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DesiredInstances": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AppStream::Fleet_DomainJoinInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DirectoryName": &Reference{
	type_: String,
},
			"OrganizationalUnitDistinguishedName": &Reference{
	type_: String,
},
	},
},
	"AWS::AppStream::Fleet_S3Location": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Bucket": &Reference{
	type_: String,
},
			"S3Key": &Reference{
	type_: String,
},
	},
},
	"AWS::AppStream::Fleet_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppStream::Fleet_VpcConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::AppStream::ImageBuilder_AccessEndpoint": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EndpointType": &Reference{
	type_: String,
},
			"VpceId": &Reference{
	type_: String,
},
	},
},
	"AWS::AppStream::ImageBuilder_DomainJoinInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DirectoryName": &Reference{
	type_: String,
},
			"OrganizationalUnitDistinguishedName": &Reference{
	type_: String,
},
	},
},
	"AWS::AppStream::ImageBuilder_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppStream::ImageBuilder_VpcConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::AppStream::Stack_AccessEndpoint": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EndpointType": &Reference{
	type_: String,
},
			"VpceId": &Reference{
	type_: String,
},
	},
},
	"AWS::AppStream::Stack_ApplicationSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
			"SettingsGroup": &Reference{
	type_: String,
},
	},
},
	"AWS::AppStream::Stack_StorageConnector": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConnectorType": &Reference{
	type_: String,
},
			"Domains": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ResourceIdentifier": &Reference{
	type_: String,
},
	},
},
	"AWS::AppStream::Stack_StreamingExperienceSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PreferredProtocol": &Reference{
	type_: String,
},
	},
},
	"AWS::AppStream::Stack_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppStream::Stack_UserSetting": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	type_: String,
},
			"Permission": &Reference{
	type_: String,
},
	},
},
	"AWS::AppSync::DataSource_AuthorizationConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthorizationType": &Reference{
	type_: String,
},
			"AwsIamConfig": &Reference{
	ref: "AWS::AppSync::DataSource_AwsIamConfig",
},
	},
},
	"AWS::AppSync::DataSource_AwsIamConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SigningRegion": &Reference{
	type_: String,
},
			"SigningServiceName": &Reference{
	type_: String,
},
	},
},
	"AWS::AppSync::DataSource_DeltaSyncConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BaseTableTTL": &Reference{
	type_: String,
},
			"DeltaSyncTableName": &Reference{
	type_: String,
},
			"DeltaSyncTableTTL": &Reference{
	type_: String,
},
	},
},
	"AWS::AppSync::DataSource_DynamoDBConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AwsRegion": &Reference{
	type_: String,
},
			"DeltaSyncConfig": &Reference{
	ref: "AWS::AppSync::DataSource_DeltaSyncConfig",
},
			"TableName": &Reference{
	type_: String,
},
			"UseCallerCredentials": &Reference{
	type_: Boolean,
},
			"Versioned": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::AppSync::DataSource_ElasticsearchConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AwsRegion": &Reference{
	type_: String,
},
			"Endpoint": &Reference{
	type_: String,
},
	},
},
	"AWS::AppSync::DataSource_HttpConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthorizationConfig": &Reference{
	ref: "AWS::AppSync::DataSource_AuthorizationConfig",
},
			"Endpoint": &Reference{
	type_: String,
},
	},
},
	"AWS::AppSync::DataSource_LambdaConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LambdaFunctionArn": &Reference{
	type_: String,
},
	},
},
	"AWS::AppSync::DataSource_OpenSearchServiceConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AwsRegion": &Reference{
	type_: String,
},
			"Endpoint": &Reference{
	type_: String,
},
	},
},
	"AWS::AppSync::DataSource_RdsHttpEndpointConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AwsRegion": &Reference{
	type_: String,
},
			"AwsSecretStoreArn": &Reference{
	type_: String,
},
			"DatabaseName": &Reference{
	type_: String,
},
			"DbClusterIdentifier": &Reference{
	type_: String,
},
			"Schema": &Reference{
	type_: String,
},
	},
},
	"AWS::AppSync::DataSource_RelationalDatabaseConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RdsHttpEndpointConfig": &Reference{
	ref: "AWS::AppSync::DataSource_RdsHttpEndpointConfig",
},
			"RelationalDatabaseSourceType": &Reference{
	type_: String,
},
	},
},
	"AWS::AppSync::FunctionConfiguration_LambdaConflictHandlerConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LambdaConflictHandlerArn": &Reference{
	type_: String,
},
	},
},
	"AWS::AppSync::FunctionConfiguration_SyncConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConflictDetection": &Reference{
	type_: String,
},
			"ConflictHandler": &Reference{
	type_: String,
},
			"LambdaConflictHandlerConfig": &Reference{
	ref: "AWS::AppSync::FunctionConfiguration_LambdaConflictHandlerConfig",
},
	},
},
	"AWS::AppSync::GraphQLApi_AdditionalAuthenticationProvider": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthenticationType": &Reference{
	type_: String,
},
			"LambdaAuthorizerConfig": &Reference{
	ref: "AWS::AppSync::GraphQLApi_LambdaAuthorizerConfig",
},
			"OpenIDConnectConfig": &Reference{
	ref: "AWS::AppSync::GraphQLApi_OpenIDConnectConfig",
},
			"UserPoolConfig": &Reference{
	ref: "AWS::AppSync::GraphQLApi_CognitoUserPoolConfig",
},
	},
},
	"AWS::AppSync::GraphQLApi_CognitoUserPoolConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AppIdClientRegex": &Reference{
	type_: String,
},
			"AwsRegion": &Reference{
	type_: String,
},
			"UserPoolId": &Reference{
	type_: String,
},
	},
},
	"AWS::AppSync::GraphQLApi_LambdaAuthorizerConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthorizerResultTtlInSeconds": &Reference{
	type_: Number,
},
			"AuthorizerUri": &Reference{
	type_: String,
},
			"IdentityValidationExpression": &Reference{
	type_: String,
},
	},
},
	"AWS::AppSync::GraphQLApi_LogConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchLogsRoleArn": &Reference{
	type_: String,
},
			"ExcludeVerboseContent": &Reference{
	type_: Boolean,
},
			"FieldLogLevel": &Reference{
	type_: String,
},
	},
},
	"AWS::AppSync::GraphQLApi_OpenIDConnectConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthTTL": &Reference{
	type_: Number,
},
			"ClientId": &Reference{
	type_: String,
},
			"IatTTL": &Reference{
	type_: Number,
},
			"Issuer": &Reference{
	type_: String,
},
	},
},
	"AWS::AppSync::GraphQLApi_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AppSync::GraphQLApi_UserPoolConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AppIdClientRegex": &Reference{
	type_: String,
},
			"AwsRegion": &Reference{
	type_: String,
},
			"DefaultAction": &Reference{
	type_: String,
},
			"UserPoolId": &Reference{
	type_: String,
},
	},
},
	"AWS::AppSync::Resolver_CachingConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CachingKeys": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Ttl": &Reference{
	type_: Number,
},
	},
},
	"AWS::AppSync::Resolver_LambdaConflictHandlerConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LambdaConflictHandlerArn": &Reference{
	type_: String,
},
	},
},
	"AWS::AppSync::Resolver_PipelineConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Functions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::AppSync::Resolver_SyncConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConflictDetection": &Reference{
	type_: String,
},
			"ConflictHandler": &Reference{
	type_: String,
},
			"LambdaConflictHandlerConfig": &Reference{
	ref: "AWS::AppSync::Resolver_LambdaConflictHandlerConfig",
},
	},
},
	"AWS::ApplicationAutoScaling::ScalableTarget_ScalableTargetAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxCapacity": &Reference{
	type_: Integer,
},
			"MinCapacity": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ApplicationAutoScaling::ScalableTarget_ScheduledAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EndTime": &Reference{
	type_: String,
},
			"ScalableTargetAction": &Reference{
	ref: "AWS::ApplicationAutoScaling::ScalableTarget_ScalableTargetAction",
},
			"Schedule": &Reference{
	type_: String,
},
			"ScheduledActionName": &Reference{
	type_: String,
},
			"StartTime": &Reference{
	type_: String,
},
			"Timezone": &Reference{
	type_: String,
},
	},
},
	"AWS::ApplicationAutoScaling::ScalableTarget_SuspendedState": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DynamicScalingInSuspended": &Reference{
	type_: Boolean,
},
			"DynamicScalingOutSuspended": &Reference{
	type_: Boolean,
},
			"ScheduledScalingSuspended": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::ApplicationAutoScaling::ScalingPolicy_CustomizedMetricSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Dimensions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApplicationAutoScaling::ScalingPolicy_MetricDimension",
},
},
			"MetricName": &Reference{
	type_: String,
},
			"Namespace": &Reference{
	type_: String,
},
			"Statistic": &Reference{
	type_: String,
},
			"Unit": &Reference{
	type_: String,
},
	},
},
	"AWS::ApplicationAutoScaling::ScalingPolicy_MetricDimension": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ApplicationAutoScaling::ScalingPolicy_PredefinedMetricSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PredefinedMetricType": &Reference{
	type_: String,
},
			"ResourceLabel": &Reference{
	type_: String,
},
	},
},
	"AWS::ApplicationAutoScaling::ScalingPolicy_StepAdjustment": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MetricIntervalLowerBound": &Reference{
	type_: Number,
},
			"MetricIntervalUpperBound": &Reference{
	type_: Number,
},
			"ScalingAdjustment": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ApplicationAutoScaling::ScalingPolicy_StepScalingPolicyConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdjustmentType": &Reference{
	type_: String,
},
			"Cooldown": &Reference{
	type_: Integer,
},
			"MetricAggregationType": &Reference{
	type_: String,
},
			"MinAdjustmentMagnitude": &Reference{
	type_: Integer,
},
			"StepAdjustments": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApplicationAutoScaling::ScalingPolicy_StepAdjustment",
},
},
	},
},
	"AWS::ApplicationAutoScaling::ScalingPolicy_TargetTrackingScalingPolicyConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomizedMetricSpecification": &Reference{
	ref: "AWS::ApplicationAutoScaling::ScalingPolicy_CustomizedMetricSpecification",
},
			"DisableScaleIn": &Reference{
	type_: Boolean,
},
			"PredefinedMetricSpecification": &Reference{
	ref: "AWS::ApplicationAutoScaling::ScalingPolicy_PredefinedMetricSpecification",
},
			"ScaleInCooldown": &Reference{
	type_: Integer,
},
			"ScaleOutCooldown": &Reference{
	type_: Integer,
},
			"TargetValue": &Reference{
	type_: Number,
},
	},
},
	"AWS::ApplicationInsights::Application_Alarm": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AlarmName": &Reference{
	type_: String,
},
			"Severity": &Reference{
	type_: String,
},
	},
},
	"AWS::ApplicationInsights::Application_AlarmMetric": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AlarmMetricName": &Reference{
	type_: String,
},
	},
},
	"AWS::ApplicationInsights::Application_ComponentConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConfigurationDetails": &Reference{
	ref: "AWS::ApplicationInsights::Application_ConfigurationDetails",
},
			"SubComponentTypeConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApplicationInsights::Application_SubComponentTypeConfiguration",
},
},
	},
},
	"AWS::ApplicationInsights::Application_ComponentMonitoringSetting": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComponentARN": &Reference{
	type_: String,
},
			"ComponentConfigurationMode": &Reference{
	type_: String,
},
			"ComponentName": &Reference{
	type_: String,
},
			"CustomComponentConfiguration": &Reference{
	ref: "AWS::ApplicationInsights::Application_ComponentConfiguration",
},
			"DefaultOverwriteComponentConfiguration": &Reference{
	ref: "AWS::ApplicationInsights::Application_ComponentConfiguration",
},
			"Tier": &Reference{
	type_: String,
},
	},
},
	"AWS::ApplicationInsights::Application_ConfigurationDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AlarmMetrics": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApplicationInsights::Application_AlarmMetric",
},
},
			"Alarms": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApplicationInsights::Application_Alarm",
},
},
			"HAClusterPrometheusExporter": &Reference{
	ref: "AWS::ApplicationInsights::Application_HAClusterPrometheusExporter",
},
			"HANAPrometheusExporter": &Reference{
	ref: "AWS::ApplicationInsights::Application_HANAPrometheusExporter",
},
			"JMXPrometheusExporter": &Reference{
	ref: "AWS::ApplicationInsights::Application_JMXPrometheusExporter",
},
			"Logs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApplicationInsights::Application_Log",
},
},
			"WindowsEvents": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApplicationInsights::Application_WindowsEvent",
},
},
	},
},
	"AWS::ApplicationInsights::Application_CustomComponent": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComponentName": &Reference{
	type_: String,
},
			"ResourceList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::ApplicationInsights::Application_EventLevel": &Reference{
	type_: String,
},
	"AWS::ApplicationInsights::Application_HAClusterPrometheusExporter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PrometheusPort": &Reference{
	type_: String,
},
	},
},
	"AWS::ApplicationInsights::Application_HANAPrometheusExporter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AgreeToInstallHANADBClient": &Reference{
	type_: Boolean,
},
			"HANAPort": &Reference{
	type_: String,
},
			"HANASID": &Reference{
	type_: String,
},
			"HANASecretName": &Reference{
	type_: String,
},
			"PrometheusPort": &Reference{
	type_: String,
},
	},
},
	"AWS::ApplicationInsights::Application_JMXPrometheusExporter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HostPort": &Reference{
	type_: String,
},
			"JMXURL": &Reference{
	type_: String,
},
			"PrometheusPort": &Reference{
	type_: String,
},
	},
},
	"AWS::ApplicationInsights::Application_Log": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Encoding": &Reference{
	type_: String,
},
			"LogGroupName": &Reference{
	type_: String,
},
			"LogPath": &Reference{
	type_: String,
},
			"LogType": &Reference{
	type_: String,
},
			"PatternSet": &Reference{
	type_: String,
},
	},
},
	"AWS::ApplicationInsights::Application_LogPattern": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Pattern": &Reference{
	type_: String,
},
			"PatternName": &Reference{
	type_: String,
},
			"Rank": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ApplicationInsights::Application_LogPatternSet": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LogPatterns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApplicationInsights::Application_LogPattern",
},
},
			"PatternSetName": &Reference{
	type_: String,
},
	},
},
	"AWS::ApplicationInsights::Application_SubComponentConfigurationDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AlarmMetrics": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApplicationInsights::Application_AlarmMetric",
},
},
			"Logs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApplicationInsights::Application_Log",
},
},
			"WindowsEvents": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApplicationInsights::Application_WindowsEvent",
},
},
	},
},
	"AWS::ApplicationInsights::Application_SubComponentTypeConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SubComponentConfigurationDetails": &Reference{
	ref: "AWS::ApplicationInsights::Application_SubComponentConfigurationDetails",
},
			"SubComponentType": &Reference{
	type_: String,
},
	},
},
	"AWS::ApplicationInsights::Application_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ApplicationInsights::Application_WindowsEvent": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EventLevels": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ApplicationInsights::Application_EventLevel",
},
},
			"EventName": &Reference{
	type_: String,
},
			"LogGroupName": &Reference{
	type_: String,
},
			"PatternSet": &Reference{
	type_: String,
},
	},
},
	"AWS::Athena::DataCatalog_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Athena::DataCatalog_Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Athena::DataCatalog_Tag",
},
},
	"AWS::Athena::WorkGroup_BytesScannedCutoffPerQuery": &Reference{
	type_: Integer,
},
	"AWS::Athena::WorkGroup_EffectiveEngineVersion": &Reference{
	type_: String,
},
	"AWS::Athena::WorkGroup_EncryptionConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EncryptionOption": &Reference{
	ref: "AWS::Athena::WorkGroup_EncryptionOption",
},
			"KmsKey": &Reference{
	ref: "AWS::Athena::WorkGroup_KmsKey",
},
	},
},
	"AWS::Athena::WorkGroup_EncryptionOption": &Reference{
	type_: String,
},
	"AWS::Athena::WorkGroup_EnforceWorkGroupConfiguration": &Reference{
	type_: Boolean,
},
	"AWS::Athena::WorkGroup_EngineVersion": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EffectiveEngineVersion": &Reference{
	ref: "AWS::Athena::WorkGroup_EffectiveEngineVersion",
},
			"SelectedEngineVersion": &Reference{
	ref: "AWS::Athena::WorkGroup_SelectedEngineVersion",
},
	},
},
	"AWS::Athena::WorkGroup_KmsKey": &Reference{
	type_: String,
},
	"AWS::Athena::WorkGroup_OutputLocation": &Reference{
	type_: String,
},
	"AWS::Athena::WorkGroup_PublishCloudWatchMetricsEnabled": &Reference{
	type_: Boolean,
},
	"AWS::Athena::WorkGroup_RemoveBytesScannedCutoffPerQuery": &Reference{
	type_: Boolean,
},
	"AWS::Athena::WorkGroup_RemoveEncryptionConfiguration": &Reference{
	type_: Boolean,
},
	"AWS::Athena::WorkGroup_RemoveOutputLocation": &Reference{
	type_: Boolean,
},
	"AWS::Athena::WorkGroup_RequesterPaysEnabled": &Reference{
	type_: Boolean,
},
	"AWS::Athena::WorkGroup_ResultConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EncryptionConfiguration": &Reference{
	ref: "AWS::Athena::WorkGroup_EncryptionConfiguration",
},
			"OutputLocation": &Reference{
	ref: "AWS::Athena::WorkGroup_OutputLocation",
},
	},
},
	"AWS::Athena::WorkGroup_ResultConfigurationUpdates": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EncryptionConfiguration": &Reference{
	ref: "AWS::Athena::WorkGroup_EncryptionConfiguration",
},
			"OutputLocation": &Reference{
	ref: "AWS::Athena::WorkGroup_OutputLocation",
},
			"RemoveEncryptionConfiguration": &Reference{
	ref: "AWS::Athena::WorkGroup_RemoveEncryptionConfiguration",
},
			"RemoveOutputLocation": &Reference{
	ref: "AWS::Athena::WorkGroup_RemoveOutputLocation",
},
	},
},
	"AWS::Athena::WorkGroup_SelectedEngineVersion": &Reference{
	type_: String,
},
	"AWS::Athena::WorkGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Athena::WorkGroup_Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Athena::WorkGroup_Tag",
},
},
	"AWS::Athena::WorkGroup_WorkGroupConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BytesScannedCutoffPerQuery": &Reference{
	ref: "AWS::Athena::WorkGroup_BytesScannedCutoffPerQuery",
},
			"EnforceWorkGroupConfiguration": &Reference{
	ref: "AWS::Athena::WorkGroup_EnforceWorkGroupConfiguration",
},
			"EngineVersion": &Reference{
	ref: "AWS::Athena::WorkGroup_EngineVersion",
},
			"PublishCloudWatchMetricsEnabled": &Reference{
	ref: "AWS::Athena::WorkGroup_PublishCloudWatchMetricsEnabled",
},
			"RequesterPaysEnabled": &Reference{
	ref: "AWS::Athena::WorkGroup_RequesterPaysEnabled",
},
			"ResultConfiguration": &Reference{
	ref: "AWS::Athena::WorkGroup_ResultConfiguration",
},
	},
},
	"AWS::Athena::WorkGroup_WorkGroupConfigurationUpdates": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BytesScannedCutoffPerQuery": &Reference{
	ref: "AWS::Athena::WorkGroup_BytesScannedCutoffPerQuery",
},
			"EnforceWorkGroupConfiguration": &Reference{
	ref: "AWS::Athena::WorkGroup_EnforceWorkGroupConfiguration",
},
			"EngineVersion": &Reference{
	ref: "AWS::Athena::WorkGroup_EngineVersion",
},
			"PublishCloudWatchMetricsEnabled": &Reference{
	ref: "AWS::Athena::WorkGroup_PublishCloudWatchMetricsEnabled",
},
			"RemoveBytesScannedCutoffPerQuery": &Reference{
	ref: "AWS::Athena::WorkGroup_RemoveBytesScannedCutoffPerQuery",
},
			"RequesterPaysEnabled": &Reference{
	ref: "AWS::Athena::WorkGroup_RequesterPaysEnabled",
},
			"ResultConfigurationUpdates": &Reference{
	ref: "AWS::Athena::WorkGroup_ResultConfigurationUpdates",
},
	},
},
	"AWS::AuditManager::Assessment_AWSAccount": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EmailAddress": &Reference{
	ref: "AWS::AuditManager::Assessment_EmailAddress",
},
			"Id": &Reference{
	ref: "AWS::AuditManager::Assessment_AccountId",
},
			"Name": &Reference{
	ref: "AWS::AuditManager::Assessment_AccountName",
},
	},
},
	"AWS::AuditManager::Assessment_AWSService": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ServiceName": &Reference{
	ref: "AWS::AuditManager::Assessment_AWSServiceName",
},
	},
},
	"AWS::AuditManager::Assessment_AWSServiceName": &Reference{
	type_: String,
},
	"AWS::AuditManager::Assessment_AccountId": &Reference{
	type_: String,
},
	"AWS::AuditManager::Assessment_AccountName": &Reference{
	type_: String,
},
	"AWS::AuditManager::Assessment_AssessmentArn": &Reference{
	type_: String,
},
	"AWS::AuditManager::Assessment_AssessmentDescription": &Reference{
	type_: String,
},
	"AWS::AuditManager::Assessment_AssessmentName": &Reference{
	type_: String,
},
	"AWS::AuditManager::Assessment_AssessmentReportDestinationType": &Reference{
	type_: String,
},
	"AWS::AuditManager::Assessment_AssessmentReportsDestination": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Destination": &Reference{
	ref: "AWS::AuditManager::Assessment_S3Url",
},
			"DestinationType": &Reference{
	ref: "AWS::AuditManager::Assessment_AssessmentReportDestinationType",
},
	},
},
	"AWS::AuditManager::Assessment_AssessmentStatus": &Reference{
	type_: String,
},
	"AWS::AuditManager::Assessment_ControlSetId": &Reference{
	type_: String,
},
	"AWS::AuditManager::Assessment_CreatedBy": &Reference{
	type_: String,
},
	"AWS::AuditManager::Assessment_Delegation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AssessmentId": &Reference{
	ref: "AWS::AuditManager::Assessment_UUID",
},
			"AssessmentName": &Reference{
	ref: "AWS::AuditManager::Assessment_AssessmentName",
},
			"Comment": &Reference{
	ref: "AWS::AuditManager::Assessment_DelegationComment",
},
			"ControlSetId": &Reference{
	ref: "AWS::AuditManager::Assessment_ControlSetId",
},
			"CreatedBy": &Reference{
	ref: "AWS::AuditManager::Assessment_CreatedBy",
},
			"CreationTime": &Reference{
	ref: "AWS::AuditManager::Assessment_Timestamp",
},
			"Id": &Reference{
	ref: "AWS::AuditManager::Assessment_UUID",
},
			"LastUpdated": &Reference{
	ref: "AWS::AuditManager::Assessment_Timestamp",
},
			"RoleArn": &Reference{
	ref: "AWS::AuditManager::Assessment_IamArn",
},
			"RoleType": &Reference{
	ref: "AWS::AuditManager::Assessment_RoleType",
},
			"Status": &Reference{
	ref: "AWS::AuditManager::Assessment_DelegationStatus",
},
	},
},
	"AWS::AuditManager::Assessment_DelegationComment": &Reference{
	type_: String,
},
	"AWS::AuditManager::Assessment_DelegationStatus": &Reference{
	type_: String,
},
	"AWS::AuditManager::Assessment_EmailAddress": &Reference{
	type_: String,
},
	"AWS::AuditManager::Assessment_FrameworkId": &Reference{
	type_: String,
},
	"AWS::AuditManager::Assessment_IamArn": &Reference{
	type_: String,
},
	"AWS::AuditManager::Assessment_Role": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RoleArn": &Reference{
	ref: "AWS::AuditManager::Assessment_IamArn",
},
			"RoleType": &Reference{
	ref: "AWS::AuditManager::Assessment_RoleType",
},
	},
},
	"AWS::AuditManager::Assessment_RoleType": &Reference{
	type_: String,
},
	"AWS::AuditManager::Assessment_S3Url": &Reference{
	type_: String,
},
	"AWS::AuditManager::Assessment_Scope": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AwsAccounts": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AuditManager::Assessment_AWSAccount",
},
},
			"AwsServices": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AuditManager::Assessment_AWSService",
},
},
	},
},
	"AWS::AuditManager::Assessment_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AuditManager::Assessment_Timestamp": &Reference{
	type_: Number,
},
	"AWS::AuditManager::Assessment_UUID": &Reference{
	type_: String,
},
	"AWS::AutoScaling::AutoScalingGroup_AcceleratorCountRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AutoScaling::AutoScalingGroup_AcceleratorTotalMemoryMiBRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AutoScaling::AutoScalingGroup_BaselineEbsBandwidthMbpsRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AutoScaling::AutoScalingGroup_InstanceRequirements": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AcceleratorCount": &Reference{
	ref: "AWS::AutoScaling::AutoScalingGroup_AcceleratorCountRequest",
},
			"AcceleratorManufacturers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"AcceleratorNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"AcceleratorTotalMemoryMiB": &Reference{
	ref: "AWS::AutoScaling::AutoScalingGroup_AcceleratorTotalMemoryMiBRequest",
},
			"AcceleratorTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"BareMetal": &Reference{
	type_: String,
},
			"BaselineEbsBandwidthMbps": &Reference{
	ref: "AWS::AutoScaling::AutoScalingGroup_BaselineEbsBandwidthMbpsRequest",
},
			"BurstablePerformance": &Reference{
	type_: String,
},
			"CpuManufacturers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ExcludedInstanceTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"InstanceGenerations": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"LocalStorage": &Reference{
	type_: String,
},
			"LocalStorageTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"MemoryGiBPerVCpu": &Reference{
	ref: "AWS::AutoScaling::AutoScalingGroup_MemoryGiBPerVCpuRequest",
},
			"MemoryMiB": &Reference{
	ref: "AWS::AutoScaling::AutoScalingGroup_MemoryMiBRequest",
},
			"NetworkInterfaceCount": &Reference{
	ref: "AWS::AutoScaling::AutoScalingGroup_NetworkInterfaceCountRequest",
},
			"OnDemandMaxPricePercentageOverLowestPrice": &Reference{
	type_: Integer,
},
			"RequireHibernateSupport": &Reference{
	type_: Boolean,
},
			"SpotMaxPricePercentageOverLowestPrice": &Reference{
	type_: Integer,
},
			"TotalLocalStorageGB": &Reference{
	ref: "AWS::AutoScaling::AutoScalingGroup_TotalLocalStorageGBRequest",
},
			"VCpuCount": &Reference{
	ref: "AWS::AutoScaling::AutoScalingGroup_VCpuCountRequest",
},
	},
},
	"AWS::AutoScaling::AutoScalingGroup_InstancesDistribution": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OnDemandAllocationStrategy": &Reference{
	type_: String,
},
			"OnDemandBaseCapacity": &Reference{
	type_: Integer,
},
			"OnDemandPercentageAboveBaseCapacity": &Reference{
	type_: Integer,
},
			"SpotAllocationStrategy": &Reference{
	type_: String,
},
			"SpotInstancePools": &Reference{
	type_: Integer,
},
			"SpotMaxPrice": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScaling::AutoScalingGroup_LaunchTemplate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LaunchTemplateSpecification": &Reference{
	ref: "AWS::AutoScaling::AutoScalingGroup_LaunchTemplateSpecification",
},
			"Overrides": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AutoScaling::AutoScalingGroup_LaunchTemplateOverrides",
},
},
	},
},
	"AWS::AutoScaling::AutoScalingGroup_LaunchTemplateOverrides": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceRequirements": &Reference{
	ref: "AWS::AutoScaling::AutoScalingGroup_InstanceRequirements",
},
			"InstanceType": &Reference{
	type_: String,
},
			"LaunchTemplateSpecification": &Reference{
	ref: "AWS::AutoScaling::AutoScalingGroup_LaunchTemplateSpecification",
},
			"WeightedCapacity": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScaling::AutoScalingGroup_LaunchTemplateSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LaunchTemplateId": &Reference{
	type_: String,
},
			"LaunchTemplateName": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScaling::AutoScalingGroup_LifecycleHookSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DefaultResult": &Reference{
	type_: String,
},
			"HeartbeatTimeout": &Reference{
	type_: Integer,
},
			"LifecycleHookName": &Reference{
	type_: String,
},
			"LifecycleTransition": &Reference{
	type_: String,
},
			"NotificationMetadata": &Reference{
	type_: String,
},
			"NotificationTargetARN": &Reference{
	type_: String,
},
			"RoleARN": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScaling::AutoScalingGroup_MemoryGiBPerVCpuRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AutoScaling::AutoScalingGroup_MemoryMiBRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AutoScaling::AutoScalingGroup_MetricsCollection": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Granularity": &Reference{
	type_: String,
},
			"Metrics": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::AutoScaling::AutoScalingGroup_MixedInstancesPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstancesDistribution": &Reference{
	ref: "AWS::AutoScaling::AutoScalingGroup_InstancesDistribution",
},
			"LaunchTemplate": &Reference{
	ref: "AWS::AutoScaling::AutoScalingGroup_LaunchTemplate",
},
	},
},
	"AWS::AutoScaling::AutoScalingGroup_NetworkInterfaceCountRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AutoScaling::AutoScalingGroup_NotificationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NotificationTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"TopicARN": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScaling::AutoScalingGroup_TagProperty": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"PropagateAtLaunch": &Reference{
	type_: Boolean,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScaling::AutoScalingGroup_TotalLocalStorageGBRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AutoScaling::AutoScalingGroup_VCpuCountRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AutoScaling::LaunchConfiguration_BlockDevice": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeleteOnTermination": &Reference{
	type_: Boolean,
},
			"Encrypted": &Reference{
	type_: Boolean,
},
			"Iops": &Reference{
	type_: Integer,
},
			"SnapshotId": &Reference{
	type_: String,
},
			"Throughput": &Reference{
	type_: Integer,
},
			"VolumeSize": &Reference{
	type_: Integer,
},
			"VolumeType": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScaling::LaunchConfiguration_BlockDeviceMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeviceName": &Reference{
	type_: String,
},
			"Ebs": &Reference{
	ref: "AWS::AutoScaling::LaunchConfiguration_BlockDevice",
},
			"NoDevice": &Reference{
	type_: Boolean,
},
			"VirtualName": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScaling::LaunchConfiguration_MetadataOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HttpEndpoint": &Reference{
	type_: String,
},
			"HttpPutResponseHopLimit": &Reference{
	type_: Integer,
},
			"HttpTokens": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScaling::ScalingPolicy_CustomizedMetricSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Dimensions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AutoScaling::ScalingPolicy_MetricDimension",
},
},
			"MetricName": &Reference{
	type_: String,
},
			"Namespace": &Reference{
	type_: String,
},
			"Statistic": &Reference{
	type_: String,
},
			"Unit": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScaling::ScalingPolicy_Metric": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Dimensions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AutoScaling::ScalingPolicy_MetricDimension",
},
},
			"MetricName": &Reference{
	type_: String,
},
			"Namespace": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScaling::ScalingPolicy_MetricDataQuery": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Expression": &Reference{
	type_: String,
},
			"Id": &Reference{
	type_: String,
},
			"Label": &Reference{
	type_: String,
},
			"MetricStat": &Reference{
	ref: "AWS::AutoScaling::ScalingPolicy_MetricStat",
},
			"ReturnData": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::AutoScaling::ScalingPolicy_MetricDimension": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScaling::ScalingPolicy_MetricStat": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Metric": &Reference{
	ref: "AWS::AutoScaling::ScalingPolicy_Metric",
},
			"Stat": &Reference{
	type_: String,
},
			"Unit": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScaling::ScalingPolicy_PredefinedMetricSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PredefinedMetricType": &Reference{
	type_: String,
},
			"ResourceLabel": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScaling::ScalingPolicy_PredictiveScalingConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxCapacityBreachBehavior": &Reference{
	type_: String,
},
			"MaxCapacityBuffer": &Reference{
	type_: Integer,
},
			"MetricSpecifications": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AutoScaling::ScalingPolicy_PredictiveScalingMetricSpecification",
},
},
			"Mode": &Reference{
	type_: String,
},
			"SchedulingBufferTime": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AutoScaling::ScalingPolicy_PredictiveScalingCustomizedCapacityMetric": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MetricDataQueries": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AutoScaling::ScalingPolicy_MetricDataQuery",
},
},
	},
},
	"AWS::AutoScaling::ScalingPolicy_PredictiveScalingCustomizedLoadMetric": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MetricDataQueries": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AutoScaling::ScalingPolicy_MetricDataQuery",
},
},
	},
},
	"AWS::AutoScaling::ScalingPolicy_PredictiveScalingCustomizedScalingMetric": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MetricDataQueries": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AutoScaling::ScalingPolicy_MetricDataQuery",
},
},
	},
},
	"AWS::AutoScaling::ScalingPolicy_PredictiveScalingMetricSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomizedCapacityMetricSpecification": &Reference{
	ref: "AWS::AutoScaling::ScalingPolicy_PredictiveScalingCustomizedCapacityMetric",
},
			"CustomizedLoadMetricSpecification": &Reference{
	ref: "AWS::AutoScaling::ScalingPolicy_PredictiveScalingCustomizedLoadMetric",
},
			"CustomizedScalingMetricSpecification": &Reference{
	ref: "AWS::AutoScaling::ScalingPolicy_PredictiveScalingCustomizedScalingMetric",
},
			"PredefinedLoadMetricSpecification": &Reference{
	ref: "AWS::AutoScaling::ScalingPolicy_PredictiveScalingPredefinedLoadMetric",
},
			"PredefinedMetricPairSpecification": &Reference{
	ref: "AWS::AutoScaling::ScalingPolicy_PredictiveScalingPredefinedMetricPair",
},
			"PredefinedScalingMetricSpecification": &Reference{
	ref: "AWS::AutoScaling::ScalingPolicy_PredictiveScalingPredefinedScalingMetric",
},
			"TargetValue": &Reference{
	type_: Number,
},
	},
},
	"AWS::AutoScaling::ScalingPolicy_PredictiveScalingPredefinedLoadMetric": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PredefinedMetricType": &Reference{
	type_: String,
},
			"ResourceLabel": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScaling::ScalingPolicy_PredictiveScalingPredefinedMetricPair": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PredefinedMetricType": &Reference{
	type_: String,
},
			"ResourceLabel": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScaling::ScalingPolicy_PredictiveScalingPredefinedScalingMetric": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PredefinedMetricType": &Reference{
	type_: String,
},
			"ResourceLabel": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScaling::ScalingPolicy_StepAdjustment": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MetricIntervalLowerBound": &Reference{
	type_: Number,
},
			"MetricIntervalUpperBound": &Reference{
	type_: Number,
},
			"ScalingAdjustment": &Reference{
	type_: Integer,
},
	},
},
	"AWS::AutoScaling::ScalingPolicy_TargetTrackingConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomizedMetricSpecification": &Reference{
	ref: "AWS::AutoScaling::ScalingPolicy_CustomizedMetricSpecification",
},
			"DisableScaleIn": &Reference{
	type_: Boolean,
},
			"PredefinedMetricSpecification": &Reference{
	ref: "AWS::AutoScaling::ScalingPolicy_PredefinedMetricSpecification",
},
			"TargetValue": &Reference{
	type_: Number,
},
	},
},
	"AWS::AutoScaling::WarmPool_InstanceReusePolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ReuseOnScaleIn": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::AutoScalingPlans::ScalingPlan_ApplicationSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudFormationStackARN": &Reference{
	type_: String,
},
			"TagFilters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AutoScalingPlans::ScalingPlan_TagFilter",
},
},
	},
},
	"AWS::AutoScalingPlans::ScalingPlan_CustomizedLoadMetricSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Dimensions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AutoScalingPlans::ScalingPlan_MetricDimension",
},
},
			"MetricName": &Reference{
	type_: String,
},
			"Namespace": &Reference{
	type_: String,
},
			"Statistic": &Reference{
	type_: String,
},
			"Unit": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScalingPlans::ScalingPlan_CustomizedScalingMetricSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Dimensions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AutoScalingPlans::ScalingPlan_MetricDimension",
},
},
			"MetricName": &Reference{
	type_: String,
},
			"Namespace": &Reference{
	type_: String,
},
			"Statistic": &Reference{
	type_: String,
},
			"Unit": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScalingPlans::ScalingPlan_MetricDimension": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScalingPlans::ScalingPlan_PredefinedLoadMetricSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PredefinedLoadMetricType": &Reference{
	type_: String,
},
			"ResourceLabel": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScalingPlans::ScalingPlan_PredefinedScalingMetricSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PredefinedScalingMetricType": &Reference{
	type_: String,
},
			"ResourceLabel": &Reference{
	type_: String,
},
	},
},
	"AWS::AutoScalingPlans::ScalingPlan_ScalingInstruction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomizedLoadMetricSpecification": &Reference{
	ref: "AWS::AutoScalingPlans::ScalingPlan_CustomizedLoadMetricSpecification",
},
			"DisableDynamicScaling": &Reference{
	type_: Boolean,
},
			"MaxCapacity": &Reference{
	type_: Integer,
},
			"MinCapacity": &Reference{
	type_: Integer,
},
			"PredefinedLoadMetricSpecification": &Reference{
	ref: "AWS::AutoScalingPlans::ScalingPlan_PredefinedLoadMetricSpecification",
},
			"PredictiveScalingMaxCapacityBehavior": &Reference{
	type_: String,
},
			"PredictiveScalingMaxCapacityBuffer": &Reference{
	type_: Integer,
},
			"PredictiveScalingMode": &Reference{
	type_: String,
},
			"ResourceId": &Reference{
	type_: String,
},
			"ScalableDimension": &Reference{
	type_: String,
},
			"ScalingPolicyUpdateBehavior": &Reference{
	type_: String,
},
			"ScheduledActionBufferTime": &Reference{
	type_: Integer,
},
			"ServiceNamespace": &Reference{
	type_: String,
},
			"TargetTrackingConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::AutoScalingPlans::ScalingPlan_TargetTrackingConfiguration",
},
},
	},
},
	"AWS::AutoScalingPlans::ScalingPlan_TagFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::AutoScalingPlans::ScalingPlan_TargetTrackingConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomizedScalingMetricSpecification": &Reference{
	ref: "AWS::AutoScalingPlans::ScalingPlan_CustomizedScalingMetricSpecification",
},
			"DisableScaleIn": &Reference{
	type_: Boolean,
},
			"EstimatedInstanceWarmup": &Reference{
	type_: Integer,
},
			"PredefinedScalingMetricSpecification": &Reference{
	ref: "AWS::AutoScalingPlans::ScalingPlan_PredefinedScalingMetricSpecification",
},
			"ScaleInCooldown": &Reference{
	type_: Integer,
},
			"ScaleOutCooldown": &Reference{
	type_: Integer,
},
			"TargetValue": &Reference{
	type_: Number,
},
	},
},
	"AWS::Backup::BackupPlan_AdvancedBackupSettingResourceType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BackupOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"ResourceType": &Reference{
	type_: String,
},
	},
},
	"AWS::Backup::BackupPlan_BackupPlanResourceType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdvancedBackupSettings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Backup::BackupPlan_AdvancedBackupSettingResourceType",
},
},
			"BackupPlanName": &Reference{
	type_: String,
},
			"BackupPlanRule": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Backup::BackupPlan_BackupRuleResourceType",
},
},
	},
},
	"AWS::Backup::BackupPlan_BackupRuleResourceType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CompletionWindowMinutes": &Reference{
	type_: Number,
},
			"CopyActions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Backup::BackupPlan_CopyActionResourceType",
},
},
			"EnableContinuousBackup": &Reference{
	type_: Boolean,
},
			"Lifecycle": &Reference{
	ref: "AWS::Backup::BackupPlan_LifecycleResourceType",
},
			"RecoveryPointTags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"RuleName": &Reference{
	type_: String,
},
			"ScheduleExpression": &Reference{
	type_: String,
},
			"StartWindowMinutes": &Reference{
	type_: Number,
},
			"TargetBackupVault": &Reference{
	type_: String,
},
	},
},
	"AWS::Backup::BackupPlan_CopyActionResourceType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationBackupVaultArn": &Reference{
	type_: String,
},
			"Lifecycle": &Reference{
	ref: "AWS::Backup::BackupPlan_LifecycleResourceType",
},
	},
},
	"AWS::Backup::BackupPlan_LifecycleResourceType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeleteAfterDays": &Reference{
	type_: Number,
},
			"MoveToColdStorageAfterDays": &Reference{
	type_: Number,
},
	},
},
	"AWS::Backup::BackupSelection_BackupSelectionResourceType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Conditions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"StringEquals": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Backup::BackupSelection_ConditionParameter",
},
},
			"StringLike": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Backup::BackupSelection_ConditionParameter",
},
},
			"StringNotEquals": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Backup::BackupSelection_ConditionParameter",
},
},
			"StringNotLike": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Backup::BackupSelection_ConditionParameter",
},
},
	},
},
			"IamRoleArn": &Reference{
	type_: String,
},
			"ListOfTags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Backup::BackupSelection_ConditionResourceType",
},
},
			"NotResources": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Resources": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SelectionName": &Reference{
	type_: String,
},
	},
},
	"AWS::Backup::BackupSelection_ConditionParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConditionKey": &Reference{
	type_: String,
},
			"ConditionValue": &Reference{
	type_: String,
},
	},
},
	"AWS::Backup::BackupSelection_ConditionResourceType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConditionKey": &Reference{
	type_: String,
},
			"ConditionType": &Reference{
	type_: String,
},
			"ConditionValue": &Reference{
	type_: String,
},
	},
},
	"AWS::Backup::BackupVault_BackupVaultNamePattern": &Reference{
	type_: String,
},
	"AWS::Backup::BackupVault_LockConfigurationType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ChangeableForDays": &Reference{
	type_: Number,
},
			"MaxRetentionDays": &Reference{
	type_: Number,
},
			"MinRetentionDays": &Reference{
	type_: Number,
},
	},
},
	"AWS::Backup::BackupVault_NotificationObjectType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BackupVaultEvents": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SNSTopicArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Backup::Framework_ControlInputParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ParameterName": &Reference{
	type_: String,
},
			"ParameterValue": &Reference{
	type_: String,
},
	},
},
	"AWS::Backup::Framework_FrameworkControl": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ControlInputParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Backup::Framework_ControlInputParameter",
},
},
			"ControlName": &Reference{
	type_: String,
},
			"ControlScope": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComplianceResourceIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ComplianceResourceTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Backup::Framework_Tag",
},
},
	},
},
	},
},
	"AWS::Backup::Framework_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Backup::ReportPlan_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Batch::ComputeEnvironment_ComputeResources": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllocationStrategy": &Reference{
	type_: String,
},
			"BidPercentage": &Reference{
	type_: Integer,
},
			"DesiredvCpus": &Reference{
	type_: Integer,
},
			"Ec2Configuration": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Batch::ComputeEnvironment_Ec2ConfigurationObject",
},
},
			"Ec2KeyPair": &Reference{
	type_: String,
},
			"ImageId": &Reference{
	type_: String,
},
			"InstanceRole": &Reference{
	type_: String,
},
			"InstanceTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"LaunchTemplate": &Reference{
	ref: "AWS::Batch::ComputeEnvironment_LaunchTemplateSpecification",
},
			"MaxvCpus": &Reference{
	type_: Integer,
},
			"MinvCpus": &Reference{
	type_: Integer,
},
			"PlacementGroup": &Reference{
	type_: String,
},
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SpotIamFleetRole": &Reference{
	type_: String,
},
			"Subnets": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Type": &Reference{
	type_: String,
},
			"UpdateToLatestImageVersion": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Batch::ComputeEnvironment_Ec2ConfigurationObject": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ImageIdOverride": &Reference{
	type_: String,
},
			"ImageType": &Reference{
	type_: String,
},
	},
},
	"AWS::Batch::ComputeEnvironment_LaunchTemplateSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LaunchTemplateId": &Reference{
	type_: String,
},
			"LaunchTemplateName": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::Batch::ComputeEnvironment_UpdatePolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"JobExecutionTimeoutMinutes": &Reference{
	type_: Integer,
},
			"TerminateJobsOnUpdate": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Batch::JobDefinition_AuthorizationConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessPointId": &Reference{
	type_: String,
},
			"Iam": &Reference{
	type_: String,
},
	},
},
	"AWS::Batch::JobDefinition_ContainerProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Command": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Environment": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Batch::JobDefinition_Environment",
},
},
			"ExecutionRoleArn": &Reference{
	type_: String,
},
			"FargatePlatformConfiguration": &Reference{
	ref: "AWS::Batch::JobDefinition_FargatePlatformConfiguration",
},
			"Image": &Reference{
	type_: String,
},
			"InstanceType": &Reference{
	type_: String,
},
			"JobRoleArn": &Reference{
	type_: String,
},
			"LinuxParameters": &Reference{
	ref: "AWS::Batch::JobDefinition_LinuxParameters",
},
			"LogConfiguration": &Reference{
	ref: "AWS::Batch::JobDefinition_LogConfiguration",
},
			"Memory": &Reference{
	type_: Integer,
},
			"MountPoints": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Batch::JobDefinition_MountPoints",
},
},
			"NetworkConfiguration": &Reference{
	ref: "AWS::Batch::JobDefinition_NetworkConfiguration",
},
			"Privileged": &Reference{
	type_: Boolean,
},
			"ReadonlyRootFilesystem": &Reference{
	type_: Boolean,
},
			"ResourceRequirements": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Batch::JobDefinition_ResourceRequirement",
},
},
			"Secrets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Batch::JobDefinition_Secret",
},
},
			"Ulimits": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Batch::JobDefinition_Ulimit",
},
},
			"User": &Reference{
	type_: String,
},
			"Vcpus": &Reference{
	type_: Integer,
},
			"Volumes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Batch::JobDefinition_Volumes",
},
},
	},
},
	"AWS::Batch::JobDefinition_Device": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerPath": &Reference{
	type_: String,
},
			"HostPath": &Reference{
	type_: String,
},
			"Permissions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Batch::JobDefinition_EfsVolumeConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthorizationConfig": &Reference{
	ref: "AWS::Batch::JobDefinition_AuthorizationConfig",
},
			"FileSystemId": &Reference{
	type_: String,
},
			"RootDirectory": &Reference{
	type_: String,
},
			"TransitEncryption": &Reference{
	type_: String,
},
			"TransitEncryptionPort": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Batch::JobDefinition_Environment": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Batch::JobDefinition_EvaluateOnExit": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	type_: String,
},
			"OnExitCode": &Reference{
	type_: String,
},
			"OnReason": &Reference{
	type_: String,
},
			"OnStatusReason": &Reference{
	type_: String,
},
	},
},
	"AWS::Batch::JobDefinition_FargatePlatformConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PlatformVersion": &Reference{
	type_: String,
},
	},
},
	"AWS::Batch::JobDefinition_LinuxParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Devices": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Batch::JobDefinition_Device",
},
},
			"InitProcessEnabled": &Reference{
	type_: Boolean,
},
			"MaxSwap": &Reference{
	type_: Integer,
},
			"SharedMemorySize": &Reference{
	type_: Integer,
},
			"Swappiness": &Reference{
	type_: Integer,
},
			"Tmpfs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Batch::JobDefinition_Tmpfs",
},
},
	},
},
	"AWS::Batch::JobDefinition_LogConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LogDriver": &Reference{
	type_: String,
},
			"Options": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"SecretOptions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Batch::JobDefinition_Secret",
},
},
	},
},
	"AWS::Batch::JobDefinition_MountPoints": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerPath": &Reference{
	type_: String,
},
			"ReadOnly": &Reference{
	type_: Boolean,
},
			"SourceVolume": &Reference{
	type_: String,
},
	},
},
	"AWS::Batch::JobDefinition_NetworkConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AssignPublicIp": &Reference{
	type_: String,
},
	},
},
	"AWS::Batch::JobDefinition_NodeProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MainNode": &Reference{
	type_: Integer,
},
			"NodeRangeProperties": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Batch::JobDefinition_NodeRangeProperty",
},
},
			"NumNodes": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Batch::JobDefinition_NodeRangeProperty": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Container": &Reference{
	ref: "AWS::Batch::JobDefinition_ContainerProperties",
},
			"TargetNodes": &Reference{
	type_: String,
},
	},
},
	"AWS::Batch::JobDefinition_ResourceRequirement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Batch::JobDefinition_RetryStrategy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Attempts": &Reference{
	type_: Integer,
},
			"EvaluateOnExit": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Batch::JobDefinition_EvaluateOnExit",
},
},
	},
},
	"AWS::Batch::JobDefinition_Secret": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"ValueFrom": &Reference{
	type_: String,
},
	},
},
	"AWS::Batch::JobDefinition_Timeout": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AttemptDurationSeconds": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Batch::JobDefinition_Tmpfs": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerPath": &Reference{
	type_: String,
},
			"MountOptions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Size": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Batch::JobDefinition_Ulimit": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HardLimit": &Reference{
	type_: Integer,
},
			"Name": &Reference{
	type_: String,
},
			"SoftLimit": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Batch::JobDefinition_Volumes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EfsVolumeConfiguration": &Reference{
	ref: "AWS::Batch::JobDefinition_EfsVolumeConfiguration",
},
			"Host": &Reference{
	ref: "AWS::Batch::JobDefinition_VolumesHost",
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::Batch::JobDefinition_VolumesHost": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SourcePath": &Reference{
	type_: String,
},
	},
},
	"AWS::Batch::JobQueue_ComputeEnvironmentOrder": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComputeEnvironment": &Reference{
	type_: String,
},
			"Order": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Batch::JobQueue_ResourceArn": &Reference{
	type_: String,
},
	"AWS::Batch::SchedulingPolicy_FairsharePolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComputeReservation": &Reference{
	type_: Number,
},
			"ShareDecaySeconds": &Reference{
	type_: Number,
},
			"ShareDistribution": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Batch::SchedulingPolicy_ShareAttributes",
},
},
	},
},
	"AWS::Batch::SchedulingPolicy_ResourceArn": &Reference{
	type_: String,
},
	"AWS::Batch::SchedulingPolicy_ShareAttributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ShareIdentifier": &Reference{
	type_: String,
},
			"WeightFactor": &Reference{
	type_: Number,
},
	},
},
	"AWS::Budgets::Budget_BudgetData": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BudgetLimit": &Reference{
	ref: "AWS::Budgets::Budget_Spend",
},
			"BudgetName": &Reference{
	type_: String,
},
			"BudgetType": &Reference{
	type_: String,
},
			"CostFilters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"CostTypes": &Reference{
	ref: "AWS::Budgets::Budget_CostTypes",
},
			"PlannedBudgetLimits": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"TimePeriod": &Reference{
	ref: "AWS::Budgets::Budget_TimePeriod",
},
			"TimeUnit": &Reference{
	type_: String,
},
	},
},
	"AWS::Budgets::Budget_CostTypes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IncludeCredit": &Reference{
	type_: Boolean,
},
			"IncludeDiscount": &Reference{
	type_: Boolean,
},
			"IncludeOtherSubscription": &Reference{
	type_: Boolean,
},
			"IncludeRecurring": &Reference{
	type_: Boolean,
},
			"IncludeRefund": &Reference{
	type_: Boolean,
},
			"IncludeSubscription": &Reference{
	type_: Boolean,
},
			"IncludeSupport": &Reference{
	type_: Boolean,
},
			"IncludeTax": &Reference{
	type_: Boolean,
},
			"IncludeUpfront": &Reference{
	type_: Boolean,
},
			"UseAmortized": &Reference{
	type_: Boolean,
},
			"UseBlended": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Budgets::Budget_Notification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComparisonOperator": &Reference{
	type_: String,
},
			"NotificationType": &Reference{
	type_: String,
},
			"Threshold": &Reference{
	type_: Number,
},
			"ThresholdType": &Reference{
	type_: String,
},
	},
},
	"AWS::Budgets::Budget_NotificationWithSubscribers": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Notification": &Reference{
	ref: "AWS::Budgets::Budget_Notification",
},
			"Subscribers": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Budgets::Budget_Subscriber",
},
},
	},
},
	"AWS::Budgets::Budget_Spend": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Amount": &Reference{
	type_: Number,
},
			"Unit": &Reference{
	type_: String,
},
	},
},
	"AWS::Budgets::Budget_Subscriber": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Address": &Reference{
	type_: String,
},
			"SubscriptionType": &Reference{
	type_: String,
},
	},
},
	"AWS::Budgets::Budget_TimePeriod": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"End": &Reference{
	type_: String,
},
			"Start": &Reference{
	type_: String,
},
	},
},
	"AWS::Budgets::BudgetsAction_ActionThreshold": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: Number,
},
	},
},
	"AWS::Budgets::BudgetsAction_Definition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IamActionDefinition": &Reference{
	ref: "AWS::Budgets::BudgetsAction_IamActionDefinition",
},
			"ScpActionDefinition": &Reference{
	ref: "AWS::Budgets::BudgetsAction_ScpActionDefinition",
},
			"SsmActionDefinition": &Reference{
	ref: "AWS::Budgets::BudgetsAction_SsmActionDefinition",
},
	},
},
	"AWS::Budgets::BudgetsAction_IamActionDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Groups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"PolicyArn": &Reference{
	type_: String,
},
			"Roles": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Users": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Budgets::BudgetsAction_ScpActionDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PolicyId": &Reference{
	type_: String,
},
			"TargetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Budgets::BudgetsAction_SsmActionDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Region": &Reference{
	type_: String,
},
			"Subtype": &Reference{
	type_: String,
},
	},
},
	"AWS::Budgets::BudgetsAction_Subscriber": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Address": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::CE::CostCategory_ZonedDateTime": &Reference{
	type_: String,
},
	"AWS::Cassandra::Keyspace_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Cassandra::Table_BillingMode": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Mode": &Reference{
	ref: "AWS::Cassandra::Table_Mode",
},
			"ProvisionedThroughput": &Reference{
	ref: "AWS::Cassandra::Table_ProvisionedThroughput",
},
	},
},
	"AWS::Cassandra::Table_ClusteringKeyColumn": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Column": &Reference{
	ref: "AWS::Cassandra::Table_Column",
},
			"OrderBy": &Reference{
	type_: String,
},
	},
},
	"AWS::Cassandra::Table_Column": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ColumnName": &Reference{
	type_: String,
},
			"ColumnType": &Reference{
	type_: String,
},
	},
},
	"AWS::Cassandra::Table_EncryptionSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EncryptionType": &Reference{
	ref: "AWS::Cassandra::Table_EncryptionType",
},
			"KmsKeyIdentifier": &Reference{
	ref: "AWS::Cassandra::Table_KmsKeyIdentifier",
},
	},
},
	"AWS::Cassandra::Table_EncryptionType": &Reference{
	type_: String,
},
	"AWS::Cassandra::Table_KmsKeyIdentifier": &Reference{
	type_: String,
},
	"AWS::Cassandra::Table_Mode": &Reference{
	type_: String,
},
	"AWS::Cassandra::Table_ProvisionedThroughput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ReadCapacityUnits": &Reference{
	type_: Integer,
},
			"WriteCapacityUnits": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Cassandra::Table_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CertificateManager::Account_AccountId": &Reference{
	type_: String,
},
	"AWS::CertificateManager::Account_ExpiryEventsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DaysBeforeExpiry": &Reference{
	type_: Integer,
},
	},
},
	"AWS::CertificateManager::Certificate_DomainValidationOption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DomainName": &Reference{
	type_: String,
},
			"HostedZoneId": &Reference{
	type_: String,
},
			"ValidationDomain": &Reference{
	type_: String,
},
	},
},
	"AWS::CertificateManager::Certificate_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Cloud9::EnvironmentEC2_Repository": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PathComponent": &Reference{
	type_: String,
},
			"RepositoryUrl": &Reference{
	type_: String,
},
	},
},
	"AWS::Cloud9::EnvironmentEC2_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFormation::HookVersion_LoggingConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LogGroupName": &Reference{
	type_: String,
},
			"LogRoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFormation::ResourceVersion_LoggingConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LogGroupName": &Reference{
	type_: String,
},
			"LogRoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFormation::Stack_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFormation::StackSet_Account": &Reference{
	type_: String,
},
	"AWS::CloudFormation::StackSet_Active": &Reference{
	type_: Boolean,
},
	"AWS::CloudFormation::StackSet_AutoDeployment": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
			"RetainStacksOnAccountRemoval": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::CloudFormation::StackSet_Capability": &Reference{
	type_: String,
},
	"AWS::CloudFormation::StackSet_DeploymentTargets": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Accounts": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFormation::StackSet_Account",
},
},
			"OrganizationalUnitIds": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFormation::StackSet_OrganizationalUnitId",
},
},
	},
},
	"AWS::CloudFormation::StackSet_OperationPreferences": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FailureToleranceCount": &Reference{
	type_: Integer,
},
			"FailureTolerancePercentage": &Reference{
	type_: Integer,
},
			"MaxConcurrentCount": &Reference{
	type_: Integer,
},
			"MaxConcurrentPercentage": &Reference{
	type_: Integer,
},
			"RegionConcurrencyType": &Reference{
	ref: "AWS::CloudFormation::StackSet_RegionConcurrencyType",
},
			"RegionOrder": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFormation::StackSet_Region",
},
},
	},
},
	"AWS::CloudFormation::StackSet_OrganizationalUnitId": &Reference{
	type_: String,
},
	"AWS::CloudFormation::StackSet_Parameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ParameterKey": &Reference{
	type_: String,
},
			"ParameterValue": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFormation::StackSet_Region": &Reference{
	type_: String,
},
	"AWS::CloudFormation::StackSet_RegionConcurrencyType": &Reference{
	type_: String,
},
	"AWS::CloudFormation::StackSet_StackInstances": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeploymentTargets": &Reference{
	ref: "AWS::CloudFormation::StackSet_DeploymentTargets",
},
			"ParameterOverrides": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFormation::StackSet_Parameter",
},
},
			"Regions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFormation::StackSet_Region",
},
},
	},
},
	"AWS::CloudFormation::StackSet_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFormation::TypeActivation_LoggingConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LogGroupName": &Reference{
	type_: String,
},
			"LogRoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::CachePolicy_CachePolicyConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Comment": &Reference{
	type_: String,
},
			"DefaultTTL": &Reference{
	type_: Number,
},
			"MaxTTL": &Reference{
	type_: Number,
},
			"MinTTL": &Reference{
	type_: Number,
},
			"Name": &Reference{
	type_: String,
},
			"ParametersInCacheKeyAndForwardedToOrigin": &Reference{
	ref: "AWS::CloudFront::CachePolicy_ParametersInCacheKeyAndForwardedToOrigin",
},
	},
},
	"AWS::CloudFront::CachePolicy_CookiesConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CookieBehavior": &Reference{
	type_: String,
},
			"Cookies": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::CloudFront::CachePolicy_HeadersConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HeaderBehavior": &Reference{
	type_: String,
},
			"Headers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::CloudFront::CachePolicy_ParametersInCacheKeyAndForwardedToOrigin": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CookiesConfig": &Reference{
	ref: "AWS::CloudFront::CachePolicy_CookiesConfig",
},
			"EnableAcceptEncodingBrotli": &Reference{
	type_: Boolean,
},
			"EnableAcceptEncodingGzip": &Reference{
	type_: Boolean,
},
			"HeadersConfig": &Reference{
	ref: "AWS::CloudFront::CachePolicy_HeadersConfig",
},
			"QueryStringsConfig": &Reference{
	ref: "AWS::CloudFront::CachePolicy_QueryStringsConfig",
},
	},
},
	"AWS::CloudFront::CachePolicy_QueryStringsConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"QueryStringBehavior": &Reference{
	type_: String,
},
			"QueryStrings": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::CloudFront::CloudFrontOriginAccessIdentity_CloudFrontOriginAccessIdentityConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Comment": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::Distribution_CacheBehavior": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllowedMethods": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"CachePolicyId": &Reference{
	type_: String,
},
			"CachedMethods": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Compress": &Reference{
	type_: Boolean,
},
			"DefaultTTL": &Reference{
	type_: Number,
},
			"FieldLevelEncryptionId": &Reference{
	type_: String,
},
			"ForwardedValues": &Reference{
	ref: "AWS::CloudFront::Distribution_ForwardedValues",
},
			"FunctionAssociations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFront::Distribution_FunctionAssociation",
},
},
			"LambdaFunctionAssociations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFront::Distribution_LambdaFunctionAssociation",
},
},
			"MaxTTL": &Reference{
	type_: Number,
},
			"MinTTL": &Reference{
	type_: Number,
},
			"OriginRequestPolicyId": &Reference{
	type_: String,
},
			"PathPattern": &Reference{
	type_: String,
},
			"RealtimeLogConfigArn": &Reference{
	type_: String,
},
			"ResponseHeadersPolicyId": &Reference{
	type_: String,
},
			"SmoothStreaming": &Reference{
	type_: Boolean,
},
			"TargetOriginId": &Reference{
	type_: String,
},
			"TrustedKeyGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"TrustedSigners": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ViewerProtocolPolicy": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::Distribution_Cookies": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Forward": &Reference{
	type_: String,
},
			"WhitelistedNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::CloudFront::Distribution_CustomErrorResponse": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ErrorCachingMinTTL": &Reference{
	type_: Number,
},
			"ErrorCode": &Reference{
	type_: Integer,
},
			"ResponseCode": &Reference{
	type_: Integer,
},
			"ResponsePagePath": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::Distribution_CustomOriginConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HTTPPort": &Reference{
	type_: Integer,
},
			"HTTPSPort": &Reference{
	type_: Integer,
},
			"OriginKeepaliveTimeout": &Reference{
	type_: Integer,
},
			"OriginProtocolPolicy": &Reference{
	type_: String,
},
			"OriginReadTimeout": &Reference{
	type_: Integer,
},
			"OriginSSLProtocols": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::CloudFront::Distribution_DefaultCacheBehavior": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllowedMethods": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"CachePolicyId": &Reference{
	type_: String,
},
			"CachedMethods": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Compress": &Reference{
	type_: Boolean,
},
			"DefaultTTL": &Reference{
	type_: Number,
},
			"FieldLevelEncryptionId": &Reference{
	type_: String,
},
			"ForwardedValues": &Reference{
	ref: "AWS::CloudFront::Distribution_ForwardedValues",
},
			"FunctionAssociations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFront::Distribution_FunctionAssociation",
},
},
			"LambdaFunctionAssociations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFront::Distribution_LambdaFunctionAssociation",
},
},
			"MaxTTL": &Reference{
	type_: Number,
},
			"MinTTL": &Reference{
	type_: Number,
},
			"OriginRequestPolicyId": &Reference{
	type_: String,
},
			"RealtimeLogConfigArn": &Reference{
	type_: String,
},
			"ResponseHeadersPolicyId": &Reference{
	type_: String,
},
			"SmoothStreaming": &Reference{
	type_: Boolean,
},
			"TargetOriginId": &Reference{
	type_: String,
},
			"TrustedKeyGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"TrustedSigners": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ViewerProtocolPolicy": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::Distribution_DistributionConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Aliases": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"CNAMEs": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"CacheBehaviors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFront::Distribution_CacheBehavior",
},
},
			"Comment": &Reference{
	type_: String,
},
			"CustomErrorResponses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFront::Distribution_CustomErrorResponse",
},
},
			"CustomOrigin": &Reference{
	ref: "AWS::CloudFront::Distribution_LegacyCustomOrigin",
},
			"DefaultCacheBehavior": &Reference{
	ref: "AWS::CloudFront::Distribution_DefaultCacheBehavior",
},
			"DefaultRootObject": &Reference{
	type_: String,
},
			"Enabled": &Reference{
	type_: Boolean,
},
			"HttpVersion": &Reference{
	type_: String,
},
			"IPV6Enabled": &Reference{
	type_: Boolean,
},
			"Logging": &Reference{
	ref: "AWS::CloudFront::Distribution_Logging",
},
			"OriginGroups": &Reference{
	ref: "AWS::CloudFront::Distribution_OriginGroups",
},
			"Origins": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFront::Distribution_Origin",
},
},
			"PriceClass": &Reference{
	type_: String,
},
			"Restrictions": &Reference{
	ref: "AWS::CloudFront::Distribution_Restrictions",
},
			"S3Origin": &Reference{
	ref: "AWS::CloudFront::Distribution_LegacyS3Origin",
},
			"ViewerCertificate": &Reference{
	ref: "AWS::CloudFront::Distribution_ViewerCertificate",
},
			"WebACLId": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::Distribution_ForwardedValues": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Cookies": &Reference{
	ref: "AWS::CloudFront::Distribution_Cookies",
},
			"Headers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"QueryString": &Reference{
	type_: Boolean,
},
			"QueryStringCacheKeys": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::CloudFront::Distribution_FunctionAssociation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EventType": &Reference{
	type_: String,
},
			"FunctionARN": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::Distribution_GeoRestriction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Locations": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"RestrictionType": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::Distribution_LambdaFunctionAssociation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EventType": &Reference{
	type_: String,
},
			"IncludeBody": &Reference{
	type_: Boolean,
},
			"LambdaFunctionARN": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::Distribution_LegacyCustomOrigin": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DNSName": &Reference{
	type_: String,
},
			"HTTPPort": &Reference{
	type_: Integer,
},
			"HTTPSPort": &Reference{
	type_: Integer,
},
			"OriginProtocolPolicy": &Reference{
	type_: String,
},
			"OriginSSLProtocols": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::CloudFront::Distribution_LegacyS3Origin": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DNSName": &Reference{
	type_: String,
},
			"OriginAccessIdentity": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::Distribution_Logging": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"IncludeCookies": &Reference{
	type_: Boolean,
},
			"Prefix": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::Distribution_Origin": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConnectionAttempts": &Reference{
	type_: Integer,
},
			"ConnectionTimeout": &Reference{
	type_: Integer,
},
			"CustomOriginConfig": &Reference{
	ref: "AWS::CloudFront::Distribution_CustomOriginConfig",
},
			"DomainName": &Reference{
	type_: String,
},
			"Id": &Reference{
	type_: String,
},
			"OriginCustomHeaders": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFront::Distribution_OriginCustomHeader",
},
},
			"OriginPath": &Reference{
	type_: String,
},
			"OriginShield": &Reference{
	ref: "AWS::CloudFront::Distribution_OriginShield",
},
			"S3OriginConfig": &Reference{
	ref: "AWS::CloudFront::Distribution_S3OriginConfig",
},
	},
},
	"AWS::CloudFront::Distribution_OriginCustomHeader": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HeaderName": &Reference{
	type_: String,
},
			"HeaderValue": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::Distribution_OriginGroup": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FailoverCriteria": &Reference{
	ref: "AWS::CloudFront::Distribution_OriginGroupFailoverCriteria",
},
			"Id": &Reference{
	type_: String,
},
			"Members": &Reference{
	ref: "AWS::CloudFront::Distribution_OriginGroupMembers",
},
	},
},
	"AWS::CloudFront::Distribution_OriginGroupFailoverCriteria": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"StatusCodes": &Reference{
	ref: "AWS::CloudFront::Distribution_StatusCodes",
},
	},
},
	"AWS::CloudFront::Distribution_OriginGroupMember": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OriginId": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::Distribution_OriginGroupMembers": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Items": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFront::Distribution_OriginGroupMember",
},
},
			"Quantity": &Reference{
	type_: Integer,
},
	},
},
	"AWS::CloudFront::Distribution_OriginGroups": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Items": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFront::Distribution_OriginGroup",
},
},
			"Quantity": &Reference{
	type_: Integer,
},
	},
},
	"AWS::CloudFront::Distribution_OriginShield": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
			"OriginShieldRegion": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::Distribution_Restrictions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GeoRestriction": &Reference{
	ref: "AWS::CloudFront::Distribution_GeoRestriction",
},
	},
},
	"AWS::CloudFront::Distribution_S3OriginConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OriginAccessIdentity": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::Distribution_StatusCodes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Items": &Reference{
	type_: Array,
	items: &Reference{
	type_: Integer,
},
},
			"Quantity": &Reference{
	type_: Integer,
},
	},
},
	"AWS::CloudFront::Distribution_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::Distribution_ViewerCertificate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AcmCertificateArn": &Reference{
	type_: String,
},
			"CloudFrontDefaultCertificate": &Reference{
	type_: Boolean,
},
			"IamCertificateId": &Reference{
	type_: String,
},
			"MinimumProtocolVersion": &Reference{
	type_: String,
},
			"SslSupportMethod": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::Function_FunctionConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Comment": &Reference{
	type_: String,
},
			"Runtime": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::Function_FunctionMetadata": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FunctionARN": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::KeyGroup_KeyGroupConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Comment": &Reference{
	type_: String,
},
			"Items": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::OriginRequestPolicy_CookiesConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CookieBehavior": &Reference{
	type_: String,
},
			"Cookies": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::CloudFront::OriginRequestPolicy_HeadersConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HeaderBehavior": &Reference{
	type_: String,
},
			"Headers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::CloudFront::OriginRequestPolicy_OriginRequestPolicyConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Comment": &Reference{
	type_: String,
},
			"CookiesConfig": &Reference{
	ref: "AWS::CloudFront::OriginRequestPolicy_CookiesConfig",
},
			"HeadersConfig": &Reference{
	ref: "AWS::CloudFront::OriginRequestPolicy_HeadersConfig",
},
			"Name": &Reference{
	type_: String,
},
			"QueryStringsConfig": &Reference{
	ref: "AWS::CloudFront::OriginRequestPolicy_QueryStringsConfig",
},
	},
},
	"AWS::CloudFront::OriginRequestPolicy_QueryStringsConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"QueryStringBehavior": &Reference{
	type_: String,
},
			"QueryStrings": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::CloudFront::PublicKey_PublicKeyConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CallerReference": &Reference{
	type_: String,
},
			"Comment": &Reference{
	type_: String,
},
			"EncodedKey": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::RealtimeLogConfig_EndPoint": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KinesisStreamConfig": &Reference{
	ref: "AWS::CloudFront::RealtimeLogConfig_KinesisStreamConfig",
},
			"StreamType": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::RealtimeLogConfig_KinesisStreamConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RoleArn": &Reference{
	type_: String,
},
			"StreamArn": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::ResponseHeadersPolicy_AccessControlAllowHeaders": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Items": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::CloudFront::ResponseHeadersPolicy_AccessControlAllowMethods": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Items": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::CloudFront::ResponseHeadersPolicy_AccessControlAllowOrigins": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Items": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::CloudFront::ResponseHeadersPolicy_AccessControlExposeHeaders": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Items": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::CloudFront::ResponseHeadersPolicy_ContentSecurityPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContentSecurityPolicy": &Reference{
	type_: String,
},
			"Override": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::CloudFront::ResponseHeadersPolicy_ContentTypeOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Override": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::CloudFront::ResponseHeadersPolicy_CorsConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessControlAllowCredentials": &Reference{
	type_: Boolean,
},
			"AccessControlAllowHeaders": &Reference{
	ref: "AWS::CloudFront::ResponseHeadersPolicy_AccessControlAllowHeaders",
},
			"AccessControlAllowMethods": &Reference{
	ref: "AWS::CloudFront::ResponseHeadersPolicy_AccessControlAllowMethods",
},
			"AccessControlAllowOrigins": &Reference{
	ref: "AWS::CloudFront::ResponseHeadersPolicy_AccessControlAllowOrigins",
},
			"AccessControlExposeHeaders": &Reference{
	ref: "AWS::CloudFront::ResponseHeadersPolicy_AccessControlExposeHeaders",
},
			"AccessControlMaxAgeSec": &Reference{
	type_: Integer,
},
			"OriginOverride": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::CloudFront::ResponseHeadersPolicy_CustomHeader": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Header": &Reference{
	type_: String,
},
			"Override": &Reference{
	type_: Boolean,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::ResponseHeadersPolicy_CustomHeadersConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Items": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudFront::ResponseHeadersPolicy_CustomHeader",
},
},
	},
},
	"AWS::CloudFront::ResponseHeadersPolicy_FrameOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FrameOption": &Reference{
	type_: String,
},
			"Override": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::CloudFront::ResponseHeadersPolicy_ReferrerPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Override": &Reference{
	type_: Boolean,
},
			"ReferrerPolicy": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::ResponseHeadersPolicy_ResponseHeadersPolicyConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Comment": &Reference{
	type_: String,
},
			"CorsConfig": &Reference{
	ref: "AWS::CloudFront::ResponseHeadersPolicy_CorsConfig",
},
			"CustomHeadersConfig": &Reference{
	ref: "AWS::CloudFront::ResponseHeadersPolicy_CustomHeadersConfig",
},
			"Name": &Reference{
	type_: String,
},
			"SecurityHeadersConfig": &Reference{
	ref: "AWS::CloudFront::ResponseHeadersPolicy_SecurityHeadersConfig",
},
	},
},
	"AWS::CloudFront::ResponseHeadersPolicy_SecurityHeadersConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContentSecurityPolicy": &Reference{
	ref: "AWS::CloudFront::ResponseHeadersPolicy_ContentSecurityPolicy",
},
			"ContentTypeOptions": &Reference{
	ref: "AWS::CloudFront::ResponseHeadersPolicy_ContentTypeOptions",
},
			"FrameOptions": &Reference{
	ref: "AWS::CloudFront::ResponseHeadersPolicy_FrameOptions",
},
			"ReferrerPolicy": &Reference{
	ref: "AWS::CloudFront::ResponseHeadersPolicy_ReferrerPolicy",
},
			"StrictTransportSecurity": &Reference{
	ref: "AWS::CloudFront::ResponseHeadersPolicy_StrictTransportSecurity",
},
			"XSSProtection": &Reference{
	ref: "AWS::CloudFront::ResponseHeadersPolicy_XSSProtection",
},
	},
},
	"AWS::CloudFront::ResponseHeadersPolicy_StrictTransportSecurity": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessControlMaxAgeSec": &Reference{
	type_: Integer,
},
			"IncludeSubdomains": &Reference{
	type_: Boolean,
},
			"Override": &Reference{
	type_: Boolean,
},
			"Preload": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::CloudFront::ResponseHeadersPolicy_XSSProtection": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ModeBlock": &Reference{
	type_: Boolean,
},
			"Override": &Reference{
	type_: Boolean,
},
			"Protection": &Reference{
	type_: Boolean,
},
			"ReportUri": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::StreamingDistribution_Logging": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"Enabled": &Reference{
	type_: Boolean,
},
			"Prefix": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::StreamingDistribution_S3Origin": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DomainName": &Reference{
	type_: String,
},
			"OriginAccessIdentity": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::StreamingDistribution_StreamingDistributionConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Aliases": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Comment": &Reference{
	type_: String,
},
			"Enabled": &Reference{
	type_: Boolean,
},
			"Logging": &Reference{
	ref: "AWS::CloudFront::StreamingDistribution_Logging",
},
			"PriceClass": &Reference{
	type_: String,
},
			"S3Origin": &Reference{
	ref: "AWS::CloudFront::StreamingDistribution_S3Origin",
},
			"TrustedSigners": &Reference{
	ref: "AWS::CloudFront::StreamingDistribution_TrustedSigners",
},
	},
},
	"AWS::CloudFront::StreamingDistribution_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudFront::StreamingDistribution_TrustedSigners": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AwsAccountNumbers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::CloudTrail::Trail_DataResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::CloudTrail::Trail_EventSelector": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataResources": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudTrail::Trail_DataResource",
},
},
			"ExcludeManagementEventSources": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"IncludeManagementEvents": &Reference{
	type_: Boolean,
},
			"ReadWriteType": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudTrail::Trail_InsightSelector": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InsightType": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudTrail::Trail_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudWatch::Alarm_Dimension": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudWatch::Alarm_Metric": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Dimensions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudWatch::Alarm_Dimension",
},
},
			"MetricName": &Reference{
	type_: String,
},
			"Namespace": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudWatch::Alarm_MetricDataQuery": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccountId": &Reference{
	type_: String,
},
			"Expression": &Reference{
	type_: String,
},
			"Id": &Reference{
	type_: String,
},
			"Label": &Reference{
	type_: String,
},
			"MetricStat": &Reference{
	ref: "AWS::CloudWatch::Alarm_MetricStat",
},
			"Period": &Reference{
	type_: Integer,
},
			"ReturnData": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::CloudWatch::Alarm_MetricStat": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Metric": &Reference{
	ref: "AWS::CloudWatch::Alarm_Metric",
},
			"Period": &Reference{
	type_: Integer,
},
			"Stat": &Reference{
	type_: String,
},
			"Unit": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudWatch::AnomalyDetector_Configuration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExcludedTimeRanges": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudWatch::AnomalyDetector_Range",
},
},
			"MetricTimeZone": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudWatch::AnomalyDetector_Dimension": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudWatch::AnomalyDetector_Metric": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Dimensions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudWatch::AnomalyDetector_Dimension",
},
},
			"MetricName": &Reference{
	type_: String,
},
			"Namespace": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudWatch::AnomalyDetector_MetricDataQuery": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccountId": &Reference{
	type_: String,
},
			"Expression": &Reference{
	type_: String,
},
			"Id": &Reference{
	type_: String,
},
			"Label": &Reference{
	type_: String,
},
			"MetricStat": &Reference{
	ref: "AWS::CloudWatch::AnomalyDetector_MetricStat",
},
			"Period": &Reference{
	type_: Integer,
},
			"ReturnData": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::CloudWatch::AnomalyDetector_MetricMathAnomalyDetector": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MetricDataQueries": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudWatch::AnomalyDetector_MetricDataQuery",
},
},
	},
},
	"AWS::CloudWatch::AnomalyDetector_MetricStat": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Metric": &Reference{
	ref: "AWS::CloudWatch::AnomalyDetector_Metric",
},
			"Period": &Reference{
	type_: Integer,
},
			"Stat": &Reference{
	type_: String,
},
			"Unit": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudWatch::AnomalyDetector_Range": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EndTime": &Reference{
	type_: String,
},
			"StartTime": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudWatch::AnomalyDetector_SingleMetricAnomalyDetector": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Dimensions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudWatch::AnomalyDetector_Dimension",
},
},
			"MetricName": &Reference{
	type_: String,
},
			"Namespace": &Reference{
	type_: String,
},
			"Stat": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudWatch::InsightRule_Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::CloudWatch::MetricStream_MetricStreamFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Namespace": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudWatch::MetricStream_MetricStreamStatisticsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdditionalStatistics": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"IncludeMetrics": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CloudWatch::MetricStream_MetricStreamStatisticsMetric",
},
},
	},
},
	"AWS::CloudWatch::MetricStream_MetricStreamStatisticsMetric": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MetricName": &Reference{
	type_: String,
},
			"Namespace": &Reference{
	type_: String,
},
	},
},
	"AWS::CloudWatch::MetricStream_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeArtifact::Domain_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeArtifact::Repository_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeBuild::Project_Artifacts": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ArtifactIdentifier": &Reference{
	type_: String,
},
			"EncryptionDisabled": &Reference{
	type_: Boolean,
},
			"Location": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"NamespaceType": &Reference{
	type_: String,
},
			"OverrideArtifactName": &Reference{
	type_: Boolean,
},
			"Packaging": &Reference{
	type_: String,
},
			"Path": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeBuild::Project_BatchRestrictions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComputeTypesAllowed": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"MaximumBuildsAllowed": &Reference{
	type_: Integer,
},
	},
},
	"AWS::CodeBuild::Project_BuildStatusConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Context": &Reference{
	type_: String,
},
			"TargetUrl": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeBuild::Project_CloudWatchLogsConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GroupName": &Reference{
	type_: String,
},
			"Status": &Reference{
	type_: String,
},
			"StreamName": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeBuild::Project_Environment": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Certificate": &Reference{
	type_: String,
},
			"ComputeType": &Reference{
	type_: String,
},
			"EnvironmentVariables": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeBuild::Project_EnvironmentVariable",
},
},
			"Image": &Reference{
	type_: String,
},
			"ImagePullCredentialsType": &Reference{
	type_: String,
},
			"PrivilegedMode": &Reference{
	type_: Boolean,
},
			"RegistryCredential": &Reference{
	ref: "AWS::CodeBuild::Project_RegistryCredential",
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeBuild::Project_EnvironmentVariable": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeBuild::Project_FilterGroup": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::CodeBuild::Project_GitSubmodulesConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FetchSubmodules": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::CodeBuild::Project_LogsConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchLogs": &Reference{
	ref: "AWS::CodeBuild::Project_CloudWatchLogsConfig",
},
			"S3Logs": &Reference{
	ref: "AWS::CodeBuild::Project_S3LogsConfig",
},
	},
},
	"AWS::CodeBuild::Project_ProjectBuildBatchConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BatchReportMode": &Reference{
	type_: String,
},
			"CombineArtifacts": &Reference{
	type_: Boolean,
},
			"Restrictions": &Reference{
	ref: "AWS::CodeBuild::Project_BatchRestrictions",
},
			"ServiceRole": &Reference{
	type_: String,
},
			"TimeoutInMins": &Reference{
	type_: Integer,
},
	},
},
	"AWS::CodeBuild::Project_ProjectCache": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Location": &Reference{
	type_: String,
},
			"Modes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeBuild::Project_ProjectFileSystemLocation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Identifier": &Reference{
	type_: String,
},
			"Location": &Reference{
	type_: String,
},
			"MountOptions": &Reference{
	type_: String,
},
			"MountPoint": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeBuild::Project_ProjectSourceVersion": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SourceIdentifier": &Reference{
	type_: String,
},
			"SourceVersion": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeBuild::Project_ProjectTriggers": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BuildType": &Reference{
	type_: String,
},
			"FilterGroups": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeBuild::Project_FilterGroup",
},
},
			"Webhook": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::CodeBuild::Project_RegistryCredential": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Credential": &Reference{
	type_: String,
},
			"CredentialProvider": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeBuild::Project_S3LogsConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EncryptionDisabled": &Reference{
	type_: Boolean,
},
			"Location": &Reference{
	type_: String,
},
			"Status": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeBuild::Project_Source": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Auth": &Reference{
	ref: "AWS::CodeBuild::Project_SourceAuth",
},
			"BuildSpec": &Reference{
	type_: String,
},
			"BuildStatusConfig": &Reference{
	ref: "AWS::CodeBuild::Project_BuildStatusConfig",
},
			"GitCloneDepth": &Reference{
	type_: Integer,
},
			"GitSubmodulesConfig": &Reference{
	ref: "AWS::CodeBuild::Project_GitSubmodulesConfig",
},
			"InsecureSsl": &Reference{
	type_: Boolean,
},
			"Location": &Reference{
	type_: String,
},
			"ReportBuildStatus": &Reference{
	type_: Boolean,
},
			"SourceIdentifier": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeBuild::Project_SourceAuth": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Resource": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeBuild::Project_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeBuild::Project_VpcConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Subnets": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"VpcId": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeBuild::ReportGroup_ReportExportConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExportConfigType": &Reference{
	type_: String,
},
			"S3Destination": &Reference{
	ref: "AWS::CodeBuild::ReportGroup_S3ReportExportConfig",
},
	},
},
	"AWS::CodeBuild::ReportGroup_S3ReportExportConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"BucketOwner": &Reference{
	type_: String,
},
			"EncryptionDisabled": &Reference{
	type_: Boolean,
},
			"EncryptionKey": &Reference{
	type_: String,
},
			"Packaging": &Reference{
	type_: String,
},
			"Path": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeBuild::ReportGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeCommit::Repository_Code": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BranchName": &Reference{
	type_: String,
},
			"S3": &Reference{
	ref: "AWS::CodeCommit::Repository_S3",
},
	},
},
	"AWS::CodeCommit::Repository_RepositoryTrigger": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Branches": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"CustomData": &Reference{
	type_: String,
},
			"DestinationArn": &Reference{
	type_: String,
},
			"Events": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeCommit::Repository_S3": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"Key": &Reference{
	type_: String,
},
			"ObjectVersion": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeCommit::Repository_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeDeploy::Application_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeDeploy::DeploymentConfig_MinimumHealthyHosts": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: Integer,
},
	},
},
	"AWS::CodeDeploy::DeploymentConfig_TimeBasedCanary": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CanaryInterval": &Reference{
	type_: Integer,
},
			"CanaryPercentage": &Reference{
	type_: Integer,
},
	},
},
	"AWS::CodeDeploy::DeploymentConfig_TimeBasedLinear": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LinearInterval": &Reference{
	type_: Integer,
},
			"LinearPercentage": &Reference{
	type_: Integer,
},
	},
},
	"AWS::CodeDeploy::DeploymentConfig_TrafficRoutingConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TimeBasedCanary": &Reference{
	ref: "AWS::CodeDeploy::DeploymentConfig_TimeBasedCanary",
},
			"TimeBasedLinear": &Reference{
	ref: "AWS::CodeDeploy::DeploymentConfig_TimeBasedLinear",
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_Alarm": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_AlarmConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Alarms": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_Alarm",
},
},
			"Enabled": &Reference{
	type_: Boolean,
},
			"IgnorePollAlarmFailure": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_AutoRollbackConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
			"Events": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_BlueGreenDeploymentConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeploymentReadyOption": &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_DeploymentReadyOption",
},
			"GreenFleetProvisioningOption": &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_GreenFleetProvisioningOption",
},
			"TerminateBlueInstancesOnDeploymentSuccess": &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_BlueInstanceTerminationOption",
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_BlueInstanceTerminationOption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	type_: String,
},
			"TerminationWaitTimeInMinutes": &Reference{
	type_: Integer,
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_Deployment": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Description": &Reference{
	type_: String,
},
			"IgnoreApplicationStopFailures": &Reference{
	type_: Boolean,
},
			"Revision": &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_RevisionLocation",
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_DeploymentReadyOption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ActionOnTimeout": &Reference{
	type_: String,
},
			"WaitTimeInMinutes": &Reference{
	type_: Integer,
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_DeploymentStyle": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeploymentOption": &Reference{
	type_: String,
},
			"DeploymentType": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_EC2TagFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_EC2TagSet": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Ec2TagSetList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_EC2TagSetListObject",
},
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_EC2TagSetListObject": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Ec2TagGroup": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_EC2TagFilter",
},
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_ECSService": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClusterName": &Reference{
	type_: String,
},
			"ServiceName": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_ELBInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_GitHubLocation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CommitId": &Reference{
	type_: String,
},
			"Repository": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_GreenFleetProvisioningOption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_LoadBalancerInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ElbInfoList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_ELBInfo",
},
},
			"TargetGroupInfoList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_TargetGroupInfo",
},
},
			"TargetGroupPairInfoList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_TargetGroupPairInfo",
},
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_OnPremisesTagSet": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OnPremisesTagSetList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_OnPremisesTagSetListObject",
},
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_OnPremisesTagSetListObject": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OnPremisesTagGroup": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_TagFilter",
},
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_RevisionLocation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GitHubLocation": &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_GitHubLocation",
},
			"RevisionType": &Reference{
	type_: String,
},
			"S3Location": &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_S3Location",
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_S3Location": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"BundleType": &Reference{
	type_: String,
},
			"ETag": &Reference{
	type_: String,
},
			"Key": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_TagFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_TargetGroupInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_TargetGroupPairInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ProdTrafficRoute": &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_TrafficRoute",
},
			"TargetGroups": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_TargetGroupInfo",
},
},
			"TestTrafficRoute": &Reference{
	ref: "AWS::CodeDeploy::DeploymentGroup_TrafficRoute",
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_TrafficRoute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ListenerArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::CodeDeploy::DeploymentGroup_TriggerConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TriggerEvents": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"TriggerName": &Reference{
	type_: String,
},
			"TriggerTargetArn": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeGuruProfiler::ProfilingGroup_Channel": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"channelId": &Reference{
	ref: "AWS::CodeGuruProfiler::ProfilingGroup_ChannelId",
},
			"channelUri": &Reference{
	ref: "AWS::CodeGuruProfiler::ProfilingGroup_ChannelUri",
},
	},
},
	"AWS::CodeGuruProfiler::ProfilingGroup_ChannelId": &Reference{
	type_: String,
},
	"AWS::CodeGuruProfiler::ProfilingGroup_ChannelUri": &Reference{
	type_: String,
},
	"AWS::CodeGuruProfiler::ProfilingGroup_IamArn": &Reference{
	type_: String,
},
	"AWS::CodeGuruProfiler::ProfilingGroup_ProfilingGroupArn": &Reference{
	type_: String,
},
	"AWS::CodeGuruProfiler::ProfilingGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeGuruReviewer::RepositoryAssociation_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CodePipeline::CustomActionType_ArtifactDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaximumCount": &Reference{
	type_: Integer,
},
			"MinimumCount": &Reference{
	type_: Integer,
},
	},
},
	"AWS::CodePipeline::CustomActionType_ConfigurationProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Description": &Reference{
	type_: String,
},
			"Key": &Reference{
	type_: Boolean,
},
			"Name": &Reference{
	type_: String,
},
			"Queryable": &Reference{
	type_: Boolean,
},
			"Required": &Reference{
	type_: Boolean,
},
			"Secret": &Reference{
	type_: Boolean,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::CodePipeline::CustomActionType_Settings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EntityUrlTemplate": &Reference{
	type_: String,
},
			"ExecutionUrlTemplate": &Reference{
	type_: String,
},
			"RevisionUrlTemplate": &Reference{
	type_: String,
},
			"ThirdPartyConfigurationUrl": &Reference{
	type_: String,
},
	},
},
	"AWS::CodePipeline::CustomActionType_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CodePipeline::Pipeline_ActionDeclaration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ActionTypeId": &Reference{
	ref: "AWS::CodePipeline::Pipeline_ActionTypeId",
},
			"Configuration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"InputArtifacts": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodePipeline::Pipeline_InputArtifact",
},
},
			"Name": &Reference{
	type_: String,
},
			"Namespace": &Reference{
	type_: String,
},
			"OutputArtifacts": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodePipeline::Pipeline_OutputArtifact",
},
},
			"Region": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
			"RunOrder": &Reference{
	type_: Integer,
},
	},
},
	"AWS::CodePipeline::Pipeline_ActionTypeId": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Category": &Reference{
	type_: String,
},
			"Owner": &Reference{
	type_: String,
},
			"Provider": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::CodePipeline::Pipeline_ArtifactStore": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EncryptionKey": &Reference{
	ref: "AWS::CodePipeline::Pipeline_EncryptionKey",
},
			"Location": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::CodePipeline::Pipeline_ArtifactStoreMap": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ArtifactStore": &Reference{
	ref: "AWS::CodePipeline::Pipeline_ArtifactStore",
},
			"Region": &Reference{
	type_: String,
},
	},
},
	"AWS::CodePipeline::Pipeline_BlockerDeclaration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::CodePipeline::Pipeline_EncryptionKey": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Id": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::CodePipeline::Pipeline_InputArtifact": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::CodePipeline::Pipeline_OutputArtifact": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::CodePipeline::Pipeline_StageDeclaration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Actions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodePipeline::Pipeline_ActionDeclaration",
},
},
			"Blockers": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::CodePipeline::Pipeline_BlockerDeclaration",
},
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::CodePipeline::Pipeline_StageTransition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Reason": &Reference{
	type_: String,
},
			"StageName": &Reference{
	type_: String,
},
	},
},
	"AWS::CodePipeline::Pipeline_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CodePipeline::Webhook_WebhookAuthConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllowedIPRange": &Reference{
	type_: String,
},
			"SecretToken": &Reference{
	type_: String,
},
	},
},
	"AWS::CodePipeline::Webhook_WebhookFilterRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"JsonPath": &Reference{
	type_: String,
},
			"MatchEquals": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeStar::GitHubRepository_Code": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3": &Reference{
	ref: "AWS::CodeStar::GitHubRepository_S3",
},
	},
},
	"AWS::CodeStar::GitHubRepository_S3": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"Key": &Reference{
	type_: String,
},
			"ObjectVersion": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeStarConnections::Connection_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::CodeStarNotifications::NotificationRule_Target": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TargetAddress": &Reference{
	type_: String,
},
			"TargetType": &Reference{
	type_: String,
},
	},
},
	"AWS::Cognito::IdentityPool_CognitoIdentityProvider": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClientId": &Reference{
	type_: String,
},
			"ProviderName": &Reference{
	type_: String,
},
			"ServerSideTokenCheck": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Cognito::IdentityPool_CognitoStreams": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RoleArn": &Reference{
	type_: String,
},
			"StreamName": &Reference{
	type_: String,
},
			"StreamingStatus": &Reference{
	type_: String,
},
	},
},
	"AWS::Cognito::IdentityPool_PushSync": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApplicationArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"RoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Cognito::UserPool_AccountRecoverySetting": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RecoveryMechanisms": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Cognito::UserPool_RecoveryOption",
},
},
	},
},
	"AWS::Cognito::UserPool_AdminCreateUserConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllowAdminCreateUserOnly": &Reference{
	type_: Boolean,
},
			"InviteMessageTemplate": &Reference{
	ref: "AWS::Cognito::UserPool_InviteMessageTemplate",
},
			"UnusedAccountValidityDays": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Cognito::UserPool_CustomEmailSender": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LambdaArn": &Reference{
	type_: String,
},
			"LambdaVersion": &Reference{
	type_: String,
},
	},
},
	"AWS::Cognito::UserPool_CustomSMSSender": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LambdaArn": &Reference{
	type_: String,
},
			"LambdaVersion": &Reference{
	type_: String,
},
	},
},
	"AWS::Cognito::UserPool_DeviceConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ChallengeRequiredOnNewDevice": &Reference{
	type_: Boolean,
},
			"DeviceOnlyRememberedOnUserPrompt": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Cognito::UserPool_EmailConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConfigurationSet": &Reference{
	type_: String,
},
			"EmailSendingAccount": &Reference{
	type_: String,
},
			"From": &Reference{
	type_: String,
},
			"ReplyToEmailAddress": &Reference{
	type_: String,
},
			"SourceArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Cognito::UserPool_InviteMessageTemplate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EmailMessage": &Reference{
	type_: String,
},
			"EmailSubject": &Reference{
	type_: String,
},
			"SMSMessage": &Reference{
	type_: String,
},
	},
},
	"AWS::Cognito::UserPool_LambdaConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CreateAuthChallenge": &Reference{
	type_: String,
},
			"CustomEmailSender": &Reference{
	ref: "AWS::Cognito::UserPool_CustomEmailSender",
},
			"CustomMessage": &Reference{
	type_: String,
},
			"CustomSMSSender": &Reference{
	ref: "AWS::Cognito::UserPool_CustomSMSSender",
},
			"DefineAuthChallenge": &Reference{
	type_: String,
},
			"KMSKeyID": &Reference{
	type_: String,
},
			"PostAuthentication": &Reference{
	type_: String,
},
			"PostConfirmation": &Reference{
	type_: String,
},
			"PreAuthentication": &Reference{
	type_: String,
},
			"PreSignUp": &Reference{
	type_: String,
},
			"PreTokenGeneration": &Reference{
	type_: String,
},
			"UserMigration": &Reference{
	type_: String,
},
			"VerifyAuthChallengeResponse": &Reference{
	type_: String,
},
	},
},
	"AWS::Cognito::UserPool_NumberAttributeConstraints": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxValue": &Reference{
	type_: String,
},
			"MinValue": &Reference{
	type_: String,
},
	},
},
	"AWS::Cognito::UserPool_PasswordPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MinimumLength": &Reference{
	type_: Integer,
},
			"RequireLowercase": &Reference{
	type_: Boolean,
},
			"RequireNumbers": &Reference{
	type_: Boolean,
},
			"RequireSymbols": &Reference{
	type_: Boolean,
},
			"RequireUppercase": &Reference{
	type_: Boolean,
},
			"TemporaryPasswordValidityDays": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Cognito::UserPool_Policies": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PasswordPolicy": &Reference{
	ref: "AWS::Cognito::UserPool_PasswordPolicy",
},
	},
},
	"AWS::Cognito::UserPool_RecoveryOption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Priority": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Cognito::UserPool_SchemaAttribute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AttributeDataType": &Reference{
	type_: String,
},
			"DeveloperOnlyAttribute": &Reference{
	type_: Boolean,
},
			"Mutable": &Reference{
	type_: Boolean,
},
			"Name": &Reference{
	type_: String,
},
			"NumberAttributeConstraints": &Reference{
	ref: "AWS::Cognito::UserPool_NumberAttributeConstraints",
},
			"Required": &Reference{
	type_: Boolean,
},
			"StringAttributeConstraints": &Reference{
	ref: "AWS::Cognito::UserPool_StringAttributeConstraints",
},
	},
},
	"AWS::Cognito::UserPool_SmsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExternalId": &Reference{
	type_: String,
},
			"SnsCallerArn": &Reference{
	type_: String,
},
			"SnsRegion": &Reference{
	type_: String,
},
	},
},
	"AWS::Cognito::UserPool_StringAttributeConstraints": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxLength": &Reference{
	type_: String,
},
			"MinLength": &Reference{
	type_: String,
},
	},
},
	"AWS::Cognito::UserPool_UserAttributeUpdateSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AttributesRequireVerificationBeforeUpdate": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Cognito::UserPool_UserPoolAddOns": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdvancedSecurityMode": &Reference{
	type_: String,
},
	},
},
	"AWS::Cognito::UserPool_UsernameConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CaseSensitive": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Cognito::UserPool_VerificationMessageTemplate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DefaultEmailOption": &Reference{
	type_: String,
},
			"EmailMessage": &Reference{
	type_: String,
},
			"EmailMessageByLink": &Reference{
	type_: String,
},
			"EmailSubject": &Reference{
	type_: String,
},
			"EmailSubjectByLink": &Reference{
	type_: String,
},
			"SmsMessage": &Reference{
	type_: String,
},
	},
},
	"AWS::Cognito::UserPoolClient_AnalyticsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApplicationArn": &Reference{
	type_: String,
},
			"ApplicationId": &Reference{
	type_: String,
},
			"ExternalId": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
			"UserDataShared": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Cognito::UserPoolClient_TokenValidityUnits": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessToken": &Reference{
	type_: String,
},
			"IdToken": &Reference{
	type_: String,
},
			"RefreshToken": &Reference{
	type_: String,
},
	},
},
	"AWS::Cognito::UserPoolDomain_CustomDomainConfigType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Cognito::UserPoolResourceServer_ResourceServerScopeType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ScopeDescription": &Reference{
	type_: String,
},
			"ScopeName": &Reference{
	type_: String,
},
	},
},
	"AWS::Cognito::UserPoolRiskConfigurationAttachment_AccountTakeoverActionType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EventAction": &Reference{
	type_: String,
},
			"Notify": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Cognito::UserPoolRiskConfigurationAttachment_AccountTakeoverActionsType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HighAction": &Reference{
	ref: "AWS::Cognito::UserPoolRiskConfigurationAttachment_AccountTakeoverActionType",
},
			"LowAction": &Reference{
	ref: "AWS::Cognito::UserPoolRiskConfigurationAttachment_AccountTakeoverActionType",
},
			"MediumAction": &Reference{
	ref: "AWS::Cognito::UserPoolRiskConfigurationAttachment_AccountTakeoverActionType",
},
	},
},
	"AWS::Cognito::UserPoolRiskConfigurationAttachment_AccountTakeoverRiskConfigurationType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Actions": &Reference{
	ref: "AWS::Cognito::UserPoolRiskConfigurationAttachment_AccountTakeoverActionsType",
},
			"NotifyConfiguration": &Reference{
	ref: "AWS::Cognito::UserPoolRiskConfigurationAttachment_NotifyConfigurationType",
},
	},
},
	"AWS::Cognito::UserPoolRiskConfigurationAttachment_CompromisedCredentialsActionsType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EventAction": &Reference{
	type_: String,
},
	},
},
	"AWS::Cognito::UserPoolRiskConfigurationAttachment_CompromisedCredentialsRiskConfigurationType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Actions": &Reference{
	ref: "AWS::Cognito::UserPoolRiskConfigurationAttachment_CompromisedCredentialsActionsType",
},
			"EventFilter": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Cognito::UserPoolRiskConfigurationAttachment_NotifyConfigurationType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BlockEmail": &Reference{
	ref: "AWS::Cognito::UserPoolRiskConfigurationAttachment_NotifyEmailType",
},
			"From": &Reference{
	type_: String,
},
			"MfaEmail": &Reference{
	ref: "AWS::Cognito::UserPoolRiskConfigurationAttachment_NotifyEmailType",
},
			"NoActionEmail": &Reference{
	ref: "AWS::Cognito::UserPoolRiskConfigurationAttachment_NotifyEmailType",
},
			"ReplyTo": &Reference{
	type_: String,
},
			"SourceArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Cognito::UserPoolRiskConfigurationAttachment_NotifyEmailType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HtmlBody": &Reference{
	type_: String,
},
			"Subject": &Reference{
	type_: String,
},
			"TextBody": &Reference{
	type_: String,
},
	},
},
	"AWS::Cognito::UserPoolRiskConfigurationAttachment_RiskExceptionConfigurationType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BlockedIPRangeList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SkippedIPRangeList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Cognito::UserPoolUser_AttributeType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Config::AggregationAuthorization_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Config::ConfigRule_Scope": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComplianceResourceId": &Reference{
	type_: String,
},
			"ComplianceResourceTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"TagKey": &Reference{
	type_: String,
},
			"TagValue": &Reference{
	type_: String,
},
	},
},
	"AWS::Config::ConfigRule_Source": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Owner": &Reference{
	type_: String,
},
			"SourceDetails": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Config::ConfigRule_SourceDetail",
},
},
			"SourceIdentifier": &Reference{
	type_: String,
},
	},
},
	"AWS::Config::ConfigRule_SourceDetail": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EventSource": &Reference{
	type_: String,
},
			"MaximumExecutionFrequency": &Reference{
	type_: String,
},
			"MessageType": &Reference{
	type_: String,
},
	},
},
	"AWS::Config::ConfigurationAggregator_AccountAggregationSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccountIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"AllAwsRegions": &Reference{
	type_: Boolean,
},
			"AwsRegions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Config::ConfigurationAggregator_OrganizationAggregationSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllAwsRegions": &Reference{
	type_: Boolean,
},
			"AwsRegions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"RoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Config::ConfigurationAggregator_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Config::ConfigurationRecorder_RecordingGroup": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllSupported": &Reference{
	type_: Boolean,
},
			"IncludeGlobalResourceTypes": &Reference{
	type_: Boolean,
},
			"ResourceTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Config::ConformancePack_ConformancePackInputParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ParameterName": &Reference{
	ref: "AWS::Config::ConformancePack_ParameterName",
},
			"ParameterValue": &Reference{
	ref: "AWS::Config::ConformancePack_ParameterValue",
},
	},
},
	"AWS::Config::ConformancePack_ParameterName": &Reference{
	type_: String,
},
	"AWS::Config::ConformancePack_ParameterValue": &Reference{
	type_: String,
},
	"AWS::Config::DeliveryChannel_ConfigSnapshotDeliveryProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeliveryFrequency": &Reference{
	type_: String,
},
	},
},
	"AWS::Config::OrganizationConfigRule_OrganizationCustomRuleMetadata": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Description": &Reference{
	type_: String,
},
			"InputParameters": &Reference{
	type_: String,
},
			"LambdaFunctionArn": &Reference{
	type_: String,
},
			"MaximumExecutionFrequency": &Reference{
	type_: String,
},
			"OrganizationConfigRuleTriggerTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ResourceIdScope": &Reference{
	type_: String,
},
			"ResourceTypesScope": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"TagKeyScope": &Reference{
	type_: String,
},
			"TagValueScope": &Reference{
	type_: String,
},
	},
},
	"AWS::Config::OrganizationConfigRule_OrganizationManagedRuleMetadata": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Description": &Reference{
	type_: String,
},
			"InputParameters": &Reference{
	type_: String,
},
			"MaximumExecutionFrequency": &Reference{
	type_: String,
},
			"ResourceIdScope": &Reference{
	type_: String,
},
			"ResourceTypesScope": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"RuleIdentifier": &Reference{
	type_: String,
},
			"TagKeyScope": &Reference{
	type_: String,
},
			"TagValueScope": &Reference{
	type_: String,
},
	},
},
	"AWS::Config::OrganizationConformancePack_AccountId": &Reference{
	type_: String,
},
	"AWS::Config::OrganizationConformancePack_ConformancePackInputParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ParameterName": &Reference{
	ref: "AWS::Config::OrganizationConformancePack_ParameterName",
},
			"ParameterValue": &Reference{
	ref: "AWS::Config::OrganizationConformancePack_ParameterValue",
},
	},
},
	"AWS::Config::OrganizationConformancePack_ParameterName": &Reference{
	type_: String,
},
	"AWS::Config::OrganizationConformancePack_ParameterValue": &Reference{
	type_: String,
},
	"AWS::Config::RemediationConfiguration_ExecutionControls": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SsmControls": &Reference{
	ref: "AWS::Config::RemediationConfiguration_SsmControls",
},
	},
},
	"AWS::Config::RemediationConfiguration_SsmControls": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConcurrentExecutionRatePercentage": &Reference{
	type_: Integer,
},
			"ErrorPercentage": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Config::StoredQuery_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DAX::Cluster_SSESpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SSEEnabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::DLM::LifecyclePolicy_Action": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CrossRegionCopy": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DLM::LifecyclePolicy_CrossRegionCopyAction",
},
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::DLM::LifecyclePolicy_CreateRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CronExpression": &Reference{
	type_: String,
},
			"Interval": &Reference{
	type_: Integer,
},
			"IntervalUnit": &Reference{
	type_: String,
},
			"Location": &Reference{
	type_: String,
},
			"Times": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::DLM::LifecyclePolicy_CrossRegionCopyAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EncryptionConfiguration": &Reference{
	ref: "AWS::DLM::LifecyclePolicy_EncryptionConfiguration",
},
			"RetainRule": &Reference{
	ref: "AWS::DLM::LifecyclePolicy_CrossRegionCopyRetainRule",
},
			"Target": &Reference{
	type_: String,
},
	},
},
	"AWS::DLM::LifecyclePolicy_CrossRegionCopyDeprecateRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Interval": &Reference{
	type_: Integer,
},
			"IntervalUnit": &Reference{
	type_: String,
},
	},
},
	"AWS::DLM::LifecyclePolicy_CrossRegionCopyRetainRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Interval": &Reference{
	type_: Integer,
},
			"IntervalUnit": &Reference{
	type_: String,
},
	},
},
	"AWS::DLM::LifecyclePolicy_CrossRegionCopyRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CmkArn": &Reference{
	type_: String,
},
			"CopyTags": &Reference{
	type_: Boolean,
},
			"DeprecateRule": &Reference{
	ref: "AWS::DLM::LifecyclePolicy_CrossRegionCopyDeprecateRule",
},
			"Encrypted": &Reference{
	type_: Boolean,
},
			"RetainRule": &Reference{
	ref: "AWS::DLM::LifecyclePolicy_CrossRegionCopyRetainRule",
},
			"Target": &Reference{
	type_: String,
},
			"TargetRegion": &Reference{
	type_: String,
},
	},
},
	"AWS::DLM::LifecyclePolicy_DeprecateRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Count": &Reference{
	type_: Integer,
},
			"Interval": &Reference{
	type_: Integer,
},
			"IntervalUnit": &Reference{
	type_: String,
},
	},
},
	"AWS::DLM::LifecyclePolicy_EncryptionConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CmkArn": &Reference{
	type_: String,
},
			"Encrypted": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::DLM::LifecyclePolicy_EventParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DescriptionRegex": &Reference{
	type_: String,
},
			"EventType": &Reference{
	type_: String,
},
			"SnapshotOwner": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::DLM::LifecyclePolicy_EventSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Parameters": &Reference{
	ref: "AWS::DLM::LifecyclePolicy_EventParameters",
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::DLM::LifecyclePolicy_FastRestoreRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AvailabilityZones": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Count": &Reference{
	type_: Integer,
},
			"Interval": &Reference{
	type_: Integer,
},
			"IntervalUnit": &Reference{
	type_: String,
},
	},
},
	"AWS::DLM::LifecyclePolicy_Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExcludeBootVolume": &Reference{
	type_: Boolean,
},
			"NoReboot": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::DLM::LifecyclePolicy_PolicyDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Actions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DLM::LifecyclePolicy_Action",
},
},
			"EventSource": &Reference{
	ref: "AWS::DLM::LifecyclePolicy_EventSource",
},
			"Parameters": &Reference{
	ref: "AWS::DLM::LifecyclePolicy_Parameters",
},
			"PolicyType": &Reference{
	type_: String,
},
			"ResourceLocations": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ResourceTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Schedules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DLM::LifecyclePolicy_Schedule",
},
},
			"TargetTags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DLM::LifecyclePolicy_Tag",
},
},
	},
},
	"AWS::DLM::LifecyclePolicy_RetainRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Count": &Reference{
	type_: Integer,
},
			"Interval": &Reference{
	type_: Integer,
},
			"IntervalUnit": &Reference{
	type_: String,
},
	},
},
	"AWS::DLM::LifecyclePolicy_Schedule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CopyTags": &Reference{
	type_: Boolean,
},
			"CreateRule": &Reference{
	ref: "AWS::DLM::LifecyclePolicy_CreateRule",
},
			"CrossRegionCopyRules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DLM::LifecyclePolicy_CrossRegionCopyRule",
},
},
			"DeprecateRule": &Reference{
	ref: "AWS::DLM::LifecyclePolicy_DeprecateRule",
},
			"FastRestoreRule": &Reference{
	ref: "AWS::DLM::LifecyclePolicy_FastRestoreRule",
},
			"Name": &Reference{
	type_: String,
},
			"RetainRule": &Reference{
	ref: "AWS::DLM::LifecyclePolicy_RetainRule",
},
			"ShareRules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DLM::LifecyclePolicy_ShareRule",
},
},
			"TagsToAdd": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DLM::LifecyclePolicy_Tag",
},
},
			"VariableTags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DLM::LifecyclePolicy_Tag",
},
},
	},
},
	"AWS::DLM::LifecyclePolicy_ShareRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TargetAccounts": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"UnshareInterval": &Reference{
	type_: Integer,
},
			"UnshareIntervalUnit": &Reference{
	type_: String,
},
	},
},
	"AWS::DLM::LifecyclePolicy_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DMS::Endpoint_DocDbSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DocsToInvestigate": &Reference{
	type_: Integer,
},
			"ExtractDocId": &Reference{
	type_: Boolean,
},
			"NestingLevel": &Reference{
	type_: String,
},
			"SecretsManagerAccessRoleArn": &Reference{
	type_: String,
},
			"SecretsManagerSecretId": &Reference{
	type_: String,
},
	},
},
	"AWS::DMS::Endpoint_DynamoDbSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ServiceAccessRoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::DMS::Endpoint_ElasticsearchSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EndpointUri": &Reference{
	type_: String,
},
			"ErrorRetryDuration": &Reference{
	type_: Integer,
},
			"FullLoadErrorPercentage": &Reference{
	type_: Integer,
},
			"ServiceAccessRoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::DMS::Endpoint_GcpMySQLSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AfterConnectScript": &Reference{
	type_: String,
},
			"CleanSourceMetadataOnMismatch": &Reference{
	type_: Boolean,
},
			"DatabaseName": &Reference{
	type_: String,
},
			"EventsPollInterval": &Reference{
	type_: Integer,
},
			"MaxFileSize": &Reference{
	type_: Integer,
},
			"ParallelLoadThreads": &Reference{
	type_: Integer,
},
			"Password": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Integer,
},
			"SecretsManagerAccessRoleArn": &Reference{
	type_: String,
},
			"SecretsManagerSecretId": &Reference{
	type_: String,
},
			"ServerName": &Reference{
	type_: String,
},
			"ServerTimezone": &Reference{
	type_: String,
},
			"Username": &Reference{
	type_: String,
},
	},
},
	"AWS::DMS::Endpoint_IbmDb2Settings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CurrentLsn": &Reference{
	type_: String,
},
			"MaxKBytesPerRead": &Reference{
	type_: Integer,
},
			"SecretsManagerAccessRoleArn": &Reference{
	type_: String,
},
			"SecretsManagerSecretId": &Reference{
	type_: String,
},
			"SetDataCaptureChanges": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::DMS::Endpoint_KafkaSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Broker": &Reference{
	type_: String,
},
			"IncludeControlDetails": &Reference{
	type_: Boolean,
},
			"IncludeNullAndEmpty": &Reference{
	type_: Boolean,
},
			"IncludePartitionValue": &Reference{
	type_: Boolean,
},
			"IncludeTableAlterOperations": &Reference{
	type_: Boolean,
},
			"IncludeTransactionDetails": &Reference{
	type_: Boolean,
},
			"MessageFormat": &Reference{
	type_: String,
},
			"MessageMaxBytes": &Reference{
	type_: Integer,
},
			"NoHexPrefix": &Reference{
	type_: Boolean,
},
			"PartitionIncludeSchemaTable": &Reference{
	type_: Boolean,
},
			"SaslPassword": &Reference{
	type_: String,
},
			"SaslUserName": &Reference{
	type_: String,
},
			"SecurityProtocol": &Reference{
	type_: String,
},
			"SslCaCertificateArn": &Reference{
	type_: String,
},
			"SslClientCertificateArn": &Reference{
	type_: String,
},
			"SslClientKeyArn": &Reference{
	type_: String,
},
			"SslClientKeyPassword": &Reference{
	type_: String,
},
			"Topic": &Reference{
	type_: String,
},
	},
},
	"AWS::DMS::Endpoint_KinesisSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IncludeControlDetails": &Reference{
	type_: Boolean,
},
			"IncludeNullAndEmpty": &Reference{
	type_: Boolean,
},
			"IncludePartitionValue": &Reference{
	type_: Boolean,
},
			"IncludeTableAlterOperations": &Reference{
	type_: Boolean,
},
			"IncludeTransactionDetails": &Reference{
	type_: Boolean,
},
			"MessageFormat": &Reference{
	type_: String,
},
			"NoHexPrefix": &Reference{
	type_: Boolean,
},
			"PartitionIncludeSchemaTable": &Reference{
	type_: Boolean,
},
			"ServiceAccessRoleArn": &Reference{
	type_: String,
},
			"StreamArn": &Reference{
	type_: String,
},
	},
},
	"AWS::DMS::Endpoint_MicrosoftSqlServerSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BcpPacketSize": &Reference{
	type_: Integer,
},
			"ControlTablesFileGroup": &Reference{
	type_: String,
},
			"QuerySingleAlwaysOnNode": &Reference{
	type_: Boolean,
},
			"ReadBackupOnly": &Reference{
	type_: Boolean,
},
			"SafeguardPolicy": &Reference{
	type_: String,
},
			"SecretsManagerAccessRoleArn": &Reference{
	type_: String,
},
			"SecretsManagerSecretId": &Reference{
	type_: String,
},
			"UseBcpFullLoad": &Reference{
	type_: Boolean,
},
			"UseThirdPartyBackupDevice": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::DMS::Endpoint_MongoDbSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthMechanism": &Reference{
	type_: String,
},
			"AuthSource": &Reference{
	type_: String,
},
			"AuthType": &Reference{
	type_: String,
},
			"DatabaseName": &Reference{
	type_: String,
},
			"DocsToInvestigate": &Reference{
	type_: String,
},
			"ExtractDocId": &Reference{
	type_: String,
},
			"NestingLevel": &Reference{
	type_: String,
},
			"Password": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Integer,
},
			"SecretsManagerAccessRoleArn": &Reference{
	type_: String,
},
			"SecretsManagerSecretId": &Reference{
	type_: String,
},
			"ServerName": &Reference{
	type_: String,
},
			"Username": &Reference{
	type_: String,
},
	},
},
	"AWS::DMS::Endpoint_MySqlSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AfterConnectScript": &Reference{
	type_: String,
},
			"CleanSourceMetadataOnMismatch": &Reference{
	type_: Boolean,
},
			"EventsPollInterval": &Reference{
	type_: Integer,
},
			"MaxFileSize": &Reference{
	type_: Integer,
},
			"ParallelLoadThreads": &Reference{
	type_: Integer,
},
			"SecretsManagerAccessRoleArn": &Reference{
	type_: String,
},
			"SecretsManagerSecretId": &Reference{
	type_: String,
},
			"ServerTimezone": &Reference{
	type_: String,
},
			"TargetDbType": &Reference{
	type_: String,
},
	},
},
	"AWS::DMS::Endpoint_NeptuneSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ErrorRetryDuration": &Reference{
	type_: Integer,
},
			"IamAuthEnabled": &Reference{
	type_: Boolean,
},
			"MaxFileSize": &Reference{
	type_: Integer,
},
			"MaxRetryCount": &Reference{
	type_: Integer,
},
			"S3BucketFolder": &Reference{
	type_: String,
},
			"S3BucketName": &Reference{
	type_: String,
},
			"ServiceAccessRoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::DMS::Endpoint_OracleSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessAlternateDirectly": &Reference{
	type_: Boolean,
},
			"AddSupplementalLogging": &Reference{
	type_: Boolean,
},
			"AdditionalArchivedLogDestId": &Reference{
	type_: Integer,
},
			"AllowSelectNestedTables": &Reference{
	type_: Boolean,
},
			"ArchivedLogDestId": &Reference{
	type_: Integer,
},
			"ArchivedLogsOnly": &Reference{
	type_: Boolean,
},
			"AsmPassword": &Reference{
	type_: String,
},
			"AsmServer": &Reference{
	type_: String,
},
			"AsmUser": &Reference{
	type_: String,
},
			"CharLengthSemantics": &Reference{
	type_: String,
},
			"DirectPathNoLog": &Reference{
	type_: Boolean,
},
			"DirectPathParallelLoad": &Reference{
	type_: Boolean,
},
			"EnableHomogenousTablespace": &Reference{
	type_: Boolean,
},
			"ExtraArchivedLogDestIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: Integer,
},
},
			"FailTasksOnLobTruncation": &Reference{
	type_: Boolean,
},
			"NumberDatatypeScale": &Reference{
	type_: Integer,
},
			"OraclePathPrefix": &Reference{
	type_: String,
},
			"ParallelAsmReadThreads": &Reference{
	type_: Integer,
},
			"ReadAheadBlocks": &Reference{
	type_: Integer,
},
			"ReadTableSpaceName": &Reference{
	type_: Boolean,
},
			"ReplacePathPrefix": &Reference{
	type_: Boolean,
},
			"RetryInterval": &Reference{
	type_: Integer,
},
			"SecretsManagerAccessRoleArn": &Reference{
	type_: String,
},
			"SecretsManagerOracleAsmAccessRoleArn": &Reference{
	type_: String,
},
			"SecretsManagerOracleAsmSecretId": &Reference{
	type_: String,
},
			"SecretsManagerSecretId": &Reference{
	type_: String,
},
			"SecurityDbEncryption": &Reference{
	type_: String,
},
			"SecurityDbEncryptionName": &Reference{
	type_: String,
},
			"SpatialDataOptionToGeoJsonFunctionName": &Reference{
	type_: String,
},
			"StandbyDelayTime": &Reference{
	type_: Integer,
},
			"UseAlternateFolderForOnline": &Reference{
	type_: Boolean,
},
			"UseBFile": &Reference{
	type_: Boolean,
},
			"UseDirectPathFullLoad": &Reference{
	type_: Boolean,
},
			"UseLogminerReader": &Reference{
	type_: Boolean,
},
			"UsePathPrefix": &Reference{
	type_: String,
},
	},
},
	"AWS::DMS::Endpoint_PostgreSqlSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AfterConnectScript": &Reference{
	type_: String,
},
			"CaptureDdls": &Reference{
	type_: Boolean,
},
			"DdlArtifactsSchema": &Reference{
	type_: String,
},
			"ExecuteTimeout": &Reference{
	type_: Integer,
},
			"FailTasksOnLobTruncation": &Reference{
	type_: Boolean,
},
			"HeartbeatEnable": &Reference{
	type_: Boolean,
},
			"HeartbeatFrequency": &Reference{
	type_: Integer,
},
			"HeartbeatSchema": &Reference{
	type_: String,
},
			"MaxFileSize": &Reference{
	type_: Integer,
},
			"PluginName": &Reference{
	type_: String,
},
			"SecretsManagerAccessRoleArn": &Reference{
	type_: String,
},
			"SecretsManagerSecretId": &Reference{
	type_: String,
},
			"SlotName": &Reference{
	type_: String,
},
	},
},
	"AWS::DMS::Endpoint_RedisSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthPassword": &Reference{
	type_: String,
},
			"AuthType": &Reference{
	type_: String,
},
			"AuthUserName": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Number,
},
			"ServerName": &Reference{
	type_: String,
},
			"SslCaCertificateArn": &Reference{
	type_: String,
},
			"SslSecurityProtocol": &Reference{
	type_: String,
},
	},
},
	"AWS::DMS::Endpoint_RedshiftSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AcceptAnyDate": &Reference{
	type_: Boolean,
},
			"AfterConnectScript": &Reference{
	type_: String,
},
			"BucketFolder": &Reference{
	type_: String,
},
			"BucketName": &Reference{
	type_: String,
},
			"CaseSensitiveNames": &Reference{
	type_: Boolean,
},
			"CompUpdate": &Reference{
	type_: Boolean,
},
			"ConnectionTimeout": &Reference{
	type_: Integer,
},
			"DateFormat": &Reference{
	type_: String,
},
			"EmptyAsNull": &Reference{
	type_: Boolean,
},
			"EncryptionMode": &Reference{
	type_: String,
},
			"ExplicitIds": &Reference{
	type_: Boolean,
},
			"FileTransferUploadStreams": &Reference{
	type_: Integer,
},
			"LoadTimeout": &Reference{
	type_: Integer,
},
			"MaxFileSize": &Reference{
	type_: Integer,
},
			"RemoveQuotes": &Reference{
	type_: Boolean,
},
			"ReplaceChars": &Reference{
	type_: String,
},
			"ReplaceInvalidChars": &Reference{
	type_: String,
},
			"SecretsManagerAccessRoleArn": &Reference{
	type_: String,
},
			"SecretsManagerSecretId": &Reference{
	type_: String,
},
			"ServerSideEncryptionKmsKeyId": &Reference{
	type_: String,
},
			"ServiceAccessRoleArn": &Reference{
	type_: String,
},
			"TimeFormat": &Reference{
	type_: String,
},
			"TrimBlanks": &Reference{
	type_: Boolean,
},
			"TruncateColumns": &Reference{
	type_: Boolean,
},
			"WriteBufferSize": &Reference{
	type_: Integer,
},
	},
},
	"AWS::DMS::Endpoint_S3Settings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AddColumnName": &Reference{
	type_: Boolean,
},
			"BucketFolder": &Reference{
	type_: String,
},
			"BucketName": &Reference{
	type_: String,
},
			"CannedAclForObjects": &Reference{
	type_: String,
},
			"CdcInsertsAndUpdates": &Reference{
	type_: Boolean,
},
			"CdcInsertsOnly": &Reference{
	type_: Boolean,
},
			"CdcMaxBatchInterval": &Reference{
	type_: Integer,
},
			"CdcMinFileSize": &Reference{
	type_: Integer,
},
			"CdcPath": &Reference{
	type_: String,
},
			"CompressionType": &Reference{
	type_: String,
},
			"CsvDelimiter": &Reference{
	type_: String,
},
			"CsvNoSupValue": &Reference{
	type_: String,
},
			"CsvNullValue": &Reference{
	type_: String,
},
			"CsvRowDelimiter": &Reference{
	type_: String,
},
			"DataFormat": &Reference{
	type_: String,
},
			"DataPageSize": &Reference{
	type_: Integer,
},
			"DatePartitionDelimiter": &Reference{
	type_: String,
},
			"DatePartitionEnabled": &Reference{
	type_: Boolean,
},
			"DatePartitionSequence": &Reference{
	type_: String,
},
			"DatePartitionTimezone": &Reference{
	type_: String,
},
			"DictPageSizeLimit": &Reference{
	type_: Integer,
},
			"EnableStatistics": &Reference{
	type_: Boolean,
},
			"EncodingType": &Reference{
	type_: String,
},
			"EncryptionMode": &Reference{
	type_: String,
},
			"ExternalTableDefinition": &Reference{
	type_: String,
},
			"IgnoreHeaderRows": &Reference{
	type_: Integer,
},
			"IncludeOpForFullLoad": &Reference{
	type_: Boolean,
},
			"MaxFileSize": &Reference{
	type_: Integer,
},
			"ParquetTimestampInMillisecond": &Reference{
	type_: Boolean,
},
			"ParquetVersion": &Reference{
	type_: String,
},
			"PreserveTransactions": &Reference{
	type_: Boolean,
},
			"Rfc4180": &Reference{
	type_: Boolean,
},
			"RowGroupLength": &Reference{
	type_: Integer,
},
			"ServerSideEncryptionKmsKeyId": &Reference{
	type_: String,
},
			"ServiceAccessRoleArn": &Reference{
	type_: String,
},
			"TimestampColumnName": &Reference{
	type_: String,
},
			"UseCsvNoSupValue": &Reference{
	type_: Boolean,
},
			"UseTaskStartTimeForFullLoadTimestamp": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::DMS::Endpoint_SybaseSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecretsManagerAccessRoleArn": &Reference{
	type_: String,
},
			"SecretsManagerSecretId": &Reference{
	type_: String,
},
	},
},
	"AWS::DMS::Endpoint_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DMS::EventSubscription_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DMS::ReplicationInstance_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DMS::ReplicationSubnetGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DMS::ReplicationTask_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Dataset_CsvOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Delimiter": &Reference{
	type_: String,
},
			"HeaderRow": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::DataBrew::Dataset_DataCatalogInputDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	type_: String,
},
			"DatabaseName": &Reference{
	type_: String,
},
			"TableName": &Reference{
	type_: String,
},
			"TempDirectory": &Reference{
	ref: "AWS::DataBrew::Dataset_S3Location",
},
	},
},
	"AWS::DataBrew::Dataset_DatabaseInputDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DatabaseTableName": &Reference{
	type_: String,
},
			"GlueConnectionName": &Reference{
	type_: String,
},
			"QueryString": &Reference{
	type_: String,
},
			"TempDirectory": &Reference{
	ref: "AWS::DataBrew::Dataset_S3Location",
},
	},
},
	"AWS::DataBrew::Dataset_DatasetParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CreateColumn": &Reference{
	type_: Boolean,
},
			"DatetimeOptions": &Reference{
	ref: "AWS::DataBrew::Dataset_DatetimeOptions",
},
			"Filter": &Reference{
	ref: "AWS::DataBrew::Dataset_FilterExpression",
},
			"Name": &Reference{
	ref: "AWS::DataBrew::Dataset_PathParameterName",
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Dataset_DatetimeOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Format": &Reference{
	type_: String,
},
			"LocaleCode": &Reference{
	type_: String,
},
			"TimezoneOffset": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Dataset_ExcelOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HeaderRow": &Reference{
	type_: Boolean,
},
			"SheetIndexes": &Reference{
	type_: Array,
	items: &Reference{
	type_: Integer,
},
},
			"SheetNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::DataBrew::Dataset_FilesLimit": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxFiles": &Reference{
	type_: Integer,
},
			"Order": &Reference{
	type_: String,
},
			"OrderedBy": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Dataset_FilterExpression": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Expression": &Reference{
	type_: String,
},
			"ValuesMap": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Dataset_FilterValue",
},
},
	},
},
	"AWS::DataBrew::Dataset_FilterValue": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Value": &Reference{
	type_: String,
},
			"ValueReference": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Dataset_FormatOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Csv": &Reference{
	ref: "AWS::DataBrew::Dataset_CsvOptions",
},
			"Excel": &Reference{
	ref: "AWS::DataBrew::Dataset_ExcelOptions",
},
			"Json": &Reference{
	ref: "AWS::DataBrew::Dataset_JsonOptions",
},
	},
},
	"AWS::DataBrew::Dataset_Input": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataCatalogInputDefinition": &Reference{
	ref: "AWS::DataBrew::Dataset_DataCatalogInputDefinition",
},
			"DatabaseInputDefinition": &Reference{
	ref: "AWS::DataBrew::Dataset_DatabaseInputDefinition",
},
			"Metadata": &Reference{
	ref: "AWS::DataBrew::Dataset_Metadata",
},
			"S3InputDefinition": &Reference{
	ref: "AWS::DataBrew::Dataset_S3Location",
},
	},
},
	"AWS::DataBrew::Dataset_JsonOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MultiLine": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::DataBrew::Dataset_Metadata": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SourceArn": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Dataset_PathOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FilesLimit": &Reference{
	ref: "AWS::DataBrew::Dataset_FilesLimit",
},
			"LastModifiedDateCondition": &Reference{
	ref: "AWS::DataBrew::Dataset_FilterExpression",
},
			"Parameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Dataset_PathParameter",
},
},
	},
},
	"AWS::DataBrew::Dataset_PathParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DatasetParameter": &Reference{
	ref: "AWS::DataBrew::Dataset_DatasetParameter",
},
			"PathParameterName": &Reference{
	ref: "AWS::DataBrew::Dataset_PathParameterName",
},
	},
},
	"AWS::DataBrew::Dataset_PathParameterName": &Reference{
	type_: String,
},
	"AWS::DataBrew::Dataset_S3Location": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"Key": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Dataset_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Job_AllowedStatistics": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Statistics": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Job_Statistic",
},
},
	},
},
	"AWS::DataBrew::Job_ColumnSelector": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Regex": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Job_ColumnStatisticsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Selectors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Job_ColumnSelector",
},
},
			"Statistics": &Reference{
	ref: "AWS::DataBrew::Job_StatisticsConfiguration",
},
	},
},
	"AWS::DataBrew::Job_CsvOutputOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Delimiter": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Job_DataCatalogOutput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	type_: String,
},
			"DatabaseName": &Reference{
	type_: String,
},
			"DatabaseOptions": &Reference{
	ref: "AWS::DataBrew::Job_DatabaseTableOutputOptions",
},
			"Overwrite": &Reference{
	type_: Boolean,
},
			"S3Options": &Reference{
	ref: "AWS::DataBrew::Job_S3TableOutputOptions",
},
			"TableName": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Job_DatabaseOutput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DatabaseOptions": &Reference{
	ref: "AWS::DataBrew::Job_DatabaseTableOutputOptions",
},
			"DatabaseOutputMode": &Reference{
	type_: String,
},
			"GlueConnectionName": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Job_DatabaseTableOutputOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TableName": &Reference{
	type_: String,
},
			"TempDirectory": &Reference{
	ref: "AWS::DataBrew::Job_S3Location",
},
	},
},
	"AWS::DataBrew::Job_EntityDetectorConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllowedStatistics": &Reference{
	ref: "AWS::DataBrew::Job_AllowedStatistics",
},
			"EntityTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::DataBrew::Job_JobSample": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Mode": &Reference{
	ref: "AWS::DataBrew::Job_SampleMode",
},
			"Size": &Reference{
	ref: "AWS::DataBrew::Job_JobSize",
},
	},
},
	"AWS::DataBrew::Job_JobSize": &Reference{
	type_: Integer,
},
	"AWS::DataBrew::Job_Output": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CompressionFormat": &Reference{
	type_: String,
},
			"Format": &Reference{
	type_: String,
},
			"FormatOptions": &Reference{
	ref: "AWS::DataBrew::Job_OutputFormatOptions",
},
			"Location": &Reference{
	ref: "AWS::DataBrew::Job_S3Location",
},
			"MaxOutputFiles": &Reference{
	type_: Integer,
},
			"Overwrite": &Reference{
	type_: Boolean,
},
			"PartitionColumns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::DataBrew::Job_OutputFormatOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Csv": &Reference{
	ref: "AWS::DataBrew::Job_CsvOutputOptions",
},
	},
},
	"AWS::DataBrew::Job_OutputLocation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"BucketOwner": &Reference{
	type_: String,
},
			"Key": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Job_ParameterMap": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::DataBrew::Job_ProfileConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ColumnStatisticsConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Job_ColumnStatisticsConfiguration",
},
},
			"DatasetStatisticsConfiguration": &Reference{
	ref: "AWS::DataBrew::Job_StatisticsConfiguration",
},
			"EntityDetectorConfiguration": &Reference{
	ref: "AWS::DataBrew::Job_EntityDetectorConfiguration",
},
			"ProfileColumns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Job_ColumnSelector",
},
},
	},
},
	"AWS::DataBrew::Job_Recipe": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Job_S3Location": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"BucketOwner": &Reference{
	type_: String,
},
			"Key": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Job_S3TableOutputOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Location": &Reference{
	ref: "AWS::DataBrew::Job_S3Location",
},
	},
},
	"AWS::DataBrew::Job_SampleMode": &Reference{
	type_: String,
},
	"AWS::DataBrew::Job_Statistic": &Reference{
	type_: String,
},
	"AWS::DataBrew::Job_StatisticOverride": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Parameters": &Reference{
	ref: "AWS::DataBrew::Job_ParameterMap",
},
			"Statistic": &Reference{
	ref: "AWS::DataBrew::Job_Statistic",
},
	},
},
	"AWS::DataBrew::Job_StatisticsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IncludedStatistics": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Job_Statistic",
},
},
			"Overrides": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Job_StatisticOverride",
},
},
	},
},
	"AWS::DataBrew::Job_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Job_ValidationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RulesetArn": &Reference{
	type_: String,
},
			"ValidationMode": &Reference{
	ref: "AWS::DataBrew::Job_ValidationMode",
},
	},
},
	"AWS::DataBrew::Job_ValidationMode": &Reference{
	type_: String,
},
	"AWS::DataBrew::Project_Sample": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Size": &Reference{
	type_: Integer,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Project_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Recipe_Action": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Operation": &Reference{
	type_: String,
},
			"Parameters": &Reference{
	type_: Unknown,
},
	},
},
	"AWS::DataBrew::Recipe_ConditionExpression": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Condition": &Reference{
	type_: String,
},
			"TargetColumn": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Recipe_DataCatalogInputDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	type_: String,
},
			"DatabaseName": &Reference{
	type_: String,
},
			"TableName": &Reference{
	type_: String,
},
			"TempDirectory": &Reference{
	ref: "AWS::DataBrew::Recipe_S3Location",
},
	},
},
	"AWS::DataBrew::Recipe_ParameterMap": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::DataBrew::Recipe_RecipeParameters": &Reference{
	type_: Unknown,
},
	"AWS::DataBrew::Recipe_RecipeStep": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	ref: "AWS::DataBrew::Recipe_Action",
},
			"ConditionExpressions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Recipe_ConditionExpression",
},
},
	},
},
	"AWS::DataBrew::Recipe_S3Location": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"Key": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Recipe_SecondaryInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataCatalogInputDefinition": &Reference{
	ref: "AWS::DataBrew::Recipe_DataCatalogInputDefinition",
},
			"S3InputDefinition": &Reference{
	ref: "AWS::DataBrew::Recipe_S3Location",
},
	},
},
	"AWS::DataBrew::Recipe_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Ruleset_ColumnSelector": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Regex": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Ruleset_Disabled": &Reference{
	type_: Boolean,
},
	"AWS::DataBrew::Ruleset_Expression": &Reference{
	type_: String,
},
	"AWS::DataBrew::Ruleset_Rule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CheckExpression": &Reference{
	ref: "AWS::DataBrew::Ruleset_Expression",
},
			"ColumnSelectors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Ruleset_ColumnSelector",
},
},
			"Disabled": &Reference{
	ref: "AWS::DataBrew::Ruleset_Disabled",
},
			"Name": &Reference{
	type_: String,
},
			"SubstitutionMap": &Reference{
	ref: "AWS::DataBrew::Ruleset_ValuesMap",
},
			"Threshold": &Reference{
	ref: "AWS::DataBrew::Ruleset_Threshold",
},
	},
},
	"AWS::DataBrew::Ruleset_SubstitutionValue": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Value": &Reference{
	type_: String,
},
			"ValueReference": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Ruleset_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataBrew::Ruleset_Threshold": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	ref: "AWS::DataBrew::Ruleset_ThresholdType",
},
			"Unit": &Reference{
	ref: "AWS::DataBrew::Ruleset_ThresholdUnit",
},
			"Value": &Reference{
	ref: "AWS::DataBrew::Ruleset_ThresholdValue",
},
	},
},
	"AWS::DataBrew::Ruleset_ThresholdType": &Reference{
	type_: String,
},
	"AWS::DataBrew::Ruleset_ThresholdUnit": &Reference{
	type_: String,
},
	"AWS::DataBrew::Ruleset_ThresholdValue": &Reference{
	type_: Number,
},
	"AWS::DataBrew::Ruleset_ValuesMap": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataBrew::Ruleset_SubstitutionValue",
},
},
	"AWS::DataBrew::Schedule_JobName": &Reference{
	type_: String,
},
	"AWS::DataBrew::Schedule_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataPipeline::Pipeline_Field": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"RefValue": &Reference{
	type_: String,
},
			"StringValue": &Reference{
	type_: String,
},
	},
},
	"AWS::DataPipeline::Pipeline_ParameterAttribute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"StringValue": &Reference{
	type_: String,
},
	},
},
	"AWS::DataPipeline::Pipeline_ParameterObject": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Attributes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataPipeline::Pipeline_ParameterAttribute",
},
},
			"Id": &Reference{
	type_: String,
},
	},
},
	"AWS::DataPipeline::Pipeline_ParameterValue": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Id": &Reference{
	type_: String,
},
			"StringValue": &Reference{
	type_: String,
},
	},
},
	"AWS::DataPipeline::Pipeline_PipelineObject": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Fields": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DataPipeline::Pipeline_Field",
},
},
			"Id": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::DataPipeline::Pipeline_PipelineTag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::Agent_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::LocationEFS_Ec2Config": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecurityGroupArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SubnetArn": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::LocationEFS_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::LocationFSxLustre_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::LocationFSxONTAP_NFS": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MountOptions": &Reference{
	ref: "AWS::DataSync::LocationFSxONTAP_NfsMountOptions",
},
	},
},
	"AWS::DataSync::LocationFSxONTAP_NfsMountOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::LocationFSxONTAP_Protocol": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NFS": &Reference{
	ref: "AWS::DataSync::LocationFSxONTAP_NFS",
},
			"SMB": &Reference{
	ref: "AWS::DataSync::LocationFSxONTAP_SMB",
},
	},
},
	"AWS::DataSync::LocationFSxONTAP_SMB": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Domain": &Reference{
	type_: String,
},
			"MountOptions": &Reference{
	ref: "AWS::DataSync::LocationFSxONTAP_SmbMountOptions",
},
			"Password": &Reference{
	type_: String,
},
			"User": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::LocationFSxONTAP_SmbMountOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::LocationFSxONTAP_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::LocationFSxOpenZFS_MountOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::LocationFSxOpenZFS_NFS": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MountOptions": &Reference{
	ref: "AWS::DataSync::LocationFSxOpenZFS_MountOptions",
},
	},
},
	"AWS::DataSync::LocationFSxOpenZFS_Protocol": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NFS": &Reference{
	ref: "AWS::DataSync::LocationFSxOpenZFS_NFS",
},
	},
},
	"AWS::DataSync::LocationFSxOpenZFS_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::LocationFSxWindows_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::LocationHDFS_NameNode": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Hostname": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Integer,
},
	},
},
	"AWS::DataSync::LocationHDFS_QopConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataTransferProtection": &Reference{
	type_: String,
},
			"RpcProtection": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::LocationHDFS_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::LocationNFS_MountOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::LocationNFS_OnPremConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AgentArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::DataSync::LocationNFS_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::LocationObjectStorage_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::LocationS3_S3Config": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketAccessRoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::LocationS3_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::LocationSMB_MountOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::LocationSMB_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::Task_DestinationNetworkInterfaceArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	"AWS::DataSync::Task_FilterRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FilterType": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::Task_Options": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Atime": &Reference{
	type_: String,
},
			"BytesPerSecond": &Reference{
	type_: Integer,
},
			"Gid": &Reference{
	type_: String,
},
			"LogLevel": &Reference{
	type_: String,
},
			"Mtime": &Reference{
	type_: String,
},
			"ObjectTags": &Reference{
	type_: String,
},
			"OverwriteMode": &Reference{
	type_: String,
},
			"PosixPermissions": &Reference{
	type_: String,
},
			"PreserveDeletedFiles": &Reference{
	type_: String,
},
			"PreserveDevices": &Reference{
	type_: String,
},
			"SecurityDescriptorCopyFlags": &Reference{
	type_: String,
},
			"TaskQueueing": &Reference{
	type_: String,
},
			"TransferMode": &Reference{
	type_: String,
},
			"Uid": &Reference{
	type_: String,
},
			"VerifyMode": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::Task_SourceNetworkInterfaceArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	"AWS::DataSync::Task_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DataSync::Task_TaskSchedule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ScheduleExpression": &Reference{
	type_: String,
},
	},
},
	"AWS::Detective::Graph_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DevOpsGuru::NotificationChannel_NotificationChannelConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Sns": &Reference{
	ref: "AWS::DevOpsGuru::NotificationChannel_SnsChannelConfig",
},
	},
},
	"AWS::DevOpsGuru::NotificationChannel_SnsChannelConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TopicArn": &Reference{
	type_: String,
},
	},
},
	"AWS::DevOpsGuru::ResourceCollection_CloudFormationCollectionFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"StackNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::DevOpsGuru::ResourceCollection_ResourceCollectionFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudFormation": &Reference{
	ref: "AWS::DevOpsGuru::ResourceCollection_CloudFormationCollectionFilter",
},
			"Tags": &Reference{
	ref: "AWS::DevOpsGuru::ResourceCollection_TagCollections",
},
	},
},
	"AWS::DevOpsGuru::ResourceCollection_TagCollection": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AppBoundaryKey": &Reference{
	type_: String,
},
			"TagValues": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::DevOpsGuru::ResourceCollection_TagCollections": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DevOpsGuru::ResourceCollection_TagCollection",
},
},
	"AWS::DirectoryService::MicrosoftAD_VpcSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"VpcId": &Reference{
	type_: String,
},
	},
},
	"AWS::DirectoryService::SimpleAD_VpcSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"VpcId": &Reference{
	type_: String,
},
	},
},
	"AWS::DocDB::DBCluster_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DocDB::DBClusterParameterGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DocDB::DBInstance_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DocDB::DBSubnetGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DynamoDB::GlobalTable_AttributeDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AttributeName": &Reference{
	type_: String,
},
			"AttributeType": &Reference{
	type_: String,
},
	},
},
	"AWS::DynamoDB::GlobalTable_CapacityAutoScalingSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxCapacity": &Reference{
	type_: Integer,
},
			"MinCapacity": &Reference{
	type_: Integer,
},
			"SeedCapacity": &Reference{
	type_: Integer,
},
			"TargetTrackingScalingPolicyConfiguration": &Reference{
	ref: "AWS::DynamoDB::GlobalTable_TargetTrackingScalingPolicyConfiguration",
},
	},
},
	"AWS::DynamoDB::GlobalTable_ContributorInsightsSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::DynamoDB::GlobalTable_GlobalSecondaryIndex": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IndexName": &Reference{
	type_: String,
},
			"KeySchema": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DynamoDB::GlobalTable_KeySchema",
},
},
			"Projection": &Reference{
	ref: "AWS::DynamoDB::GlobalTable_Projection",
},
			"WriteProvisionedThroughputSettings": &Reference{
	ref: "AWS::DynamoDB::GlobalTable_WriteProvisionedThroughputSettings",
},
	},
},
	"AWS::DynamoDB::GlobalTable_KeySchema": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AttributeName": &Reference{
	type_: String,
},
			"KeyType": &Reference{
	type_: String,
},
	},
},
	"AWS::DynamoDB::GlobalTable_LocalSecondaryIndex": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IndexName": &Reference{
	type_: String,
},
			"KeySchema": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DynamoDB::GlobalTable_KeySchema",
},
},
			"Projection": &Reference{
	ref: "AWS::DynamoDB::GlobalTable_Projection",
},
	},
},
	"AWS::DynamoDB::GlobalTable_PointInTimeRecoverySpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PointInTimeRecoveryEnabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::DynamoDB::GlobalTable_Projection": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NonKeyAttributes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ProjectionType": &Reference{
	type_: String,
},
	},
},
	"AWS::DynamoDB::GlobalTable_ReadProvisionedThroughputSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ReadCapacityAutoScalingSettings": &Reference{
	ref: "AWS::DynamoDB::GlobalTable_CapacityAutoScalingSettings",
},
			"ReadCapacityUnits": &Reference{
	type_: Integer,
},
	},
},
	"AWS::DynamoDB::GlobalTable_ReplicaGlobalSecondaryIndexSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContributorInsightsSpecification": &Reference{
	ref: "AWS::DynamoDB::GlobalTable_ContributorInsightsSpecification",
},
			"IndexName": &Reference{
	type_: String,
},
			"ReadProvisionedThroughputSettings": &Reference{
	ref: "AWS::DynamoDB::GlobalTable_ReadProvisionedThroughputSettings",
},
	},
},
	"AWS::DynamoDB::GlobalTable_ReplicaSSESpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KMSMasterKeyId": &Reference{
	type_: String,
},
	},
},
	"AWS::DynamoDB::GlobalTable_ReplicaSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContributorInsightsSpecification": &Reference{
	ref: "AWS::DynamoDB::GlobalTable_ContributorInsightsSpecification",
},
			"GlobalSecondaryIndexes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DynamoDB::GlobalTable_ReplicaGlobalSecondaryIndexSpecification",
},
},
			"PointInTimeRecoverySpecification": &Reference{
	ref: "AWS::DynamoDB::GlobalTable_PointInTimeRecoverySpecification",
},
			"ReadProvisionedThroughputSettings": &Reference{
	ref: "AWS::DynamoDB::GlobalTable_ReadProvisionedThroughputSettings",
},
			"Region": &Reference{
	type_: String,
},
			"SSESpecification": &Reference{
	ref: "AWS::DynamoDB::GlobalTable_ReplicaSSESpecification",
},
			"TableClass": &Reference{
	type_: String,
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DynamoDB::GlobalTable_Tag",
},
},
	},
},
	"AWS::DynamoDB::GlobalTable_SSESpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SSEEnabled": &Reference{
	type_: Boolean,
},
			"SSEType": &Reference{
	type_: String,
},
	},
},
	"AWS::DynamoDB::GlobalTable_StreamSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"StreamViewType": &Reference{
	type_: String,
},
	},
},
	"AWS::DynamoDB::GlobalTable_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DynamoDB::GlobalTable_TargetTrackingScalingPolicyConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DisableScaleIn": &Reference{
	type_: Boolean,
},
			"ScaleInCooldown": &Reference{
	type_: Integer,
},
			"ScaleOutCooldown": &Reference{
	type_: Integer,
},
			"TargetValue": &Reference{
	type_: Number,
},
	},
},
	"AWS::DynamoDB::GlobalTable_TimeToLiveSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AttributeName": &Reference{
	type_: String,
},
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::DynamoDB::GlobalTable_WriteProvisionedThroughputSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"WriteCapacityAutoScalingSettings": &Reference{
	ref: "AWS::DynamoDB::GlobalTable_CapacityAutoScalingSettings",
},
	},
},
	"AWS::DynamoDB::Table_AttributeDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AttributeName": &Reference{
	type_: String,
},
			"AttributeType": &Reference{
	type_: String,
},
	},
},
	"AWS::DynamoDB::Table_ContributorInsightsSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::DynamoDB::Table_GlobalSecondaryIndex": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContributorInsightsSpecification": &Reference{
	ref: "AWS::DynamoDB::Table_ContributorInsightsSpecification",
},
			"IndexName": &Reference{
	type_: String,
},
			"KeySchema": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DynamoDB::Table_KeySchema",
},
},
			"Projection": &Reference{
	ref: "AWS::DynamoDB::Table_Projection",
},
			"ProvisionedThroughput": &Reference{
	ref: "AWS::DynamoDB::Table_ProvisionedThroughput",
},
	},
},
	"AWS::DynamoDB::Table_KeySchema": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AttributeName": &Reference{
	type_: String,
},
			"KeyType": &Reference{
	type_: String,
},
	},
},
	"AWS::DynamoDB::Table_KinesisStreamSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"StreamArn": &Reference{
	type_: String,
},
	},
},
	"AWS::DynamoDB::Table_LocalSecondaryIndex": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IndexName": &Reference{
	type_: String,
},
			"KeySchema": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::DynamoDB::Table_KeySchema",
},
},
			"Projection": &Reference{
	ref: "AWS::DynamoDB::Table_Projection",
},
	},
},
	"AWS::DynamoDB::Table_PointInTimeRecoverySpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PointInTimeRecoveryEnabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::DynamoDB::Table_Projection": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NonKeyAttributes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ProjectionType": &Reference{
	type_: String,
},
	},
},
	"AWS::DynamoDB::Table_ProvisionedThroughput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ReadCapacityUnits": &Reference{
	type_: Integer,
},
			"WriteCapacityUnits": &Reference{
	type_: Integer,
},
	},
},
	"AWS::DynamoDB::Table_SSESpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KMSMasterKeyId": &Reference{
	type_: String,
},
			"SSEEnabled": &Reference{
	type_: Boolean,
},
			"SSEType": &Reference{
	type_: String,
},
	},
},
	"AWS::DynamoDB::Table_StreamSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"StreamViewType": &Reference{
	type_: String,
},
	},
},
	"AWS::DynamoDB::Table_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::DynamoDB::Table_TimeToLiveSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AttributeName": &Reference{
	type_: String,
},
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::EC2::CapacityReservation_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::CapacityReservation_TagSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceType": &Reference{
	type_: String,
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::CapacityReservation_Tag",
},
},
	},
},
	"AWS::EC2::CapacityReservationFleet_InstanceTypeSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AvailabilityZone": &Reference{
	type_: String,
},
			"AvailabilityZoneId": &Reference{
	type_: String,
},
			"EbsOptimized": &Reference{
	type_: Boolean,
},
			"InstancePlatform": &Reference{
	type_: String,
},
			"InstanceType": &Reference{
	type_: String,
},
			"Priority": &Reference{
	type_: Integer,
},
			"Weight": &Reference{
	type_: Number,
},
	},
},
	"AWS::EC2::CapacityReservationFleet_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::CapacityReservationFleet_TagSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceType": &Reference{
	type_: String,
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::CapacityReservationFleet_Tag",
},
},
	},
},
	"AWS::EC2::CarrierGateway_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::CarrierGateway_Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::CarrierGateway_Tag",
},
},
	"AWS::EC2::ClientVpnEndpoint_CertificateAuthenticationRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClientRootCertificateChainArn": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::ClientVpnEndpoint_ClientAuthenticationRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ActiveDirectory": &Reference{
	ref: "AWS::EC2::ClientVpnEndpoint_DirectoryServiceAuthenticationRequest",
},
			"FederatedAuthentication": &Reference{
	ref: "AWS::EC2::ClientVpnEndpoint_FederatedAuthenticationRequest",
},
			"MutualAuthentication": &Reference{
	ref: "AWS::EC2::ClientVpnEndpoint_CertificateAuthenticationRequest",
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::ClientVpnEndpoint_ClientConnectOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
			"LambdaFunctionArn": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::ClientVpnEndpoint_ClientLoginBannerOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BannerText": &Reference{
	type_: String,
},
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::EC2::ClientVpnEndpoint_ConnectionLogOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudwatchLogGroup": &Reference{
	type_: String,
},
			"CloudwatchLogStream": &Reference{
	type_: String,
},
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::EC2::ClientVpnEndpoint_DirectoryServiceAuthenticationRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DirectoryId": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::ClientVpnEndpoint_FederatedAuthenticationRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SAMLProviderArn": &Reference{
	type_: String,
},
			"SelfServiceSAMLProviderArn": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::ClientVpnEndpoint_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::ClientVpnEndpoint_TagSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceType": &Reference{
	type_: String,
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::ClientVpnEndpoint_Tag",
},
},
	},
},
	"AWS::EC2::CustomerGateway_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::DHCPOptions_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::EC2Fleet_AcceleratorCountRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::EC2Fleet_AcceleratorTotalMemoryMiBRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::EC2Fleet_BaselineEbsBandwidthMbpsRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::EC2Fleet_CapacityRebalance": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ReplacementStrategy": &Reference{
	type_: String,
},
			"TerminationDelay": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::EC2Fleet_CapacityReservationOptionsRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"UsageStrategy": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::EC2Fleet_FleetLaunchTemplateConfigRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LaunchTemplateSpecification": &Reference{
	ref: "AWS::EC2::EC2Fleet_FleetLaunchTemplateSpecificationRequest",
},
			"Overrides": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::EC2Fleet_FleetLaunchTemplateOverridesRequest",
},
},
	},
},
	"AWS::EC2::EC2Fleet_FleetLaunchTemplateOverridesRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AvailabilityZone": &Reference{
	type_: String,
},
			"InstanceRequirements": &Reference{
	ref: "AWS::EC2::EC2Fleet_InstanceRequirementsRequest",
},
			"InstanceType": &Reference{
	type_: String,
},
			"MaxPrice": &Reference{
	type_: String,
},
			"Placement": &Reference{
	ref: "AWS::EC2::EC2Fleet_Placement",
},
			"Priority": &Reference{
	type_: Number,
},
			"SubnetId": &Reference{
	type_: String,
},
			"WeightedCapacity": &Reference{
	type_: Number,
},
	},
},
	"AWS::EC2::EC2Fleet_FleetLaunchTemplateSpecificationRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LaunchTemplateId": &Reference{
	type_: String,
},
			"LaunchTemplateName": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::EC2Fleet_InstanceRequirementsRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AcceleratorCount": &Reference{
	ref: "AWS::EC2::EC2Fleet_AcceleratorCountRequest",
},
			"AcceleratorManufacturers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"AcceleratorNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"AcceleratorTotalMemoryMiB": &Reference{
	ref: "AWS::EC2::EC2Fleet_AcceleratorTotalMemoryMiBRequest",
},
			"AcceleratorTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"BareMetal": &Reference{
	type_: String,
},
			"BaselineEbsBandwidthMbps": &Reference{
	ref: "AWS::EC2::EC2Fleet_BaselineEbsBandwidthMbpsRequest",
},
			"BurstablePerformance": &Reference{
	type_: String,
},
			"CpuManufacturers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ExcludedInstanceTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"InstanceGenerations": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"LocalStorage": &Reference{
	type_: String,
},
			"LocalStorageTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"MemoryGiBPerVCpu": &Reference{
	ref: "AWS::EC2::EC2Fleet_MemoryGiBPerVCpuRequest",
},
			"MemoryMiB": &Reference{
	ref: "AWS::EC2::EC2Fleet_MemoryMiBRequest",
},
			"NetworkInterfaceCount": &Reference{
	ref: "AWS::EC2::EC2Fleet_NetworkInterfaceCountRequest",
},
			"OnDemandMaxPricePercentageOverLowestPrice": &Reference{
	type_: Integer,
},
			"RequireHibernateSupport": &Reference{
	type_: Boolean,
},
			"SpotMaxPricePercentageOverLowestPrice": &Reference{
	type_: Integer,
},
			"TotalLocalStorageGB": &Reference{
	ref: "AWS::EC2::EC2Fleet_TotalLocalStorageGBRequest",
},
			"VCpuCount": &Reference{
	ref: "AWS::EC2::EC2Fleet_VCpuCountRangeRequest",
},
	},
},
	"AWS::EC2::EC2Fleet_MaintenanceStrategies": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CapacityRebalance": &Reference{
	ref: "AWS::EC2::EC2Fleet_CapacityRebalance",
},
	},
},
	"AWS::EC2::EC2Fleet_MemoryGiBPerVCpuRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Number,
},
			"Min": &Reference{
	type_: Number,
},
	},
},
	"AWS::EC2::EC2Fleet_MemoryMiBRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::EC2Fleet_NetworkInterfaceCountRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::EC2Fleet_OnDemandOptionsRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllocationStrategy": &Reference{
	type_: String,
},
			"CapacityReservationOptions": &Reference{
	ref: "AWS::EC2::EC2Fleet_CapacityReservationOptionsRequest",
},
			"MaxTotalPrice": &Reference{
	type_: String,
},
			"MinTargetCapacity": &Reference{
	type_: Integer,
},
			"SingleAvailabilityZone": &Reference{
	type_: Boolean,
},
			"SingleInstanceType": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::EC2::EC2Fleet_Placement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Affinity": &Reference{
	type_: String,
},
			"AvailabilityZone": &Reference{
	type_: String,
},
			"GroupName": &Reference{
	type_: String,
},
			"HostId": &Reference{
	type_: String,
},
			"HostResourceGroupArn": &Reference{
	type_: String,
},
			"PartitionNumber": &Reference{
	type_: Integer,
},
			"SpreadDomain": &Reference{
	type_: String,
},
			"Tenancy": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::EC2Fleet_SpotOptionsRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllocationStrategy": &Reference{
	type_: String,
},
			"InstanceInterruptionBehavior": &Reference{
	type_: String,
},
			"InstancePoolsToUseCount": &Reference{
	type_: Integer,
},
			"MaintenanceStrategies": &Reference{
	ref: "AWS::EC2::EC2Fleet_MaintenanceStrategies",
},
			"MaxTotalPrice": &Reference{
	type_: String,
},
			"MinTargetCapacity": &Reference{
	type_: Integer,
},
			"SingleAvailabilityZone": &Reference{
	type_: Boolean,
},
			"SingleInstanceType": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::EC2::EC2Fleet_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::EC2Fleet_TagSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceType": &Reference{
	type_: String,
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::EC2Fleet_Tag",
},
},
	},
},
	"AWS::EC2::EC2Fleet_TargetCapacitySpecificationRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DefaultTargetCapacityType": &Reference{
	type_: String,
},
			"OnDemandTargetCapacity": &Reference{
	type_: Integer,
},
			"SpotTargetCapacity": &Reference{
	type_: Integer,
},
			"TargetCapacityUnitType": &Reference{
	type_: String,
},
			"TotalTargetCapacity": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::EC2Fleet_TotalLocalStorageGBRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Number,
},
			"Min": &Reference{
	type_: Number,
},
	},
},
	"AWS::EC2::EC2Fleet_VCpuCountRangeRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::EIP_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::FlowLog_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::IPAM_IpamOperatingRegion": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RegionName": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::IPAM_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::IPAMAllocation_Cidr": &Reference{
	type_: String,
},
	"AWS::EC2::IPAMPool_Cidr": &Reference{
	type_: String,
},
	"AWS::EC2::IPAMPool_ProvisionedCidr": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Cidr": &Reference{
	ref: "AWS::EC2::IPAMPool_Cidr",
},
	},
},
	"AWS::EC2::IPAMPool_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::IPAMScope_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::Instance_AssociationParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::EC2::Instance_BlockDeviceMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeviceName": &Reference{
	type_: String,
},
			"Ebs": &Reference{
	ref: "AWS::EC2::Instance_Ebs",
},
			"NoDevice": &Reference{
	ref: "AWS::EC2::Instance_NoDevice",
},
			"VirtualName": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::Instance_CpuOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CoreCount": &Reference{
	type_: Integer,
},
			"ThreadsPerCore": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::Instance_CreditSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CPUCredits": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::Instance_Ebs": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeleteOnTermination": &Reference{
	type_: Boolean,
},
			"Encrypted": &Reference{
	type_: Boolean,
},
			"Iops": &Reference{
	type_: Integer,
},
			"KmsKeyId": &Reference{
	type_: String,
},
			"SnapshotId": &Reference{
	type_: String,
},
			"VolumeSize": &Reference{
	type_: Integer,
},
			"VolumeType": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::Instance_ElasticGpuSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::Instance_ElasticInferenceAccelerator": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Count": &Reference{
	type_: Integer,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::Instance_EnclaveOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::EC2::Instance_HibernationOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Configured": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::EC2::Instance_InstanceIpv6Address": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Ipv6Address": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::Instance_LaunchTemplateSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LaunchTemplateId": &Reference{
	type_: String,
},
			"LaunchTemplateName": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::Instance_LicenseSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LicenseConfigurationArn": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::Instance_NetworkInterface": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AssociateCarrierIpAddress": &Reference{
	type_: Boolean,
},
			"AssociatePublicIpAddress": &Reference{
	type_: Boolean,
},
			"DeleteOnTermination": &Reference{
	type_: Boolean,
},
			"Description": &Reference{
	type_: String,
},
			"DeviceIndex": &Reference{
	type_: String,
},
			"GroupSet": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Ipv6AddressCount": &Reference{
	type_: Integer,
},
			"Ipv6Addresses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::Instance_InstanceIpv6Address",
},
},
			"NetworkInterfaceId": &Reference{
	type_: String,
},
			"PrivateIpAddress": &Reference{
	type_: String,
},
			"PrivateIpAddresses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::Instance_PrivateIpAddressSpecification",
},
},
			"SecondaryPrivateIpAddressCount": &Reference{
	type_: Integer,
},
			"SubnetId": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::Instance_NoDevice": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::EC2::Instance_PrivateDnsNameOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EnableResourceNameDnsAAAARecord": &Reference{
	type_: Boolean,
},
			"EnableResourceNameDnsARecord": &Reference{
	type_: Boolean,
},
			"HostnameType": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::Instance_PrivateIpAddressSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Primary": &Reference{
	type_: Boolean,
},
			"PrivateIpAddress": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::Instance_SsmAssociation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AssociationParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::Instance_AssociationParameter",
},
},
			"DocumentName": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::Instance_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::Instance_Volume": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Device": &Reference{
	type_: String,
},
			"VolumeId": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::InternetGateway_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::KeyPair_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_AcceleratorCount": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::LaunchTemplate_AcceleratorTotalMemoryMiB": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::LaunchTemplate_BaselineEbsBandwidthMbps": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::LaunchTemplate_BlockDeviceMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeviceName": &Reference{
	type_: String,
},
			"Ebs": &Reference{
	ref: "AWS::EC2::LaunchTemplate_Ebs",
},
			"NoDevice": &Reference{
	type_: String,
},
			"VirtualName": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_CapacityReservationSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CapacityReservationPreference": &Reference{
	type_: String,
},
			"CapacityReservationTarget": &Reference{
	ref: "AWS::EC2::LaunchTemplate_CapacityReservationTarget",
},
	},
},
	"AWS::EC2::LaunchTemplate_CapacityReservationTarget": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CapacityReservationId": &Reference{
	type_: String,
},
			"CapacityReservationResourceGroupArn": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_CpuOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CoreCount": &Reference{
	type_: Integer,
},
			"ThreadsPerCore": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::LaunchTemplate_CreditSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CpuCredits": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_Ebs": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeleteOnTermination": &Reference{
	type_: Boolean,
},
			"Encrypted": &Reference{
	type_: Boolean,
},
			"Iops": &Reference{
	type_: Integer,
},
			"KmsKeyId": &Reference{
	type_: String,
},
			"SnapshotId": &Reference{
	type_: String,
},
			"Throughput": &Reference{
	type_: Integer,
},
			"VolumeSize": &Reference{
	type_: Integer,
},
			"VolumeType": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_ElasticGpuSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_EnclaveOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::EC2::LaunchTemplate_HibernationOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Configured": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::EC2::LaunchTemplate_IamInstanceProfile": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_InstanceMarketOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MarketType": &Reference{
	type_: String,
},
			"SpotOptions": &Reference{
	ref: "AWS::EC2::LaunchTemplate_SpotOptions",
},
	},
},
	"AWS::EC2::LaunchTemplate_InstanceRequirements": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AcceleratorCount": &Reference{
	ref: "AWS::EC2::LaunchTemplate_AcceleratorCount",
},
			"AcceleratorManufacturers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"AcceleratorNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"AcceleratorTotalMemoryMiB": &Reference{
	ref: "AWS::EC2::LaunchTemplate_AcceleratorTotalMemoryMiB",
},
			"AcceleratorTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"BareMetal": &Reference{
	type_: String,
},
			"BaselineEbsBandwidthMbps": &Reference{
	ref: "AWS::EC2::LaunchTemplate_BaselineEbsBandwidthMbps",
},
			"BurstablePerformance": &Reference{
	type_: String,
},
			"CpuManufacturers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ExcludedInstanceTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"InstanceGenerations": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"LocalStorage": &Reference{
	type_: String,
},
			"LocalStorageTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"MemoryGiBPerVCpu": &Reference{
	ref: "AWS::EC2::LaunchTemplate_MemoryGiBPerVCpu",
},
			"MemoryMiB": &Reference{
	ref: "AWS::EC2::LaunchTemplate_MemoryMiB",
},
			"NetworkInterfaceCount": &Reference{
	ref: "AWS::EC2::LaunchTemplate_NetworkInterfaceCount",
},
			"OnDemandMaxPricePercentageOverLowestPrice": &Reference{
	type_: Integer,
},
			"RequireHibernateSupport": &Reference{
	type_: Boolean,
},
			"SpotMaxPricePercentageOverLowestPrice": &Reference{
	type_: Integer,
},
			"TotalLocalStorageGB": &Reference{
	ref: "AWS::EC2::LaunchTemplate_TotalLocalStorageGB",
},
			"VCpuCount": &Reference{
	ref: "AWS::EC2::LaunchTemplate_VCpuCount",
},
	},
},
	"AWS::EC2::LaunchTemplate_Ipv4PrefixSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Ipv4Prefix": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_Ipv6Add": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Ipv6Address": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_Ipv6PrefixSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Ipv6Prefix": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_LaunchTemplateData": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BlockDeviceMappings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::LaunchTemplate_BlockDeviceMapping",
},
},
			"CapacityReservationSpecification": &Reference{
	ref: "AWS::EC2::LaunchTemplate_CapacityReservationSpecification",
},
			"CpuOptions": &Reference{
	ref: "AWS::EC2::LaunchTemplate_CpuOptions",
},
			"CreditSpecification": &Reference{
	ref: "AWS::EC2::LaunchTemplate_CreditSpecification",
},
			"DisableApiStop": &Reference{
	type_: Boolean,
},
			"DisableApiTermination": &Reference{
	type_: Boolean,
},
			"EbsOptimized": &Reference{
	type_: Boolean,
},
			"ElasticGpuSpecifications": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::LaunchTemplate_ElasticGpuSpecification",
},
},
			"ElasticInferenceAccelerators": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::LaunchTemplate_LaunchTemplateElasticInferenceAccelerator",
},
},
			"EnclaveOptions": &Reference{
	ref: "AWS::EC2::LaunchTemplate_EnclaveOptions",
},
			"HibernationOptions": &Reference{
	ref: "AWS::EC2::LaunchTemplate_HibernationOptions",
},
			"IamInstanceProfile": &Reference{
	ref: "AWS::EC2::LaunchTemplate_IamInstanceProfile",
},
			"ImageId": &Reference{
	type_: String,
},
			"InstanceInitiatedShutdownBehavior": &Reference{
	type_: String,
},
			"InstanceMarketOptions": &Reference{
	ref: "AWS::EC2::LaunchTemplate_InstanceMarketOptions",
},
			"InstanceRequirements": &Reference{
	ref: "AWS::EC2::LaunchTemplate_InstanceRequirements",
},
			"InstanceType": &Reference{
	type_: String,
},
			"KernelId": &Reference{
	type_: String,
},
			"KeyName": &Reference{
	type_: String,
},
			"LicenseSpecifications": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::LaunchTemplate_LicenseSpecification",
},
},
			"MaintenanceOptions": &Reference{
	ref: "AWS::EC2::LaunchTemplate_MaintenanceOptions",
},
			"MetadataOptions": &Reference{
	ref: "AWS::EC2::LaunchTemplate_MetadataOptions",
},
			"Monitoring": &Reference{
	ref: "AWS::EC2::LaunchTemplate_Monitoring",
},
			"NetworkInterfaces": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::LaunchTemplate_NetworkInterface",
},
},
			"Placement": &Reference{
	ref: "AWS::EC2::LaunchTemplate_Placement",
},
			"PrivateDnsNameOptions": &Reference{
	ref: "AWS::EC2::LaunchTemplate_PrivateDnsNameOptions",
},
			"RamDiskId": &Reference{
	type_: String,
},
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"TagSpecifications": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::LaunchTemplate_TagSpecification",
},
},
			"UserData": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_LaunchTemplateElasticInferenceAccelerator": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Count": &Reference{
	type_: Integer,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_LaunchTemplateTagSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceType": &Reference{
	type_: String,
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::LaunchTemplate_Tag",
},
},
	},
},
	"AWS::EC2::LaunchTemplate_LicenseSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LicenseConfigurationArn": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_MaintenanceOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AutoRecovery": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_MemoryGiBPerVCpu": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Number,
},
			"Min": &Reference{
	type_: Number,
},
	},
},
	"AWS::EC2::LaunchTemplate_MemoryMiB": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::LaunchTemplate_MetadataOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HttpEndpoint": &Reference{
	type_: String,
},
			"HttpProtocolIpv6": &Reference{
	type_: String,
},
			"HttpPutResponseHopLimit": &Reference{
	type_: Integer,
},
			"HttpTokens": &Reference{
	type_: String,
},
			"InstanceMetadataTags": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_Monitoring": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::EC2::LaunchTemplate_NetworkInterface": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AssociateCarrierIpAddress": &Reference{
	type_: Boolean,
},
			"AssociatePublicIpAddress": &Reference{
	type_: Boolean,
},
			"DeleteOnTermination": &Reference{
	type_: Boolean,
},
			"Description": &Reference{
	type_: String,
},
			"DeviceIndex": &Reference{
	type_: Integer,
},
			"Groups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"InterfaceType": &Reference{
	type_: String,
},
			"Ipv4PrefixCount": &Reference{
	type_: Integer,
},
			"Ipv4Prefixes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::LaunchTemplate_Ipv4PrefixSpecification",
},
},
			"Ipv6AddressCount": &Reference{
	type_: Integer,
},
			"Ipv6Addresses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::LaunchTemplate_Ipv6Add",
},
},
			"Ipv6PrefixCount": &Reference{
	type_: Integer,
},
			"Ipv6Prefixes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::LaunchTemplate_Ipv6PrefixSpecification",
},
},
			"NetworkCardIndex": &Reference{
	type_: Integer,
},
			"NetworkInterfaceId": &Reference{
	type_: String,
},
			"PrivateIpAddress": &Reference{
	type_: String,
},
			"PrivateIpAddresses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::LaunchTemplate_PrivateIpAdd",
},
},
			"SecondaryPrivateIpAddressCount": &Reference{
	type_: Integer,
},
			"SubnetId": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_NetworkInterfaceCount": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::LaunchTemplate_Placement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Affinity": &Reference{
	type_: String,
},
			"AvailabilityZone": &Reference{
	type_: String,
},
			"GroupName": &Reference{
	type_: String,
},
			"HostId": &Reference{
	type_: String,
},
			"HostResourceGroupArn": &Reference{
	type_: String,
},
			"PartitionNumber": &Reference{
	type_: Integer,
},
			"SpreadDomain": &Reference{
	type_: String,
},
			"Tenancy": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_PrivateDnsNameOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EnableResourceNameDnsAAAARecord": &Reference{
	type_: Boolean,
},
			"EnableResourceNameDnsARecord": &Reference{
	type_: Boolean,
},
			"HostnameType": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_PrivateIpAdd": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Primary": &Reference{
	type_: Boolean,
},
			"PrivateIpAddress": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_SpotOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BlockDurationMinutes": &Reference{
	type_: Integer,
},
			"InstanceInterruptionBehavior": &Reference{
	type_: String,
},
			"MaxPrice": &Reference{
	type_: String,
},
			"SpotInstanceType": &Reference{
	type_: String,
},
			"ValidUntil": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LaunchTemplate_TagSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceType": &Reference{
	type_: String,
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::LaunchTemplate_Tag",
},
},
	},
},
	"AWS::EC2::LaunchTemplate_TotalLocalStorageGB": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Number,
},
			"Min": &Reference{
	type_: Number,
},
	},
},
	"AWS::EC2::LaunchTemplate_VCpuCount": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::LocalGatewayRouteTableVPCAssociation_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::LocalGatewayRouteTableVPCAssociation_Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::LocalGatewayRouteTableVPCAssociation_Tag",
},
},
	"AWS::EC2::NatGateway_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::NetworkAcl_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::NetworkAclEntry_Icmp": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Code": &Reference{
	type_: Integer,
},
			"Type": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::NetworkAclEntry_PortRange": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"From": &Reference{
	type_: Integer,
},
			"To": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::NetworkInsightsAccessScope_AccessScopePathRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Destination": &Reference{
	ref: "AWS::EC2::NetworkInsightsAccessScope_PathStatementRequest",
},
			"Source": &Reference{
	ref: "AWS::EC2::NetworkInsightsAccessScope_PathStatementRequest",
},
			"ThroughResources": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAccessScope_ThroughResourcesStatementRequest",
},
},
	},
},
	"AWS::EC2::NetworkInsightsAccessScope_PacketHeaderStatementRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationAddresses": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"DestinationPorts": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"DestinationPrefixLists": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Protocols": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAccessScope_Protocol",
},
},
			"SourceAddresses": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SourcePorts": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SourcePrefixLists": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::EC2::NetworkInsightsAccessScope_PathStatementRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PacketHeaderStatement": &Reference{
	ref: "AWS::EC2::NetworkInsightsAccessScope_PacketHeaderStatementRequest",
},
			"ResourceStatement": &Reference{
	ref: "AWS::EC2::NetworkInsightsAccessScope_ResourceStatementRequest",
},
	},
},
	"AWS::EC2::NetworkInsightsAccessScope_Protocol": &Reference{
	type_: String,
},
	"AWS::EC2::NetworkInsightsAccessScope_ResourceStatementRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Resources": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::EC2::NetworkInsightsAccessScope_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::NetworkInsightsAccessScope_ThroughResourcesStatementRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceStatement": &Reference{
	ref: "AWS::EC2::NetworkInsightsAccessScope_ResourceStatementRequest",
},
	},
},
	"AWS::EC2::NetworkInsightsAccessScopeAnalysis_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::NetworkInsightsAnalysis_AlternatePathHint": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComponentArn": &Reference{
	type_: String,
},
			"ComponentId": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::NetworkInsightsAnalysis_AnalysisAclRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Cidr": &Reference{
	type_: String,
},
			"Egress": &Reference{
	type_: Boolean,
},
			"PortRange": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_PortRange",
},
			"Protocol": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_Protocol",
},
			"RuleAction": &Reference{
	type_: String,
},
			"RuleNumber": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"Id": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::NetworkInsightsAnalysis_AnalysisLoadBalancerListener": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstancePort": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_Port",
},
			"LoadBalancerPort": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_Port",
},
	},
},
	"AWS::EC2::NetworkInsightsAnalysis_AnalysisLoadBalancerTarget": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Address": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_IpAddress",
},
			"AvailabilityZone": &Reference{
	type_: String,
},
			"Instance": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"Port": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_Port",
},
	},
},
	"AWS::EC2::NetworkInsightsAnalysis_AnalysisPacketHeader": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationAddresses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_IpAddress",
},
},
			"DestinationPortRanges": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_PortRange",
},
},
			"Protocol": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_Protocol",
},
			"SourceAddresses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_IpAddress",
},
},
			"SourcePortRanges": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_PortRange",
},
},
	},
},
	"AWS::EC2::NetworkInsightsAnalysis_AnalysisRouteTableRoute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NatGatewayId": &Reference{
	type_: String,
},
			"NetworkInterfaceId": &Reference{
	type_: String,
},
			"Origin": &Reference{
	type_: String,
},
			"TransitGatewayId": &Reference{
	type_: String,
},
			"VpcPeeringConnectionId": &Reference{
	type_: String,
},
			"destinationCidr": &Reference{
	type_: String,
},
			"destinationPrefixListId": &Reference{
	type_: String,
},
			"egressOnlyInternetGatewayId": &Reference{
	type_: String,
},
			"gatewayId": &Reference{
	type_: String,
},
			"instanceId": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::NetworkInsightsAnalysis_AnalysisSecurityGroupRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Cidr": &Reference{
	type_: String,
},
			"Direction": &Reference{
	type_: String,
},
			"PortRange": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_PortRange",
},
			"PrefixListId": &Reference{
	type_: String,
},
			"Protocol": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_Protocol",
},
			"SecurityGroupId": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::NetworkInsightsAnalysis_Explanation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Acl": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"AclRule": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisAclRule",
},
			"Address": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_IpAddress",
},
			"Addresses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_IpAddress",
},
},
			"AttachedTo": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"AvailabilityZones": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Cidrs": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ClassicLoadBalancerListener": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisLoadBalancerListener",
},
			"Component": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"CustomerGateway": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"Destination": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"DestinationVpc": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"Direction": &Reference{
	type_: String,
},
			"ElasticLoadBalancerListener": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"ExplanationCode": &Reference{
	type_: String,
},
			"IngressRouteTable": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"InternetGateway": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"LoadBalancerArn": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_ResourceArn",
},
			"LoadBalancerListenerPort": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_Port",
},
			"LoadBalancerTarget": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisLoadBalancerTarget",
},
			"LoadBalancerTargetGroup": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"LoadBalancerTargetGroups": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
},
			"LoadBalancerTargetPort": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_Port",
},
			"MissingComponent": &Reference{
	type_: String,
},
			"NatGateway": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"NetworkInterface": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"PacketField": &Reference{
	type_: String,
},
			"Port": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_Port",
},
			"PortRanges": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_PortRange",
},
},
			"PrefixList": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"Protocols": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_Protocol",
},
},
			"RouteTable": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"RouteTableRoute": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisRouteTableRoute",
},
			"SecurityGroup": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"SecurityGroupRule": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisSecurityGroupRule",
},
			"SecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
},
			"SourceVpc": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"State": &Reference{
	type_: String,
},
			"Subnet": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"SubnetRouteTable": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"TransitGateway": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"TransitGatewayAttachment": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"TransitGatewayRouteTable": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"TransitGatewayRouteTableRoute": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_TransitGatewayRouteTableRoute",
},
			"Vpc": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"VpcPeeringConnection": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"VpnConnection": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"VpnGateway": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"vpcEndpoint": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
	},
},
	"AWS::EC2::NetworkInsightsAnalysis_IpAddress": &Reference{
	type_: String,
},
	"AWS::EC2::NetworkInsightsAnalysis_PathComponent": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AclRule": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisAclRule",
},
			"Component": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"DestinationVpc": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"InboundHeader": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisPacketHeader",
},
			"OutboundHeader": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisPacketHeader",
},
			"RouteTableRoute": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisRouteTableRoute",
},
			"SecurityGroupRule": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisSecurityGroupRule",
},
			"SequenceNumber": &Reference{
	type_: Integer,
},
			"SourceVpc": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"Subnet": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"TransitGateway": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
			"TransitGatewayRouteTableRoute": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_TransitGatewayRouteTableRoute",
},
			"Vpc": &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_AnalysisComponent",
},
	},
},
	"AWS::EC2::NetworkInsightsAnalysis_Port": &Reference{
	type_: Integer,
},
	"AWS::EC2::NetworkInsightsAnalysis_PortRange": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"From": &Reference{
	type_: Integer,
},
			"To": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::NetworkInsightsAnalysis_Protocol": &Reference{
	type_: String,
},
	"AWS::EC2::NetworkInsightsAnalysis_ResourceArn": &Reference{
	type_: String,
},
	"AWS::EC2::NetworkInsightsAnalysis_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::NetworkInsightsAnalysis_Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsAnalysis_Tag",
},
},
	"AWS::EC2::NetworkInsightsAnalysis_TransitGatewayRouteTableRoute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AttachmentId": &Reference{
	type_: String,
},
			"DestinationCidr": &Reference{
	type_: String,
},
			"PrefixListId": &Reference{
	type_: String,
},
			"ResourceId": &Reference{
	type_: String,
},
			"ResourceType": &Reference{
	type_: String,
},
			"RouteOrigin": &Reference{
	type_: String,
},
			"State": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::NetworkInsightsPath_IpAddress": &Reference{
	type_: String,
},
	"AWS::EC2::NetworkInsightsPath_Port": &Reference{
	type_: Integer,
},
	"AWS::EC2::NetworkInsightsPath_Protocol": &Reference{
	type_: String,
},
	"AWS::EC2::NetworkInsightsPath_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::NetworkInsightsPath_Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::NetworkInsightsPath_Tag",
},
},
	"AWS::EC2::NetworkInterface_InstanceIpv6Address": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Ipv6Address": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::NetworkInterface_PrivateIpAddressSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Primary": &Reference{
	type_: Boolean,
},
			"PrivateIpAddress": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::NetworkInterface_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::PrefixList_Entry": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Cidr": &Reference{
	type_: String,
},
			"Description": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::PrefixList_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::RouteTable_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::SecurityGroup_Egress": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CidrIp": &Reference{
	type_: String,
},
			"CidrIpv6": &Reference{
	type_: String,
},
			"Description": &Reference{
	type_: String,
},
			"DestinationPrefixListId": &Reference{
	type_: String,
},
			"DestinationSecurityGroupId": &Reference{
	type_: String,
},
			"FromPort": &Reference{
	type_: Integer,
},
			"IpProtocol": &Reference{
	type_: String,
},
			"ToPort": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::SecurityGroup_Ingress": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CidrIp": &Reference{
	type_: String,
},
			"CidrIpv6": &Reference{
	type_: String,
},
			"Description": &Reference{
	type_: String,
},
			"FromPort": &Reference{
	type_: Integer,
},
			"IpProtocol": &Reference{
	type_: String,
},
			"SourcePrefixListId": &Reference{
	type_: String,
},
			"SourceSecurityGroupId": &Reference{
	type_: String,
},
			"SourceSecurityGroupName": &Reference{
	type_: String,
},
			"SourceSecurityGroupOwnerId": &Reference{
	type_: String,
},
			"ToPort": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::SecurityGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::SpotFleet_AcceleratorCountRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::SpotFleet_AcceleratorTotalMemoryMiBRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::SpotFleet_BaselineEbsBandwidthMbpsRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::SpotFleet_BlockDeviceMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeviceName": &Reference{
	type_: String,
},
			"Ebs": &Reference{
	ref: "AWS::EC2::SpotFleet_EbsBlockDevice",
},
			"NoDevice": &Reference{
	type_: String,
},
			"VirtualName": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::SpotFleet_ClassicLoadBalancer": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::SpotFleet_ClassicLoadBalancersConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClassicLoadBalancers": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::SpotFleet_ClassicLoadBalancer",
},
},
	},
},
	"AWS::EC2::SpotFleet_EbsBlockDevice": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeleteOnTermination": &Reference{
	type_: Boolean,
},
			"Encrypted": &Reference{
	type_: Boolean,
},
			"Iops": &Reference{
	type_: Integer,
},
			"SnapshotId": &Reference{
	type_: String,
},
			"VolumeSize": &Reference{
	type_: Integer,
},
			"VolumeType": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::SpotFleet_FleetLaunchTemplateSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LaunchTemplateId": &Reference{
	type_: String,
},
			"LaunchTemplateName": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::SpotFleet_GroupIdentifier": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GroupId": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::SpotFleet_IamInstanceProfileSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::SpotFleet_InstanceIpv6Address": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Ipv6Address": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::SpotFleet_InstanceNetworkInterfaceSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AssociatePublicIpAddress": &Reference{
	type_: Boolean,
},
			"DeleteOnTermination": &Reference{
	type_: Boolean,
},
			"Description": &Reference{
	type_: String,
},
			"DeviceIndex": &Reference{
	type_: Integer,
},
			"Groups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Ipv6AddressCount": &Reference{
	type_: Integer,
},
			"Ipv6Addresses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::SpotFleet_InstanceIpv6Address",
},
},
			"NetworkInterfaceId": &Reference{
	type_: String,
},
			"PrivateIpAddresses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::SpotFleet_PrivateIpAddressSpecification",
},
},
			"SecondaryPrivateIpAddressCount": &Reference{
	type_: Integer,
},
			"SubnetId": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::SpotFleet_InstanceRequirementsRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AcceleratorCount": &Reference{
	ref: "AWS::EC2::SpotFleet_AcceleratorCountRequest",
},
			"AcceleratorManufacturers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"AcceleratorNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"AcceleratorTotalMemoryMiB": &Reference{
	ref: "AWS::EC2::SpotFleet_AcceleratorTotalMemoryMiBRequest",
},
			"AcceleratorTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"BareMetal": &Reference{
	type_: String,
},
			"BaselineEbsBandwidthMbps": &Reference{
	ref: "AWS::EC2::SpotFleet_BaselineEbsBandwidthMbpsRequest",
},
			"BurstablePerformance": &Reference{
	type_: String,
},
			"CpuManufacturers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ExcludedInstanceTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"InstanceGenerations": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"LocalStorage": &Reference{
	type_: String,
},
			"LocalStorageTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"MemoryGiBPerVCpu": &Reference{
	ref: "AWS::EC2::SpotFleet_MemoryGiBPerVCpuRequest",
},
			"MemoryMiB": &Reference{
	ref: "AWS::EC2::SpotFleet_MemoryMiBRequest",
},
			"NetworkInterfaceCount": &Reference{
	ref: "AWS::EC2::SpotFleet_NetworkInterfaceCountRequest",
},
			"OnDemandMaxPricePercentageOverLowestPrice": &Reference{
	type_: Integer,
},
			"RequireHibernateSupport": &Reference{
	type_: Boolean,
},
			"SpotMaxPricePercentageOverLowestPrice": &Reference{
	type_: Integer,
},
			"TotalLocalStorageGB": &Reference{
	ref: "AWS::EC2::SpotFleet_TotalLocalStorageGBRequest",
},
			"VCpuCount": &Reference{
	ref: "AWS::EC2::SpotFleet_VCpuCountRangeRequest",
},
	},
},
	"AWS::EC2::SpotFleet_LaunchTemplateConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LaunchTemplateSpecification": &Reference{
	ref: "AWS::EC2::SpotFleet_FleetLaunchTemplateSpecification",
},
			"Overrides": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::SpotFleet_LaunchTemplateOverrides",
},
},
	},
},
	"AWS::EC2::SpotFleet_LaunchTemplateOverrides": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AvailabilityZone": &Reference{
	type_: String,
},
			"InstanceRequirements": &Reference{
	ref: "AWS::EC2::SpotFleet_InstanceRequirementsRequest",
},
			"InstanceType": &Reference{
	type_: String,
},
			"Priority": &Reference{
	type_: Number,
},
			"SpotPrice": &Reference{
	type_: String,
},
			"SubnetId": &Reference{
	type_: String,
},
			"WeightedCapacity": &Reference{
	type_: Number,
},
	},
},
	"AWS::EC2::SpotFleet_LoadBalancersConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClassicLoadBalancersConfig": &Reference{
	ref: "AWS::EC2::SpotFleet_ClassicLoadBalancersConfig",
},
			"TargetGroupsConfig": &Reference{
	ref: "AWS::EC2::SpotFleet_TargetGroupsConfig",
},
	},
},
	"AWS::EC2::SpotFleet_MemoryGiBPerVCpuRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Number,
},
			"Min": &Reference{
	type_: Number,
},
	},
},
	"AWS::EC2::SpotFleet_MemoryMiBRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::SpotFleet_NetworkInterfaceCountRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::SpotFleet_PrivateIpAddressSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Primary": &Reference{
	type_: Boolean,
},
			"PrivateIpAddress": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::SpotFleet_SpotCapacityRebalance": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ReplacementStrategy": &Reference{
	type_: String,
},
			"TerminationDelay": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::SpotFleet_SpotFleetLaunchSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BlockDeviceMappings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::SpotFleet_BlockDeviceMapping",
},
},
			"EbsOptimized": &Reference{
	type_: Boolean,
},
			"IamInstanceProfile": &Reference{
	ref: "AWS::EC2::SpotFleet_IamInstanceProfileSpecification",
},
			"ImageId": &Reference{
	type_: String,
},
			"InstanceRequirements": &Reference{
	ref: "AWS::EC2::SpotFleet_InstanceRequirementsRequest",
},
			"InstanceType": &Reference{
	type_: String,
},
			"KernelId": &Reference{
	type_: String,
},
			"KeyName": &Reference{
	type_: String,
},
			"Monitoring": &Reference{
	ref: "AWS::EC2::SpotFleet_SpotFleetMonitoring",
},
			"NetworkInterfaces": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::SpotFleet_InstanceNetworkInterfaceSpecification",
},
},
			"Placement": &Reference{
	ref: "AWS::EC2::SpotFleet_SpotPlacement",
},
			"RamdiskId": &Reference{
	type_: String,
},
			"SecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::SpotFleet_GroupIdentifier",
},
},
			"SpotPrice": &Reference{
	type_: String,
},
			"SubnetId": &Reference{
	type_: String,
},
			"TagSpecifications": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::SpotFleet_SpotFleetTagSpecification",
},
},
			"UserData": &Reference{
	type_: String,
},
			"WeightedCapacity": &Reference{
	type_: Number,
},
	},
},
	"AWS::EC2::SpotFleet_SpotFleetMonitoring": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::EC2::SpotFleet_SpotFleetRequestConfigData": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllocationStrategy": &Reference{
	type_: String,
},
			"Context": &Reference{
	type_: String,
},
			"ExcessCapacityTerminationPolicy": &Reference{
	type_: String,
},
			"IamFleetRole": &Reference{
	type_: String,
},
			"InstanceInterruptionBehavior": &Reference{
	type_: String,
},
			"InstancePoolsToUseCount": &Reference{
	type_: Integer,
},
			"LaunchSpecifications": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::SpotFleet_SpotFleetLaunchSpecification",
},
},
			"LaunchTemplateConfigs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::SpotFleet_LaunchTemplateConfig",
},
},
			"LoadBalancersConfig": &Reference{
	ref: "AWS::EC2::SpotFleet_LoadBalancersConfig",
},
			"OnDemandAllocationStrategy": &Reference{
	type_: String,
},
			"OnDemandMaxTotalPrice": &Reference{
	type_: String,
},
			"OnDemandTargetCapacity": &Reference{
	type_: Integer,
},
			"ReplaceUnhealthyInstances": &Reference{
	type_: Boolean,
},
			"SpotMaintenanceStrategies": &Reference{
	ref: "AWS::EC2::SpotFleet_SpotMaintenanceStrategies",
},
			"SpotMaxTotalPrice": &Reference{
	type_: String,
},
			"SpotPrice": &Reference{
	type_: String,
},
			"TargetCapacity": &Reference{
	type_: Integer,
},
			"TargetCapacityUnitType": &Reference{
	type_: String,
},
			"TerminateInstancesWithExpiration": &Reference{
	type_: Boolean,
},
			"Type": &Reference{
	type_: String,
},
			"ValidFrom": &Reference{
	type_: String,
},
			"ValidUntil": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::SpotFleet_SpotFleetTagSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceType": &Reference{
	type_: String,
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::SpotFleet_Tag",
},
},
	},
},
	"AWS::EC2::SpotFleet_SpotMaintenanceStrategies": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CapacityRebalance": &Reference{
	ref: "AWS::EC2::SpotFleet_SpotCapacityRebalance",
},
	},
},
	"AWS::EC2::SpotFleet_SpotPlacement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AvailabilityZone": &Reference{
	type_: String,
},
			"GroupName": &Reference{
	type_: String,
},
			"Tenancy": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::SpotFleet_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::SpotFleet_TargetGroup": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::SpotFleet_TargetGroupsConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TargetGroups": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EC2::SpotFleet_TargetGroup",
},
},
	},
},
	"AWS::EC2::SpotFleet_TotalLocalStorageGBRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Number,
},
			"Min": &Reference{
	type_: Number,
},
	},
},
	"AWS::EC2::SpotFleet_VCpuCountRangeRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Max": &Reference{
	type_: Integer,
},
			"Min": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::Subnet_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::TrafficMirrorFilter_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::TrafficMirrorFilterRule_TrafficMirrorPortRange": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FromPort": &Reference{
	type_: Integer,
},
			"ToPort": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EC2::TrafficMirrorSession_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::TrafficMirrorTarget_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::TransitGateway_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::TransitGatewayAttachment_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::TransitGatewayConnect_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::TransitGatewayConnect_TransitGatewayConnectOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Protocol": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::TransitGatewayMulticastDomain_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::TransitGatewayPeeringAttachment_PeeringAttachmentStatus": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Code": &Reference{
	type_: String,
},
			"Message": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::TransitGatewayPeeringAttachment_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::TransitGatewayRouteTable_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::TransitGatewayVpcAttachment_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::VPC_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::VPCPeeringConnection_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::VPNConnection_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::VPNConnection_VpnTunnelOptionsSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PreSharedKey": &Reference{
	type_: String,
},
			"TunnelInsideCidr": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::VPNGateway_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EC2::Volume_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ECR::PullThroughCacheRule_EcrRepositoryPrefix": &Reference{
	type_: String,
},
	"AWS::ECR::PullThroughCacheRule_PullThroughCacheRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EcrRepositoryPrefix": &Reference{
	ref: "AWS::ECR::PullThroughCacheRule_EcrRepositoryPrefix",
},
			"RegistryId": &Reference{
	ref: "AWS::ECR::PullThroughCacheRule_RegistryId",
},
			"UpstreamRegistryUrl": &Reference{
	ref: "AWS::ECR::PullThroughCacheRule_UpstreamRegistryUrl",
},
	},
},
	"AWS::ECR::PullThroughCacheRule_RegistryId": &Reference{
	type_: String,
},
	"AWS::ECR::PullThroughCacheRule_UpstreamRegistryUrl": &Reference{
	type_: String,
},
	"AWS::ECR::RegistryPolicy_RegistryId": &Reference{
	type_: String,
},
	"AWS::ECR::ReplicationConfiguration_Filter": &Reference{
	type_: String,
},
	"AWS::ECR::ReplicationConfiguration_FilterType": &Reference{
	type_: String,
},
	"AWS::ECR::ReplicationConfiguration_Region": &Reference{
	type_: String,
},
	"AWS::ECR::ReplicationConfiguration_RegistryId": &Reference{
	type_: String,
},
	"AWS::ECR::ReplicationConfiguration_ReplicationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Rules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECR::ReplicationConfiguration_ReplicationRule",
},
},
	},
},
	"AWS::ECR::ReplicationConfiguration_ReplicationDestination": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Region": &Reference{
	ref: "AWS::ECR::ReplicationConfiguration_Region",
},
			"RegistryId": &Reference{
	ref: "AWS::ECR::ReplicationConfiguration_RegistryId",
},
	},
},
	"AWS::ECR::ReplicationConfiguration_ReplicationRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Destinations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECR::ReplicationConfiguration_ReplicationDestination",
},
},
			"RepositoryFilters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECR::ReplicationConfiguration_RepositoryFilter",
},
},
	},
},
	"AWS::ECR::ReplicationConfiguration_RepositoryFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Filter": &Reference{
	ref: "AWS::ECR::ReplicationConfiguration_Filter",
},
			"FilterType": &Reference{
	ref: "AWS::ECR::ReplicationConfiguration_FilterType",
},
	},
},
	"AWS::ECR::Repository_EncryptionConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EncryptionType": &Reference{
	ref: "AWS::ECR::Repository_EncryptionType",
},
			"KmsKey": &Reference{
	ref: "AWS::ECR::Repository_KmsKey",
},
	},
},
	"AWS::ECR::Repository_EncryptionType": &Reference{
	type_: String,
},
	"AWS::ECR::Repository_ImageScanningConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ScanOnPush": &Reference{
	ref: "AWS::ECR::Repository_ScanOnPush",
},
	},
},
	"AWS::ECR::Repository_KmsKey": &Reference{
	type_: String,
},
	"AWS::ECR::Repository_LifecyclePolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LifecyclePolicyText": &Reference{
	ref: "AWS::ECR::Repository_LifecyclePolicyText",
},
			"RegistryId": &Reference{
	ref: "AWS::ECR::Repository_RegistryId",
},
	},
},
	"AWS::ECR::Repository_LifecyclePolicyText": &Reference{
	type_: String,
},
	"AWS::ECR::Repository_RegistryId": &Reference{
	type_: String,
},
	"AWS::ECR::Repository_ScanOnPush": &Reference{
	type_: Boolean,
},
	"AWS::ECR::Repository_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::CapacityProvider_AutoScalingGroupProvider": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AutoScalingGroupArn": &Reference{
	type_: String,
},
			"ManagedScaling": &Reference{
	ref: "AWS::ECS::CapacityProvider_ManagedScaling",
},
			"ManagedTerminationProtection": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::CapacityProvider_ManagedScaling": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceWarmupPeriod": &Reference{
	type_: Integer,
},
			"MaximumScalingStepSize": &Reference{
	type_: Integer,
},
			"MinimumScalingStepSize": &Reference{
	type_: Integer,
},
			"Status": &Reference{
	type_: String,
},
			"TargetCapacity": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ECS::CapacityProvider_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::Cluster_CapacityProviderStrategyItem": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Base": &Reference{
	type_: Integer,
},
			"CapacityProvider": &Reference{
	type_: String,
},
			"Weight": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ECS::Cluster_ClusterConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExecuteCommandConfiguration": &Reference{
	ref: "AWS::ECS::Cluster_ExecuteCommandConfiguration",
},
	},
},
	"AWS::ECS::Cluster_ClusterSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::Cluster_ExecuteCommandConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KmsKeyId": &Reference{
	type_: String,
},
			"LogConfiguration": &Reference{
	ref: "AWS::ECS::Cluster_ExecuteCommandLogConfiguration",
},
			"Logging": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::Cluster_ExecuteCommandLogConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchEncryptionEnabled": &Reference{
	type_: Boolean,
},
			"CloudWatchLogGroupName": &Reference{
	type_: String,
},
			"S3BucketName": &Reference{
	type_: String,
},
			"S3EncryptionEnabled": &Reference{
	type_: Boolean,
},
			"S3KeyPrefix": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::Cluster_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::ClusterCapacityProviderAssociations_CapacityProvider": &Reference{
	type_: String,
},
	"AWS::ECS::ClusterCapacityProviderAssociations_CapacityProviderStrategy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Base": &Reference{
	type_: Integer,
},
			"CapacityProvider": &Reference{
	ref: "AWS::ECS::ClusterCapacityProviderAssociations_CapacityProvider",
},
			"Weight": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ECS::ClusterCapacityProviderAssociations_CapacityProviders": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::ClusterCapacityProviderAssociations_CapacityProvider",
},
},
	"AWS::ECS::ClusterCapacityProviderAssociations_Cluster": &Reference{
	type_: String,
},
	"AWS::ECS::ClusterCapacityProviderAssociations_DefaultCapacityProviderStrategy": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::ClusterCapacityProviderAssociations_CapacityProviderStrategy",
},
},
	"AWS::ECS::Service_AwsVpcConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AssignPublicIp": &Reference{
	type_: String,
},
			"SecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Subnets": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::ECS::Service_CapacityProviderStrategyItem": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Base": &Reference{
	type_: Integer,
},
			"CapacityProvider": &Reference{
	type_: String,
},
			"Weight": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ECS::Service_DeploymentCircuitBreaker": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enable": &Reference{
	type_: Boolean,
},
			"Rollback": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::ECS::Service_DeploymentConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeploymentCircuitBreaker": &Reference{
	ref: "AWS::ECS::Service_DeploymentCircuitBreaker",
},
			"MaximumPercent": &Reference{
	type_: Integer,
},
			"MinimumHealthyPercent": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ECS::Service_DeploymentController": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::Service_LoadBalancer": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerName": &Reference{
	type_: String,
},
			"ContainerPort": &Reference{
	type_: Integer,
},
			"LoadBalancerName": &Reference{
	type_: String,
},
			"TargetGroupArn": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::Service_NetworkConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AwsvpcConfiguration": &Reference{
	ref: "AWS::ECS::Service_AwsVpcConfiguration",
},
	},
},
	"AWS::ECS::Service_PlacementConstraint": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Expression": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::Service_PlacementStrategy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Field": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::Service_ServiceRegistry": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerName": &Reference{
	type_: String,
},
			"ContainerPort": &Reference{
	type_: Integer,
},
			"Port": &Reference{
	type_: Integer,
},
			"RegistryArn": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::Service_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_AuthorizationConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessPointId": &Reference{
	type_: String,
},
			"IAM": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_ContainerDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Command": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Cpu": &Reference{
	type_: Integer,
},
			"DependsOn": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskDefinition_ContainerDependency",
},
},
			"DisableNetworking": &Reference{
	type_: Boolean,
},
			"DnsSearchDomains": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"DnsServers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"DockerLabels": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"DockerSecurityOptions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"EntryPoint": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Environment": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskDefinition_KeyValuePair",
},
},
			"EnvironmentFiles": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskDefinition_EnvironmentFile",
},
},
			"Essential": &Reference{
	type_: Boolean,
},
			"ExtraHosts": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskDefinition_HostEntry",
},
},
			"FirelensConfiguration": &Reference{
	ref: "AWS::ECS::TaskDefinition_FirelensConfiguration",
},
			"HealthCheck": &Reference{
	ref: "AWS::ECS::TaskDefinition_HealthCheck",
},
			"Hostname": &Reference{
	type_: String,
},
			"Image": &Reference{
	type_: String,
},
			"Interactive": &Reference{
	type_: Boolean,
},
			"Links": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"LinuxParameters": &Reference{
	ref: "AWS::ECS::TaskDefinition_LinuxParameters",
},
			"LogConfiguration": &Reference{
	ref: "AWS::ECS::TaskDefinition_LogConfiguration",
},
			"Memory": &Reference{
	type_: Integer,
},
			"MemoryReservation": &Reference{
	type_: Integer,
},
			"MountPoints": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskDefinition_MountPoint",
},
},
			"Name": &Reference{
	type_: String,
},
			"PortMappings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskDefinition_PortMapping",
},
},
			"Privileged": &Reference{
	type_: Boolean,
},
			"PseudoTerminal": &Reference{
	type_: Boolean,
},
			"ReadonlyRootFilesystem": &Reference{
	type_: Boolean,
},
			"RepositoryCredentials": &Reference{
	ref: "AWS::ECS::TaskDefinition_RepositoryCredentials",
},
			"ResourceRequirements": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskDefinition_ResourceRequirement",
},
},
			"Secrets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskDefinition_Secret",
},
},
			"StartTimeout": &Reference{
	type_: Integer,
},
			"StopTimeout": &Reference{
	type_: Integer,
},
			"SystemControls": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskDefinition_SystemControl",
},
},
			"Ulimits": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskDefinition_Ulimit",
},
},
			"User": &Reference{
	type_: String,
},
			"VolumesFrom": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskDefinition_VolumeFrom",
},
},
			"WorkingDirectory": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_ContainerDependency": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Condition": &Reference{
	type_: String,
},
			"ContainerName": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_Device": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerPath": &Reference{
	type_: String,
},
			"HostPath": &Reference{
	type_: String,
},
			"Permissions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::ECS::TaskDefinition_DockerVolumeConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Autoprovision": &Reference{
	type_: Boolean,
},
			"Driver": &Reference{
	type_: String,
},
			"DriverOpts": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Labels": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Scope": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_EFSVolumeConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthorizationConfig": &Reference{
	ref: "AWS::ECS::TaskDefinition_AuthorizationConfig",
},
			"FilesystemId": &Reference{
	type_: String,
},
			"RootDirectory": &Reference{
	type_: String,
},
			"TransitEncryption": &Reference{
	type_: String,
},
			"TransitEncryptionPort": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ECS::TaskDefinition_EnvironmentFile": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_EphemeralStorage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SizeInGiB": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ECS::TaskDefinition_FirelensConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Options": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_HealthCheck": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Command": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Interval": &Reference{
	type_: Integer,
},
			"Retries": &Reference{
	type_: Integer,
},
			"StartPeriod": &Reference{
	type_: Integer,
},
			"Timeout": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ECS::TaskDefinition_HostEntry": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Hostname": &Reference{
	type_: String,
},
			"IpAddress": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_HostVolumeProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SourcePath": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_InferenceAccelerator": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeviceName": &Reference{
	type_: String,
},
			"DeviceType": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_KernelCapabilities": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Add": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Drop": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::ECS::TaskDefinition_KeyValuePair": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_LinuxParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Capabilities": &Reference{
	ref: "AWS::ECS::TaskDefinition_KernelCapabilities",
},
			"Devices": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskDefinition_Device",
},
},
			"InitProcessEnabled": &Reference{
	type_: Boolean,
},
			"MaxSwap": &Reference{
	type_: Integer,
},
			"SharedMemorySize": &Reference{
	type_: Integer,
},
			"Swappiness": &Reference{
	type_: Integer,
},
			"Tmpfs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskDefinition_Tmpfs",
},
},
	},
},
	"AWS::ECS::TaskDefinition_LogConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LogDriver": &Reference{
	type_: String,
},
			"Options": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"SecretOptions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskDefinition_Secret",
},
},
	},
},
	"AWS::ECS::TaskDefinition_MountPoint": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerPath": &Reference{
	type_: String,
},
			"ReadOnly": &Reference{
	type_: Boolean,
},
			"SourceVolume": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_PortMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerPort": &Reference{
	type_: Integer,
},
			"HostPort": &Reference{
	type_: Integer,
},
			"Protocol": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_ProxyConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerName": &Reference{
	type_: String,
},
			"ProxyConfigurationProperties": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ECS::TaskDefinition_KeyValuePair",
},
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_RepositoryCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CredentialsParameter": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_ResourceRequirement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_RuntimePlatform": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CpuArchitecture": &Reference{
	type_: String,
},
			"OperatingSystemFamily": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_Secret": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"ValueFrom": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_SystemControl": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Namespace": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_TaskDefinitionPlacementConstraint": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Expression": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_Tmpfs": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerPath": &Reference{
	type_: String,
},
			"MountOptions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Size": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ECS::TaskDefinition_Ulimit": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HardLimit": &Reference{
	type_: Integer,
},
			"Name": &Reference{
	type_: String,
},
			"SoftLimit": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ECS::TaskDefinition_Volume": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DockerVolumeConfiguration": &Reference{
	ref: "AWS::ECS::TaskDefinition_DockerVolumeConfiguration",
},
			"EFSVolumeConfiguration": &Reference{
	ref: "AWS::ECS::TaskDefinition_EFSVolumeConfiguration",
},
			"Host": &Reference{
	ref: "AWS::ECS::TaskDefinition_HostVolumeProperties",
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskDefinition_VolumeFrom": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ReadOnly": &Reference{
	type_: Boolean,
},
			"SourceContainer": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskSet_AwsVpcConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AssignPublicIp": &Reference{
	type_: String,
},
			"SecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Subnets": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::ECS::TaskSet_LoadBalancer": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerName": &Reference{
	type_: String,
},
			"ContainerPort": &Reference{
	type_: Integer,
},
			"LoadBalancerName": &Reference{
	type_: String,
},
			"TargetGroupArn": &Reference{
	type_: String,
},
	},
},
	"AWS::ECS::TaskSet_NetworkConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AwsVpcConfiguration": &Reference{
	ref: "AWS::ECS::TaskSet_AwsVpcConfiguration",
},
	},
},
	"AWS::ECS::TaskSet_Scale": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Unit": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: Number,
},
	},
},
	"AWS::ECS::TaskSet_ServiceRegistry": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerName": &Reference{
	type_: String,
},
			"ContainerPort": &Reference{
	type_: Integer,
},
			"Port": &Reference{
	type_: Integer,
},
			"RegistryArn": &Reference{
	type_: String,
},
	},
},
	"AWS::EFS::AccessPoint_AccessPointTag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EFS::AccessPoint_CreationInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OwnerGid": &Reference{
	type_: String,
},
			"OwnerUid": &Reference{
	type_: String,
},
			"Permissions": &Reference{
	type_: String,
},
	},
},
	"AWS::EFS::AccessPoint_PosixUser": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Gid": &Reference{
	type_: String,
},
			"SecondaryGids": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Uid": &Reference{
	type_: String,
},
	},
},
	"AWS::EFS::AccessPoint_RootDirectory": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CreationInfo": &Reference{
	ref: "AWS::EFS::AccessPoint_CreationInfo",
},
			"Path": &Reference{
	type_: String,
},
	},
},
	"AWS::EFS::FileSystem_BackupPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Status": &Reference{
	type_: String,
},
	},
},
	"AWS::EFS::FileSystem_ElasticFileSystemTag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EFS::FileSystem_LifecyclePolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TransitionToIA": &Reference{
	type_: String,
},
			"TransitionToPrimaryStorageClass": &Reference{
	type_: String,
},
	},
},
	"AWS::EKS::Addon_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EKS::Cluster_ClusterLogging": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EnabledTypes": &Reference{
	ref: "AWS::EKS::Cluster_EnabledTypes",
},
	},
},
	"AWS::EKS::Cluster_EnabledTypes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EKS::Cluster_LoggingTypeConfig",
},
},
	"AWS::EKS::Cluster_EncryptionConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Provider": &Reference{
	ref: "AWS::EKS::Cluster_Provider",
},
			"Resources": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::EKS::Cluster_KubernetesNetworkConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IpFamily": &Reference{
	type_: String,
},
			"ServiceIpv4Cidr": &Reference{
	type_: String,
},
			"ServiceIpv6Cidr": &Reference{
	type_: String,
},
	},
},
	"AWS::EKS::Cluster_Logging": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClusterLogging": &Reference{
	ref: "AWS::EKS::Cluster_ClusterLogging",
},
	},
},
	"AWS::EKS::Cluster_LoggingTypeConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::EKS::Cluster_Provider": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KeyArn": &Reference{
	type_: String,
},
	},
},
	"AWS::EKS::Cluster_ResourcesVpcConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EndpointPrivateAccess": &Reference{
	type_: Boolean,
},
			"EndpointPublicAccess": &Reference{
	type_: Boolean,
},
			"PublicAccessCidrs": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::EKS::Cluster_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EKS::FargateProfile_Label": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EKS::FargateProfile_Selector": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Labels": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EKS::FargateProfile_Label",
},
},
			"Namespace": &Reference{
	type_: String,
},
	},
},
	"AWS::EKS::FargateProfile_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EKS::IdentityProviderConfig_OidcIdentityProviderConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClientId": &Reference{
	type_: String,
},
			"GroupsClaim": &Reference{
	type_: String,
},
			"GroupsPrefix": &Reference{
	type_: String,
},
			"IssuerUrl": &Reference{
	type_: String,
},
			"RequiredClaims": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EKS::IdentityProviderConfig_RequiredClaim",
},
},
			"UsernameClaim": &Reference{
	type_: String,
},
			"UsernamePrefix": &Reference{
	type_: String,
},
	},
},
	"AWS::EKS::IdentityProviderConfig_RequiredClaim": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EKS::IdentityProviderConfig_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EKS::Nodegroup_LaunchTemplateSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Id": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::EKS::Nodegroup_RemoteAccess": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Ec2SshKey": &Reference{
	type_: String,
},
			"SourceSecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::EKS::Nodegroup_ScalingConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DesiredSize": &Reference{
	type_: Integer,
},
			"MaxSize": &Reference{
	type_: Integer,
},
			"MinSize": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EKS::Nodegroup_Taint": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Effect": &Reference{
	type_: String,
},
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EKS::Nodegroup_UpdateConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxUnavailable": &Reference{
	type_: Number,
},
			"MaxUnavailablePercentage": &Reference{
	type_: Number,
},
	},
},
	"AWS::EMR::Cluster_Application": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdditionalInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Args": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Name": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::EMR::Cluster_AutoScalingPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Constraints": &Reference{
	ref: "AWS::EMR::Cluster_ScalingConstraints",
},
			"Rules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::Cluster_ScalingRule",
},
},
	},
},
	"AWS::EMR::Cluster_AutoTerminationPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IdleTimeout": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EMR::Cluster_BootstrapActionConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"ScriptBootstrapAction": &Reference{
	ref: "AWS::EMR::Cluster_ScriptBootstrapActionConfig",
},
	},
},
	"AWS::EMR::Cluster_CloudWatchAlarmDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComparisonOperator": &Reference{
	type_: String,
},
			"Dimensions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::Cluster_MetricDimension",
},
},
			"EvaluationPeriods": &Reference{
	type_: Integer,
},
			"MetricName": &Reference{
	type_: String,
},
			"Namespace": &Reference{
	type_: String,
},
			"Period": &Reference{
	type_: Integer,
},
			"Statistic": &Reference{
	type_: String,
},
			"Threshold": &Reference{
	type_: Number,
},
			"Unit": &Reference{
	type_: String,
},
	},
},
	"AWS::EMR::Cluster_ComputeLimits": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaximumCapacityUnits": &Reference{
	type_: Integer,
},
			"MaximumCoreCapacityUnits": &Reference{
	type_: Integer,
},
			"MaximumOnDemandCapacityUnits": &Reference{
	type_: Integer,
},
			"MinimumCapacityUnits": &Reference{
	type_: Integer,
},
			"UnitType": &Reference{
	type_: String,
},
	},
},
	"AWS::EMR::Cluster_Configuration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Classification": &Reference{
	type_: String,
},
			"ConfigurationProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Configurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::Cluster_Configuration",
},
},
	},
},
	"AWS::EMR::Cluster_EbsBlockDeviceConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"VolumeSpecification": &Reference{
	ref: "AWS::EMR::Cluster_VolumeSpecification",
},
			"VolumesPerInstance": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EMR::Cluster_EbsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EbsBlockDeviceConfigs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::Cluster_EbsBlockDeviceConfig",
},
},
			"EbsOptimized": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::EMR::Cluster_HadoopJarStepConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Args": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Jar": &Reference{
	type_: String,
},
			"MainClass": &Reference{
	type_: String,
},
			"StepProperties": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::Cluster_KeyValue",
},
},
	},
},
	"AWS::EMR::Cluster_InstanceFleetConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceTypeConfigs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::Cluster_InstanceTypeConfig",
},
},
			"LaunchSpecifications": &Reference{
	ref: "AWS::EMR::Cluster_InstanceFleetProvisioningSpecifications",
},
			"Name": &Reference{
	type_: String,
},
			"TargetOnDemandCapacity": &Reference{
	type_: Integer,
},
			"TargetSpotCapacity": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EMR::Cluster_InstanceFleetProvisioningSpecifications": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OnDemandSpecification": &Reference{
	ref: "AWS::EMR::Cluster_OnDemandProvisioningSpecification",
},
			"SpotSpecification": &Reference{
	ref: "AWS::EMR::Cluster_SpotProvisioningSpecification",
},
	},
},
	"AWS::EMR::Cluster_InstanceGroupConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AutoScalingPolicy": &Reference{
	ref: "AWS::EMR::Cluster_AutoScalingPolicy",
},
			"BidPrice": &Reference{
	type_: String,
},
			"Configurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::Cluster_Configuration",
},
},
			"CustomAmiId": &Reference{
	type_: String,
},
			"EbsConfiguration": &Reference{
	ref: "AWS::EMR::Cluster_EbsConfiguration",
},
			"InstanceCount": &Reference{
	type_: Integer,
},
			"InstanceType": &Reference{
	type_: String,
},
			"Market": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::EMR::Cluster_InstanceTypeConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BidPrice": &Reference{
	type_: String,
},
			"BidPriceAsPercentageOfOnDemandPrice": &Reference{
	type_: Number,
},
			"Configurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::Cluster_Configuration",
},
},
			"CustomAmiId": &Reference{
	type_: String,
},
			"EbsConfiguration": &Reference{
	ref: "AWS::EMR::Cluster_EbsConfiguration",
},
			"InstanceType": &Reference{
	type_: String,
},
			"WeightedCapacity": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EMR::Cluster_JobFlowInstancesConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdditionalMasterSecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"AdditionalSlaveSecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"CoreInstanceFleet": &Reference{
	ref: "AWS::EMR::Cluster_InstanceFleetConfig",
},
			"CoreInstanceGroup": &Reference{
	ref: "AWS::EMR::Cluster_InstanceGroupConfig",
},
			"Ec2KeyName": &Reference{
	type_: String,
},
			"Ec2SubnetId": &Reference{
	type_: String,
},
			"Ec2SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"EmrManagedMasterSecurityGroup": &Reference{
	type_: String,
},
			"EmrManagedSlaveSecurityGroup": &Reference{
	type_: String,
},
			"HadoopVersion": &Reference{
	type_: String,
},
			"KeepJobFlowAliveWhenNoSteps": &Reference{
	type_: Boolean,
},
			"MasterInstanceFleet": &Reference{
	ref: "AWS::EMR::Cluster_InstanceFleetConfig",
},
			"MasterInstanceGroup": &Reference{
	ref: "AWS::EMR::Cluster_InstanceGroupConfig",
},
			"Placement": &Reference{
	ref: "AWS::EMR::Cluster_PlacementType",
},
			"ServiceAccessSecurityGroup": &Reference{
	type_: String,
},
			"TaskInstanceFleets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::Cluster_InstanceFleetConfig",
},
},
			"TaskInstanceGroups": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::Cluster_InstanceGroupConfig",
},
},
			"TerminationProtected": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::EMR::Cluster_KerberosAttributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ADDomainJoinPassword": &Reference{
	type_: String,
},
			"ADDomainJoinUser": &Reference{
	type_: String,
},
			"CrossRealmTrustPrincipalPassword": &Reference{
	type_: String,
},
			"KdcAdminPassword": &Reference{
	type_: String,
},
			"Realm": &Reference{
	type_: String,
},
	},
},
	"AWS::EMR::Cluster_KeyValue": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EMR::Cluster_ManagedScalingPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComputeLimits": &Reference{
	ref: "AWS::EMR::Cluster_ComputeLimits",
},
	},
},
	"AWS::EMR::Cluster_MetricDimension": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EMR::Cluster_OnDemandProvisioningSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllocationStrategy": &Reference{
	type_: String,
},
	},
},
	"AWS::EMR::Cluster_PlacementType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AvailabilityZone": &Reference{
	type_: String,
},
	},
},
	"AWS::EMR::Cluster_ScalingAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Market": &Reference{
	type_: String,
},
			"SimpleScalingPolicyConfiguration": &Reference{
	ref: "AWS::EMR::Cluster_SimpleScalingPolicyConfiguration",
},
	},
},
	"AWS::EMR::Cluster_ScalingConstraints": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxCapacity": &Reference{
	type_: Integer,
},
			"MinCapacity": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EMR::Cluster_ScalingRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	ref: "AWS::EMR::Cluster_ScalingAction",
},
			"Description": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Trigger": &Reference{
	ref: "AWS::EMR::Cluster_ScalingTrigger",
},
	},
},
	"AWS::EMR::Cluster_ScalingTrigger": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchAlarmDefinition": &Reference{
	ref: "AWS::EMR::Cluster_CloudWatchAlarmDefinition",
},
	},
},
	"AWS::EMR::Cluster_ScriptBootstrapActionConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Args": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Path": &Reference{
	type_: String,
},
	},
},
	"AWS::EMR::Cluster_SimpleScalingPolicyConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdjustmentType": &Reference{
	type_: String,
},
			"CoolDown": &Reference{
	type_: Integer,
},
			"ScalingAdjustment": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EMR::Cluster_SpotProvisioningSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllocationStrategy": &Reference{
	type_: String,
},
			"BlockDurationMinutes": &Reference{
	type_: Integer,
},
			"TimeoutAction": &Reference{
	type_: String,
},
			"TimeoutDurationMinutes": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EMR::Cluster_StepConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ActionOnFailure": &Reference{
	type_: String,
},
			"HadoopJarStep": &Reference{
	ref: "AWS::EMR::Cluster_HadoopJarStepConfig",
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::EMR::Cluster_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EMR::Cluster_VolumeSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Iops": &Reference{
	type_: Integer,
},
			"SizeInGB": &Reference{
	type_: Integer,
},
			"VolumeType": &Reference{
	type_: String,
},
	},
},
	"AWS::EMR::InstanceFleetConfig_Configuration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Classification": &Reference{
	type_: String,
},
			"ConfigurationProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Configurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::InstanceFleetConfig_Configuration",
},
},
	},
},
	"AWS::EMR::InstanceFleetConfig_EbsBlockDeviceConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"VolumeSpecification": &Reference{
	ref: "AWS::EMR::InstanceFleetConfig_VolumeSpecification",
},
			"VolumesPerInstance": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EMR::InstanceFleetConfig_EbsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EbsBlockDeviceConfigs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::InstanceFleetConfig_EbsBlockDeviceConfig",
},
},
			"EbsOptimized": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::EMR::InstanceFleetConfig_InstanceFleetProvisioningSpecifications": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OnDemandSpecification": &Reference{
	ref: "AWS::EMR::InstanceFleetConfig_OnDemandProvisioningSpecification",
},
			"SpotSpecification": &Reference{
	ref: "AWS::EMR::InstanceFleetConfig_SpotProvisioningSpecification",
},
	},
},
	"AWS::EMR::InstanceFleetConfig_InstanceTypeConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BidPrice": &Reference{
	type_: String,
},
			"BidPriceAsPercentageOfOnDemandPrice": &Reference{
	type_: Number,
},
			"Configurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::InstanceFleetConfig_Configuration",
},
},
			"CustomAmiId": &Reference{
	type_: String,
},
			"EbsConfiguration": &Reference{
	ref: "AWS::EMR::InstanceFleetConfig_EbsConfiguration",
},
			"InstanceType": &Reference{
	type_: String,
},
			"WeightedCapacity": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EMR::InstanceFleetConfig_OnDemandProvisioningSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllocationStrategy": &Reference{
	type_: String,
},
	},
},
	"AWS::EMR::InstanceFleetConfig_SpotProvisioningSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllocationStrategy": &Reference{
	type_: String,
},
			"BlockDurationMinutes": &Reference{
	type_: Integer,
},
			"TimeoutAction": &Reference{
	type_: String,
},
			"TimeoutDurationMinutes": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EMR::InstanceFleetConfig_VolumeSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Iops": &Reference{
	type_: Integer,
},
			"SizeInGB": &Reference{
	type_: Integer,
},
			"VolumeType": &Reference{
	type_: String,
},
	},
},
	"AWS::EMR::InstanceGroupConfig_AutoScalingPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Constraints": &Reference{
	ref: "AWS::EMR::InstanceGroupConfig_ScalingConstraints",
},
			"Rules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::InstanceGroupConfig_ScalingRule",
},
},
	},
},
	"AWS::EMR::InstanceGroupConfig_CloudWatchAlarmDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComparisonOperator": &Reference{
	type_: String,
},
			"Dimensions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::InstanceGroupConfig_MetricDimension",
},
},
			"EvaluationPeriods": &Reference{
	type_: Integer,
},
			"MetricName": &Reference{
	type_: String,
},
			"Namespace": &Reference{
	type_: String,
},
			"Period": &Reference{
	type_: Integer,
},
			"Statistic": &Reference{
	type_: String,
},
			"Threshold": &Reference{
	type_: Number,
},
			"Unit": &Reference{
	type_: String,
},
	},
},
	"AWS::EMR::InstanceGroupConfig_Configuration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Classification": &Reference{
	type_: String,
},
			"ConfigurationProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Configurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::InstanceGroupConfig_Configuration",
},
},
	},
},
	"AWS::EMR::InstanceGroupConfig_EbsBlockDeviceConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"VolumeSpecification": &Reference{
	ref: "AWS::EMR::InstanceGroupConfig_VolumeSpecification",
},
			"VolumesPerInstance": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EMR::InstanceGroupConfig_EbsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EbsBlockDeviceConfigs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::InstanceGroupConfig_EbsBlockDeviceConfig",
},
},
			"EbsOptimized": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::EMR::InstanceGroupConfig_MetricDimension": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EMR::InstanceGroupConfig_ScalingAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Market": &Reference{
	type_: String,
},
			"SimpleScalingPolicyConfiguration": &Reference{
	ref: "AWS::EMR::InstanceGroupConfig_SimpleScalingPolicyConfiguration",
},
	},
},
	"AWS::EMR::InstanceGroupConfig_ScalingConstraints": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxCapacity": &Reference{
	type_: Integer,
},
			"MinCapacity": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EMR::InstanceGroupConfig_ScalingRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	ref: "AWS::EMR::InstanceGroupConfig_ScalingAction",
},
			"Description": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Trigger": &Reference{
	ref: "AWS::EMR::InstanceGroupConfig_ScalingTrigger",
},
	},
},
	"AWS::EMR::InstanceGroupConfig_ScalingTrigger": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchAlarmDefinition": &Reference{
	ref: "AWS::EMR::InstanceGroupConfig_CloudWatchAlarmDefinition",
},
	},
},
	"AWS::EMR::InstanceGroupConfig_SimpleScalingPolicyConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdjustmentType": &Reference{
	type_: String,
},
			"CoolDown": &Reference{
	type_: Integer,
},
			"ScalingAdjustment": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EMR::InstanceGroupConfig_VolumeSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Iops": &Reference{
	type_: Integer,
},
			"SizeInGB": &Reference{
	type_: Integer,
},
			"VolumeType": &Reference{
	type_: String,
},
	},
},
	"AWS::EMR::Step_HadoopJarStepConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Args": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Jar": &Reference{
	type_: String,
},
			"MainClass": &Reference{
	type_: String,
},
			"StepProperties": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::Step_KeyValue",
},
},
	},
},
	"AWS::EMR::Step_KeyValue": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EMR::Studio_Arn": &Reference{
	type_: String,
},
	"AWS::EMR::Studio_SubnetId": &Reference{
	type_: String,
},
	"AWS::EMR::Studio_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EMR::Studio_Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::EMR::Studio_Tag",
},
},
	"AWS::EMR::StudioSessionMapping_IamPolicyArn": &Reference{
	type_: String,
},
	"AWS::EMRContainers::VirtualCluster_ContainerInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EksInfo": &Reference{
	ref: "AWS::EMRContainers::VirtualCluster_EksInfo",
},
	},
},
	"AWS::EMRContainers::VirtualCluster_ContainerProvider": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Id": &Reference{
	type_: String,
},
			"Info": &Reference{
	ref: "AWS::EMRContainers::VirtualCluster_ContainerInfo",
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::EMRContainers::VirtualCluster_EksInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Namespace": &Reference{
	type_: String,
},
	},
},
	"AWS::EMRContainers::VirtualCluster_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ElastiCache::CacheCluster_CloudWatchLogsDestinationDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LogGroup": &Reference{
	type_: String,
},
	},
},
	"AWS::ElastiCache::CacheCluster_DestinationDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchLogsDetails": &Reference{
	ref: "AWS::ElastiCache::CacheCluster_CloudWatchLogsDestinationDetails",
},
			"KinesisFirehoseDetails": &Reference{
	ref: "AWS::ElastiCache::CacheCluster_KinesisFirehoseDestinationDetails",
},
	},
},
	"AWS::ElastiCache::CacheCluster_KinesisFirehoseDestinationDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeliveryStream": &Reference{
	type_: String,
},
	},
},
	"AWS::ElastiCache::CacheCluster_LogDeliveryConfigurationRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationDetails": &Reference{
	ref: "AWS::ElastiCache::CacheCluster_DestinationDetails",
},
			"DestinationType": &Reference{
	type_: String,
},
			"LogFormat": &Reference{
	type_: String,
},
			"LogType": &Reference{
	type_: String,
},
	},
},
	"AWS::ElastiCache::CacheCluster_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ElastiCache::GlobalReplicationGroup_GlobalReplicationGroupMember": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ReplicationGroupId": &Reference{
	type_: String,
},
			"ReplicationGroupRegion": &Reference{
	type_: String,
},
			"Role": &Reference{
	type_: String,
},
	},
},
	"AWS::ElastiCache::GlobalReplicationGroup_RegionalConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ReplicationGroupId": &Reference{
	type_: String,
},
			"ReplicationGroupRegion": &Reference{
	type_: String,
},
			"ReshardingConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElastiCache::GlobalReplicationGroup_ReshardingConfiguration",
},
},
	},
},
	"AWS::ElastiCache::GlobalReplicationGroup_ReshardingConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NodeGroupId": &Reference{
	type_: String,
},
			"PreferredAvailabilityZones": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::ElastiCache::ParameterGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ElastiCache::ReplicationGroup_CloudWatchLogsDestinationDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LogGroup": &Reference{
	type_: String,
},
	},
},
	"AWS::ElastiCache::ReplicationGroup_DestinationDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchLogsDetails": &Reference{
	ref: "AWS::ElastiCache::ReplicationGroup_CloudWatchLogsDestinationDetails",
},
			"KinesisFirehoseDetails": &Reference{
	ref: "AWS::ElastiCache::ReplicationGroup_KinesisFirehoseDestinationDetails",
},
	},
},
	"AWS::ElastiCache::ReplicationGroup_KinesisFirehoseDestinationDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeliveryStream": &Reference{
	type_: String,
},
	},
},
	"AWS::ElastiCache::ReplicationGroup_LogDeliveryConfigurationRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationDetails": &Reference{
	ref: "AWS::ElastiCache::ReplicationGroup_DestinationDetails",
},
			"DestinationType": &Reference{
	type_: String,
},
			"LogFormat": &Reference{
	type_: String,
},
			"LogType": &Reference{
	type_: String,
},
	},
},
	"AWS::ElastiCache::ReplicationGroup_NodeGroupConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NodeGroupId": &Reference{
	type_: String,
},
			"PrimaryAvailabilityZone": &Reference{
	type_: String,
},
			"ReplicaAvailabilityZones": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ReplicaCount": &Reference{
	type_: Integer,
},
			"Slots": &Reference{
	type_: String,
},
	},
},
	"AWS::ElastiCache::ReplicationGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ElastiCache::SecurityGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ElastiCache::SubnetGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticBeanstalk::Application_ApplicationResourceLifecycleConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ServiceRole": &Reference{
	type_: String,
},
			"VersionLifecycleConfig": &Reference{
	ref: "AWS::ElasticBeanstalk::Application_ApplicationVersionLifecycleConfig",
},
	},
},
	"AWS::ElasticBeanstalk::Application_ApplicationVersionLifecycleConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxAgeRule": &Reference{
	ref: "AWS::ElasticBeanstalk::Application_MaxAgeRule",
},
			"MaxCountRule": &Reference{
	ref: "AWS::ElasticBeanstalk::Application_MaxCountRule",
},
	},
},
	"AWS::ElasticBeanstalk::Application_MaxAgeRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeleteSourceFromS3": &Reference{
	type_: Boolean,
},
			"Enabled": &Reference{
	type_: Boolean,
},
			"MaxAgeInDays": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ElasticBeanstalk::Application_MaxCountRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeleteSourceFromS3": &Reference{
	type_: Boolean,
},
			"Enabled": &Reference{
	type_: Boolean,
},
			"MaxCount": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ElasticBeanstalk::ApplicationVersion_SourceBundle": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Bucket": &Reference{
	type_: String,
},
			"S3Key": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticBeanstalk::ConfigurationTemplate_ConfigurationOptionSetting": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Namespace": &Reference{
	type_: String,
},
			"OptionName": &Reference{
	type_: String,
},
			"ResourceName": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticBeanstalk::ConfigurationTemplate_SourceConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApplicationName": &Reference{
	type_: String,
},
			"TemplateName": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticBeanstalk::Environment_OptionSetting": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Namespace": &Reference{
	type_: String,
},
			"OptionName": &Reference{
	type_: String,
},
			"ResourceName": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticBeanstalk::Environment_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticBeanstalk::Environment_Tier": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancing::LoadBalancer_AccessLoggingPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EmitInterval": &Reference{
	type_: Integer,
},
			"Enabled": &Reference{
	type_: Boolean,
},
			"S3BucketName": &Reference{
	type_: String,
},
			"S3BucketPrefix": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancing::LoadBalancer_AppCookieStickinessPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CookieName": &Reference{
	type_: String,
},
			"PolicyName": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancing::LoadBalancer_ConnectionDrainingPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
			"Timeout": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ElasticLoadBalancing::LoadBalancer_ConnectionSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IdleTimeout": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ElasticLoadBalancing::LoadBalancer_HealthCheck": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HealthyThreshold": &Reference{
	type_: String,
},
			"Interval": &Reference{
	type_: String,
},
			"Target": &Reference{
	type_: String,
},
			"Timeout": &Reference{
	type_: String,
},
			"UnhealthyThreshold": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancing::LoadBalancer_LBCookieStickinessPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CookieExpirationPeriod": &Reference{
	type_: String,
},
			"PolicyName": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancing::LoadBalancer_Listeners": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstancePort": &Reference{
	type_: String,
},
			"InstanceProtocol": &Reference{
	type_: String,
},
			"LoadBalancerPort": &Reference{
	type_: String,
},
			"PolicyNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Protocol": &Reference{
	type_: String,
},
			"SSLCertificateId": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancing::LoadBalancer_Policies": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Attributes": &Reference{
	type_: Array,
	items: &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
},
			"InstancePorts": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"LoadBalancerPorts": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"PolicyName": &Reference{
	type_: String,
},
			"PolicyType": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancing::LoadBalancer_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancingV2::Listener_Action": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthenticateCognitoConfig": &Reference{
	ref: "AWS::ElasticLoadBalancingV2::Listener_AuthenticateCognitoConfig",
},
			"AuthenticateOidcConfig": &Reference{
	ref: "AWS::ElasticLoadBalancingV2::Listener_AuthenticateOidcConfig",
},
			"FixedResponseConfig": &Reference{
	ref: "AWS::ElasticLoadBalancingV2::Listener_FixedResponseConfig",
},
			"ForwardConfig": &Reference{
	ref: "AWS::ElasticLoadBalancingV2::Listener_ForwardConfig",
},
			"Order": &Reference{
	type_: Integer,
},
			"RedirectConfig": &Reference{
	ref: "AWS::ElasticLoadBalancingV2::Listener_RedirectConfig",
},
			"TargetGroupArn": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancingV2::Listener_AuthenticateCognitoConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthenticationRequestExtraParams": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"OnUnauthenticatedRequest": &Reference{
	type_: String,
},
			"Scope": &Reference{
	type_: String,
},
			"SessionCookieName": &Reference{
	type_: String,
},
			"SessionTimeout": &Reference{
	type_: String,
},
			"UserPoolArn": &Reference{
	type_: String,
},
			"UserPoolClientId": &Reference{
	type_: String,
},
			"UserPoolDomain": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancingV2::Listener_AuthenticateOidcConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthenticationRequestExtraParams": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"AuthorizationEndpoint": &Reference{
	type_: String,
},
			"ClientId": &Reference{
	type_: String,
},
			"ClientSecret": &Reference{
	type_: String,
},
			"Issuer": &Reference{
	type_: String,
},
			"OnUnauthenticatedRequest": &Reference{
	type_: String,
},
			"Scope": &Reference{
	type_: String,
},
			"SessionCookieName": &Reference{
	type_: String,
},
			"SessionTimeout": &Reference{
	type_: String,
},
			"TokenEndpoint": &Reference{
	type_: String,
},
			"UseExistingClientSecret": &Reference{
	type_: Boolean,
},
			"UserInfoEndpoint": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancingV2::Listener_Certificate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateArn": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancingV2::Listener_FixedResponseConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContentType": &Reference{
	type_: String,
},
			"MessageBody": &Reference{
	type_: String,
},
			"StatusCode": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancingV2::Listener_ForwardConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TargetGroupStickinessConfig": &Reference{
	ref: "AWS::ElasticLoadBalancingV2::Listener_TargetGroupStickinessConfig",
},
			"TargetGroups": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticLoadBalancingV2::Listener_TargetGroupTuple",
},
},
	},
},
	"AWS::ElasticLoadBalancingV2::Listener_RedirectConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Host": &Reference{
	type_: String,
},
			"Path": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: String,
},
			"Protocol": &Reference{
	type_: String,
},
			"Query": &Reference{
	type_: String,
},
			"StatusCode": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancingV2::Listener_TargetGroupStickinessConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DurationSeconds": &Reference{
	type_: Integer,
},
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::ElasticLoadBalancingV2::Listener_TargetGroupTuple": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TargetGroupArn": &Reference{
	type_: String,
},
			"Weight": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ElasticLoadBalancingV2::ListenerCertificate_Certificate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateArn": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancingV2::ListenerRule_Action": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthenticateCognitoConfig": &Reference{
	ref: "AWS::ElasticLoadBalancingV2::ListenerRule_AuthenticateCognitoConfig",
},
			"AuthenticateOidcConfig": &Reference{
	ref: "AWS::ElasticLoadBalancingV2::ListenerRule_AuthenticateOidcConfig",
},
			"FixedResponseConfig": &Reference{
	ref: "AWS::ElasticLoadBalancingV2::ListenerRule_FixedResponseConfig",
},
			"ForwardConfig": &Reference{
	ref: "AWS::ElasticLoadBalancingV2::ListenerRule_ForwardConfig",
},
			"Order": &Reference{
	type_: Integer,
},
			"RedirectConfig": &Reference{
	ref: "AWS::ElasticLoadBalancingV2::ListenerRule_RedirectConfig",
},
			"TargetGroupArn": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancingV2::ListenerRule_AuthenticateCognitoConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthenticationRequestExtraParams": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"OnUnauthenticatedRequest": &Reference{
	type_: String,
},
			"Scope": &Reference{
	type_: String,
},
			"SessionCookieName": &Reference{
	type_: String,
},
			"SessionTimeout": &Reference{
	type_: Integer,
},
			"UserPoolArn": &Reference{
	type_: String,
},
			"UserPoolClientId": &Reference{
	type_: String,
},
			"UserPoolDomain": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancingV2::ListenerRule_AuthenticateOidcConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthenticationRequestExtraParams": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"AuthorizationEndpoint": &Reference{
	type_: String,
},
			"ClientId": &Reference{
	type_: String,
},
			"ClientSecret": &Reference{
	type_: String,
},
			"Issuer": &Reference{
	type_: String,
},
			"OnUnauthenticatedRequest": &Reference{
	type_: String,
},
			"Scope": &Reference{
	type_: String,
},
			"SessionCookieName": &Reference{
	type_: String,
},
			"SessionTimeout": &Reference{
	type_: Integer,
},
			"TokenEndpoint": &Reference{
	type_: String,
},
			"UseExistingClientSecret": &Reference{
	type_: Boolean,
},
			"UserInfoEndpoint": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancingV2::ListenerRule_FixedResponseConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContentType": &Reference{
	type_: String,
},
			"MessageBody": &Reference{
	type_: String,
},
			"StatusCode": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancingV2::ListenerRule_ForwardConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TargetGroupStickinessConfig": &Reference{
	ref: "AWS::ElasticLoadBalancingV2::ListenerRule_TargetGroupStickinessConfig",
},
			"TargetGroups": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticLoadBalancingV2::ListenerRule_TargetGroupTuple",
},
},
	},
},
	"AWS::ElasticLoadBalancingV2::ListenerRule_HostHeaderConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::ElasticLoadBalancingV2::ListenerRule_HttpHeaderConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HttpHeaderName": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::ElasticLoadBalancingV2::ListenerRule_HttpRequestMethodConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::ElasticLoadBalancingV2::ListenerRule_PathPatternConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::ElasticLoadBalancingV2::ListenerRule_QueryStringConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ElasticLoadBalancingV2::ListenerRule_QueryStringKeyValue",
},
},
	},
},
	"AWS::ElasticLoadBalancingV2::ListenerRule_QueryStringKeyValue": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancingV2::ListenerRule_RedirectConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Host": &Reference{
	type_: String,
},
			"Path": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: String,
},
			"Protocol": &Reference{
	type_: String,
},
			"Query": &Reference{
	type_: String,
},
			"StatusCode": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancingV2::ListenerRule_RuleCondition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Field": &Reference{
	type_: String,
},
			"HostHeaderConfig": &Reference{
	ref: "AWS::ElasticLoadBalancingV2::ListenerRule_HostHeaderConfig",
},
			"HttpHeaderConfig": &Reference{
	ref: "AWS::ElasticLoadBalancingV2::ListenerRule_HttpHeaderConfig",
},
			"HttpRequestMethodConfig": &Reference{
	ref: "AWS::ElasticLoadBalancingV2::ListenerRule_HttpRequestMethodConfig",
},
			"PathPatternConfig": &Reference{
	ref: "AWS::ElasticLoadBalancingV2::ListenerRule_PathPatternConfig",
},
			"QueryStringConfig": &Reference{
	ref: "AWS::ElasticLoadBalancingV2::ListenerRule_QueryStringConfig",
},
			"SourceIpConfig": &Reference{
	ref: "AWS::ElasticLoadBalancingV2::ListenerRule_SourceIpConfig",
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::ElasticLoadBalancingV2::ListenerRule_SourceIpConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::ElasticLoadBalancingV2::ListenerRule_TargetGroupStickinessConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DurationSeconds": &Reference{
	type_: Integer,
},
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::ElasticLoadBalancingV2::ListenerRule_TargetGroupTuple": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TargetGroupArn": &Reference{
	type_: String,
},
			"Weight": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ElasticLoadBalancingV2::LoadBalancer_LoadBalancerAttribute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancingV2::LoadBalancer_SubnetMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllocationId": &Reference{
	type_: String,
},
			"IPv6Address": &Reference{
	type_: String,
},
			"PrivateIPv4Address": &Reference{
	type_: String,
},
			"SubnetId": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancingV2::LoadBalancer_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancingV2::TargetGroup_Matcher": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GrpcCode": &Reference{
	type_: String,
},
			"HttpCode": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancingV2::TargetGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ElasticLoadBalancingV2::TargetGroup_TargetDescription": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AvailabilityZone": &Reference{
	type_: String,
},
			"Id": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ElasticLoadBalancingV2::TargetGroup_TargetGroupAttribute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Elasticsearch::Domain_AdvancedSecurityOptionsInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AnonymousAuthEnabled": &Reference{
	type_: Boolean,
},
			"Enabled": &Reference{
	type_: Boolean,
},
			"InternalUserDatabaseEnabled": &Reference{
	type_: Boolean,
},
			"MasterUserOptions": &Reference{
	ref: "AWS::Elasticsearch::Domain_MasterUserOptions",
},
	},
},
	"AWS::Elasticsearch::Domain_CognitoOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
			"IdentityPoolId": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
			"UserPoolId": &Reference{
	type_: String,
},
	},
},
	"AWS::Elasticsearch::Domain_ColdStorageOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Elasticsearch::Domain_DomainEndpointOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomEndpoint": &Reference{
	type_: String,
},
			"CustomEndpointCertificateArn": &Reference{
	type_: String,
},
			"CustomEndpointEnabled": &Reference{
	type_: Boolean,
},
			"EnforceHTTPS": &Reference{
	type_: Boolean,
},
			"TLSSecurityPolicy": &Reference{
	type_: String,
},
	},
},
	"AWS::Elasticsearch::Domain_EBSOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EBSEnabled": &Reference{
	type_: Boolean,
},
			"Iops": &Reference{
	type_: Integer,
},
			"VolumeSize": &Reference{
	type_: Integer,
},
			"VolumeType": &Reference{
	type_: String,
},
	},
},
	"AWS::Elasticsearch::Domain_ElasticsearchClusterConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ColdStorageOptions": &Reference{
	ref: "AWS::Elasticsearch::Domain_ColdStorageOptions",
},
			"DedicatedMasterCount": &Reference{
	type_: Integer,
},
			"DedicatedMasterEnabled": &Reference{
	type_: Boolean,
},
			"DedicatedMasterType": &Reference{
	type_: String,
},
			"InstanceCount": &Reference{
	type_: Integer,
},
			"InstanceType": &Reference{
	type_: String,
},
			"WarmCount": &Reference{
	type_: Integer,
},
			"WarmEnabled": &Reference{
	type_: Boolean,
},
			"WarmType": &Reference{
	type_: String,
},
			"ZoneAwarenessConfig": &Reference{
	ref: "AWS::Elasticsearch::Domain_ZoneAwarenessConfig",
},
			"ZoneAwarenessEnabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Elasticsearch::Domain_EncryptionAtRestOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
			"KmsKeyId": &Reference{
	type_: String,
},
	},
},
	"AWS::Elasticsearch::Domain_LogPublishingOption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchLogsLogGroupArn": &Reference{
	type_: String,
},
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Elasticsearch::Domain_MasterUserOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MasterUserARN": &Reference{
	type_: String,
},
			"MasterUserName": &Reference{
	type_: String,
},
			"MasterUserPassword": &Reference{
	type_: String,
},
	},
},
	"AWS::Elasticsearch::Domain_NodeToNodeEncryptionOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Elasticsearch::Domain_SnapshotOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AutomatedSnapshotStartHour": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Elasticsearch::Domain_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Elasticsearch::Domain_VPCOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Elasticsearch::Domain_ZoneAwarenessConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AvailabilityZoneCount": &Reference{
	type_: Integer,
},
	},
},
	"AWS::EventSchemas::Discoverer_TagsEntry": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EventSchemas::Registry_TagsEntry": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::EventSchemas::Schema_TagsEntry": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Events::Connection_ApiKeyAuthParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApiKeyName": &Reference{
	type_: String,
},
			"ApiKeyValue": &Reference{
	type_: String,
},
	},
},
	"AWS::Events::Connection_AuthParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApiKeyAuthParameters": &Reference{
	ref: "AWS::Events::Connection_ApiKeyAuthParameters",
},
			"BasicAuthParameters": &Reference{
	ref: "AWS::Events::Connection_BasicAuthParameters",
},
			"InvocationHttpParameters": &Reference{
	ref: "AWS::Events::Connection_ConnectionHttpParameters",
},
			"OAuthParameters": &Reference{
	ref: "AWS::Events::Connection_OAuthParameters",
},
	},
},
	"AWS::Events::Connection_BasicAuthParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Password": &Reference{
	type_: String,
},
			"Username": &Reference{
	type_: String,
},
	},
},
	"AWS::Events::Connection_ClientParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClientID": &Reference{
	type_: String,
},
			"ClientSecret": &Reference{
	type_: String,
},
	},
},
	"AWS::Events::Connection_ConnectionHttpParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BodyParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Events::Connection_Parameter",
},
},
			"HeaderParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Events::Connection_Parameter",
},
},
			"QueryStringParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Events::Connection_Parameter",
},
},
	},
},
	"AWS::Events::Connection_OAuthParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthorizationEndpoint": &Reference{
	type_: String,
},
			"ClientParameters": &Reference{
	ref: "AWS::Events::Connection_ClientParameters",
},
			"HttpMethod": &Reference{
	type_: String,
},
			"OAuthHttpParameters": &Reference{
	ref: "AWS::Events::Connection_ConnectionHttpParameters",
},
	},
},
	"AWS::Events::Connection_Parameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IsValueSecret": &Reference{
	type_: Boolean,
},
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Events::Endpoint_EndpointEventBus": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EventBusArn": &Reference{
	ref: "AWS::Events::Endpoint_EventBusArn",
},
	},
},
	"AWS::Events::Endpoint_EventBusArn": &Reference{
	type_: String,
},
	"AWS::Events::Endpoint_EventBuses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Events::Endpoint_EndpointEventBus",
},
},
	"AWS::Events::Endpoint_FailoverConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Primary": &Reference{
	ref: "AWS::Events::Endpoint_Primary",
},
			"Secondary": &Reference{
	ref: "AWS::Events::Endpoint_Secondary",
},
	},
},
	"AWS::Events::Endpoint_HealthCheck": &Reference{
	type_: String,
},
	"AWS::Events::Endpoint_Primary": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HealthCheck": &Reference{
	ref: "AWS::Events::Endpoint_HealthCheck",
},
	},
},
	"AWS::Events::Endpoint_ReplicationConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"State": &Reference{
	ref: "AWS::Events::Endpoint_ReplicationState",
},
	},
},
	"AWS::Events::Endpoint_ReplicationState": &Reference{
	type_: String,
},
	"AWS::Events::Endpoint_Route": &Reference{
	type_: String,
},
	"AWS::Events::Endpoint_RoutingConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FailoverConfig": &Reference{
	ref: "AWS::Events::Endpoint_FailoverConfig",
},
	},
},
	"AWS::Events::Endpoint_Secondary": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Route": &Reference{
	ref: "AWS::Events::Endpoint_Route",
},
	},
},
	"AWS::Events::EventBus_TagEntry": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Events::EventBusPolicy_Condition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Events::Rule_AwsVpcConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AssignPublicIp": &Reference{
	type_: String,
},
			"SecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Subnets": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Events::Rule_BatchArrayProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Size": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Events::Rule_BatchParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ArrayProperties": &Reference{
	ref: "AWS::Events::Rule_BatchArrayProperties",
},
			"JobDefinition": &Reference{
	type_: String,
},
			"JobName": &Reference{
	type_: String,
},
			"RetryStrategy": &Reference{
	ref: "AWS::Events::Rule_BatchRetryStrategy",
},
	},
},
	"AWS::Events::Rule_BatchRetryStrategy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Attempts": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Events::Rule_CapacityProviderStrategyItem": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Base": &Reference{
	type_: Integer,
},
			"CapacityProvider": &Reference{
	type_: String,
},
			"Weight": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Events::Rule_DeadLetterConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
	},
},
	"AWS::Events::Rule_EcsParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CapacityProviderStrategy": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Events::Rule_CapacityProviderStrategyItem",
},
},
			"EnableECSManagedTags": &Reference{
	type_: Boolean,
},
			"EnableExecuteCommand": &Reference{
	type_: Boolean,
},
			"Group": &Reference{
	type_: String,
},
			"LaunchType": &Reference{
	type_: String,
},
			"NetworkConfiguration": &Reference{
	ref: "AWS::Events::Rule_NetworkConfiguration",
},
			"PlacementConstraints": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Events::Rule_PlacementConstraint",
},
},
			"PlacementStrategies": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Events::Rule_PlacementStrategy",
},
},
			"PlatformVersion": &Reference{
	type_: String,
},
			"PropagateTags": &Reference{
	type_: String,
},
			"ReferenceId": &Reference{
	type_: String,
},
			"TagList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Events::Rule_Tag",
},
},
			"TaskCount": &Reference{
	type_: Integer,
},
			"TaskDefinitionArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Events::Rule_HttpParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HeaderParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"PathParameterValues": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"QueryStringParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::Events::Rule_InputTransformer": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InputPathsMap": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"InputTemplate": &Reference{
	type_: String,
},
	},
},
	"AWS::Events::Rule_KinesisParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PartitionKeyPath": &Reference{
	type_: String,
},
	},
},
	"AWS::Events::Rule_NetworkConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AwsVpcConfiguration": &Reference{
	ref: "AWS::Events::Rule_AwsVpcConfiguration",
},
	},
},
	"AWS::Events::Rule_PlacementConstraint": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Expression": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::Events::Rule_PlacementStrategy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Field": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::Events::Rule_RedshiftDataParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Database": &Reference{
	type_: String,
},
			"DbUser": &Reference{
	type_: String,
},
			"SecretManagerArn": &Reference{
	type_: String,
},
			"Sql": &Reference{
	type_: String,
},
			"StatementName": &Reference{
	type_: String,
},
			"WithEvent": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Events::Rule_RetryPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaximumEventAgeInSeconds": &Reference{
	type_: Integer,
},
			"MaximumRetryAttempts": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Events::Rule_RunCommandParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RunCommandTargets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Events::Rule_RunCommandTarget",
},
},
	},
},
	"AWS::Events::Rule_RunCommandTarget": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Events::Rule_SageMakerPipelineParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Events::Rule_SageMakerPipelineParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PipelineParameterList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Events::Rule_SageMakerPipelineParameter",
},
},
	},
},
	"AWS::Events::Rule_SqsParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MessageGroupId": &Reference{
	type_: String,
},
	},
},
	"AWS::Events::Rule_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Events::Rule_Target": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"BatchParameters": &Reference{
	ref: "AWS::Events::Rule_BatchParameters",
},
			"DeadLetterConfig": &Reference{
	ref: "AWS::Events::Rule_DeadLetterConfig",
},
			"EcsParameters": &Reference{
	ref: "AWS::Events::Rule_EcsParameters",
},
			"HttpParameters": &Reference{
	ref: "AWS::Events::Rule_HttpParameters",
},
			"Id": &Reference{
	type_: String,
},
			"Input": &Reference{
	type_: String,
},
			"InputPath": &Reference{
	type_: String,
},
			"InputTransformer": &Reference{
	ref: "AWS::Events::Rule_InputTransformer",
},
			"KinesisParameters": &Reference{
	ref: "AWS::Events::Rule_KinesisParameters",
},
			"RedshiftDataParameters": &Reference{
	ref: "AWS::Events::Rule_RedshiftDataParameters",
},
			"RetryPolicy": &Reference{
	ref: "AWS::Events::Rule_RetryPolicy",
},
			"RoleArn": &Reference{
	type_: String,
},
			"RunCommandParameters": &Reference{
	ref: "AWS::Events::Rule_RunCommandParameters",
},
			"SageMakerPipelineParameters": &Reference{
	ref: "AWS::Events::Rule_SageMakerPipelineParameters",
},
			"SqsParameters": &Reference{
	ref: "AWS::Events::Rule_SqsParameters",
},
	},
},
	"AWS::Evidently::Experiment_MetricGoalObject": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DesiredChange": &Reference{
	type_: String,
},
			"EntityIdKey": &Reference{
	type_: String,
},
			"EventPattern": &Reference{
	type_: String,
},
			"MetricName": &Reference{
	type_: String,
},
			"UnitLabel": &Reference{
	type_: String,
},
			"ValueKey": &Reference{
	type_: String,
},
	},
},
	"AWS::Evidently::Experiment_OnlineAbConfigObject": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ControlTreatmentName": &Reference{
	type_: String,
},
			"TreatmentWeights": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Evidently::Experiment_TreatmentToWeight",
},
},
	},
},
	"AWS::Evidently::Experiment_RunningStatusObject": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AnalysisCompleteTime": &Reference{
	type_: String,
},
			"DesiredState": &Reference{
	type_: String,
},
			"Reason": &Reference{
	type_: String,
},
			"Status": &Reference{
	type_: String,
},
	},
},
	"AWS::Evidently::Experiment_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Evidently::Experiment_TreatmentObject": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Description": &Reference{
	type_: String,
},
			"Feature": &Reference{
	type_: String,
},
			"TreatmentName": &Reference{
	type_: String,
},
			"Variation": &Reference{
	type_: String,
},
	},
},
	"AWS::Evidently::Experiment_TreatmentToWeight": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SplitWeight": &Reference{
	type_: Integer,
},
			"Treatment": &Reference{
	type_: String,
},
	},
},
	"AWS::Evidently::Feature_EntityOverride": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EntityId": &Reference{
	type_: String,
},
			"Variation": &Reference{
	type_: String,
},
	},
},
	"AWS::Evidently::Feature_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Evidently::Feature_VariationObject": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BooleanValue": &Reference{
	type_: Boolean,
},
			"DoubleValue": &Reference{
	type_: Number,
},
			"LongValue": &Reference{
	type_: Number,
},
			"StringValue": &Reference{
	type_: String,
},
			"VariationName": &Reference{
	type_: String,
},
	},
},
	"AWS::Evidently::Launch_ExecutionStatusObject": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DesiredState": &Reference{
	type_: String,
},
			"Reason": &Reference{
	type_: String,
},
			"Status": &Reference{
	type_: String,
},
	},
},
	"AWS::Evidently::Launch_GroupToWeight": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GroupName": &Reference{
	type_: String,
},
			"SplitWeight": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Evidently::Launch_LaunchGroupObject": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Description": &Reference{
	type_: String,
},
			"Feature": &Reference{
	type_: String,
},
			"GroupName": &Reference{
	type_: String,
},
			"Variation": &Reference{
	type_: String,
},
	},
},
	"AWS::Evidently::Launch_MetricDefinitionObject": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EntityIdKey": &Reference{
	type_: String,
},
			"EventPattern": &Reference{
	type_: String,
},
			"MetricName": &Reference{
	type_: String,
},
			"UnitLabel": &Reference{
	type_: String,
},
			"ValueKey": &Reference{
	type_: String,
},
	},
},
	"AWS::Evidently::Launch_StepConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GroupWeights": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Evidently::Launch_GroupToWeight",
},
},
			"StartTime": &Reference{
	type_: String,
},
	},
},
	"AWS::Evidently::Launch_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Evidently::Project_DataDeliveryObject": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LogGroup": &Reference{
	type_: String,
},
			"S3": &Reference{
	ref: "AWS::Evidently::Project_S3Destination",
},
	},
},
	"AWS::Evidently::Project_S3Destination": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketName": &Reference{
	type_: String,
},
			"Prefix": &Reference{
	type_: String,
},
	},
},
	"AWS::Evidently::Project_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::FIS::ExperimentTemplate_ActionId": &Reference{
	type_: String,
},
	"AWS::FIS::ExperimentTemplate_ExperimentTemplateAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ActionId": &Reference{
	ref: "AWS::FIS::ExperimentTemplate_ActionId",
},
			"Description": &Reference{
	ref: "AWS::FIS::ExperimentTemplate_ExperimentTemplateActionItemDescription",
},
			"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"StartAfter": &Reference{
	ref: "AWS::FIS::ExperimentTemplate_ExperimentTemplateActionItemStartAfterList",
},
			"Targets": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::FIS::ExperimentTemplate_ExperimentTemplateActionItemDescription": &Reference{
	type_: String,
},
	"AWS::FIS::ExperimentTemplate_ExperimentTemplateActionItemParameter": &Reference{
	type_: String,
},
	"AWS::FIS::ExperimentTemplate_ExperimentTemplateActionItemStartAfter": &Reference{
	type_: String,
},
	"AWS::FIS::ExperimentTemplate_ExperimentTemplateActionItemStartAfterList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FIS::ExperimentTemplate_ExperimentTemplateActionItemStartAfter",
},
},
	"AWS::FIS::ExperimentTemplate_ExperimentTemplateActionItemTarget": &Reference{
	type_: String,
},
	"AWS::FIS::ExperimentTemplate_ExperimentTemplateActionMap": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::FIS::ExperimentTemplate_ExperimentTemplateDescription": &Reference{
	type_: String,
},
	"AWS::FIS::ExperimentTemplate_ExperimentTemplateId": &Reference{
	type_: String,
},
	"AWS::FIS::ExperimentTemplate_ExperimentTemplateLogConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchLogsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LogGroupArn": &Reference{
	type_: String,
},
	},
},
			"LogSchemaVersion": &Reference{
	type_: Integer,
},
			"S3Configuration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketName": &Reference{
	type_: String,
},
			"Prefix": &Reference{
	type_: String,
},
	},
},
	},
},
	"AWS::FIS::ExperimentTemplate_ExperimentTemplateStopCondition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Source": &Reference{
	ref: "AWS::FIS::ExperimentTemplate_StopConditionSource",
},
			"Value": &Reference{
	ref: "AWS::FIS::ExperimentTemplate_StopConditionValue",
},
	},
},
	"AWS::FIS::ExperimentTemplate_ExperimentTemplateStopConditionList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FIS::ExperimentTemplate_ExperimentTemplateStopCondition",
},
},
	"AWS::FIS::ExperimentTemplate_ExperimentTemplateTarget": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Filters": &Reference{
	ref: "AWS::FIS::ExperimentTemplate_ExperimentTemplateTargetFilterList",
},
			"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"ResourceArns": &Reference{
	ref: "AWS::FIS::ExperimentTemplate_ResourceArnList",
},
			"ResourceTags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"ResourceType": &Reference{
	ref: "AWS::FIS::ExperimentTemplate_ResourceType",
},
			"SelectionMode": &Reference{
	ref: "AWS::FIS::ExperimentTemplate_ExperimentTemplateTargetSelectionMode",
},
	},
},
	"AWS::FIS::ExperimentTemplate_ExperimentTemplateTargetFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Path": &Reference{
	ref: "AWS::FIS::ExperimentTemplate_ExperimentTemplateTargetFilterPath",
},
			"Values": &Reference{
	ref: "AWS::FIS::ExperimentTemplate_ExperimentTemplateTargetFilterValues",
},
	},
},
	"AWS::FIS::ExperimentTemplate_ExperimentTemplateTargetFilterList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FIS::ExperimentTemplate_ExperimentTemplateTargetFilter",
},
},
	"AWS::FIS::ExperimentTemplate_ExperimentTemplateTargetFilterPath": &Reference{
	type_: String,
},
	"AWS::FIS::ExperimentTemplate_ExperimentTemplateTargetFilterValue": &Reference{
	type_: String,
},
	"AWS::FIS::ExperimentTemplate_ExperimentTemplateTargetFilterValues": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FIS::ExperimentTemplate_ExperimentTemplateTargetFilterValue",
},
},
	"AWS::FIS::ExperimentTemplate_ExperimentTemplateTargetMap": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::FIS::ExperimentTemplate_ExperimentTemplateTargetSelectionMode": &Reference{
	type_: String,
},
	"AWS::FIS::ExperimentTemplate_ResourceArn": &Reference{
	type_: String,
},
	"AWS::FIS::ExperimentTemplate_ResourceArnList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FIS::ExperimentTemplate_ResourceArn",
},
},
	"AWS::FIS::ExperimentTemplate_ResourceType": &Reference{
	type_: String,
},
	"AWS::FIS::ExperimentTemplate_RoleArn": &Reference{
	type_: String,
},
	"AWS::FIS::ExperimentTemplate_StopConditionSource": &Reference{
	type_: String,
},
	"AWS::FIS::ExperimentTemplate_StopConditionValue": &Reference{
	type_: String,
},
	"AWS::FMS::NotificationChannel_ResourceArn": &Reference{
	type_: String,
},
	"AWS::FMS::Policy_AccountId": &Reference{
	type_: String,
},
	"AWS::FMS::Policy_IEMap": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ACCOUNT": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FMS::Policy_AccountId",
},
},
			"ORGUNIT": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FMS::Policy_OrganizationalUnitId",
},
},
	},
},
	"AWS::FMS::Policy_OrganizationalUnitId": &Reference{
	type_: String,
},
	"AWS::FMS::Policy_PolicyTag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::FMS::Policy_ResourceArn": &Reference{
	type_: String,
},
	"AWS::FMS::Policy_ResourceTag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::FMS::Policy_ResourceType": &Reference{
	type_: String,
},
	"AWS::FSx::FileSystem_AuditLogConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuditLogDestination": &Reference{
	type_: String,
},
			"FileAccessAuditLogLevel": &Reference{
	type_: String,
},
			"FileShareAccessAuditLogLevel": &Reference{
	type_: String,
},
	},
},
	"AWS::FSx::FileSystem_ClientConfigurations": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Clients": &Reference{
	type_: String,
},
			"Options": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::FSx::FileSystem_DiskIopsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Iops": &Reference{
	type_: Integer,
},
			"Mode": &Reference{
	type_: String,
},
	},
},
	"AWS::FSx::FileSystem_LustreConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AutoImportPolicy": &Reference{
	type_: String,
},
			"AutomaticBackupRetentionDays": &Reference{
	type_: Integer,
},
			"CopyTagsToBackups": &Reference{
	type_: Boolean,
},
			"DailyAutomaticBackupStartTime": &Reference{
	type_: String,
},
			"DataCompressionType": &Reference{
	type_: String,
},
			"DeploymentType": &Reference{
	type_: String,
},
			"DriveCacheType": &Reference{
	type_: String,
},
			"ExportPath": &Reference{
	type_: String,
},
			"ImportPath": &Reference{
	type_: String,
},
			"ImportedFileChunkSize": &Reference{
	type_: Integer,
},
			"PerUnitStorageThroughput": &Reference{
	type_: Integer,
},
			"WeeklyMaintenanceStartTime": &Reference{
	type_: String,
},
	},
},
	"AWS::FSx::FileSystem_NfsExports": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClientConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FSx::FileSystem_ClientConfigurations",
},
},
	},
},
	"AWS::FSx::FileSystem_OntapConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AutomaticBackupRetentionDays": &Reference{
	type_: Integer,
},
			"DailyAutomaticBackupStartTime": &Reference{
	type_: String,
},
			"DeploymentType": &Reference{
	type_: String,
},
			"DiskIopsConfiguration": &Reference{
	ref: "AWS::FSx::FileSystem_DiskIopsConfiguration",
},
			"EndpointIpAddressRange": &Reference{
	type_: String,
},
			"FsxAdminPassword": &Reference{
	type_: String,
},
			"PreferredSubnetId": &Reference{
	type_: String,
},
			"RouteTableIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ThroughputCapacity": &Reference{
	type_: Integer,
},
			"WeeklyMaintenanceStartTime": &Reference{
	type_: String,
},
	},
},
	"AWS::FSx::FileSystem_OpenZFSConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AutomaticBackupRetentionDays": &Reference{
	type_: Integer,
},
			"CopyTagsToBackups": &Reference{
	type_: Boolean,
},
			"CopyTagsToVolumes": &Reference{
	type_: Boolean,
},
			"DailyAutomaticBackupStartTime": &Reference{
	type_: String,
},
			"DeploymentType": &Reference{
	type_: String,
},
			"DiskIopsConfiguration": &Reference{
	ref: "AWS::FSx::FileSystem_DiskIopsConfiguration",
},
			"Options": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"RootVolumeConfiguration": &Reference{
	ref: "AWS::FSx::FileSystem_RootVolumeConfiguration",
},
			"ThroughputCapacity": &Reference{
	type_: Integer,
},
			"WeeklyMaintenanceStartTime": &Reference{
	type_: String,
},
	},
},
	"AWS::FSx::FileSystem_RootVolumeConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CopyTagsToSnapshots": &Reference{
	type_: Boolean,
},
			"DataCompressionType": &Reference{
	type_: String,
},
			"NfsExports": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FSx::FileSystem_NfsExports",
},
},
			"ReadOnly": &Reference{
	type_: Boolean,
},
			"RecordSizeKiB": &Reference{
	type_: Integer,
},
			"UserAndGroupQuotas": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FSx::FileSystem_UserAndGroupQuotas",
},
},
	},
},
	"AWS::FSx::FileSystem_SelfManagedActiveDirectoryConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DnsIps": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"DomainName": &Reference{
	type_: String,
},
			"FileSystemAdministratorsGroup": &Reference{
	type_: String,
},
			"OrganizationalUnitDistinguishedName": &Reference{
	type_: String,
},
			"Password": &Reference{
	type_: String,
},
			"UserName": &Reference{
	type_: String,
},
	},
},
	"AWS::FSx::FileSystem_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::FSx::FileSystem_UserAndGroupQuotas": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Id": &Reference{
	type_: Integer,
},
			"StorageCapacityQuotaGiB": &Reference{
	type_: Integer,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::FSx::FileSystem_WindowsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ActiveDirectoryId": &Reference{
	type_: String,
},
			"Aliases": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"AuditLogConfiguration": &Reference{
	ref: "AWS::FSx::FileSystem_AuditLogConfiguration",
},
			"AutomaticBackupRetentionDays": &Reference{
	type_: Integer,
},
			"CopyTagsToBackups": &Reference{
	type_: Boolean,
},
			"DailyAutomaticBackupStartTime": &Reference{
	type_: String,
},
			"DeploymentType": &Reference{
	type_: String,
},
			"PreferredSubnetId": &Reference{
	type_: String,
},
			"SelfManagedActiveDirectoryConfiguration": &Reference{
	ref: "AWS::FSx::FileSystem_SelfManagedActiveDirectoryConfiguration",
},
			"ThroughputCapacity": &Reference{
	type_: Integer,
},
			"WeeklyMaintenanceStartTime": &Reference{
	type_: String,
},
	},
},
	"AWS::FSx::Snapshot_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::FSx::StorageVirtualMachine_ActiveDirectoryConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NetBiosName": &Reference{
	type_: String,
},
			"SelfManagedActiveDirectoryConfiguration": &Reference{
	ref: "AWS::FSx::StorageVirtualMachine_SelfManagedActiveDirectoryConfiguration",
},
	},
},
	"AWS::FSx::StorageVirtualMachine_SelfManagedActiveDirectoryConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DnsIps": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"DomainName": &Reference{
	type_: String,
},
			"FileSystemAdministratorsGroup": &Reference{
	type_: String,
},
			"OrganizationalUnitDistinguishedName": &Reference{
	type_: String,
},
			"Password": &Reference{
	type_: String,
},
			"UserName": &Reference{
	type_: String,
},
	},
},
	"AWS::FSx::StorageVirtualMachine_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::FSx::Volume_ClientConfigurations": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Clients": &Reference{
	type_: String,
},
			"Options": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::FSx::Volume_NfsExports": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClientConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FSx::Volume_ClientConfigurations",
},
},
	},
},
	"AWS::FSx::Volume_OntapConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"JunctionPath": &Reference{
	type_: String,
},
			"SecurityStyle": &Reference{
	type_: String,
},
			"SizeInMegabytes": &Reference{
	type_: String,
},
			"StorageEfficiencyEnabled": &Reference{
	type_: String,
},
			"StorageVirtualMachineId": &Reference{
	type_: String,
},
			"TieringPolicy": &Reference{
	ref: "AWS::FSx::Volume_TieringPolicy",
},
	},
},
	"AWS::FSx::Volume_OpenZFSConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CopyTagsToSnapshots": &Reference{
	type_: Boolean,
},
			"DataCompressionType": &Reference{
	type_: String,
},
			"NfsExports": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FSx::Volume_NfsExports",
},
},
			"Options": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"OriginSnapshot": &Reference{
	ref: "AWS::FSx::Volume_OriginSnapshot",
},
			"ParentVolumeId": &Reference{
	type_: String,
},
			"ReadOnly": &Reference{
	type_: Boolean,
},
			"RecordSizeKiB": &Reference{
	type_: Integer,
},
			"StorageCapacityQuotaGiB": &Reference{
	type_: Integer,
},
			"StorageCapacityReservationGiB": &Reference{
	type_: Integer,
},
			"UserAndGroupQuotas": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FSx::Volume_UserAndGroupQuotas",
},
},
	},
},
	"AWS::FSx::Volume_OriginSnapshot": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CopyStrategy": &Reference{
	type_: String,
},
			"SnapshotARN": &Reference{
	type_: String,
},
	},
},
	"AWS::FSx::Volume_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::FSx::Volume_TieringPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CoolingPeriod": &Reference{
	type_: Integer,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::FSx::Volume_UserAndGroupQuotas": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Id": &Reference{
	type_: Integer,
},
			"StorageCapacityQuotaGiB": &Reference{
	type_: Integer,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::FinSpace::Environment_DataBundleArn": &Reference{
	type_: String,
},
	"AWS::FinSpace::Environment_FederationParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApplicationCallBackURL": &Reference{
	type_: String,
},
			"AttributeMap": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"FederationProviderName": &Reference{
	type_: String,
},
			"FederationURN": &Reference{
	type_: String,
},
			"SamlMetadataDocument": &Reference{
	type_: String,
},
			"SamlMetadataURL": &Reference{
	type_: String,
},
	},
},
	"AWS::FinSpace::Environment_SuperuserParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EmailAddress": &Reference{
	type_: String,
},
			"FirstName": &Reference{
	type_: String,
},
			"LastName": &Reference{
	type_: String,
},
	},
},
	"AWS::Forecast::Dataset_Attributes": &Reference{
	type_: Array,
	items: &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AttributeName": &Reference{
	type_: String,
},
			"AttributeType": &Reference{
	type_: String,
},
	},
},
},
	"AWS::Forecast::Dataset_Key": &Reference{
	type_: String,
},
	"AWS::Forecast::Dataset_KmsKeyArn": &Reference{
	type_: String,
},
	"AWS::Forecast::Dataset_RoleArn": &Reference{
	type_: String,
},
	"AWS::Forecast::Dataset_Value": &Reference{
	type_: String,
},
	"AWS::Forecast::DatasetGroup_Arn": &Reference{
	type_: String,
},
	"AWS::Forecast::DatasetGroup_MaxResults": &Reference{
	type_: Integer,
},
	"AWS::Forecast::DatasetGroup_NextToken": &Reference{
	type_: String,
},
	"AWS::Forecast::DatasetGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::FraudDetector::Detector_EntityType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"CreatedTime": &Reference{
	type_: String,
},
			"Description": &Reference{
	type_: String,
},
			"Inline": &Reference{
	type_: Boolean,
},
			"LastUpdatedTime": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::Detector_Tag",
},
},
	},
},
	"AWS::FraudDetector::Detector_EventType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"CreatedTime": &Reference{
	type_: String,
},
			"Description": &Reference{
	type_: String,
},
			"EntityTypes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::Detector_EntityType",
},
},
			"EventVariables": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::Detector_EventVariable",
},
},
			"Inline": &Reference{
	type_: Boolean,
},
			"Labels": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::Detector_Label",
},
},
			"LastUpdatedTime": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::Detector_Tag",
},
},
	},
},
	"AWS::FraudDetector::Detector_EventVariable": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"CreatedTime": &Reference{
	type_: String,
},
			"DataSource": &Reference{
	type_: String,
},
			"DataType": &Reference{
	type_: String,
},
			"DefaultValue": &Reference{
	type_: String,
},
			"Description": &Reference{
	type_: String,
},
			"Inline": &Reference{
	type_: Boolean,
},
			"LastUpdatedTime": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::Detector_Tag",
},
},
			"VariableType": &Reference{
	type_: String,
},
	},
},
	"AWS::FraudDetector::Detector_Label": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"CreatedTime": &Reference{
	type_: String,
},
			"Description": &Reference{
	type_: String,
},
			"Inline": &Reference{
	type_: Boolean,
},
			"LastUpdatedTime": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::Detector_Tag",
},
},
	},
},
	"AWS::FraudDetector::Detector_Model": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
	},
},
	"AWS::FraudDetector::Detector_Outcome": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"CreatedTime": &Reference{
	type_: String,
},
			"Description": &Reference{
	type_: String,
},
			"Inline": &Reference{
	type_: Boolean,
},
			"LastUpdatedTime": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::Detector_Tag",
},
},
	},
},
	"AWS::FraudDetector::Detector_Rule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"CreatedTime": &Reference{
	type_: String,
},
			"Description": &Reference{
	type_: String,
},
			"DetectorId": &Reference{
	type_: String,
},
			"Expression": &Reference{
	type_: String,
},
			"Language": &Reference{
	type_: String,
},
			"LastUpdatedTime": &Reference{
	type_: String,
},
			"Outcomes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::Detector_Outcome",
},
},
			"RuleId": &Reference{
	type_: String,
},
			"RuleVersion": &Reference{
	type_: String,
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::Detector_Tag",
},
},
	},
},
	"AWS::FraudDetector::Detector_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::FraudDetector::EntityType_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::FraudDetector::EventType_EntityType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"CreatedTime": &Reference{
	type_: String,
},
			"Description": &Reference{
	type_: String,
},
			"Inline": &Reference{
	type_: Boolean,
},
			"LastUpdatedTime": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::EventType_Tag",
},
},
	},
},
	"AWS::FraudDetector::EventType_EventVariable": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"CreatedTime": &Reference{
	type_: String,
},
			"DataSource": &Reference{
	type_: String,
},
			"DataType": &Reference{
	type_: String,
},
			"DefaultValue": &Reference{
	type_: String,
},
			"Description": &Reference{
	type_: String,
},
			"Inline": &Reference{
	type_: Boolean,
},
			"LastUpdatedTime": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::EventType_Tag",
},
},
			"VariableType": &Reference{
	type_: String,
},
	},
},
	"AWS::FraudDetector::EventType_Label": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"CreatedTime": &Reference{
	type_: String,
},
			"Description": &Reference{
	type_: String,
},
			"Inline": &Reference{
	type_: Boolean,
},
			"LastUpdatedTime": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::FraudDetector::EventType_Tag",
},
},
	},
},
	"AWS::FraudDetector::EventType_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::FraudDetector::Label_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::FraudDetector::Outcome_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::FraudDetector::Variable_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::GameLift::Alias_RoutingStrategy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FleetId": &Reference{
	type_: String,
},
			"Message": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::GameLift::Build_S3Location": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"Key": &Reference{
	type_: String,
},
			"ObjectVersion": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::GameLift::Fleet_CertificateConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateType": &Reference{
	type_: String,
},
	},
},
	"AWS::GameLift::Fleet_IpPermission": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FromPort": &Reference{
	type_: Integer,
},
			"IpRange": &Reference{
	type_: String,
},
			"Protocol": &Reference{
	type_: String,
},
			"ToPort": &Reference{
	type_: Integer,
},
	},
},
	"AWS::GameLift::Fleet_Location": &Reference{
	type_: String,
},
	"AWS::GameLift::Fleet_LocationCapacity": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DesiredEC2Instances": &Reference{
	type_: Integer,
},
			"MaxSize": &Reference{
	type_: Integer,
},
			"MinSize": &Reference{
	type_: Integer,
},
	},
},
	"AWS::GameLift::Fleet_LocationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Location": &Reference{
	ref: "AWS::GameLift::Fleet_Location",
},
			"LocationCapacity": &Reference{
	ref: "AWS::GameLift::Fleet_LocationCapacity",
},
	},
},
	"AWS::GameLift::Fleet_ResourceCreationLimitPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NewGameSessionsPerCreator": &Reference{
	type_: Integer,
},
			"PolicyPeriodInMinutes": &Reference{
	type_: Integer,
},
	},
},
	"AWS::GameLift::Fleet_RuntimeConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GameSessionActivationTimeoutSeconds": &Reference{
	type_: Integer,
},
			"MaxConcurrentGameSessionActivations": &Reference{
	type_: Integer,
},
			"ServerProcesses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GameLift::Fleet_ServerProcess",
},
},
	},
},
	"AWS::GameLift::Fleet_ServerProcess": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConcurrentExecutions": &Reference{
	type_: Integer,
},
			"LaunchPath": &Reference{
	type_: String,
},
			"Parameters": &Reference{
	type_: String,
},
	},
},
	"AWS::GameLift::GameServerGroup_AutoScalingGroupArn": &Reference{
	type_: String,
},
	"AWS::GameLift::GameServerGroup_AutoScalingPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EstimatedInstanceWarmup": &Reference{
	ref: "AWS::GameLift::GameServerGroup_EstimatedInstanceWarmup",
},
			"TargetTrackingConfiguration": &Reference{
	ref: "AWS::GameLift::GameServerGroup_TargetTrackingConfiguration",
},
	},
},
	"AWS::GameLift::GameServerGroup_BalancingStrategy": &Reference{
	type_: String,
},
	"AWS::GameLift::GameServerGroup_CreationTime": &Reference{
	type_: String,
},
	"AWS::GameLift::GameServerGroup_DeleteOption": &Reference{
	type_: String,
},
	"AWS::GameLift::GameServerGroup_EstimatedInstanceWarmup": &Reference{
	type_: Number,
},
	"AWS::GameLift::GameServerGroup_GameServerGroup": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AutoScalingGroupArn": &Reference{
	ref: "AWS::GameLift::GameServerGroup_AutoScalingGroupArn",
},
			"BalancingStrategy": &Reference{
	ref: "AWS::GameLift::GameServerGroup_BalancingStrategy",
},
			"CreationTime": &Reference{
	ref: "AWS::GameLift::GameServerGroup_CreationTime",
},
			"GameServerGroupArn": &Reference{
	ref: "AWS::GameLift::GameServerGroup_GameServerGroupArn",
},
			"GameServerGroupName": &Reference{
	ref: "AWS::GameLift::GameServerGroup_GameServerGroupName",
},
			"GameServerProtectionPolicy": &Reference{
	ref: "AWS::GameLift::GameServerGroup_GameServerProtectionPolicy",
},
			"InstanceDefinitions": &Reference{
	ref: "AWS::GameLift::GameServerGroup_InstanceDefinitions",
},
			"LastUpdatedTime": &Reference{
	ref: "AWS::GameLift::GameServerGroup_LastUpdatedTime",
},
			"RoleArn": &Reference{
	ref: "AWS::GameLift::GameServerGroup_RoleArn",
},
			"Status": &Reference{
	ref: "AWS::GameLift::GameServerGroup_Status",
},
			"StatusReason": &Reference{
	ref: "AWS::GameLift::GameServerGroup_StatusReason",
},
			"SuspendedActions": &Reference{
	ref: "AWS::GameLift::GameServerGroup_SuspendedActions",
},
	},
},
	"AWS::GameLift::GameServerGroup_GameServerGroupArn": &Reference{
	type_: String,
},
	"AWS::GameLift::GameServerGroup_GameServerGroupName": &Reference{
	type_: String,
},
	"AWS::GameLift::GameServerGroup_GameServerProtectionPolicy": &Reference{
	type_: String,
},
	"AWS::GameLift::GameServerGroup_InstanceDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceType": &Reference{
	ref: "AWS::GameLift::GameServerGroup_InstanceType",
},
			"WeightedCapacity": &Reference{
	ref: "AWS::GameLift::GameServerGroup_WeightedCapacity",
},
	},
},
	"AWS::GameLift::GameServerGroup_InstanceDefinitions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GameLift::GameServerGroup_InstanceDefinition",
},
},
	"AWS::GameLift::GameServerGroup_InstanceType": &Reference{
	type_: String,
},
	"AWS::GameLift::GameServerGroup_LastUpdatedTime": &Reference{
	type_: String,
},
	"AWS::GameLift::GameServerGroup_LaunchTemplate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LaunchTemplateId": &Reference{
	ref: "AWS::GameLift::GameServerGroup_LaunchTemplateId",
},
			"LaunchTemplateName": &Reference{
	ref: "AWS::GameLift::GameServerGroup_LaunchTemplateName",
},
			"Version": &Reference{
	ref: "AWS::GameLift::GameServerGroup_Version",
},
	},
},
	"AWS::GameLift::GameServerGroup_LaunchTemplateId": &Reference{
	type_: String,
},
	"AWS::GameLift::GameServerGroup_LaunchTemplateName": &Reference{
	type_: String,
},
	"AWS::GameLift::GameServerGroup_MaxSize": &Reference{
	type_: Number,
},
	"AWS::GameLift::GameServerGroup_MinSize": &Reference{
	type_: Number,
},
	"AWS::GameLift::GameServerGroup_RoleArn": &Reference{
	type_: String,
},
	"AWS::GameLift::GameServerGroup_Status": &Reference{
	type_: String,
},
	"AWS::GameLift::GameServerGroup_StatusReason": &Reference{
	type_: String,
},
	"AWS::GameLift::GameServerGroup_SuspendedActions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	"AWS::GameLift::GameServerGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::GameLift::GameServerGroup_Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GameLift::GameServerGroup_Tag",
},
},
	"AWS::GameLift::GameServerGroup_TargetTrackingConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TargetValue": &Reference{
	ref: "AWS::GameLift::GameServerGroup_TargetValue",
},
	},
},
	"AWS::GameLift::GameServerGroup_TargetValue": &Reference{
	type_: Number,
},
	"AWS::GameLift::GameServerGroup_Version": &Reference{
	type_: String,
},
	"AWS::GameLift::GameServerGroup_VpcSubnets": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	"AWS::GameLift::GameServerGroup_WeightedCapacity": &Reference{
	type_: String,
},
	"AWS::GameLift::GameSessionQueue_Destination": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationArn": &Reference{
	type_: String,
},
	},
},
	"AWS::GameLift::GameSessionQueue_FilterConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllowedLocations": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::GameLift::GameSessionQueue_PlayerLatencyPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaximumIndividualPlayerLatencyMilliseconds": &Reference{
	type_: Integer,
},
			"PolicyDurationSeconds": &Reference{
	type_: Integer,
},
	},
},
	"AWS::GameLift::GameSessionQueue_PriorityConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LocationOrder": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"PriorityOrder": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::GameLift::GameSessionQueue_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::GameLift::MatchmakingConfiguration_GameProperty": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::GameLift::MatchmakingConfiguration_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::GameLift::MatchmakingRuleSet_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::GameLift::Script_S3Location": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"Key": &Reference{
	type_: String,
},
			"ObjectVersion": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::GameLift::Script_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::GlobalAccelerator::Accelerator_IpAddress": &Reference{
	type_: String,
},
	"AWS::GlobalAccelerator::Accelerator_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::GlobalAccelerator::EndpointGroup_EndpointConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClientIPPreservationEnabled": &Reference{
	type_: Boolean,
},
			"EndpointId": &Reference{
	type_: String,
},
			"Weight": &Reference{
	type_: Integer,
},
	},
},
	"AWS::GlobalAccelerator::EndpointGroup_Port": &Reference{
	type_: Integer,
},
	"AWS::GlobalAccelerator::EndpointGroup_PortOverride": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EndpointPort": &Reference{
	ref: "AWS::GlobalAccelerator::EndpointGroup_Port",
},
			"ListenerPort": &Reference{
	ref: "AWS::GlobalAccelerator::EndpointGroup_Port",
},
	},
},
	"AWS::GlobalAccelerator::Listener_Port": &Reference{
	type_: Integer,
},
	"AWS::GlobalAccelerator::Listener_PortRange": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FromPort": &Reference{
	ref: "AWS::GlobalAccelerator::Listener_Port",
},
			"ToPort": &Reference{
	ref: "AWS::GlobalAccelerator::Listener_Port",
},
	},
},
	"AWS::Glue::Classifier_CsvClassifier": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllowSingleColumn": &Reference{
	type_: Boolean,
},
			"ContainsHeader": &Reference{
	type_: String,
},
			"Delimiter": &Reference{
	type_: String,
},
			"DisableValueTrimming": &Reference{
	type_: Boolean,
},
			"Header": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Name": &Reference{
	type_: String,
},
			"QuoteSymbol": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Classifier_GrokClassifier": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Classification": &Reference{
	type_: String,
},
			"CustomPatterns": &Reference{
	type_: String,
},
			"GrokPattern": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Classifier_JsonClassifier": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"JsonPath": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Classifier_XMLClassifier": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Classification": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"RowTag": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Connection_ConnectionInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConnectionProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"ConnectionType": &Reference{
	type_: String,
},
			"Description": &Reference{
	type_: String,
},
			"MatchCriteria": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Name": &Reference{
	type_: String,
},
			"PhysicalConnectionRequirements": &Reference{
	ref: "AWS::Glue::Connection_PhysicalConnectionRequirements",
},
	},
},
	"AWS::Glue::Connection_PhysicalConnectionRequirements": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AvailabilityZone": &Reference{
	type_: String,
},
			"SecurityGroupIdList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SubnetId": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Crawler_CatalogTarget": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DatabaseName": &Reference{
	type_: String,
},
			"Tables": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Glue::Crawler_DynamoDBTarget": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Path": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Crawler_JdbcTarget": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConnectionName": &Reference{
	type_: String,
},
			"Exclusions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Path": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Crawler_MongoDBTarget": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConnectionName": &Reference{
	type_: String,
},
			"Path": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Crawler_RecrawlPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RecrawlBehavior": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Crawler_S3Target": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConnectionName": &Reference{
	type_: String,
},
			"DlqEventQueueArn": &Reference{
	type_: String,
},
			"EventQueueArn": &Reference{
	type_: String,
},
			"Exclusions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Path": &Reference{
	type_: String,
},
			"SampleSize": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Glue::Crawler_Schedule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ScheduleExpression": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Crawler_SchemaChangePolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeleteBehavior": &Reference{
	type_: String,
},
			"UpdateBehavior": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Crawler_Targets": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogTargets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Glue::Crawler_CatalogTarget",
},
},
			"DynamoDBTargets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Glue::Crawler_DynamoDBTarget",
},
},
			"JdbcTargets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Glue::Crawler_JdbcTarget",
},
},
			"MongoDBTargets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Glue::Crawler_MongoDBTarget",
},
},
			"S3Targets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Glue::Crawler_S3Target",
},
},
	},
},
	"AWS::Glue::DataCatalogEncryptionSettings_ConnectionPasswordEncryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KmsKeyId": &Reference{
	type_: String,
},
			"ReturnConnectionPasswordEncrypted": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Glue::DataCatalogEncryptionSettings_DataCatalogEncryptionSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConnectionPasswordEncryption": &Reference{
	ref: "AWS::Glue::DataCatalogEncryptionSettings_ConnectionPasswordEncryption",
},
			"EncryptionAtRest": &Reference{
	ref: "AWS::Glue::DataCatalogEncryptionSettings_EncryptionAtRest",
},
	},
},
	"AWS::Glue::DataCatalogEncryptionSettings_EncryptionAtRest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogEncryptionMode": &Reference{
	type_: String,
},
			"SseAwsKmsKeyId": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Database_DataLakePrincipal": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataLakePrincipalIdentifier": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Database_DatabaseIdentifier": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	type_: String,
},
			"DatabaseName": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Database_DatabaseInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CreateTableDefaultPermissions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Glue::Database_PrincipalPrivileges",
},
},
			"Description": &Reference{
	type_: String,
},
			"LocationUri": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"TargetDatabase": &Reference{
	ref: "AWS::Glue::Database_DatabaseIdentifier",
},
	},
},
	"AWS::Glue::Database_PrincipalPrivileges": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Permissions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Principal": &Reference{
	ref: "AWS::Glue::Database_DataLakePrincipal",
},
	},
},
	"AWS::Glue::Job_ConnectionsList": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Connections": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Glue::Job_ExecutionProperty": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxConcurrentRuns": &Reference{
	type_: Number,
},
	},
},
	"AWS::Glue::Job_JobCommand": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"PythonVersion": &Reference{
	type_: String,
},
			"ScriptLocation": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Job_NotificationProperty": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NotifyDelayAfter": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Glue::MLTransform_FindMatchesParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccuracyCostTradeoff": &Reference{
	type_: Number,
},
			"EnforceProvidedLabels": &Reference{
	type_: Boolean,
},
			"PrecisionRecallTradeoff": &Reference{
	type_: Number,
},
			"PrimaryKeyColumnName": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::MLTransform_GlueTables": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	type_: String,
},
			"ConnectionName": &Reference{
	type_: String,
},
			"DatabaseName": &Reference{
	type_: String,
},
			"TableName": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::MLTransform_InputRecordTables": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GlueTables": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Glue::MLTransform_GlueTables",
},
},
	},
},
	"AWS::Glue::MLTransform_MLUserDataEncryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KmsKeyId": &Reference{
	type_: String,
},
			"MLUserDataEncryptionMode": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::MLTransform_TransformEncryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MLUserDataEncryption": &Reference{
	ref: "AWS::Glue::MLTransform_MLUserDataEncryption",
},
			"TaskRunSecurityConfigurationName": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::MLTransform_TransformParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FindMatchesParameters": &Reference{
	ref: "AWS::Glue::MLTransform_FindMatchesParameters",
},
			"TransformType": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Partition_Column": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Comment": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Partition_Order": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Column": &Reference{
	type_: String,
},
			"SortOrder": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Glue::Partition_PartitionInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"StorageDescriptor": &Reference{
	ref: "AWS::Glue::Partition_StorageDescriptor",
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Glue::Partition_SchemaId": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RegistryName": &Reference{
	type_: String,
},
			"SchemaArn": &Reference{
	type_: String,
},
			"SchemaName": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Partition_SchemaReference": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SchemaId": &Reference{
	ref: "AWS::Glue::Partition_SchemaId",
},
			"SchemaVersionId": &Reference{
	type_: String,
},
			"SchemaVersionNumber": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Glue::Partition_SerdeInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"SerializationLibrary": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Partition_SkewedInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SkewedColumnNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SkewedColumnValueLocationMaps": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"SkewedColumnValues": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Glue::Partition_StorageDescriptor": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketColumns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Columns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Glue::Partition_Column",
},
},
			"Compressed": &Reference{
	type_: Boolean,
},
			"InputFormat": &Reference{
	type_: String,
},
			"Location": &Reference{
	type_: String,
},
			"NumberOfBuckets": &Reference{
	type_: Integer,
},
			"OutputFormat": &Reference{
	type_: String,
},
			"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"SchemaReference": &Reference{
	ref: "AWS::Glue::Partition_SchemaReference",
},
			"SerdeInfo": &Reference{
	ref: "AWS::Glue::Partition_SerdeInfo",
},
			"SkewedInfo": &Reference{
	ref: "AWS::Glue::Partition_SkewedInfo",
},
			"SortColumns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Glue::Partition_Order",
},
},
			"StoredAsSubDirectories": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Glue::Registry_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Schema_Registry": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Schema_SchemaVersion": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IsLatest": &Reference{
	type_: Boolean,
},
			"VersionNumber": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Glue::Schema_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::SchemaVersion_Schema": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RegistryName": &Reference{
	type_: String,
},
			"SchemaArn": &Reference{
	type_: String,
},
			"SchemaName": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::SecurityConfiguration_CloudWatchEncryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchEncryptionMode": &Reference{
	type_: String,
},
			"KmsKeyArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::SecurityConfiguration_EncryptionConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchEncryption": &Reference{
	ref: "AWS::Glue::SecurityConfiguration_CloudWatchEncryption",
},
			"JobBookmarksEncryption": &Reference{
	ref: "AWS::Glue::SecurityConfiguration_JobBookmarksEncryption",
},
			"S3Encryptions": &Reference{
	ref: "AWS::Glue::SecurityConfiguration_S3Encryptions",
},
	},
},
	"AWS::Glue::SecurityConfiguration_JobBookmarksEncryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"JobBookmarksEncryptionMode": &Reference{
	type_: String,
},
			"KmsKeyArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::SecurityConfiguration_S3Encryptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::Glue::Table_Column": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Comment": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Table_Order": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Column": &Reference{
	type_: String,
},
			"SortOrder": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Glue::Table_SchemaId": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RegistryName": &Reference{
	type_: String,
},
			"SchemaArn": &Reference{
	type_: String,
},
			"SchemaName": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Table_SchemaReference": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SchemaId": &Reference{
	ref: "AWS::Glue::Table_SchemaId",
},
			"SchemaVersionId": &Reference{
	type_: String,
},
			"SchemaVersionNumber": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Glue::Table_SerdeInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"SerializationLibrary": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Table_SkewedInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SkewedColumnNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SkewedColumnValueLocationMaps": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"SkewedColumnValues": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Glue::Table_StorageDescriptor": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketColumns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Columns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Glue::Table_Column",
},
},
			"Compressed": &Reference{
	type_: Boolean,
},
			"InputFormat": &Reference{
	type_: String,
},
			"Location": &Reference{
	type_: String,
},
			"NumberOfBuckets": &Reference{
	type_: Integer,
},
			"OutputFormat": &Reference{
	type_: String,
},
			"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"SchemaReference": &Reference{
	ref: "AWS::Glue::Table_SchemaReference",
},
			"SerdeInfo": &Reference{
	ref: "AWS::Glue::Table_SerdeInfo",
},
			"SkewedInfo": &Reference{
	ref: "AWS::Glue::Table_SkewedInfo",
},
			"SortColumns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Glue::Table_Order",
},
},
			"StoredAsSubDirectories": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Glue::Table_TableIdentifier": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	type_: String,
},
			"DatabaseName": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Table_TableInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Description": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Owner": &Reference{
	type_: String,
},
			"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"PartitionKeys": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Glue::Table_Column",
},
},
			"Retention": &Reference{
	type_: Integer,
},
			"StorageDescriptor": &Reference{
	ref: "AWS::Glue::Table_StorageDescriptor",
},
			"TableType": &Reference{
	type_: String,
},
			"TargetTable": &Reference{
	ref: "AWS::Glue::Table_TableIdentifier",
},
			"ViewExpandedText": &Reference{
	type_: String,
},
			"ViewOriginalText": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Trigger_Action": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arguments": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"CrawlerName": &Reference{
	type_: String,
},
			"JobName": &Reference{
	type_: String,
},
			"NotificationProperty": &Reference{
	ref: "AWS::Glue::Trigger_NotificationProperty",
},
			"SecurityConfiguration": &Reference{
	type_: String,
},
			"Timeout": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Glue::Trigger_Condition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CrawlState": &Reference{
	type_: String,
},
			"CrawlerName": &Reference{
	type_: String,
},
			"JobName": &Reference{
	type_: String,
},
			"LogicalOperator": &Reference{
	type_: String,
},
			"State": &Reference{
	type_: String,
},
	},
},
	"AWS::Glue::Trigger_NotificationProperty": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NotifyDelayAfter": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Glue::Trigger_Predicate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Conditions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Glue::Trigger_Condition",
},
},
			"Logical": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::ConnectorDefinition_Connector": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConnectorArn": &Reference{
	type_: String,
},
			"Id": &Reference{
	type_: String,
},
			"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::Greengrass::ConnectorDefinition_ConnectorDefinitionVersion": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Connectors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Greengrass::ConnectorDefinition_Connector",
},
},
	},
},
	"AWS::Greengrass::ConnectorDefinitionVersion_Connector": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConnectorArn": &Reference{
	type_: String,
},
			"Id": &Reference{
	type_: String,
},
			"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::Greengrass::CoreDefinition_Core": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateArn": &Reference{
	type_: String,
},
			"Id": &Reference{
	type_: String,
},
			"SyncShadow": &Reference{
	type_: Boolean,
},
			"ThingArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::CoreDefinition_CoreDefinitionVersion": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Cores": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Greengrass::CoreDefinition_Core",
},
},
	},
},
	"AWS::Greengrass::CoreDefinitionVersion_Core": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateArn": &Reference{
	type_: String,
},
			"Id": &Reference{
	type_: String,
},
			"SyncShadow": &Reference{
	type_: Boolean,
},
			"ThingArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::DeviceDefinition_Device": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateArn": &Reference{
	type_: String,
},
			"Id": &Reference{
	type_: String,
},
			"SyncShadow": &Reference{
	type_: Boolean,
},
			"ThingArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::DeviceDefinition_DeviceDefinitionVersion": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Devices": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Greengrass::DeviceDefinition_Device",
},
},
	},
},
	"AWS::Greengrass::DeviceDefinitionVersion_Device": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateArn": &Reference{
	type_: String,
},
			"Id": &Reference{
	type_: String,
},
			"SyncShadow": &Reference{
	type_: Boolean,
},
			"ThingArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::FunctionDefinition_DefaultConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Execution": &Reference{
	ref: "AWS::Greengrass::FunctionDefinition_Execution",
},
	},
},
	"AWS::Greengrass::FunctionDefinition_Environment": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessSysfs": &Reference{
	type_: Boolean,
},
			"Execution": &Reference{
	ref: "AWS::Greengrass::FunctionDefinition_Execution",
},
			"ResourceAccessPolicies": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Greengrass::FunctionDefinition_ResourceAccessPolicy",
},
},
			"Variables": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::Greengrass::FunctionDefinition_Execution": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IsolationMode": &Reference{
	type_: String,
},
			"RunAs": &Reference{
	ref: "AWS::Greengrass::FunctionDefinition_RunAs",
},
	},
},
	"AWS::Greengrass::FunctionDefinition_Function": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FunctionArn": &Reference{
	type_: String,
},
			"FunctionConfiguration": &Reference{
	ref: "AWS::Greengrass::FunctionDefinition_FunctionConfiguration",
},
			"Id": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::FunctionDefinition_FunctionConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EncodingType": &Reference{
	type_: String,
},
			"Environment": &Reference{
	ref: "AWS::Greengrass::FunctionDefinition_Environment",
},
			"ExecArgs": &Reference{
	type_: String,
},
			"Executable": &Reference{
	type_: String,
},
			"MemorySize": &Reference{
	type_: Integer,
},
			"Pinned": &Reference{
	type_: Boolean,
},
			"Timeout": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Greengrass::FunctionDefinition_FunctionDefinitionVersion": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DefaultConfig": &Reference{
	ref: "AWS::Greengrass::FunctionDefinition_DefaultConfig",
},
			"Functions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Greengrass::FunctionDefinition_Function",
},
},
	},
},
	"AWS::Greengrass::FunctionDefinition_ResourceAccessPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Permission": &Reference{
	type_: String,
},
			"ResourceId": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::FunctionDefinition_RunAs": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Gid": &Reference{
	type_: Integer,
},
			"Uid": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Greengrass::FunctionDefinitionVersion_DefaultConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Execution": &Reference{
	ref: "AWS::Greengrass::FunctionDefinitionVersion_Execution",
},
	},
},
	"AWS::Greengrass::FunctionDefinitionVersion_Environment": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessSysfs": &Reference{
	type_: Boolean,
},
			"Execution": &Reference{
	ref: "AWS::Greengrass::FunctionDefinitionVersion_Execution",
},
			"ResourceAccessPolicies": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Greengrass::FunctionDefinitionVersion_ResourceAccessPolicy",
},
},
			"Variables": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::Greengrass::FunctionDefinitionVersion_Execution": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IsolationMode": &Reference{
	type_: String,
},
			"RunAs": &Reference{
	ref: "AWS::Greengrass::FunctionDefinitionVersion_RunAs",
},
	},
},
	"AWS::Greengrass::FunctionDefinitionVersion_Function": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FunctionArn": &Reference{
	type_: String,
},
			"FunctionConfiguration": &Reference{
	ref: "AWS::Greengrass::FunctionDefinitionVersion_FunctionConfiguration",
},
			"Id": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::FunctionDefinitionVersion_FunctionConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EncodingType": &Reference{
	type_: String,
},
			"Environment": &Reference{
	ref: "AWS::Greengrass::FunctionDefinitionVersion_Environment",
},
			"ExecArgs": &Reference{
	type_: String,
},
			"Executable": &Reference{
	type_: String,
},
			"MemorySize": &Reference{
	type_: Integer,
},
			"Pinned": &Reference{
	type_: Boolean,
},
			"Timeout": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Greengrass::FunctionDefinitionVersion_ResourceAccessPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Permission": &Reference{
	type_: String,
},
			"ResourceId": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::FunctionDefinitionVersion_RunAs": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Gid": &Reference{
	type_: Integer,
},
			"Uid": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Greengrass::Group_GroupVersion": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConnectorDefinitionVersionArn": &Reference{
	type_: String,
},
			"CoreDefinitionVersionArn": &Reference{
	type_: String,
},
			"DeviceDefinitionVersionArn": &Reference{
	type_: String,
},
			"FunctionDefinitionVersionArn": &Reference{
	type_: String,
},
			"LoggerDefinitionVersionArn": &Reference{
	type_: String,
},
			"ResourceDefinitionVersionArn": &Reference{
	type_: String,
},
			"SubscriptionDefinitionVersionArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::LoggerDefinition_Logger": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Component": &Reference{
	type_: String,
},
			"Id": &Reference{
	type_: String,
},
			"Level": &Reference{
	type_: String,
},
			"Space": &Reference{
	type_: Integer,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::LoggerDefinition_LoggerDefinitionVersion": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Loggers": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Greengrass::LoggerDefinition_Logger",
},
},
	},
},
	"AWS::Greengrass::LoggerDefinitionVersion_Logger": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Component": &Reference{
	type_: String,
},
			"Id": &Reference{
	type_: String,
},
			"Level": &Reference{
	type_: String,
},
			"Space": &Reference{
	type_: Integer,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::ResourceDefinition_GroupOwnerSetting": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AutoAddGroupOwner": &Reference{
	type_: Boolean,
},
			"GroupOwner": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::ResourceDefinition_LocalDeviceResourceData": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GroupOwnerSetting": &Reference{
	ref: "AWS::Greengrass::ResourceDefinition_GroupOwnerSetting",
},
			"SourcePath": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::ResourceDefinition_LocalVolumeResourceData": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationPath": &Reference{
	type_: String,
},
			"GroupOwnerSetting": &Reference{
	ref: "AWS::Greengrass::ResourceDefinition_GroupOwnerSetting",
},
			"SourcePath": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::ResourceDefinition_ResourceDataContainer": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LocalDeviceResourceData": &Reference{
	ref: "AWS::Greengrass::ResourceDefinition_LocalDeviceResourceData",
},
			"LocalVolumeResourceData": &Reference{
	ref: "AWS::Greengrass::ResourceDefinition_LocalVolumeResourceData",
},
			"S3MachineLearningModelResourceData": &Reference{
	ref: "AWS::Greengrass::ResourceDefinition_S3MachineLearningModelResourceData",
},
			"SageMakerMachineLearningModelResourceData": &Reference{
	ref: "AWS::Greengrass::ResourceDefinition_SageMakerMachineLearningModelResourceData",
},
			"SecretsManagerSecretResourceData": &Reference{
	ref: "AWS::Greengrass::ResourceDefinition_SecretsManagerSecretResourceData",
},
	},
},
	"AWS::Greengrass::ResourceDefinition_ResourceDefinitionVersion": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Resources": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Greengrass::ResourceDefinition_ResourceInstance",
},
},
	},
},
	"AWS::Greengrass::ResourceDefinition_ResourceDownloadOwnerSetting": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GroupOwner": &Reference{
	type_: String,
},
			"GroupPermission": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::ResourceDefinition_ResourceInstance": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Id": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"ResourceDataContainer": &Reference{
	ref: "AWS::Greengrass::ResourceDefinition_ResourceDataContainer",
},
	},
},
	"AWS::Greengrass::ResourceDefinition_S3MachineLearningModelResourceData": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationPath": &Reference{
	type_: String,
},
			"OwnerSetting": &Reference{
	ref: "AWS::Greengrass::ResourceDefinition_ResourceDownloadOwnerSetting",
},
			"S3Uri": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::ResourceDefinition_SageMakerMachineLearningModelResourceData": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationPath": &Reference{
	type_: String,
},
			"OwnerSetting": &Reference{
	ref: "AWS::Greengrass::ResourceDefinition_ResourceDownloadOwnerSetting",
},
			"SageMakerJobArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::ResourceDefinition_SecretsManagerSecretResourceData": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ARN": &Reference{
	type_: String,
},
			"AdditionalStagingLabelsToDownload": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Greengrass::ResourceDefinitionVersion_GroupOwnerSetting": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AutoAddGroupOwner": &Reference{
	type_: Boolean,
},
			"GroupOwner": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::ResourceDefinitionVersion_LocalDeviceResourceData": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GroupOwnerSetting": &Reference{
	ref: "AWS::Greengrass::ResourceDefinitionVersion_GroupOwnerSetting",
},
			"SourcePath": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::ResourceDefinitionVersion_LocalVolumeResourceData": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationPath": &Reference{
	type_: String,
},
			"GroupOwnerSetting": &Reference{
	ref: "AWS::Greengrass::ResourceDefinitionVersion_GroupOwnerSetting",
},
			"SourcePath": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::ResourceDefinitionVersion_ResourceDataContainer": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LocalDeviceResourceData": &Reference{
	ref: "AWS::Greengrass::ResourceDefinitionVersion_LocalDeviceResourceData",
},
			"LocalVolumeResourceData": &Reference{
	ref: "AWS::Greengrass::ResourceDefinitionVersion_LocalVolumeResourceData",
},
			"S3MachineLearningModelResourceData": &Reference{
	ref: "AWS::Greengrass::ResourceDefinitionVersion_S3MachineLearningModelResourceData",
},
			"SageMakerMachineLearningModelResourceData": &Reference{
	ref: "AWS::Greengrass::ResourceDefinitionVersion_SageMakerMachineLearningModelResourceData",
},
			"SecretsManagerSecretResourceData": &Reference{
	ref: "AWS::Greengrass::ResourceDefinitionVersion_SecretsManagerSecretResourceData",
},
	},
},
	"AWS::Greengrass::ResourceDefinitionVersion_ResourceDownloadOwnerSetting": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GroupOwner": &Reference{
	type_: String,
},
			"GroupPermission": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::ResourceDefinitionVersion_ResourceInstance": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Id": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"ResourceDataContainer": &Reference{
	ref: "AWS::Greengrass::ResourceDefinitionVersion_ResourceDataContainer",
},
	},
},
	"AWS::Greengrass::ResourceDefinitionVersion_S3MachineLearningModelResourceData": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationPath": &Reference{
	type_: String,
},
			"OwnerSetting": &Reference{
	ref: "AWS::Greengrass::ResourceDefinitionVersion_ResourceDownloadOwnerSetting",
},
			"S3Uri": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::ResourceDefinitionVersion_SageMakerMachineLearningModelResourceData": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationPath": &Reference{
	type_: String,
},
			"OwnerSetting": &Reference{
	ref: "AWS::Greengrass::ResourceDefinitionVersion_ResourceDownloadOwnerSetting",
},
			"SageMakerJobArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::ResourceDefinitionVersion_SecretsManagerSecretResourceData": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ARN": &Reference{
	type_: String,
},
			"AdditionalStagingLabelsToDownload": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Greengrass::SubscriptionDefinition_Subscription": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Id": &Reference{
	type_: String,
},
			"Source": &Reference{
	type_: String,
},
			"Subject": &Reference{
	type_: String,
},
			"Target": &Reference{
	type_: String,
},
	},
},
	"AWS::Greengrass::SubscriptionDefinition_SubscriptionDefinitionVersion": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Subscriptions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Greengrass::SubscriptionDefinition_Subscription",
},
},
	},
},
	"AWS::Greengrass::SubscriptionDefinitionVersion_Subscription": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Id": &Reference{
	type_: String,
},
			"Source": &Reference{
	type_: String,
},
			"Subject": &Reference{
	type_: String,
},
			"Target": &Reference{
	type_: String,
},
	},
},
	"AWS::GreengrassV2::ComponentVersion_ComponentDependencyRequirement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DependencyType": &Reference{
	type_: String,
},
			"VersionRequirement": &Reference{
	type_: String,
},
	},
},
	"AWS::GreengrassV2::ComponentVersion_ComponentPlatform": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Attributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::GreengrassV2::ComponentVersion_FilesystemPath": &Reference{
	type_: String,
},
	"AWS::GreengrassV2::ComponentVersion_LambdaAddGroupOwnerBoolean": &Reference{
	type_: Boolean,
},
	"AWS::GreengrassV2::ComponentVersion_LambdaContainerParams": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Devices": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GreengrassV2::ComponentVersion_LambdaDeviceMount",
},
},
			"MemorySizeInKB": &Reference{
	type_: Integer,
},
			"MountROSysfs": &Reference{
	type_: Boolean,
},
			"Volumes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GreengrassV2::ComponentVersion_LambdaVolumeMount",
},
},
	},
},
	"AWS::GreengrassV2::ComponentVersion_LambdaDeviceMount": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AddGroupOwner": &Reference{
	ref: "AWS::GreengrassV2::ComponentVersion_LambdaAddGroupOwnerBoolean",
},
			"Path": &Reference{
	ref: "AWS::GreengrassV2::ComponentVersion_FilesystemPath",
},
			"Permission": &Reference{
	ref: "AWS::GreengrassV2::ComponentVersion_LambdaFilesystemPermission",
},
	},
},
	"AWS::GreengrassV2::ComponentVersion_LambdaEventSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Topic": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::GreengrassV2::ComponentVersion_LambdaExecutionParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EnvironmentVariables": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"EventSources": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GreengrassV2::ComponentVersion_LambdaEventSource",
},
},
			"ExecArgs": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"InputPayloadEncodingType": &Reference{
	type_: String,
},
			"LinuxProcessParams": &Reference{
	ref: "AWS::GreengrassV2::ComponentVersion_LambdaLinuxProcessParams",
},
			"MaxIdleTimeInSeconds": &Reference{
	type_: Integer,
},
			"MaxInstancesCount": &Reference{
	type_: Integer,
},
			"MaxQueueSize": &Reference{
	type_: Integer,
},
			"Pinned": &Reference{
	type_: Boolean,
},
			"StatusTimeoutInSeconds": &Reference{
	type_: Integer,
},
			"TimeoutInSeconds": &Reference{
	type_: Integer,
},
	},
},
	"AWS::GreengrassV2::ComponentVersion_LambdaFilesystemPermission": &Reference{
	type_: String,
},
	"AWS::GreengrassV2::ComponentVersion_LambdaFunctionRecipeSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComponentDependencies": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"ComponentLambdaParameters": &Reference{
	ref: "AWS::GreengrassV2::ComponentVersion_LambdaExecutionParameters",
},
			"ComponentName": &Reference{
	type_: String,
},
			"ComponentPlatforms": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::GreengrassV2::ComponentVersion_ComponentPlatform",
},
},
			"ComponentVersion": &Reference{
	type_: String,
},
			"LambdaArn": &Reference{
	type_: String,
},
	},
},
	"AWS::GreengrassV2::ComponentVersion_LambdaLinuxProcessParams": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerParams": &Reference{
	ref: "AWS::GreengrassV2::ComponentVersion_LambdaContainerParams",
},
			"IsolationMode": &Reference{
	type_: String,
},
	},
},
	"AWS::GreengrassV2::ComponentVersion_LambdaVolumeMount": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AddGroupOwner": &Reference{
	ref: "AWS::GreengrassV2::ComponentVersion_LambdaAddGroupOwnerBoolean",
},
			"DestinationPath": &Reference{
	ref: "AWS::GreengrassV2::ComponentVersion_FilesystemPath",
},
			"Permission": &Reference{
	ref: "AWS::GreengrassV2::ComponentVersion_LambdaFilesystemPermission",
},
			"SourcePath": &Reference{
	ref: "AWS::GreengrassV2::ComponentVersion_FilesystemPath",
},
	},
},
	"AWS::GroundStation::Config_AntennaDownlinkConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SpectrumConfig": &Reference{
	ref: "AWS::GroundStation::Config_SpectrumConfig",
},
	},
},
	"AWS::GroundStation::Config_AntennaDownlinkDemodDecodeConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DecodeConfig": &Reference{
	ref: "AWS::GroundStation::Config_DecodeConfig",
},
			"DemodulationConfig": &Reference{
	ref: "AWS::GroundStation::Config_DemodulationConfig",
},
			"SpectrumConfig": &Reference{
	ref: "AWS::GroundStation::Config_SpectrumConfig",
},
	},
},
	"AWS::GroundStation::Config_AntennaUplinkConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SpectrumConfig": &Reference{
	ref: "AWS::GroundStation::Config_UplinkSpectrumConfig",
},
			"TargetEirp": &Reference{
	ref: "AWS::GroundStation::Config_Eirp",
},
			"TransmitDisabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::GroundStation::Config_BandwidthUnits": &Reference{
	type_: String,
},
	"AWS::GroundStation::Config_BucketArn": &Reference{
	type_: String,
},
	"AWS::GroundStation::Config_ConfigData": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AntennaDownlinkConfig": &Reference{
	ref: "AWS::GroundStation::Config_AntennaDownlinkConfig",
},
			"AntennaDownlinkDemodDecodeConfig": &Reference{
	ref: "AWS::GroundStation::Config_AntennaDownlinkDemodDecodeConfig",
},
			"AntennaUplinkConfig": &Reference{
	ref: "AWS::GroundStation::Config_AntennaUplinkConfig",
},
			"DataflowEndpointConfig": &Reference{
	ref: "AWS::GroundStation::Config_DataflowEndpointConfig",
},
			"S3RecordingConfig": &Reference{
	ref: "AWS::GroundStation::Config_S3RecordingConfig",
},
			"TrackingConfig": &Reference{
	ref: "AWS::GroundStation::Config_TrackingConfig",
},
			"UplinkEchoConfig": &Reference{
	ref: "AWS::GroundStation::Config_UplinkEchoConfig",
},
	},
},
	"AWS::GroundStation::Config_DataflowEndpointConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataflowEndpointName": &Reference{
	type_: String,
},
			"DataflowEndpointRegion": &Reference{
	type_: String,
},
	},
},
	"AWS::GroundStation::Config_DecodeConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"UnvalidatedJSON": &Reference{
	ref: "AWS::GroundStation::Config_JsonString",
},
	},
},
	"AWS::GroundStation::Config_DemodulationConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"UnvalidatedJSON": &Reference{
	ref: "AWS::GroundStation::Config_JsonString",
},
	},
},
	"AWS::GroundStation::Config_Eirp": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Units": &Reference{
	ref: "AWS::GroundStation::Config_EirpUnits",
},
			"Value": &Reference{
	type_: Number,
},
	},
},
	"AWS::GroundStation::Config_EirpUnits": &Reference{
	type_: String,
},
	"AWS::GroundStation::Config_Frequency": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Units": &Reference{
	ref: "AWS::GroundStation::Config_FrequencyUnits",
},
			"Value": &Reference{
	type_: Number,
},
	},
},
	"AWS::GroundStation::Config_FrequencyBandwidth": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Units": &Reference{
	ref: "AWS::GroundStation::Config_BandwidthUnits",
},
			"Value": &Reference{
	type_: Number,
},
	},
},
	"AWS::GroundStation::Config_FrequencyUnits": &Reference{
	type_: String,
},
	"AWS::GroundStation::Config_JsonString": &Reference{
	type_: String,
},
	"AWS::GroundStation::Config_Polarization": &Reference{
	type_: String,
},
	"AWS::GroundStation::Config_RoleArn": &Reference{
	type_: String,
},
	"AWS::GroundStation::Config_S3KeyPrefix": &Reference{
	type_: String,
},
	"AWS::GroundStation::Config_S3RecordingConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketArn": &Reference{
	ref: "AWS::GroundStation::Config_BucketArn",
},
			"Prefix": &Reference{
	ref: "AWS::GroundStation::Config_S3KeyPrefix",
},
			"RoleArn": &Reference{
	ref: "AWS::GroundStation::Config_RoleArn",
},
	},
},
	"AWS::GroundStation::Config_SpectrumConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bandwidth": &Reference{
	ref: "AWS::GroundStation::Config_FrequencyBandwidth",
},
			"CenterFrequency": &Reference{
	ref: "AWS::GroundStation::Config_Frequency",
},
			"Polarization": &Reference{
	ref: "AWS::GroundStation::Config_Polarization",
},
	},
},
	"AWS::GroundStation::Config_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::GroundStation::Config_TrackingConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Autotrack": &Reference{
	type_: String,
},
	},
},
	"AWS::GroundStation::Config_UplinkEchoConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AntennaUplinkConfigArn": &Reference{
	type_: String,
},
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::GroundStation::Config_UplinkSpectrumConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CenterFrequency": &Reference{
	ref: "AWS::GroundStation::Config_Frequency",
},
			"Polarization": &Reference{
	ref: "AWS::GroundStation::Config_Polarization",
},
	},
},
	"AWS::GroundStation::DataflowEndpointGroup_DataflowEndpoint": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Address": &Reference{
	ref: "AWS::GroundStation::DataflowEndpointGroup_SocketAddress",
},
			"Mtu": &Reference{
	type_: Integer,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::GroundStation::DataflowEndpointGroup_EndpointDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Endpoint": &Reference{
	ref: "AWS::GroundStation::DataflowEndpointGroup_DataflowEndpoint",
},
			"SecurityDetails": &Reference{
	ref: "AWS::GroundStation::DataflowEndpointGroup_SecurityDetails",
},
	},
},
	"AWS::GroundStation::DataflowEndpointGroup_SecurityDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RoleArn": &Reference{
	type_: String,
},
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::GroundStation::DataflowEndpointGroup_SocketAddress": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Integer,
},
	},
},
	"AWS::GroundStation::DataflowEndpointGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::GroundStation::MissionProfile_DataflowEdge": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Destination": &Reference{
	type_: String,
},
			"Source": &Reference{
	type_: String,
},
	},
},
	"AWS::GroundStation::MissionProfile_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::GuardDuty::Detector_CFNDataSourceConfigurations": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Kubernetes": &Reference{
	ref: "AWS::GuardDuty::Detector_CFNKubernetesConfiguration",
},
			"S3Logs": &Reference{
	ref: "AWS::GuardDuty::Detector_CFNS3LogsConfiguration",
},
	},
},
	"AWS::GuardDuty::Detector_CFNKubernetesAuditLogsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enable": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::GuardDuty::Detector_CFNKubernetesConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuditLogs": &Reference{
	ref: "AWS::GuardDuty::Detector_CFNKubernetesAuditLogsConfiguration",
},
	},
},
	"AWS::GuardDuty::Detector_CFNS3LogsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enable": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::GuardDuty::Filter_Condition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Eq": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Equals": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"GreaterThan": &Reference{
	type_: Integer,
},
			"GreaterThanOrEqual": &Reference{
	type_: Integer,
},
			"Gt": &Reference{
	type_: Integer,
},
			"Gte": &Reference{
	type_: Integer,
},
			"LessThan": &Reference{
	type_: Integer,
},
			"LessThanOrEqual": &Reference{
	type_: Integer,
},
			"Lt": &Reference{
	type_: Integer,
},
			"Lte": &Reference{
	type_: Integer,
},
			"Neq": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"NotEquals": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::GuardDuty::Filter_FindingCriteria": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Criterion": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"ItemType": &Reference{
	ref: "AWS::GuardDuty::Filter_Condition",
},
	},
},
	"AWS::HealthLake::FHIRDatastore_CreatedAt": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Nanos": &Reference{
	type_: Integer,
},
			"Seconds": &Reference{
	type_: String,
},
	},
},
	"AWS::HealthLake::FHIRDatastore_DatastoreArn": &Reference{
	type_: String,
},
	"AWS::HealthLake::FHIRDatastore_DatastoreEndpoint": &Reference{
	type_: String,
},
	"AWS::HealthLake::FHIRDatastore_DatastoreId": &Reference{
	type_: String,
},
	"AWS::HealthLake::FHIRDatastore_DatastoreName": &Reference{
	type_: String,
},
	"AWS::HealthLake::FHIRDatastore_DatastoreStatus": &Reference{
	type_: String,
},
	"AWS::HealthLake::FHIRDatastore_DatastoreTypeVersion": &Reference{
	type_: String,
},
	"AWS::HealthLake::FHIRDatastore_KmsEncryptionConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CmkType": &Reference{
	type_: String,
},
			"KmsKeyId": &Reference{
	type_: String,
},
	},
},
	"AWS::HealthLake::FHIRDatastore_PreloadDataConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PreloadDataType": &Reference{
	type_: String,
},
	},
},
	"AWS::HealthLake::FHIRDatastore_SseConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KmsEncryptionConfig": &Reference{
	ref: "AWS::HealthLake::FHIRDatastore_KmsEncryptionConfig",
},
	},
},
	"AWS::HealthLake::FHIRDatastore_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IAM::Group_Policy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PolicyDocument": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"PolicyName": &Reference{
	type_: String,
},
	},
},
	"AWS::IAM::OIDCProvider_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IAM::Role_Policy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PolicyDocument": &Reference{
	type_: Unknown,
},
			"PolicyName": &Reference{
	type_: String,
},
	},
},
	"AWS::IAM::Role_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IAM::SAMLProvider_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IAM::ServerCertificate_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IAM::User_LoginProfile": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Password": &Reference{
	type_: String,
},
			"PasswordResetRequired": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::IAM::User_Policy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PolicyDocument": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"PolicyName": &Reference{
	type_: String,
},
	},
},
	"AWS::IAM::User_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IAM::VirtualMFADevice_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ImageBuilder::ContainerRecipe_ComponentConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComponentArn": &Reference{
	type_: String,
},
	},
},
	"AWS::ImageBuilder::ContainerRecipe_EbsInstanceBlockDeviceSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeleteOnTermination": &Reference{
	type_: Boolean,
},
			"Encrypted": &Reference{
	type_: Boolean,
},
			"Iops": &Reference{
	type_: Integer,
},
			"KmsKeyId": &Reference{
	type_: String,
},
			"SnapshotId": &Reference{
	type_: String,
},
			"Throughput": &Reference{
	type_: Integer,
},
			"VolumeSize": &Reference{
	type_: Integer,
},
			"VolumeType": &Reference{
	type_: String,
},
	},
},
	"AWS::ImageBuilder::ContainerRecipe_InstanceBlockDeviceMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeviceName": &Reference{
	type_: String,
},
			"Ebs": &Reference{
	ref: "AWS::ImageBuilder::ContainerRecipe_EbsInstanceBlockDeviceSpecification",
},
			"NoDevice": &Reference{
	type_: String,
},
			"VirtualName": &Reference{
	type_: String,
},
	},
},
	"AWS::ImageBuilder::ContainerRecipe_InstanceConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BlockDeviceMappings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ImageBuilder::ContainerRecipe_InstanceBlockDeviceMapping",
},
},
			"Image": &Reference{
	type_: String,
},
	},
},
	"AWS::ImageBuilder::ContainerRecipe_TargetContainerRepository": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RepositoryName": &Reference{
	type_: String,
},
			"Service": &Reference{
	type_: String,
},
	},
},
	"AWS::ImageBuilder::DistributionConfiguration_AmiDistributionConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AmiTags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Description": &Reference{
	type_: String,
},
			"KmsKeyId": &Reference{
	type_: String,
},
			"LaunchPermissionConfiguration": &Reference{
	ref: "AWS::ImageBuilder::DistributionConfiguration_LaunchPermissionConfiguration",
},
			"Name": &Reference{
	type_: String,
},
			"TargetAccountIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::ImageBuilder::DistributionConfiguration_ContainerDistributionConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerTags": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Description": &Reference{
	type_: String,
},
			"TargetRepository": &Reference{
	ref: "AWS::ImageBuilder::DistributionConfiguration_TargetContainerRepository",
},
	},
},
	"AWS::ImageBuilder::DistributionConfiguration_Distribution": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AmiDistributionConfiguration": &Reference{
	ref: "AWS::ImageBuilder::DistributionConfiguration_AmiDistributionConfiguration",
},
			"ContainerDistributionConfiguration": &Reference{
	ref: "AWS::ImageBuilder::DistributionConfiguration_ContainerDistributionConfiguration",
},
			"FastLaunchConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ImageBuilder::DistributionConfiguration_FastLaunchConfiguration",
},
},
			"LaunchTemplateConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ImageBuilder::DistributionConfiguration_LaunchTemplateConfiguration",
},
},
			"LicenseConfigurationArns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ImageBuilder::DistributionConfiguration_LicenseConfigurationArn",
},
},
			"Region": &Reference{
	type_: String,
},
	},
},
	"AWS::ImageBuilder::DistributionConfiguration_FastLaunchConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccountId": &Reference{
	type_: String,
},
			"Enabled": &Reference{
	type_: Boolean,
},
			"LaunchTemplate": &Reference{
	ref: "AWS::ImageBuilder::DistributionConfiguration_FastLaunchLaunchTemplateSpecification",
},
			"MaxParallelLaunches": &Reference{
	type_: Integer,
},
			"SnapshotConfiguration": &Reference{
	ref: "AWS::ImageBuilder::DistributionConfiguration_FastLaunchSnapshotConfiguration",
},
	},
},
	"AWS::ImageBuilder::DistributionConfiguration_FastLaunchLaunchTemplateSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LaunchTemplateId": &Reference{
	type_: String,
},
			"LaunchTemplateName": &Reference{
	type_: String,
},
			"LaunchTemplateVersion": &Reference{
	type_: String,
},
	},
},
	"AWS::ImageBuilder::DistributionConfiguration_FastLaunchSnapshotConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TargetResourceCount": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ImageBuilder::DistributionConfiguration_LaunchPermissionConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OrganizationArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"OrganizationalUnitArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"UserGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"UserIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::ImageBuilder::DistributionConfiguration_LaunchTemplateConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccountId": &Reference{
	type_: String,
},
			"LaunchTemplateId": &Reference{
	type_: String,
},
			"SetDefaultVersion": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::ImageBuilder::DistributionConfiguration_LicenseConfigurationArn": &Reference{
	type_: String,
},
	"AWS::ImageBuilder::DistributionConfiguration_TargetContainerRepository": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RepositoryName": &Reference{
	type_: String,
},
			"Service": &Reference{
	type_: String,
},
	},
},
	"AWS::ImageBuilder::Image_ImageTestsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ImageTestsEnabled": &Reference{
	type_: Boolean,
},
			"TimeoutMinutes": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ImageBuilder::ImagePipeline_ImageTestsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ImageTestsEnabled": &Reference{
	type_: Boolean,
},
			"TimeoutMinutes": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ImageBuilder::ImagePipeline_Schedule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PipelineExecutionStartCondition": &Reference{
	type_: String,
},
			"ScheduleExpression": &Reference{
	type_: String,
},
	},
},
	"AWS::ImageBuilder::ImageRecipe_AdditionalInstanceConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SystemsManagerAgent": &Reference{
	ref: "AWS::ImageBuilder::ImageRecipe_SystemsManagerAgent",
},
			"UserDataOverride": &Reference{
	type_: String,
},
	},
},
	"AWS::ImageBuilder::ImageRecipe_ComponentConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComponentArn": &Reference{
	type_: String,
},
			"Parameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ImageBuilder::ImageRecipe_ComponentParameter",
},
},
	},
},
	"AWS::ImageBuilder::ImageRecipe_ComponentParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::ImageBuilder::ImageRecipe_EbsInstanceBlockDeviceSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeleteOnTermination": &Reference{
	type_: Boolean,
},
			"Encrypted": &Reference{
	type_: Boolean,
},
			"Iops": &Reference{
	type_: Integer,
},
			"KmsKeyId": &Reference{
	type_: String,
},
			"SnapshotId": &Reference{
	type_: String,
},
			"Throughput": &Reference{
	type_: Integer,
},
			"VolumeSize": &Reference{
	type_: Integer,
},
			"VolumeType": &Reference{
	type_: String,
},
	},
},
	"AWS::ImageBuilder::ImageRecipe_InstanceBlockDeviceMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeviceName": &Reference{
	type_: String,
},
			"Ebs": &Reference{
	ref: "AWS::ImageBuilder::ImageRecipe_EbsInstanceBlockDeviceSpecification",
},
			"NoDevice": &Reference{
	type_: String,
},
			"VirtualName": &Reference{
	type_: String,
},
	},
},
	"AWS::ImageBuilder::ImageRecipe_SystemsManagerAgent": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"UninstallAfterBuild": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::ImageBuilder::InfrastructureConfiguration_InstanceMetadataOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HttpPutResponseHopLimit": &Reference{
	type_: Integer,
},
			"HttpTokens": &Reference{
	type_: String,
},
	},
},
	"AWS::ImageBuilder::InfrastructureConfiguration_Logging": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Logs": &Reference{
	ref: "AWS::ImageBuilder::InfrastructureConfiguration_S3Logs",
},
	},
},
	"AWS::ImageBuilder::InfrastructureConfiguration_S3Logs": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3BucketName": &Reference{
	type_: String,
},
			"S3KeyPrefix": &Reference{
	type_: String,
},
	},
},
	"AWS::ImageBuilder::InfrastructureConfiguration_TagMap": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TagKey": &Reference{
	type_: String,
},
			"TagValue": &Reference{
	type_: String,
},
	},
},
	"AWS::Inspector::AssessmentTemplate_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Inspector::ResourceGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::InspectorV2::Filter_DateFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EndInclusive": &Reference{
	ref: "AWS::InspectorV2::Filter_Timestamp",
},
			"StartInclusive": &Reference{
	ref: "AWS::InspectorV2::Filter_Timestamp",
},
	},
},
	"AWS::InspectorV2::Filter_DateFilterList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::InspectorV2::Filter_DateFilter",
},
},
	"AWS::InspectorV2::Filter_FilterAction": &Reference{
	type_: String,
},
	"AWS::InspectorV2::Filter_FilterCriteria": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AwsAccountId": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"ComponentId": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"ComponentType": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"Ec2InstanceImageId": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"Ec2InstanceSubnetId": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"Ec2InstanceVpcId": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"EcrImageArchitecture": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"EcrImageHash": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"EcrImagePushedAt": &Reference{
	ref: "AWS::InspectorV2::Filter_DateFilterList",
},
			"EcrImageRegistry": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"EcrImageRepositoryName": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"EcrImageTags": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"FindingArn": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"FindingStatus": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"FindingType": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"FirstObservedAt": &Reference{
	ref: "AWS::InspectorV2::Filter_DateFilterList",
},
			"InspectorScore": &Reference{
	ref: "AWS::InspectorV2::Filter_NumberFilterList",
},
			"LastObservedAt": &Reference{
	ref: "AWS::InspectorV2::Filter_DateFilterList",
},
			"NetworkProtocol": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"PortRange": &Reference{
	ref: "AWS::InspectorV2::Filter_PortRangeFilterList",
},
			"RelatedVulnerabilities": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"ResourceId": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"ResourceTags": &Reference{
	ref: "AWS::InspectorV2::Filter_MapFilterList",
},
			"ResourceType": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"Severity": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"Title": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"UpdatedAt": &Reference{
	ref: "AWS::InspectorV2::Filter_DateFilterList",
},
			"VendorSeverity": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"VulnerabilityId": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"VulnerabilitySource": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilterList",
},
			"VulnerablePackages": &Reference{
	ref: "AWS::InspectorV2::Filter_PackageFilterList",
},
	},
},
	"AWS::InspectorV2::Filter_MapComparison": &Reference{
	type_: String,
},
	"AWS::InspectorV2::Filter_MapFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Comparison": &Reference{
	ref: "AWS::InspectorV2::Filter_MapComparison",
},
			"Key": &Reference{
	ref: "AWS::InspectorV2::Filter_MapKey",
},
			"Value": &Reference{
	ref: "AWS::InspectorV2::Filter_MapValue",
},
	},
},
	"AWS::InspectorV2::Filter_MapFilterList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::InspectorV2::Filter_MapFilter",
},
},
	"AWS::InspectorV2::Filter_MapKey": &Reference{
	type_: String,
},
	"AWS::InspectorV2::Filter_MapValue": &Reference{
	type_: String,
},
	"AWS::InspectorV2::Filter_NumberFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LowerInclusive": &Reference{
	type_: Number,
},
			"UpperInclusive": &Reference{
	type_: Number,
},
	},
},
	"AWS::InspectorV2::Filter_NumberFilterList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::InspectorV2::Filter_NumberFilter",
},
},
	"AWS::InspectorV2::Filter_PackageFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Architecture": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilter",
},
			"Epoch": &Reference{
	ref: "AWS::InspectorV2::Filter_NumberFilter",
},
			"Name": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilter",
},
			"Release": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilter",
},
			"SourceLayerHash": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilter",
},
			"Version": &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilter",
},
	},
},
	"AWS::InspectorV2::Filter_PackageFilterList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::InspectorV2::Filter_PackageFilter",
},
},
	"AWS::InspectorV2::Filter_Port": &Reference{
	type_: Integer,
},
	"AWS::InspectorV2::Filter_PortRangeFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BeginInclusive": &Reference{
	ref: "AWS::InspectorV2::Filter_Port",
},
			"EndInclusive": &Reference{
	ref: "AWS::InspectorV2::Filter_Port",
},
	},
},
	"AWS::InspectorV2::Filter_PortRangeFilterList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::InspectorV2::Filter_PortRangeFilter",
},
},
	"AWS::InspectorV2::Filter_StringComparison": &Reference{
	type_: String,
},
	"AWS::InspectorV2::Filter_StringFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Comparison": &Reference{
	ref: "AWS::InspectorV2::Filter_StringComparison",
},
			"Value": &Reference{
	ref: "AWS::InspectorV2::Filter_StringInput",
},
	},
},
	"AWS::InspectorV2::Filter_StringFilterList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::InspectorV2::Filter_StringFilter",
},
},
	"AWS::InspectorV2::Filter_StringInput": &Reference{
	type_: String,
},
	"AWS::InspectorV2::Filter_Timestamp": &Reference{
	type_: Integer,
},
	"AWS::IoT1Click::Project_PlacementTemplate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DefaultAttributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"DeviceTemplates": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::IoT::AccountAuditConfiguration_AuditCheckConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::IoT::AccountAuditConfiguration_AuditCheckConfigurations": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthenticatedCognitoRoleOverlyPermissiveCheck": &Reference{
	ref: "AWS::IoT::AccountAuditConfiguration_AuditCheckConfiguration",
},
			"CaCertificateExpiringCheck": &Reference{
	ref: "AWS::IoT::AccountAuditConfiguration_AuditCheckConfiguration",
},
			"CaCertificateKeyQualityCheck": &Reference{
	ref: "AWS::IoT::AccountAuditConfiguration_AuditCheckConfiguration",
},
			"ConflictingClientIdsCheck": &Reference{
	ref: "AWS::IoT::AccountAuditConfiguration_AuditCheckConfiguration",
},
			"DeviceCertificateExpiringCheck": &Reference{
	ref: "AWS::IoT::AccountAuditConfiguration_AuditCheckConfiguration",
},
			"DeviceCertificateKeyQualityCheck": &Reference{
	ref: "AWS::IoT::AccountAuditConfiguration_AuditCheckConfiguration",
},
			"DeviceCertificateSharedCheck": &Reference{
	ref: "AWS::IoT::AccountAuditConfiguration_AuditCheckConfiguration",
},
			"IotPolicyOverlyPermissiveCheck": &Reference{
	ref: "AWS::IoT::AccountAuditConfiguration_AuditCheckConfiguration",
},
			"IotRoleAliasAllowsAccessToUnusedServicesCheck": &Reference{
	ref: "AWS::IoT::AccountAuditConfiguration_AuditCheckConfiguration",
},
			"IotRoleAliasOverlyPermissiveCheck": &Reference{
	ref: "AWS::IoT::AccountAuditConfiguration_AuditCheckConfiguration",
},
			"LoggingDisabledCheck": &Reference{
	ref: "AWS::IoT::AccountAuditConfiguration_AuditCheckConfiguration",
},
			"RevokedCaCertificateStillActiveCheck": &Reference{
	ref: "AWS::IoT::AccountAuditConfiguration_AuditCheckConfiguration",
},
			"RevokedDeviceCertificateStillActiveCheck": &Reference{
	ref: "AWS::IoT::AccountAuditConfiguration_AuditCheckConfiguration",
},
			"UnauthenticatedCognitoRoleOverlyPermissiveCheck": &Reference{
	ref: "AWS::IoT::AccountAuditConfiguration_AuditCheckConfiguration",
},
	},
},
	"AWS::IoT::AccountAuditConfiguration_AuditNotificationTarget": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
			"RoleArn": &Reference{
	type_: String,
},
			"TargetArn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::AccountAuditConfiguration_AuditNotificationTargetConfigurations": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Sns": &Reference{
	ref: "AWS::IoT::AccountAuditConfiguration_AuditNotificationTarget",
},
	},
},
	"AWS::IoT::Authorizer_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::CACertificate_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::CustomMetric_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::Dimension_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::DomainConfiguration_AuthorizerConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllowAuthorizerOverride": &Reference{
	type_: Boolean,
},
			"DefaultAuthorizerName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::DomainConfiguration_ServerCertificateSummary": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ServerCertificateArn": &Reference{
	type_: String,
},
			"ServerCertificateStatus": &Reference{
	type_: String,
},
			"ServerCertificateStatusDetail": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::DomainConfiguration_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::FleetMetric_AggregationType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::IoT::FleetMetric_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::JobTemplate_AbortCriteria": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	ref: "AWS::IoT::JobTemplate_Action",
},
			"FailureType": &Reference{
	ref: "AWS::IoT::JobTemplate_FailureType",
},
			"MinNumberOfExecutedThings": &Reference{
	ref: "AWS::IoT::JobTemplate_MinNumberOfExecutedThings",
},
			"ThresholdPercentage": &Reference{
	ref: "AWS::IoT::JobTemplate_ThresholdPercentage",
},
	},
},
	"AWS::IoT::JobTemplate_Action": &Reference{
	type_: String,
},
	"AWS::IoT::JobTemplate_BaseRatePerMinute": &Reference{
	type_: Integer,
},
	"AWS::IoT::JobTemplate_ExpiresInSec": &Reference{
	type_: Integer,
},
	"AWS::IoT::JobTemplate_ExponentialRolloutRate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BaseRatePerMinute": &Reference{
	ref: "AWS::IoT::JobTemplate_BaseRatePerMinute",
},
			"IncrementFactor": &Reference{
	ref: "AWS::IoT::JobTemplate_IncrementFactor",
},
			"RateIncreaseCriteria": &Reference{
	ref: "AWS::IoT::JobTemplate_RateIncreaseCriteria",
},
	},
},
	"AWS::IoT::JobTemplate_FailureType": &Reference{
	type_: String,
},
	"AWS::IoT::JobTemplate_InProgressTimeoutInMinutes": &Reference{
	type_: Integer,
},
	"AWS::IoT::JobTemplate_IncrementFactor": &Reference{
	type_: Number,
},
	"AWS::IoT::JobTemplate_JobRetryFailureType": &Reference{
	type_: String,
},
	"AWS::IoT::JobTemplate_MaximumPerMinute": &Reference{
	type_: Integer,
},
	"AWS::IoT::JobTemplate_MinNumberOfExecutedThings": &Reference{
	type_: Integer,
},
	"AWS::IoT::JobTemplate_NumberOfNotifiedThings": &Reference{
	type_: Integer,
},
	"AWS::IoT::JobTemplate_NumberOfSucceededThings": &Reference{
	type_: Integer,
},
	"AWS::IoT::JobTemplate_RateIncreaseCriteria": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NumberOfNotifiedThings": &Reference{
	ref: "AWS::IoT::JobTemplate_NumberOfNotifiedThings",
},
			"NumberOfSucceededThings": &Reference{
	ref: "AWS::IoT::JobTemplate_NumberOfSucceededThings",
},
	},
},
	"AWS::IoT::JobTemplate_RetryCriteria": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FailureType": &Reference{
	ref: "AWS::IoT::JobTemplate_JobRetryFailureType",
},
			"NumberOfRetries": &Reference{
	type_: Integer,
},
	},
},
	"AWS::IoT::JobTemplate_RoleArn": &Reference{
	type_: String,
},
	"AWS::IoT::JobTemplate_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::JobTemplate_ThresholdPercentage": &Reference{
	type_: Number,
},
	"AWS::IoT::MitigationAction_ActionParams": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AddThingsToThingGroupParams": &Reference{
	ref: "AWS::IoT::MitigationAction_AddThingsToThingGroupParams",
},
			"EnableIoTLoggingParams": &Reference{
	ref: "AWS::IoT::MitigationAction_EnableIoTLoggingParams",
},
			"PublishFindingToSnsParams": &Reference{
	ref: "AWS::IoT::MitigationAction_PublishFindingToSnsParams",
},
			"ReplaceDefaultPolicyVersionParams": &Reference{
	ref: "AWS::IoT::MitigationAction_ReplaceDefaultPolicyVersionParams",
},
			"UpdateCACertificateParams": &Reference{
	ref: "AWS::IoT::MitigationAction_UpdateCACertificateParams",
},
			"UpdateDeviceCertificateParams": &Reference{
	ref: "AWS::IoT::MitigationAction_UpdateDeviceCertificateParams",
},
	},
},
	"AWS::IoT::MitigationAction_AddThingsToThingGroupParams": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OverrideDynamicGroups": &Reference{
	type_: Boolean,
},
			"ThingGroupNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::IoT::MitigationAction_EnableIoTLoggingParams": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LogLevel": &Reference{
	type_: String,
},
			"RoleArnForLogging": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::MitigationAction_PublishFindingToSnsParams": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TopicArn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::MitigationAction_ReplaceDefaultPolicyVersionParams": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TemplateName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::MitigationAction_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::MitigationAction_UpdateCACertificateParams": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::MitigationAction_UpdateDeviceCertificateParams": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::ProvisioningTemplate_ProvisioningHook": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PayloadVersion": &Reference{
	type_: String,
},
			"TargetArn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::ProvisioningTemplate_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::RoleAlias_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::ScheduledAudit_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::SecurityProfile_AlertTarget": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AlertTargetArn": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::SecurityProfile_Behavior": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Criteria": &Reference{
	ref: "AWS::IoT::SecurityProfile_BehaviorCriteria",
},
			"Metric": &Reference{
	type_: String,
},
			"MetricDimension": &Reference{
	ref: "AWS::IoT::SecurityProfile_MetricDimension",
},
			"Name": &Reference{
	type_: String,
},
			"SuppressAlerts": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::IoT::SecurityProfile_BehaviorCriteria": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComparisonOperator": &Reference{
	type_: String,
},
			"ConsecutiveDatapointsToAlarm": &Reference{
	type_: Integer,
},
			"ConsecutiveDatapointsToClear": &Reference{
	type_: Integer,
},
			"DurationSeconds": &Reference{
	type_: Integer,
},
			"MlDetectionConfig": &Reference{
	ref: "AWS::IoT::SecurityProfile_MachineLearningDetectionConfig",
},
			"StatisticalThreshold": &Reference{
	ref: "AWS::IoT::SecurityProfile_StatisticalThreshold",
},
			"Value": &Reference{
	ref: "AWS::IoT::SecurityProfile_MetricValue",
},
	},
},
	"AWS::IoT::SecurityProfile_MachineLearningDetectionConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConfidenceLevel": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::SecurityProfile_MetricDimension": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DimensionName": &Reference{
	type_: String,
},
			"Operator": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::SecurityProfile_MetricToRetain": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Metric": &Reference{
	type_: String,
},
			"MetricDimension": &Reference{
	ref: "AWS::IoT::SecurityProfile_MetricDimension",
},
	},
},
	"AWS::IoT::SecurityProfile_MetricValue": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Cidrs": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Count": &Reference{
	type_: String,
},
			"Number": &Reference{
	type_: Number,
},
			"Numbers": &Reference{
	type_: Array,
	items: &Reference{
	type_: Number,
},
},
			"Ports": &Reference{
	type_: Array,
	items: &Reference{
	type_: Integer,
},
},
			"Strings": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::IoT::SecurityProfile_StatisticalThreshold": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Statistic": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::SecurityProfile_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::Thing_AttributePayload": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Attributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::IoT::TopicRule_Action": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudwatchAlarm": &Reference{
	ref: "AWS::IoT::TopicRule_CloudwatchAlarmAction",
},
			"CloudwatchLogs": &Reference{
	ref: "AWS::IoT::TopicRule_CloudwatchLogsAction",
},
			"CloudwatchMetric": &Reference{
	ref: "AWS::IoT::TopicRule_CloudwatchMetricAction",
},
			"DynamoDB": &Reference{
	ref: "AWS::IoT::TopicRule_DynamoDBAction",
},
			"DynamoDBv2": &Reference{
	ref: "AWS::IoT::TopicRule_DynamoDBv2Action",
},
			"Elasticsearch": &Reference{
	ref: "AWS::IoT::TopicRule_ElasticsearchAction",
},
			"Firehose": &Reference{
	ref: "AWS::IoT::TopicRule_FirehoseAction",
},
			"Http": &Reference{
	ref: "AWS::IoT::TopicRule_HttpAction",
},
			"IotAnalytics": &Reference{
	ref: "AWS::IoT::TopicRule_IotAnalyticsAction",
},
			"IotEvents": &Reference{
	ref: "AWS::IoT::TopicRule_IotEventsAction",
},
			"IotSiteWise": &Reference{
	ref: "AWS::IoT::TopicRule_IotSiteWiseAction",
},
			"Kafka": &Reference{
	ref: "AWS::IoT::TopicRule_KafkaAction",
},
			"Kinesis": &Reference{
	ref: "AWS::IoT::TopicRule_KinesisAction",
},
			"Lambda": &Reference{
	ref: "AWS::IoT::TopicRule_LambdaAction",
},
			"OpenSearch": &Reference{
	ref: "AWS::IoT::TopicRule_OpenSearchAction",
},
			"Republish": &Reference{
	ref: "AWS::IoT::TopicRule_RepublishAction",
},
			"S3": &Reference{
	ref: "AWS::IoT::TopicRule_S3Action",
},
			"Sns": &Reference{
	ref: "AWS::IoT::TopicRule_SnsAction",
},
			"Sqs": &Reference{
	ref: "AWS::IoT::TopicRule_SqsAction",
},
			"StepFunctions": &Reference{
	ref: "AWS::IoT::TopicRule_StepFunctionsAction",
},
			"Timestream": &Reference{
	ref: "AWS::IoT::TopicRule_TimestreamAction",
},
	},
},
	"AWS::IoT::TopicRule_AssetPropertyTimestamp": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OffsetInNanos": &Reference{
	type_: String,
},
			"TimeInSeconds": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_AssetPropertyValue": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Quality": &Reference{
	type_: String,
},
			"Timestamp": &Reference{
	ref: "AWS::IoT::TopicRule_AssetPropertyTimestamp",
},
			"Value": &Reference{
	ref: "AWS::IoT::TopicRule_AssetPropertyVariant",
},
	},
},
	"AWS::IoT::TopicRule_AssetPropertyVariant": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BooleanValue": &Reference{
	type_: String,
},
			"DoubleValue": &Reference{
	type_: String,
},
			"IntegerValue": &Reference{
	type_: String,
},
			"StringValue": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_CannedAccessControlList": &Reference{
	type_: String,
},
	"AWS::IoT::TopicRule_CloudwatchAlarmAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AlarmName": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
			"StateReason": &Reference{
	type_: String,
},
			"StateValue": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_CloudwatchLogsAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LogGroupName": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_CloudwatchMetricAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MetricName": &Reference{
	type_: String,
},
			"MetricNamespace": &Reference{
	type_: String,
},
			"MetricTimestamp": &Reference{
	type_: String,
},
			"MetricUnit": &Reference{
	type_: String,
},
			"MetricValue": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_DynamoDBAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HashKeyField": &Reference{
	type_: String,
},
			"HashKeyType": &Reference{
	type_: String,
},
			"HashKeyValue": &Reference{
	type_: String,
},
			"PayloadField": &Reference{
	type_: String,
},
			"RangeKeyField": &Reference{
	type_: String,
},
			"RangeKeyType": &Reference{
	type_: String,
},
			"RangeKeyValue": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
			"TableName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_DynamoDBv2Action": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PutItem": &Reference{
	ref: "AWS::IoT::TopicRule_PutItemInput",
},
			"RoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_ElasticsearchAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Endpoint": &Reference{
	type_: String,
},
			"Id": &Reference{
	type_: String,
},
			"Index": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_FirehoseAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BatchMode": &Reference{
	type_: Boolean,
},
			"DeliveryStreamName": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
			"Separator": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_HttpAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Auth": &Reference{
	ref: "AWS::IoT::TopicRule_HttpAuthorization",
},
			"ConfirmationUrl": &Reference{
	type_: String,
},
			"Headers": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::TopicRule_HttpActionHeader",
},
},
			"Url": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_HttpActionHeader": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_HttpAuthorization": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Sigv4": &Reference{
	ref: "AWS::IoT::TopicRule_SigV4Authorization",
},
	},
},
	"AWS::IoT::TopicRule_IotAnalyticsAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BatchMode": &Reference{
	type_: Boolean,
},
			"ChannelName": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_IotEventsAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BatchMode": &Reference{
	type_: Boolean,
},
			"InputName": &Reference{
	type_: String,
},
			"MessageId": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_IotSiteWiseAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PutAssetPropertyValueEntries": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::TopicRule_PutAssetPropertyValueEntry",
},
},
			"RoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_KafkaAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClientProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"DestinationArn": &Reference{
	type_: String,
},
			"Key": &Reference{
	type_: String,
},
			"Partition": &Reference{
	type_: String,
},
			"Topic": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_KinesisAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PartitionKey": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
			"StreamName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_LambdaAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FunctionArn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_OpenSearchAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Endpoint": &Reference{
	type_: String,
},
			"Id": &Reference{
	type_: String,
},
			"Index": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_PutAssetPropertyValueEntry": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AssetId": &Reference{
	type_: String,
},
			"EntryId": &Reference{
	type_: String,
},
			"PropertyAlias": &Reference{
	type_: String,
},
			"PropertyId": &Reference{
	type_: String,
},
			"PropertyValues": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::TopicRule_AssetPropertyValue",
},
},
	},
},
	"AWS::IoT::TopicRule_PutItemInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TableName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_RepublishAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Qos": &Reference{
	type_: Integer,
},
			"RoleArn": &Reference{
	type_: String,
},
			"Topic": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_RoleArn": &Reference{
	type_: String,
},
	"AWS::IoT::TopicRule_S3Action": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketName": &Reference{
	type_: String,
},
			"CannedAcl": &Reference{
	ref: "AWS::IoT::TopicRule_CannedAccessControlList",
},
			"Key": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_SigV4Authorization": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RoleArn": &Reference{
	type_: String,
},
			"ServiceName": &Reference{
	type_: String,
},
			"SigningRegion": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_SnsAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MessageFormat": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
			"TargetArn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_SqsAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"QueueUrl": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
			"UseBase64": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::IoT::TopicRule_StepFunctionsAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExecutionNamePrefix": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
			"StateMachineName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_TimestreamAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DatabaseName": &Reference{
	type_: String,
},
			"Dimensions": &Reference{
	ref: "AWS::IoT::TopicRule_TimestreamDimensionsList",
},
			"RoleArn": &Reference{
	type_: String,
},
			"TableName": &Reference{
	type_: String,
},
			"Timestamp": &Reference{
	ref: "AWS::IoT::TopicRule_TimestreamTimestamp",
},
	},
},
	"AWS::IoT::TopicRule_TimestreamDimension": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_TimestreamDimensionsList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::TopicRule_TimestreamDimension",
},
},
	"AWS::IoT::TopicRule_TimestreamTimestamp": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Unit": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRule_TopicRulePayload": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Actions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoT::TopicRule_Action",
},
},
			"AwsIotSqlVersion": &Reference{
	type_: String,
},
			"Description": &Reference{
	type_: String,
},
			"ErrorAction": &Reference{
	ref: "AWS::IoT::TopicRule_Action",
},
			"RuleDisabled": &Reference{
	type_: Boolean,
},
			"Sql": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRuleDestination_HttpUrlDestinationSummary": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConfirmationUrl": &Reference{
	type_: String,
},
	},
},
	"AWS::IoT::TopicRuleDestination_TopicRuleDestinationStatus": &Reference{
	type_: String,
},
	"AWS::IoT::TopicRuleDestination_VpcDestinationProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RoleArn": &Reference{
	type_: String,
},
			"SecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"VpcId": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Channel_ChannelStorage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomerManagedS3": &Reference{
	ref: "AWS::IoTAnalytics::Channel_CustomerManagedS3",
},
			"ServiceManagedS3": &Reference{
	ref: "AWS::IoTAnalytics::Channel_ServiceManagedS3",
},
	},
},
	"AWS::IoTAnalytics::Channel_CustomerManagedS3": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"KeyPrefix": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Channel_RetentionPeriod": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NumberOfDays": &Reference{
	type_: Integer,
},
			"Unlimited": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::IoTAnalytics::Channel_ServiceManagedS3": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::IoTAnalytics::Channel_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Dataset_Action": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ActionName": &Reference{
	type_: String,
},
			"ContainerAction": &Reference{
	ref: "AWS::IoTAnalytics::Dataset_ContainerAction",
},
			"QueryAction": &Reference{
	ref: "AWS::IoTAnalytics::Dataset_QueryAction",
},
	},
},
	"AWS::IoTAnalytics::Dataset_ContainerAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExecutionRoleArn": &Reference{
	type_: String,
},
			"Image": &Reference{
	type_: String,
},
			"ResourceConfiguration": &Reference{
	ref: "AWS::IoTAnalytics::Dataset_ResourceConfiguration",
},
			"Variables": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTAnalytics::Dataset_Variable",
},
},
	},
},
	"AWS::IoTAnalytics::Dataset_DatasetContentDeliveryRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Destination": &Reference{
	ref: "AWS::IoTAnalytics::Dataset_DatasetContentDeliveryRuleDestination",
},
			"EntryName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Dataset_DatasetContentDeliveryRuleDestination": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IotEventsDestinationConfiguration": &Reference{
	ref: "AWS::IoTAnalytics::Dataset_IotEventsDestinationConfiguration",
},
			"S3DestinationConfiguration": &Reference{
	ref: "AWS::IoTAnalytics::Dataset_S3DestinationConfiguration",
},
	},
},
	"AWS::IoTAnalytics::Dataset_DatasetContentVersionValue": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DatasetName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Dataset_DeltaTime": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OffsetSeconds": &Reference{
	type_: Integer,
},
			"TimeExpression": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Dataset_DeltaTimeSessionWindowConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TimeoutInMinutes": &Reference{
	type_: Integer,
},
	},
},
	"AWS::IoTAnalytics::Dataset_Filter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeltaTime": &Reference{
	ref: "AWS::IoTAnalytics::Dataset_DeltaTime",
},
	},
},
	"AWS::IoTAnalytics::Dataset_GlueConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DatabaseName": &Reference{
	type_: String,
},
			"TableName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Dataset_IotEventsDestinationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InputName": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Dataset_LateDataRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RuleConfiguration": &Reference{
	ref: "AWS::IoTAnalytics::Dataset_LateDataRuleConfiguration",
},
			"RuleName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Dataset_LateDataRuleConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeltaTimeSessionWindowConfiguration": &Reference{
	ref: "AWS::IoTAnalytics::Dataset_DeltaTimeSessionWindowConfiguration",
},
	},
},
	"AWS::IoTAnalytics::Dataset_OutputFileUriValue": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FileName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Dataset_QueryAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Filters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTAnalytics::Dataset_Filter",
},
},
			"SqlQuery": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Dataset_ResourceConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComputeType": &Reference{
	type_: String,
},
			"VolumeSizeInGB": &Reference{
	type_: Integer,
},
	},
},
	"AWS::IoTAnalytics::Dataset_RetentionPeriod": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NumberOfDays": &Reference{
	type_: Integer,
},
			"Unlimited": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::IoTAnalytics::Dataset_S3DestinationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"GlueConfiguration": &Reference{
	ref: "AWS::IoTAnalytics::Dataset_GlueConfiguration",
},
			"Key": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Dataset_Schedule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ScheduleExpression": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Dataset_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Dataset_Trigger": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Schedule": &Reference{
	ref: "AWS::IoTAnalytics::Dataset_Schedule",
},
			"TriggeringDataset": &Reference{
	ref: "AWS::IoTAnalytics::Dataset_TriggeringDataset",
},
	},
},
	"AWS::IoTAnalytics::Dataset_TriggeringDataset": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DatasetName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Dataset_Variable": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DatasetContentVersionValue": &Reference{
	ref: "AWS::IoTAnalytics::Dataset_DatasetContentVersionValue",
},
			"DoubleValue": &Reference{
	type_: Number,
},
			"OutputFileUriValue": &Reference{
	ref: "AWS::IoTAnalytics::Dataset_OutputFileUriValue",
},
			"StringValue": &Reference{
	type_: String,
},
			"VariableName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Dataset_VersioningConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxVersions": &Reference{
	type_: Integer,
},
			"Unlimited": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::IoTAnalytics::Datastore_Column": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Datastore_CustomerManagedS3": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"KeyPrefix": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Datastore_CustomerManagedS3Storage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"KeyPrefix": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Datastore_DatastorePartition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Partition": &Reference{
	ref: "AWS::IoTAnalytics::Datastore_Partition",
},
			"TimestampPartition": &Reference{
	ref: "AWS::IoTAnalytics::Datastore_TimestampPartition",
},
	},
},
	"AWS::IoTAnalytics::Datastore_DatastorePartitions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Partitions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTAnalytics::Datastore_DatastorePartition",
},
},
	},
},
	"AWS::IoTAnalytics::Datastore_DatastoreStorage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomerManagedS3": &Reference{
	ref: "AWS::IoTAnalytics::Datastore_CustomerManagedS3",
},
			"IotSiteWiseMultiLayerStorage": &Reference{
	ref: "AWS::IoTAnalytics::Datastore_IotSiteWiseMultiLayerStorage",
},
			"ServiceManagedS3": &Reference{
	ref: "AWS::IoTAnalytics::Datastore_ServiceManagedS3",
},
	},
},
	"AWS::IoTAnalytics::Datastore_FileFormatConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"JsonConfiguration": &Reference{
	ref: "AWS::IoTAnalytics::Datastore_JsonConfiguration",
},
			"ParquetConfiguration": &Reference{
	ref: "AWS::IoTAnalytics::Datastore_ParquetConfiguration",
},
	},
},
	"AWS::IoTAnalytics::Datastore_IotSiteWiseMultiLayerStorage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomerManagedS3Storage": &Reference{
	ref: "AWS::IoTAnalytics::Datastore_CustomerManagedS3Storage",
},
	},
},
	"AWS::IoTAnalytics::Datastore_JsonConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::IoTAnalytics::Datastore_ParquetConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SchemaDefinition": &Reference{
	ref: "AWS::IoTAnalytics::Datastore_SchemaDefinition",
},
	},
},
	"AWS::IoTAnalytics::Datastore_Partition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AttributeName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Datastore_RetentionPeriod": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NumberOfDays": &Reference{
	type_: Integer,
},
			"Unlimited": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::IoTAnalytics::Datastore_SchemaDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Columns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTAnalytics::Datastore_Column",
},
},
	},
},
	"AWS::IoTAnalytics::Datastore_ServiceManagedS3": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::IoTAnalytics::Datastore_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Datastore_TimestampPartition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AttributeName": &Reference{
	type_: String,
},
			"TimestampFormat": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Pipeline_Activity": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AddAttributes": &Reference{
	ref: "AWS::IoTAnalytics::Pipeline_AddAttributes",
},
			"Channel": &Reference{
	ref: "AWS::IoTAnalytics::Pipeline_Channel",
},
			"Datastore": &Reference{
	ref: "AWS::IoTAnalytics::Pipeline_Datastore",
},
			"DeviceRegistryEnrich": &Reference{
	ref: "AWS::IoTAnalytics::Pipeline_DeviceRegistryEnrich",
},
			"DeviceShadowEnrich": &Reference{
	ref: "AWS::IoTAnalytics::Pipeline_DeviceShadowEnrich",
},
			"Filter": &Reference{
	ref: "AWS::IoTAnalytics::Pipeline_Filter",
},
			"Lambda": &Reference{
	ref: "AWS::IoTAnalytics::Pipeline_Lambda",
},
			"Math": &Reference{
	ref: "AWS::IoTAnalytics::Pipeline_Math",
},
			"RemoveAttributes": &Reference{
	ref: "AWS::IoTAnalytics::Pipeline_RemoveAttributes",
},
			"SelectAttributes": &Reference{
	ref: "AWS::IoTAnalytics::Pipeline_SelectAttributes",
},
	},
},
	"AWS::IoTAnalytics::Pipeline_AddAttributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Attributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Name": &Reference{
	type_: String,
},
			"Next": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Pipeline_Channel": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ChannelName": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Next": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Pipeline_Datastore": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DatastoreName": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Pipeline_DeviceRegistryEnrich": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Attribute": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Next": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
			"ThingName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Pipeline_DeviceShadowEnrich": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Attribute": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Next": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
			"ThingName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Pipeline_Filter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Filter": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Next": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Pipeline_Lambda": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BatchSize": &Reference{
	type_: Integer,
},
			"LambdaName": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Next": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Pipeline_Math": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Attribute": &Reference{
	type_: String,
},
			"Math": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Next": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Pipeline_RemoveAttributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Attributes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Name": &Reference{
	type_: String,
},
			"Next": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Pipeline_SelectAttributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Attributes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Name": &Reference{
	type_: String,
},
			"Next": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTAnalytics::Pipeline_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::AlarmModel_AcknowledgeFlow": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::IoTEvents::AlarmModel_AlarmAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DynamoDB": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_DynamoDB",
},
			"DynamoDBv2": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_DynamoDBv2",
},
			"Firehose": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_Firehose",
},
			"IotEvents": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_IotEvents",
},
			"IotSiteWise": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_IotSiteWise",
},
			"IotTopicPublish": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_IotTopicPublish",
},
			"Lambda": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_Lambda",
},
			"Sns": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_Sns",
},
			"Sqs": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_Sqs",
},
	},
},
	"AWS::IoTEvents::AlarmModel_AlarmActions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTEvents::AlarmModel_AlarmAction",
},
},
	"AWS::IoTEvents::AlarmModel_AlarmCapabilities": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AcknowledgeFlow": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_AcknowledgeFlow",
},
			"InitializationConfiguration": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_InitializationConfiguration",
},
	},
},
	"AWS::IoTEvents::AlarmModel_AlarmEventActions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AlarmActions": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_AlarmActions",
},
	},
},
	"AWS::IoTEvents::AlarmModel_AlarmRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SimpleRule": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_SimpleRule",
},
	},
},
	"AWS::IoTEvents::AlarmModel_AssetPropertyTimestamp": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OffsetInNanos": &Reference{
	type_: String,
},
			"TimeInSeconds": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::AlarmModel_AssetPropertyValue": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Quality": &Reference{
	type_: String,
},
			"Timestamp": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_AssetPropertyTimestamp",
},
			"Value": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_AssetPropertyVariant",
},
	},
},
	"AWS::IoTEvents::AlarmModel_AssetPropertyVariant": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BooleanValue": &Reference{
	type_: String,
},
			"DoubleValue": &Reference{
	type_: String,
},
			"IntegerValue": &Reference{
	type_: String,
},
			"StringValue": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::AlarmModel_DynamoDB": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HashKeyField": &Reference{
	type_: String,
},
			"HashKeyType": &Reference{
	type_: String,
},
			"HashKeyValue": &Reference{
	type_: String,
},
			"Operation": &Reference{
	type_: String,
},
			"Payload": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_Payload",
},
			"PayloadField": &Reference{
	type_: String,
},
			"RangeKeyField": &Reference{
	type_: String,
},
			"RangeKeyType": &Reference{
	type_: String,
},
			"RangeKeyValue": &Reference{
	type_: String,
},
			"TableName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::AlarmModel_DynamoDBv2": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Payload": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_Payload",
},
			"TableName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::AlarmModel_Firehose": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeliveryStreamName": &Reference{
	type_: String,
},
			"Payload": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_Payload",
},
			"Separator": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::AlarmModel_InitializationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DisabledOnInitialization": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::IoTEvents::AlarmModel_IotEvents": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InputName": &Reference{
	type_: String,
},
			"Payload": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_Payload",
},
	},
},
	"AWS::IoTEvents::AlarmModel_IotSiteWise": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AssetId": &Reference{
	type_: String,
},
			"EntryId": &Reference{
	type_: String,
},
			"PropertyAlias": &Reference{
	type_: String,
},
			"PropertyId": &Reference{
	type_: String,
},
			"PropertyValue": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_AssetPropertyValue",
},
	},
},
	"AWS::IoTEvents::AlarmModel_IotTopicPublish": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MqttTopic": &Reference{
	type_: String,
},
			"Payload": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_Payload",
},
	},
},
	"AWS::IoTEvents::AlarmModel_Lambda": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FunctionArn": &Reference{
	type_: String,
},
			"Payload": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_Payload",
},
	},
},
	"AWS::IoTEvents::AlarmModel_Payload": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContentExpression": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::AlarmModel_SimpleRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComparisonOperator": &Reference{
	type_: String,
},
			"InputProperty": &Reference{
	type_: String,
},
			"Threshold": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::AlarmModel_Sns": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Payload": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_Payload",
},
			"TargetArn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::AlarmModel_Sqs": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Payload": &Reference{
	ref: "AWS::IoTEvents::AlarmModel_Payload",
},
			"QueueUrl": &Reference{
	type_: String,
},
			"UseBase64": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::IoTEvents::AlarmModel_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::DetectorModel_Action": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClearTimer": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_ClearTimer",
},
			"DynamoDB": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_DynamoDB",
},
			"DynamoDBv2": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_DynamoDBv2",
},
			"Firehose": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_Firehose",
},
			"IotEvents": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_IotEvents",
},
			"IotSiteWise": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_IotSiteWise",
},
			"IotTopicPublish": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_IotTopicPublish",
},
			"Lambda": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_Lambda",
},
			"ResetTimer": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_ResetTimer",
},
			"SetTimer": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_SetTimer",
},
			"SetVariable": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_SetVariable",
},
			"Sns": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_Sns",
},
			"Sqs": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_Sqs",
},
	},
},
	"AWS::IoTEvents::DetectorModel_AssetPropertyTimestamp": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OffsetInNanos": &Reference{
	type_: String,
},
			"TimeInSeconds": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::DetectorModel_AssetPropertyValue": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Quality": &Reference{
	type_: String,
},
			"Timestamp": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_AssetPropertyTimestamp",
},
			"Value": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_AssetPropertyVariant",
},
	},
},
	"AWS::IoTEvents::DetectorModel_AssetPropertyVariant": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BooleanValue": &Reference{
	type_: String,
},
			"DoubleValue": &Reference{
	type_: String,
},
			"IntegerValue": &Reference{
	type_: String,
},
			"StringValue": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::DetectorModel_ClearTimer": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TimerName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::DetectorModel_DetectorModelDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InitialStateName": &Reference{
	type_: String,
},
			"States": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTEvents::DetectorModel_State",
},
},
	},
},
	"AWS::IoTEvents::DetectorModel_DynamoDB": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HashKeyField": &Reference{
	type_: String,
},
			"HashKeyType": &Reference{
	type_: String,
},
			"HashKeyValue": &Reference{
	type_: String,
},
			"Operation": &Reference{
	type_: String,
},
			"Payload": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_Payload",
},
			"PayloadField": &Reference{
	type_: String,
},
			"RangeKeyField": &Reference{
	type_: String,
},
			"RangeKeyType": &Reference{
	type_: String,
},
			"RangeKeyValue": &Reference{
	type_: String,
},
			"TableName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::DetectorModel_DynamoDBv2": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Payload": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_Payload",
},
			"TableName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::DetectorModel_Event": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Actions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTEvents::DetectorModel_Action",
},
},
			"Condition": &Reference{
	type_: String,
},
			"EventName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::DetectorModel_Firehose": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeliveryStreamName": &Reference{
	type_: String,
},
			"Payload": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_Payload",
},
			"Separator": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::DetectorModel_IotEvents": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InputName": &Reference{
	type_: String,
},
			"Payload": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_Payload",
},
	},
},
	"AWS::IoTEvents::DetectorModel_IotSiteWise": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AssetId": &Reference{
	type_: String,
},
			"EntryId": &Reference{
	type_: String,
},
			"PropertyAlias": &Reference{
	type_: String,
},
			"PropertyId": &Reference{
	type_: String,
},
			"PropertyValue": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_AssetPropertyValue",
},
	},
},
	"AWS::IoTEvents::DetectorModel_IotTopicPublish": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MqttTopic": &Reference{
	type_: String,
},
			"Payload": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_Payload",
},
	},
},
	"AWS::IoTEvents::DetectorModel_Lambda": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FunctionArn": &Reference{
	type_: String,
},
			"Payload": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_Payload",
},
	},
},
	"AWS::IoTEvents::DetectorModel_OnEnter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Events": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTEvents::DetectorModel_Event",
},
},
	},
},
	"AWS::IoTEvents::DetectorModel_OnExit": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Events": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTEvents::DetectorModel_Event",
},
},
	},
},
	"AWS::IoTEvents::DetectorModel_OnInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Events": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTEvents::DetectorModel_Event",
},
},
			"TransitionEvents": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTEvents::DetectorModel_TransitionEvent",
},
},
	},
},
	"AWS::IoTEvents::DetectorModel_Payload": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContentExpression": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::DetectorModel_ResetTimer": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TimerName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::DetectorModel_SetTimer": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DurationExpression": &Reference{
	type_: String,
},
			"Seconds": &Reference{
	type_: Integer,
},
			"TimerName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::DetectorModel_SetVariable": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Value": &Reference{
	type_: String,
},
			"VariableName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::DetectorModel_Sns": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Payload": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_Payload",
},
			"TargetArn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::DetectorModel_Sqs": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Payload": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_Payload",
},
			"QueueUrl": &Reference{
	type_: String,
},
			"UseBase64": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::IoTEvents::DetectorModel_State": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OnEnter": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_OnEnter",
},
			"OnExit": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_OnExit",
},
			"OnInput": &Reference{
	ref: "AWS::IoTEvents::DetectorModel_OnInput",
},
			"StateName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::DetectorModel_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::DetectorModel_TransitionEvent": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Actions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTEvents::DetectorModel_Action",
},
},
			"Condition": &Reference{
	type_: String,
},
			"EventName": &Reference{
	type_: String,
},
			"NextState": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::Input_Attribute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"JsonPath": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTEvents::Input_InputDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Attributes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTEvents::Input_Attribute",
},
},
	},
},
	"AWS::IoTEvents::Input_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTFleetHub::Application_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTSiteWise::AccessPolicy_AccessPolicyIdentity": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IamRole": &Reference{
	ref: "AWS::IoTSiteWise::AccessPolicy_IamRole",
},
			"IamUser": &Reference{
	ref: "AWS::IoTSiteWise::AccessPolicy_IamUser",
},
			"User": &Reference{
	ref: "AWS::IoTSiteWise::AccessPolicy_User",
},
	},
},
	"AWS::IoTSiteWise::AccessPolicy_AccessPolicyResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Portal": &Reference{
	ref: "AWS::IoTSiteWise::AccessPolicy_Portal",
},
			"Project": &Reference{
	ref: "AWS::IoTSiteWise::AccessPolicy_Project",
},
	},
},
	"AWS::IoTSiteWise::AccessPolicy_IamRole": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"arn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTSiteWise::AccessPolicy_IamUser": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"arn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTSiteWise::AccessPolicy_Portal": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"id": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTSiteWise::AccessPolicy_Project": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"id": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTSiteWise::AccessPolicy_User": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"id": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTSiteWise::Asset_AssetHierarchy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ChildAssetId": &Reference{
	type_: String,
},
			"LogicalId": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTSiteWise::Asset_AssetProperty": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Alias": &Reference{
	type_: String,
},
			"LogicalId": &Reference{
	type_: String,
},
			"NotificationState": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTSiteWise::Asset_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTSiteWise::AssetModel_AssetModelCompositeModel": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CompositeModelProperties": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTSiteWise::AssetModel_AssetModelProperty",
},
},
			"Description": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTSiteWise::AssetModel_AssetModelHierarchy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ChildAssetModelId": &Reference{
	type_: String,
},
			"LogicalId": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTSiteWise::AssetModel_AssetModelProperty": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataType": &Reference{
	ref: "AWS::IoTSiteWise::AssetModel_DataType",
},
			"DataTypeSpec": &Reference{
	ref: "AWS::IoTSiteWise::AssetModel_DataTypeSpec",
},
			"LogicalId": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Type": &Reference{
	ref: "AWS::IoTSiteWise::AssetModel_PropertyType",
},
			"Unit": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTSiteWise::AssetModel_Attribute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DefaultValue": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTSiteWise::AssetModel_DataType": &Reference{
	type_: String,
},
	"AWS::IoTSiteWise::AssetModel_DataTypeSpec": &Reference{
	type_: String,
},
	"AWS::IoTSiteWise::AssetModel_ExpressionVariable": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	ref: "AWS::IoTSiteWise::AssetModel_VariableValue",
},
	},
},
	"AWS::IoTSiteWise::AssetModel_Interval": &Reference{
	type_: String,
},
	"AWS::IoTSiteWise::AssetModel_Metric": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Expression": &Reference{
	type_: String,
},
			"Variables": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTSiteWise::AssetModel_ExpressionVariable",
},
},
			"Window": &Reference{
	ref: "AWS::IoTSiteWise::AssetModel_MetricWindow",
},
	},
},
	"AWS::IoTSiteWise::AssetModel_MetricWindow": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Tumbling": &Reference{
	ref: "AWS::IoTSiteWise::AssetModel_TumblingWindow",
},
	},
},
	"AWS::IoTSiteWise::AssetModel_Offset": &Reference{
	type_: String,
},
	"AWS::IoTSiteWise::AssetModel_PropertyType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Attribute": &Reference{
	ref: "AWS::IoTSiteWise::AssetModel_Attribute",
},
			"Metric": &Reference{
	ref: "AWS::IoTSiteWise::AssetModel_Metric",
},
			"Transform": &Reference{
	ref: "AWS::IoTSiteWise::AssetModel_Transform",
},
			"TypeName": &Reference{
	ref: "AWS::IoTSiteWise::AssetModel_TypeName",
},
	},
},
	"AWS::IoTSiteWise::AssetModel_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTSiteWise::AssetModel_Transform": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Expression": &Reference{
	type_: String,
},
			"Variables": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::IoTSiteWise::AssetModel_ExpressionVariable",
},
},
	},
},
	"AWS::IoTSiteWise::AssetModel_TumblingWindow": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Interval": &Reference{
	ref: "AWS::IoTSiteWise::AssetModel_Interval",
},
			"Offset": &Reference{
	ref: "AWS::IoTSiteWise::AssetModel_Offset",
},
	},
},
	"AWS::IoTSiteWise::AssetModel_TypeName": &Reference{
	type_: String,
},
	"AWS::IoTSiteWise::AssetModel_VariableValue": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HierarchyLogicalId": &Reference{
	type_: String,
},
			"PropertyLogicalId": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTSiteWise::Dashboard_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTSiteWise::Gateway_CapabilityConfiguration": &Reference{
	type_: String,
},
	"AWS::IoTSiteWise::Gateway_CapabilityNamespace": &Reference{
	type_: String,
},
	"AWS::IoTSiteWise::Gateway_GatewayCapabilitySummary": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CapabilityConfiguration": &Reference{
	ref: "AWS::IoTSiteWise::Gateway_CapabilityConfiguration",
},
			"CapabilityNamespace": &Reference{
	ref: "AWS::IoTSiteWise::Gateway_CapabilityNamespace",
},
	},
},
	"AWS::IoTSiteWise::Gateway_GatewayPlatform": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Greengrass": &Reference{
	ref: "AWS::IoTSiteWise::Gateway_Greengrass",
},
			"GreengrassV2": &Reference{
	ref: "AWS::IoTSiteWise::Gateway_GreengrassV2",
},
	},
},
	"AWS::IoTSiteWise::Gateway_Greengrass": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GroupArn": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTSiteWise::Gateway_GreengrassV2": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CoreDeviceThingName": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTSiteWise::Gateway_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTSiteWise::Portal_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::IoTSiteWise::Project_AssetId": &Reference{
	type_: String,
},
	"AWS::IoTSiteWise::Project_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::KMS::Key_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::KMS::ReplicaKey_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::KafkaConnect::Connector_ApacheKafkaCluster": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BootstrapServers": &Reference{
	type_: String,
},
			"Vpc": &Reference{
	ref: "AWS::KafkaConnect::Connector_Vpc",
},
	},
},
	"AWS::KafkaConnect::Connector_AutoScaling": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxWorkerCount": &Reference{
	type_: Integer,
},
			"McuCount": &Reference{
	type_: Integer,
},
			"MinWorkerCount": &Reference{
	type_: Integer,
},
			"ScaleInPolicy": &Reference{
	ref: "AWS::KafkaConnect::Connector_ScaleInPolicy",
},
			"ScaleOutPolicy": &Reference{
	ref: "AWS::KafkaConnect::Connector_ScaleOutPolicy",
},
	},
},
	"AWS::KafkaConnect::Connector_Capacity": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AutoScaling": &Reference{
	ref: "AWS::KafkaConnect::Connector_AutoScaling",
},
			"ProvisionedCapacity": &Reference{
	ref: "AWS::KafkaConnect::Connector_ProvisionedCapacity",
},
	},
},
	"AWS::KafkaConnect::Connector_CloudWatchLogsLogDelivery": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
			"LogGroup": &Reference{
	type_: String,
},
	},
},
	"AWS::KafkaConnect::Connector_CustomPlugin": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomPluginArn": &Reference{
	type_: String,
},
			"Revision": &Reference{
	type_: Integer,
},
	},
},
	"AWS::KafkaConnect::Connector_FirehoseLogDelivery": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeliveryStream": &Reference{
	type_: String,
},
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::KafkaConnect::Connector_KafkaCluster": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApacheKafkaCluster": &Reference{
	ref: "AWS::KafkaConnect::Connector_ApacheKafkaCluster",
},
	},
},
	"AWS::KafkaConnect::Connector_KafkaClusterClientAuthentication": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthenticationType": &Reference{
	ref: "AWS::KafkaConnect::Connector_KafkaClusterClientAuthenticationType",
},
	},
},
	"AWS::KafkaConnect::Connector_KafkaClusterClientAuthenticationType": &Reference{
	type_: String,
},
	"AWS::KafkaConnect::Connector_KafkaClusterEncryptionInTransit": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EncryptionType": &Reference{
	ref: "AWS::KafkaConnect::Connector_KafkaClusterEncryptionInTransitType",
},
	},
},
	"AWS::KafkaConnect::Connector_KafkaClusterEncryptionInTransitType": &Reference{
	type_: String,
},
	"AWS::KafkaConnect::Connector_LogDelivery": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"WorkerLogDelivery": &Reference{
	ref: "AWS::KafkaConnect::Connector_WorkerLogDelivery",
},
	},
},
	"AWS::KafkaConnect::Connector_Plugin": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomPlugin": &Reference{
	ref: "AWS::KafkaConnect::Connector_CustomPlugin",
},
	},
},
	"AWS::KafkaConnect::Connector_ProvisionedCapacity": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"McuCount": &Reference{
	type_: Integer,
},
			"WorkerCount": &Reference{
	type_: Integer,
},
	},
},
	"AWS::KafkaConnect::Connector_S3LogDelivery": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"Enabled": &Reference{
	type_: Boolean,
},
			"Prefix": &Reference{
	type_: String,
},
	},
},
	"AWS::KafkaConnect::Connector_ScaleInPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CpuUtilizationPercentage": &Reference{
	type_: Integer,
},
	},
},
	"AWS::KafkaConnect::Connector_ScaleOutPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CpuUtilizationPercentage": &Reference{
	type_: Integer,
},
	},
},
	"AWS::KafkaConnect::Connector_Vpc": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Subnets": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::KafkaConnect::Connector_WorkerConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Revision": &Reference{
	type_: Integer,
},
			"WorkerConfigurationArn": &Reference{
	type_: String,
},
	},
},
	"AWS::KafkaConnect::Connector_WorkerLogDelivery": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchLogs": &Reference{
	ref: "AWS::KafkaConnect::Connector_CloudWatchLogsLogDelivery",
},
			"Firehose": &Reference{
	ref: "AWS::KafkaConnect::Connector_FirehoseLogDelivery",
},
			"S3": &Reference{
	ref: "AWS::KafkaConnect::Connector_S3LogDelivery",
},
	},
},
	"AWS::Kendra::DataSource_AccessControlListConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KeyPath": &Reference{
	ref: "AWS::Kendra::DataSource_S3ObjectKey",
},
	},
},
	"AWS::Kendra::DataSource_AclConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllowedGroupsColumnName": &Reference{
	ref: "AWS::Kendra::DataSource_ColumnName",
},
	},
},
	"AWS::Kendra::DataSource_Arn": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_ChangeDetectingColumns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_ColumnName",
},
},
	"AWS::Kendra::DataSource_ColumnConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ChangeDetectingColumns": &Reference{
	ref: "AWS::Kendra::DataSource_ChangeDetectingColumns",
},
			"DocumentDataColumnName": &Reference{
	ref: "AWS::Kendra::DataSource_ColumnName",
},
			"DocumentIdColumnName": &Reference{
	ref: "AWS::Kendra::DataSource_ColumnName",
},
			"DocumentTitleColumnName": &Reference{
	ref: "AWS::Kendra::DataSource_ColumnName",
},
			"FieldMappings": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceToIndexFieldMappingList",
},
	},
},
	"AWS::Kendra::DataSource_ColumnName": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_ConditionOperator": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_ConfluenceAttachmentConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AttachmentFieldMappings": &Reference{
	ref: "AWS::Kendra::DataSource_ConfluenceAttachmentFieldMappingsList",
},
			"CrawlAttachments": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Kendra::DataSource_ConfluenceAttachmentFieldMappingsList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_ConfluenceAttachmentToIndexFieldMapping",
},
},
	"AWS::Kendra::DataSource_ConfluenceAttachmentFieldName": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_ConfluenceAttachmentToIndexFieldMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataSourceFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_ConfluenceAttachmentFieldName",
},
			"DateFieldFormat": &Reference{
	ref: "AWS::Kendra::DataSource_DateFieldFormat",
},
			"IndexFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_IndexFieldName",
},
	},
},
	"AWS::Kendra::DataSource_ConfluenceBlogConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BlogFieldMappings": &Reference{
	ref: "AWS::Kendra::DataSource_ConfluenceBlogFieldMappingsList",
},
	},
},
	"AWS::Kendra::DataSource_ConfluenceBlogFieldMappingsList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_ConfluenceBlogToIndexFieldMapping",
},
},
	"AWS::Kendra::DataSource_ConfluenceBlogFieldName": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_ConfluenceBlogToIndexFieldMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataSourceFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_ConfluenceBlogFieldName",
},
			"DateFieldFormat": &Reference{
	ref: "AWS::Kendra::DataSource_DateFieldFormat",
},
			"IndexFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_IndexFieldName",
},
	},
},
	"AWS::Kendra::DataSource_ConfluenceConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AttachmentConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_ConfluenceAttachmentConfiguration",
},
			"BlogConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_ConfluenceBlogConfiguration",
},
			"ExclusionPatterns": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
			"InclusionPatterns": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
			"PageConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_ConfluencePageConfiguration",
},
			"SecretArn": &Reference{
	ref: "AWS::Kendra::DataSource_SecretArn",
},
			"ServerUrl": &Reference{
	ref: "AWS::Kendra::DataSource_Url",
},
			"SpaceConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_ConfluenceSpaceConfiguration",
},
			"Version": &Reference{
	ref: "AWS::Kendra::DataSource_ConfluenceVersion",
},
			"VpcConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceVpcConfiguration",
},
	},
},
	"AWS::Kendra::DataSource_ConfluencePageConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PageFieldMappings": &Reference{
	ref: "AWS::Kendra::DataSource_ConfluencePageFieldMappingsList",
},
	},
},
	"AWS::Kendra::DataSource_ConfluencePageFieldMappingsList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_ConfluencePageToIndexFieldMapping",
},
},
	"AWS::Kendra::DataSource_ConfluencePageFieldName": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_ConfluencePageToIndexFieldMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataSourceFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_ConfluencePageFieldName",
},
			"DateFieldFormat": &Reference{
	ref: "AWS::Kendra::DataSource_DateFieldFormat",
},
			"IndexFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_IndexFieldName",
},
	},
},
	"AWS::Kendra::DataSource_ConfluenceSpaceConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CrawlArchivedSpaces": &Reference{
	type_: Boolean,
},
			"CrawlPersonalSpaces": &Reference{
	type_: Boolean,
},
			"ExcludeSpaces": &Reference{
	ref: "AWS::Kendra::DataSource_ConfluenceSpaceList",
},
			"IncludeSpaces": &Reference{
	ref: "AWS::Kendra::DataSource_ConfluenceSpaceList",
},
			"SpaceFieldMappings": &Reference{
	ref: "AWS::Kendra::DataSource_ConfluenceSpaceFieldMappingsList",
},
	},
},
	"AWS::Kendra::DataSource_ConfluenceSpaceFieldMappingsList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_ConfluenceSpaceToIndexFieldMapping",
},
},
	"AWS::Kendra::DataSource_ConfluenceSpaceFieldName": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_ConfluenceSpaceIdentifier": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_ConfluenceSpaceList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_ConfluenceSpaceIdentifier",
},
},
	"AWS::Kendra::DataSource_ConfluenceSpaceToIndexFieldMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataSourceFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_ConfluenceSpaceFieldName",
},
			"DateFieldFormat": &Reference{
	ref: "AWS::Kendra::DataSource_DateFieldFormat",
},
			"IndexFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_IndexFieldName",
},
	},
},
	"AWS::Kendra::DataSource_ConfluenceVersion": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_ConnectionConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DatabaseHost": &Reference{
	ref: "AWS::Kendra::DataSource_DatabaseHost",
},
			"DatabaseName": &Reference{
	ref: "AWS::Kendra::DataSource_DatabaseName",
},
			"DatabasePort": &Reference{
	ref: "AWS::Kendra::DataSource_DatabasePort",
},
			"SecretArn": &Reference{
	ref: "AWS::Kendra::DataSource_SecretArn",
},
			"TableName": &Reference{
	ref: "AWS::Kendra::DataSource_TableName",
},
	},
},
	"AWS::Kendra::DataSource_CustomDocumentEnrichmentConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InlineConfigurations": &Reference{
	ref: "AWS::Kendra::DataSource_InlineConfigurations",
},
			"PostExtractionHookConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_HookConfiguration",
},
			"PreExtractionHookConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_HookConfiguration",
},
			"RoleArn": &Reference{
	ref: "AWS::Kendra::DataSource_RoleArn",
},
	},
},
	"AWS::Kendra::DataSource_DataSourceConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConfluenceConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_ConfluenceConfiguration",
},
			"DatabaseConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_DatabaseConfiguration",
},
			"GoogleDriveConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_GoogleDriveConfiguration",
},
			"OneDriveConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_OneDriveConfiguration",
},
			"S3Configuration": &Reference{
	ref: "AWS::Kendra::DataSource_S3DataSourceConfiguration",
},
			"SalesforceConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_SalesforceConfiguration",
},
			"ServiceNowConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_ServiceNowConfiguration",
},
			"SharePointConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_SharePointConfiguration",
},
			"WebCrawlerConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_WebCrawlerConfiguration",
},
			"WorkDocsConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_WorkDocsConfiguration",
},
	},
},
	"AWS::Kendra::DataSource_DataSourceFieldName": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	"AWS::Kendra::DataSource_DataSourceToIndexFieldMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataSourceFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceFieldName",
},
			"DateFieldFormat": &Reference{
	ref: "AWS::Kendra::DataSource_DateFieldFormat",
},
			"IndexFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_IndexFieldName",
},
	},
},
	"AWS::Kendra::DataSource_DataSourceToIndexFieldMappingList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceToIndexFieldMapping",
},
},
	"AWS::Kendra::DataSource_DataSourceVpcConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Kendra::DataSource_DatabaseConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AclConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_AclConfiguration",
},
			"ColumnConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_ColumnConfiguration",
},
			"ConnectionConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_ConnectionConfiguration",
},
			"DatabaseEngineType": &Reference{
	ref: "AWS::Kendra::DataSource_DatabaseEngineType",
},
			"SqlConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_SqlConfiguration",
},
			"VpcConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceVpcConfiguration",
},
	},
},
	"AWS::Kendra::DataSource_DatabaseEngineType": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_DatabaseHost": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_DatabaseName": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_DatabasePort": &Reference{
	type_: Integer,
},
	"AWS::Kendra::DataSource_DateFieldFormat": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_Description": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_DisableLocalGroups": &Reference{
	type_: Boolean,
},
	"AWS::Kendra::DataSource_DocumentAttributeCondition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConditionDocumentAttributeKey": &Reference{
	ref: "AWS::Kendra::DataSource_DocumentAttributeKey",
},
			"ConditionOnValue": &Reference{
	ref: "AWS::Kendra::DataSource_DocumentAttributeValue",
},
			"Operator": &Reference{
	ref: "AWS::Kendra::DataSource_ConditionOperator",
},
	},
},
	"AWS::Kendra::DataSource_DocumentAttributeKey": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_DocumentAttributeTarget": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TargetDocumentAttributeKey": &Reference{
	ref: "AWS::Kendra::DataSource_DocumentAttributeKey",
},
			"TargetDocumentAttributeValue": &Reference{
	ref: "AWS::Kendra::DataSource_DocumentAttributeValue",
},
			"TargetDocumentAttributeValueDeletion": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Kendra::DataSource_DocumentAttributeValue": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DateValue": &Reference{
	ref: "AWS::Kendra::DataSource_Timestamp",
},
			"LongValue": &Reference{
	ref: "AWS::Kendra::DataSource_Long",
},
			"StringListValue": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"StringValue": &Reference{
	type_: String,
},
	},
},
	"AWS::Kendra::DataSource_DocumentsMetadataConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Prefix": &Reference{
	ref: "AWS::Kendra::DataSource_S3ObjectKey",
},
	},
},
	"AWS::Kendra::DataSource_ExcludeMimeTypesList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_MimeType",
},
},
	"AWS::Kendra::DataSource_ExcludeSharedDrivesList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_SharedDriveId",
},
},
	"AWS::Kendra::DataSource_ExcludeUserAccountsList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_UserAccount",
},
},
	"AWS::Kendra::DataSource_GoogleDriveConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExcludeMimeTypes": &Reference{
	ref: "AWS::Kendra::DataSource_ExcludeMimeTypesList",
},
			"ExcludeSharedDrives": &Reference{
	ref: "AWS::Kendra::DataSource_ExcludeSharedDrivesList",
},
			"ExcludeUserAccounts": &Reference{
	ref: "AWS::Kendra::DataSource_ExcludeUserAccountsList",
},
			"ExclusionPatterns": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
			"FieldMappings": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceToIndexFieldMappingList",
},
			"InclusionPatterns": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
			"SecretArn": &Reference{
	ref: "AWS::Kendra::DataSource_SecretArn",
},
	},
},
	"AWS::Kendra::DataSource_HookConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InvocationCondition": &Reference{
	ref: "AWS::Kendra::DataSource_DocumentAttributeCondition",
},
			"LambdaArn": &Reference{
	ref: "AWS::Kendra::DataSource_LambdaArn",
},
			"S3Bucket": &Reference{
	ref: "AWS::Kendra::DataSource_S3BucketName",
},
	},
},
	"AWS::Kendra::DataSource_Id": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_IndexFieldName": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_IndexId": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_InlineConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_InlineCustomDocumentEnrichmentConfiguration",
},
},
	"AWS::Kendra::DataSource_InlineCustomDocumentEnrichmentConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Condition": &Reference{
	ref: "AWS::Kendra::DataSource_DocumentAttributeCondition",
},
			"DocumentContentDeletion": &Reference{
	type_: Boolean,
},
			"Target": &Reference{
	ref: "AWS::Kendra::DataSource_DocumentAttributeTarget",
},
	},
},
	"AWS::Kendra::DataSource_LambdaArn": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_Long": &Reference{
	type_: Integer,
},
	"AWS::Kendra::DataSource_MimeType": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_Name": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_OneDriveConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DisableLocalGroups": &Reference{
	ref: "AWS::Kendra::DataSource_DisableLocalGroups",
},
			"ExclusionPatterns": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
			"FieldMappings": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceToIndexFieldMappingList",
},
			"InclusionPatterns": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
			"OneDriveUsers": &Reference{
	ref: "AWS::Kendra::DataSource_OneDriveUsers",
},
			"SecretArn": &Reference{
	ref: "AWS::Kendra::DataSource_SecretArn",
},
			"TenantDomain": &Reference{
	ref: "AWS::Kendra::DataSource_TenantDomain",
},
	},
},
	"AWS::Kendra::DataSource_OneDriveUser": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_OneDriveUserList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_OneDriveUser",
},
},
	"AWS::Kendra::DataSource_OneDriveUsers": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OneDriveUserList": &Reference{
	ref: "AWS::Kendra::DataSource_OneDriveUserList",
},
			"OneDriveUserS3Path": &Reference{
	ref: "AWS::Kendra::DataSource_S3Path",
},
	},
},
	"AWS::Kendra::DataSource_ProxyConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Credentials": &Reference{
	ref: "AWS::Kendra::DataSource_SecretArn",
},
			"Host": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Kendra::DataSource_QueryIdentifiersEnclosingOption": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_RoleArn": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_S3BucketName": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_S3DataSourceConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessControlListConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_AccessControlListConfiguration",
},
			"BucketName": &Reference{
	ref: "AWS::Kendra::DataSource_S3BucketName",
},
			"DocumentsMetadataConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_DocumentsMetadataConfiguration",
},
			"ExclusionPatterns": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
			"InclusionPatterns": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
			"InclusionPrefixes": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
	},
},
	"AWS::Kendra::DataSource_S3ObjectKey": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_S3Path": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	ref: "AWS::Kendra::DataSource_S3BucketName",
},
			"Key": &Reference{
	ref: "AWS::Kendra::DataSource_S3ObjectKey",
},
	},
},
	"AWS::Kendra::DataSource_SalesforceChatterFeedConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DocumentDataFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceFieldName",
},
			"DocumentTitleFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceFieldName",
},
			"FieldMappings": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceToIndexFieldMappingList",
},
			"IncludeFilterTypes": &Reference{
	ref: "AWS::Kendra::DataSource_SalesforceChatterFeedIncludeFilterTypes",
},
	},
},
	"AWS::Kendra::DataSource_SalesforceChatterFeedIncludeFilterType": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_SalesforceChatterFeedIncludeFilterTypes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_SalesforceChatterFeedIncludeFilterType",
},
},
	"AWS::Kendra::DataSource_SalesforceConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ChatterFeedConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_SalesforceChatterFeedConfiguration",
},
			"CrawlAttachments": &Reference{
	type_: Boolean,
},
			"ExcludeAttachmentFilePatterns": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
			"IncludeAttachmentFilePatterns": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
			"KnowledgeArticleConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_SalesforceKnowledgeArticleConfiguration",
},
			"SecretArn": &Reference{
	ref: "AWS::Kendra::DataSource_SecretArn",
},
			"ServerUrl": &Reference{
	ref: "AWS::Kendra::DataSource_Url",
},
			"StandardObjectAttachmentConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_SalesforceStandardObjectAttachmentConfiguration",
},
			"StandardObjectConfigurations": &Reference{
	ref: "AWS::Kendra::DataSource_SalesforceStandardObjectConfigurationList",
},
	},
},
	"AWS::Kendra::DataSource_SalesforceCustomKnowledgeArticleTypeConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DocumentDataFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceFieldName",
},
			"DocumentTitleFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceFieldName",
},
			"FieldMappings": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceToIndexFieldMappingList",
},
			"Name": &Reference{
	ref: "AWS::Kendra::DataSource_SalesforceCustomKnowledgeArticleTypeName",
},
	},
},
	"AWS::Kendra::DataSource_SalesforceCustomKnowledgeArticleTypeConfigurationList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_SalesforceCustomKnowledgeArticleTypeConfiguration",
},
},
	"AWS::Kendra::DataSource_SalesforceCustomKnowledgeArticleTypeName": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_SalesforceKnowledgeArticleConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomKnowledgeArticleTypeConfigurations": &Reference{
	ref: "AWS::Kendra::DataSource_SalesforceCustomKnowledgeArticleTypeConfigurationList",
},
			"IncludedStates": &Reference{
	ref: "AWS::Kendra::DataSource_SalesforceKnowledgeArticleStateList",
},
			"StandardKnowledgeArticleTypeConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_SalesforceStandardKnowledgeArticleTypeConfiguration",
},
	},
},
	"AWS::Kendra::DataSource_SalesforceKnowledgeArticleState": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_SalesforceKnowledgeArticleStateList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_SalesforceKnowledgeArticleState",
},
},
	"AWS::Kendra::DataSource_SalesforceStandardKnowledgeArticleTypeConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DocumentDataFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceFieldName",
},
			"DocumentTitleFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceFieldName",
},
			"FieldMappings": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceToIndexFieldMappingList",
},
	},
},
	"AWS::Kendra::DataSource_SalesforceStandardObjectAttachmentConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DocumentTitleFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceFieldName",
},
			"FieldMappings": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceToIndexFieldMappingList",
},
	},
},
	"AWS::Kendra::DataSource_SalesforceStandardObjectConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DocumentDataFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceFieldName",
},
			"DocumentTitleFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceFieldName",
},
			"FieldMappings": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceToIndexFieldMappingList",
},
			"Name": &Reference{
	ref: "AWS::Kendra::DataSource_SalesforceStandardObjectName",
},
	},
},
	"AWS::Kendra::DataSource_SalesforceStandardObjectConfigurationList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_SalesforceStandardObjectConfiguration",
},
},
	"AWS::Kendra::DataSource_SalesforceStandardObjectName": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_Schedule": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_SecretArn": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_ServiceNowAuthenticationType": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_ServiceNowBuildVersionType": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_ServiceNowConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthenticationType": &Reference{
	ref: "AWS::Kendra::DataSource_ServiceNowAuthenticationType",
},
			"HostUrl": &Reference{
	ref: "AWS::Kendra::DataSource_ServiceNowHostUrl",
},
			"KnowledgeArticleConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_ServiceNowKnowledgeArticleConfiguration",
},
			"SecretArn": &Reference{
	ref: "AWS::Kendra::DataSource_SecretArn",
},
			"ServiceCatalogConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_ServiceNowServiceCatalogConfiguration",
},
			"ServiceNowBuildVersion": &Reference{
	ref: "AWS::Kendra::DataSource_ServiceNowBuildVersionType",
},
	},
},
	"AWS::Kendra::DataSource_ServiceNowHostUrl": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_ServiceNowKnowledgeArticleConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CrawlAttachments": &Reference{
	type_: Boolean,
},
			"DocumentDataFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceFieldName",
},
			"DocumentTitleFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceFieldName",
},
			"ExcludeAttachmentFilePatterns": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
			"FieldMappings": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceToIndexFieldMappingList",
},
			"FilterQuery": &Reference{
	ref: "AWS::Kendra::DataSource_ServiceNowKnowledgeArticleFilterQuery",
},
			"IncludeAttachmentFilePatterns": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
	},
},
	"AWS::Kendra::DataSource_ServiceNowKnowledgeArticleFilterQuery": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_ServiceNowServiceCatalogConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CrawlAttachments": &Reference{
	type_: Boolean,
},
			"DocumentDataFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceFieldName",
},
			"DocumentTitleFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceFieldName",
},
			"ExcludeAttachmentFilePatterns": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
			"FieldMappings": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceToIndexFieldMappingList",
},
			"IncludeAttachmentFilePatterns": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
	},
},
	"AWS::Kendra::DataSource_SharePointConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CrawlAttachments": &Reference{
	type_: Boolean,
},
			"DisableLocalGroups": &Reference{
	ref: "AWS::Kendra::DataSource_DisableLocalGroups",
},
			"DocumentTitleFieldName": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceFieldName",
},
			"ExclusionPatterns": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
			"FieldMappings": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceToIndexFieldMappingList",
},
			"InclusionPatterns": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
			"SecretArn": &Reference{
	ref: "AWS::Kendra::DataSource_SecretArn",
},
			"SharePointVersion": &Reference{
	type_: String,
},
			"SslCertificateS3Path": &Reference{
	ref: "AWS::Kendra::DataSource_S3Path",
},
			"Urls": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_Url",
},
},
			"UseChangeLog": &Reference{
	type_: Boolean,
},
			"VpcConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceVpcConfiguration",
},
	},
},
	"AWS::Kendra::DataSource_SharedDriveId": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_SqlConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"QueryIdentifiersEnclosingOption": &Reference{
	ref: "AWS::Kendra::DataSource_QueryIdentifiersEnclosingOption",
},
	},
},
	"AWS::Kendra::DataSource_TableName": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Kendra::DataSource_TagList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_Tag",
},
},
	"AWS::Kendra::DataSource_TenantDomain": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_Timestamp": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_Type": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_Url": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_UserAccount": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_WebCrawlerAuthenticationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BasicAuthentication": &Reference{
	ref: "AWS::Kendra::DataSource_WebCrawlerBasicAuthenticationList",
},
	},
},
	"AWS::Kendra::DataSource_WebCrawlerBasicAuthentication": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Credentials": &Reference{
	ref: "AWS::Kendra::DataSource_SecretArn",
},
			"Host": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Kendra::DataSource_WebCrawlerBasicAuthenticationList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_WebCrawlerBasicAuthentication",
},
},
	"AWS::Kendra::DataSource_WebCrawlerConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthenticationConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_WebCrawlerAuthenticationConfiguration",
},
			"CrawlDepth": &Reference{
	type_: Integer,
},
			"MaxContentSizePerPageInMegaBytes": &Reference{
	type_: Number,
},
			"MaxLinksPerPage": &Reference{
	type_: Integer,
},
			"MaxUrlsPerMinuteCrawlRate": &Reference{
	type_: Integer,
},
			"ProxyConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_ProxyConfiguration",
},
			"UrlExclusionPatterns": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
			"UrlInclusionPatterns": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
			"Urls": &Reference{
	ref: "AWS::Kendra::DataSource_WebCrawlerUrls",
},
	},
},
	"AWS::Kendra::DataSource_WebCrawlerSeedUrl": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_WebCrawlerSeedUrlConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SeedUrls": &Reference{
	ref: "AWS::Kendra::DataSource_WebCrawlerSeedUrlList",
},
			"WebCrawlerMode": &Reference{
	type_: String,
},
	},
},
	"AWS::Kendra::DataSource_WebCrawlerSeedUrlList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_WebCrawlerSeedUrl",
},
},
	"AWS::Kendra::DataSource_WebCrawlerSiteMap": &Reference{
	type_: String,
},
	"AWS::Kendra::DataSource_WebCrawlerSiteMaps": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::DataSource_WebCrawlerSiteMap",
},
},
	"AWS::Kendra::DataSource_WebCrawlerSiteMapsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SiteMaps": &Reference{
	ref: "AWS::Kendra::DataSource_WebCrawlerSiteMaps",
},
	},
},
	"AWS::Kendra::DataSource_WebCrawlerUrls": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SeedUrlConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_WebCrawlerSeedUrlConfiguration",
},
			"SiteMapsConfiguration": &Reference{
	ref: "AWS::Kendra::DataSource_WebCrawlerSiteMapsConfiguration",
},
	},
},
	"AWS::Kendra::DataSource_WorkDocsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CrawlComments": &Reference{
	type_: Boolean,
},
			"ExclusionPatterns": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
			"FieldMappings": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceToIndexFieldMappingList",
},
			"InclusionPatterns": &Reference{
	ref: "AWS::Kendra::DataSource_DataSourceInclusionsExclusionsStrings",
},
			"OrganizationId": &Reference{
	type_: String,
},
			"UseChangeLog": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Kendra::Faq_Description": &Reference{
	type_: String,
},
	"AWS::Kendra::Faq_FaqName": &Reference{
	type_: String,
},
	"AWS::Kendra::Faq_FileFormat": &Reference{
	type_: String,
},
	"AWS::Kendra::Faq_Id": &Reference{
	type_: String,
},
	"AWS::Kendra::Faq_IndexId": &Reference{
	type_: String,
},
	"AWS::Kendra::Faq_RoleArn": &Reference{
	type_: String,
},
	"AWS::Kendra::Faq_S3BucketName": &Reference{
	type_: String,
},
	"AWS::Kendra::Faq_S3ObjectKey": &Reference{
	type_: String,
},
	"AWS::Kendra::Faq_S3Path": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	ref: "AWS::Kendra::Faq_S3BucketName",
},
			"Key": &Reference{
	ref: "AWS::Kendra::Faq_S3ObjectKey",
},
	},
},
	"AWS::Kendra::Faq_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Kendra::Faq_TagList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::Faq_Tag",
},
},
	"AWS::Kendra::Index_Arn": &Reference{
	type_: String,
},
	"AWS::Kendra::Index_CapacityUnitsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"QueryCapacityUnits": &Reference{
	ref: "AWS::Kendra::Index_QueryCapacityUnits",
},
			"StorageCapacityUnits": &Reference{
	ref: "AWS::Kendra::Index_StorageCapacityUnits",
},
	},
},
	"AWS::Kendra::Index_ClaimRegex": &Reference{
	type_: String,
},
	"AWS::Kendra::Index_Description": &Reference{
	type_: String,
},
	"AWS::Kendra::Index_DocumentAttributeValueType": &Reference{
	type_: String,
},
	"AWS::Kendra::Index_DocumentMetadataConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	ref: "AWS::Kendra::Index_DocumentMetadataConfigurationName",
},
			"Relevance": &Reference{
	ref: "AWS::Kendra::Index_Relevance",
},
			"Search": &Reference{
	ref: "AWS::Kendra::Index_Search",
},
			"Type": &Reference{
	ref: "AWS::Kendra::Index_DocumentAttributeValueType",
},
	},
},
	"AWS::Kendra::Index_DocumentMetadataConfigurationList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::Index_DocumentMetadataConfiguration",
},
},
	"AWS::Kendra::Index_DocumentMetadataConfigurationName": &Reference{
	type_: String,
},
	"AWS::Kendra::Index_Duration": &Reference{
	type_: String,
},
	"AWS::Kendra::Index_Edition": &Reference{
	type_: String,
},
	"AWS::Kendra::Index_Freshness": &Reference{
	type_: Boolean,
},
	"AWS::Kendra::Index_GroupAttributeField": &Reference{
	type_: String,
},
	"AWS::Kendra::Index_Id": &Reference{
	type_: String,
},
	"AWS::Kendra::Index_Importance": &Reference{
	type_: Integer,
},
	"AWS::Kendra::Index_Issuer": &Reference{
	type_: String,
},
	"AWS::Kendra::Index_JsonTokenTypeConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GroupAttributeField": &Reference{
	ref: "AWS::Kendra::Index_GroupAttributeField",
},
			"UserNameAttributeField": &Reference{
	ref: "AWS::Kendra::Index_UserNameAttributeField",
},
	},
},
	"AWS::Kendra::Index_JwtTokenTypeConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClaimRegex": &Reference{
	ref: "AWS::Kendra::Index_ClaimRegex",
},
			"GroupAttributeField": &Reference{
	ref: "AWS::Kendra::Index_GroupAttributeField",
},
			"Issuer": &Reference{
	ref: "AWS::Kendra::Index_Issuer",
},
			"KeyLocation": &Reference{
	ref: "AWS::Kendra::Index_KeyLocation",
},
			"SecretManagerArn": &Reference{
	ref: "AWS::Kendra::Index_RoleArn",
},
			"URL": &Reference{
	ref: "AWS::Kendra::Index_Url",
},
			"UserNameAttributeField": &Reference{
	ref: "AWS::Kendra::Index_UserNameAttributeField",
},
	},
},
	"AWS::Kendra::Index_KeyLocation": &Reference{
	type_: String,
},
	"AWS::Kendra::Index_KmsKeyId": &Reference{
	type_: String,
},
	"AWS::Kendra::Index_Name": &Reference{
	type_: String,
},
	"AWS::Kendra::Index_Order": &Reference{
	type_: String,
},
	"AWS::Kendra::Index_QueryCapacityUnits": &Reference{
	type_: Integer,
},
	"AWS::Kendra::Index_Relevance": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Duration": &Reference{
	ref: "AWS::Kendra::Index_Duration",
},
			"Freshness": &Reference{
	ref: "AWS::Kendra::Index_Freshness",
},
			"Importance": &Reference{
	ref: "AWS::Kendra::Index_Importance",
},
			"RankOrder": &Reference{
	ref: "AWS::Kendra::Index_Order",
},
			"ValueImportanceItems": &Reference{
	ref: "AWS::Kendra::Index_ValueImportanceItems",
},
	},
},
	"AWS::Kendra::Index_RoleArn": &Reference{
	type_: String,
},
	"AWS::Kendra::Index_Search": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Displayable": &Reference{
	type_: Boolean,
},
			"Facetable": &Reference{
	type_: Boolean,
},
			"Searchable": &Reference{
	type_: Boolean,
},
			"Sortable": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Kendra::Index_ServerSideEncryptionConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KmsKeyId": &Reference{
	ref: "AWS::Kendra::Index_KmsKeyId",
},
	},
},
	"AWS::Kendra::Index_StorageCapacityUnits": &Reference{
	type_: Integer,
},
	"AWS::Kendra::Index_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Kendra::Index_TagList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::Index_Tag",
},
},
	"AWS::Kendra::Index_Url": &Reference{
	type_: String,
},
	"AWS::Kendra::Index_UserContextPolicy": &Reference{
	type_: String,
},
	"AWS::Kendra::Index_UserNameAttributeField": &Reference{
	type_: String,
},
	"AWS::Kendra::Index_UserTokenConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"JsonTokenTypeConfiguration": &Reference{
	ref: "AWS::Kendra::Index_JsonTokenTypeConfiguration",
},
			"JwtTokenTypeConfiguration": &Reference{
	ref: "AWS::Kendra::Index_JwtTokenTypeConfiguration",
},
	},
},
	"AWS::Kendra::Index_UserTokenConfigurationList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::Index_UserTokenConfiguration",
},
},
	"AWS::Kendra::Index_ValueImportanceItem": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	ref: "AWS::Kendra::Index_ValueImportanceItemKey",
},
			"Value": &Reference{
	ref: "AWS::Kendra::Index_Importance",
},
	},
},
	"AWS::Kendra::Index_ValueImportanceItemKey": &Reference{
	type_: String,
},
	"AWS::Kendra::Index_ValueImportanceItems": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Kendra::Index_ValueImportanceItem",
},
},
	"AWS::Kinesis::Stream_StreamEncryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EncryptionType": &Reference{
	type_: String,
},
			"KeyId": &Reference{
	type_: String,
},
	},
},
	"AWS::Kinesis::Stream_StreamModeDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"StreamMode": &Reference{
	type_: String,
},
	},
},
	"AWS::Kinesis::Stream_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalytics::Application_CSVMappingParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RecordColumnDelimiter": &Reference{
	type_: String,
},
			"RecordRowDelimiter": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalytics::Application_Input": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InputParallelism": &Reference{
	ref: "AWS::KinesisAnalytics::Application_InputParallelism",
},
			"InputProcessingConfiguration": &Reference{
	ref: "AWS::KinesisAnalytics::Application_InputProcessingConfiguration",
},
			"InputSchema": &Reference{
	ref: "AWS::KinesisAnalytics::Application_InputSchema",
},
			"KinesisFirehoseInput": &Reference{
	ref: "AWS::KinesisAnalytics::Application_KinesisFirehoseInput",
},
			"KinesisStreamsInput": &Reference{
	ref: "AWS::KinesisAnalytics::Application_KinesisStreamsInput",
},
			"NamePrefix": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalytics::Application_InputLambdaProcessor": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceARN": &Reference{
	type_: String,
},
			"RoleARN": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalytics::Application_InputParallelism": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Count": &Reference{
	type_: Integer,
},
	},
},
	"AWS::KinesisAnalytics::Application_InputProcessingConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InputLambdaProcessor": &Reference{
	ref: "AWS::KinesisAnalytics::Application_InputLambdaProcessor",
},
	},
},
	"AWS::KinesisAnalytics::Application_InputSchema": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RecordColumns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::KinesisAnalytics::Application_RecordColumn",
},
},
			"RecordEncoding": &Reference{
	type_: String,
},
			"RecordFormat": &Reference{
	ref: "AWS::KinesisAnalytics::Application_RecordFormat",
},
	},
},
	"AWS::KinesisAnalytics::Application_JSONMappingParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RecordRowPath": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalytics::Application_KinesisFirehoseInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceARN": &Reference{
	type_: String,
},
			"RoleARN": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalytics::Application_KinesisStreamsInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceARN": &Reference{
	type_: String,
},
			"RoleARN": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalytics::Application_MappingParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CSVMappingParameters": &Reference{
	ref: "AWS::KinesisAnalytics::Application_CSVMappingParameters",
},
			"JSONMappingParameters": &Reference{
	ref: "AWS::KinesisAnalytics::Application_JSONMappingParameters",
},
	},
},
	"AWS::KinesisAnalytics::Application_RecordColumn": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Mapping": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"SqlType": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalytics::Application_RecordFormat": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MappingParameters": &Reference{
	ref: "AWS::KinesisAnalytics::Application_MappingParameters",
},
			"RecordFormatType": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalytics::ApplicationOutput_DestinationSchema": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RecordFormatType": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalytics::ApplicationOutput_KinesisFirehoseOutput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceARN": &Reference{
	type_: String,
},
			"RoleARN": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalytics::ApplicationOutput_KinesisStreamsOutput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceARN": &Reference{
	type_: String,
},
			"RoleARN": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalytics::ApplicationOutput_LambdaOutput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceARN": &Reference{
	type_: String,
},
			"RoleARN": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalytics::ApplicationOutput_Output": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationSchema": &Reference{
	ref: "AWS::KinesisAnalytics::ApplicationOutput_DestinationSchema",
},
			"KinesisFirehoseOutput": &Reference{
	ref: "AWS::KinesisAnalytics::ApplicationOutput_KinesisFirehoseOutput",
},
			"KinesisStreamsOutput": &Reference{
	ref: "AWS::KinesisAnalytics::ApplicationOutput_KinesisStreamsOutput",
},
			"LambdaOutput": &Reference{
	ref: "AWS::KinesisAnalytics::ApplicationOutput_LambdaOutput",
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalytics::ApplicationReferenceDataSource_CSVMappingParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RecordColumnDelimiter": &Reference{
	type_: String,
},
			"RecordRowDelimiter": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalytics::ApplicationReferenceDataSource_JSONMappingParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RecordRowPath": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalytics::ApplicationReferenceDataSource_MappingParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CSVMappingParameters": &Reference{
	ref: "AWS::KinesisAnalytics::ApplicationReferenceDataSource_CSVMappingParameters",
},
			"JSONMappingParameters": &Reference{
	ref: "AWS::KinesisAnalytics::ApplicationReferenceDataSource_JSONMappingParameters",
},
	},
},
	"AWS::KinesisAnalytics::ApplicationReferenceDataSource_RecordColumn": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Mapping": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"SqlType": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalytics::ApplicationReferenceDataSource_RecordFormat": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MappingParameters": &Reference{
	ref: "AWS::KinesisAnalytics::ApplicationReferenceDataSource_MappingParameters",
},
			"RecordFormatType": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalytics::ApplicationReferenceDataSource_ReferenceDataSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ReferenceSchema": &Reference{
	ref: "AWS::KinesisAnalytics::ApplicationReferenceDataSource_ReferenceSchema",
},
			"S3ReferenceDataSource": &Reference{
	ref: "AWS::KinesisAnalytics::ApplicationReferenceDataSource_S3ReferenceDataSource",
},
			"TableName": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalytics::ApplicationReferenceDataSource_ReferenceSchema": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RecordColumns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::KinesisAnalytics::ApplicationReferenceDataSource_RecordColumn",
},
},
			"RecordEncoding": &Reference{
	type_: String,
},
			"RecordFormat": &Reference{
	ref: "AWS::KinesisAnalytics::ApplicationReferenceDataSource_RecordFormat",
},
	},
},
	"AWS::KinesisAnalytics::ApplicationReferenceDataSource_S3ReferenceDataSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketARN": &Reference{
	type_: String,
},
			"FileKey": &Reference{
	type_: String,
},
			"ReferenceRoleARN": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_ApplicationCodeConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CodeContent": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_CodeContent",
},
			"CodeContentType": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_ApplicationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApplicationCodeConfiguration": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_ApplicationCodeConfiguration",
},
			"ApplicationSnapshotConfiguration": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_ApplicationSnapshotConfiguration",
},
			"EnvironmentProperties": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_EnvironmentProperties",
},
			"FlinkApplicationConfiguration": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_FlinkApplicationConfiguration",
},
			"SqlApplicationConfiguration": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_SqlApplicationConfiguration",
},
			"VpcConfigurations": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_VpcConfigurations",
},
			"ZeppelinApplicationConfiguration": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_ZeppelinApplicationConfiguration",
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_ApplicationMaintenanceConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApplicationMaintenanceWindowStartTime": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_ApplicationRestoreConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApplicationRestoreType": &Reference{
	type_: String,
},
			"SnapshotName": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_ApplicationSnapshotConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SnapshotsEnabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_Arn": &Reference{
	type_: String,
},
	"AWS::KinesisAnalyticsV2::Application_CSVMappingParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RecordColumnDelimiter": &Reference{
	type_: String,
},
			"RecordRowDelimiter": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_CatalogConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GlueDataCatalogConfiguration": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_GlueDataCatalogConfiguration",
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_CheckpointConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CheckpointInterval": &Reference{
	type_: Integer,
},
			"CheckpointingEnabled": &Reference{
	type_: Boolean,
},
			"ConfigurationType": &Reference{
	type_: String,
},
			"MinPauseBetweenCheckpoints": &Reference{
	type_: Integer,
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_CodeContent": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3ContentLocation": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_S3ContentLocation",
},
			"TextContent": &Reference{
	type_: String,
},
			"ZipFileContent": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_CustomArtifactConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ArtifactType": &Reference{
	type_: String,
},
			"MavenReference": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_MavenReference",
},
			"S3ContentLocation": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_S3ContentLocation",
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_CustomArtifactsConfiguration": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_CustomArtifactConfiguration",
},
},
	"AWS::KinesisAnalyticsV2::Application_DeployAsApplicationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3ContentLocation": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_S3ContentBaseLocation",
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_EnvironmentProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PropertyGroups": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_PropertyGroup",
},
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_FlinkApplicationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CheckpointConfiguration": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_CheckpointConfiguration",
},
			"MonitoringConfiguration": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_MonitoringConfiguration",
},
			"ParallelismConfiguration": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_ParallelismConfiguration",
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_FlinkRunConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllowNonRestoredState": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_GlueDataCatalogConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DatabaseARN": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_Arn",
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_Input": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InputParallelism": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_InputParallelism",
},
			"InputProcessingConfiguration": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_InputProcessingConfiguration",
},
			"InputSchema": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_InputSchema",
},
			"KinesisFirehoseInput": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_KinesisFirehoseInput",
},
			"KinesisStreamsInput": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_KinesisStreamsInput",
},
			"NamePrefix": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_InputLambdaProcessor": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceARN": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_Arn",
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_InputParallelism": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Count": &Reference{
	type_: Integer,
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_InputProcessingConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InputLambdaProcessor": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_InputLambdaProcessor",
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_InputSchema": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RecordColumns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_RecordColumn",
},
},
			"RecordEncoding": &Reference{
	type_: String,
},
			"RecordFormat": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_RecordFormat",
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_JSONMappingParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RecordRowPath": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_KinesisFirehoseInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceARN": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_Arn",
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_KinesisStreamsInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceARN": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_Arn",
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_MappingParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CSVMappingParameters": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_CSVMappingParameters",
},
			"JSONMappingParameters": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_JSONMappingParameters",
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_MavenReference": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ArtifactId": &Reference{
	type_: String,
},
			"GroupId": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_MonitoringConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConfigurationType": &Reference{
	type_: String,
},
			"LogLevel": &Reference{
	type_: String,
},
			"MetricsLevel": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_ParallelismConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AutoScalingEnabled": &Reference{
	type_: Boolean,
},
			"ConfigurationType": &Reference{
	type_: String,
},
			"Parallelism": &Reference{
	type_: Integer,
},
			"ParallelismPerKPU": &Reference{
	type_: Integer,
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_PropertyGroup": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PropertyGroupId": &Reference{
	type_: String,
},
			"PropertyMap": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_RecordColumn": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Mapping": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"SqlType": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_RecordFormat": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MappingParameters": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_MappingParameters",
},
			"RecordFormatType": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_RunConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApplicationRestoreConfiguration": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_ApplicationRestoreConfiguration",
},
			"FlinkRunConfiguration": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_FlinkRunConfiguration",
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_S3ContentBaseLocation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BasePath": &Reference{
	type_: String,
},
			"BucketARN": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_Arn",
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_S3ContentLocation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketARN": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_Arn",
},
			"FileKey": &Reference{
	type_: String,
},
			"ObjectVersion": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_SqlApplicationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Inputs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_Input",
},
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_VpcConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_VpcConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_VpcConfiguration",
},
},
	"AWS::KinesisAnalyticsV2::Application_ZeppelinApplicationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogConfiguration": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_CatalogConfiguration",
},
			"CustomArtifactsConfiguration": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_CustomArtifactsConfiguration",
},
			"DeployAsApplicationConfiguration": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_DeployAsApplicationConfiguration",
},
			"MonitoringConfiguration": &Reference{
	ref: "AWS::KinesisAnalyticsV2::Application_ZeppelinMonitoringConfiguration",
},
	},
},
	"AWS::KinesisAnalyticsV2::Application_ZeppelinMonitoringConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LogLevel": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption_CloudWatchLoggingOption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LogStreamARN": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::ApplicationOutput_DestinationSchema": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RecordFormatType": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::ApplicationOutput_KinesisFirehoseOutput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceARN": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::ApplicationOutput_KinesisStreamsOutput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceARN": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::ApplicationOutput_LambdaOutput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceARN": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::ApplicationOutput_Output": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationSchema": &Reference{
	ref: "AWS::KinesisAnalyticsV2::ApplicationOutput_DestinationSchema",
},
			"KinesisFirehoseOutput": &Reference{
	ref: "AWS::KinesisAnalyticsV2::ApplicationOutput_KinesisFirehoseOutput",
},
			"KinesisStreamsOutput": &Reference{
	ref: "AWS::KinesisAnalyticsV2::ApplicationOutput_KinesisStreamsOutput",
},
			"LambdaOutput": &Reference{
	ref: "AWS::KinesisAnalyticsV2::ApplicationOutput_LambdaOutput",
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource_CSVMappingParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RecordColumnDelimiter": &Reference{
	type_: String,
},
			"RecordRowDelimiter": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource_JSONMappingParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RecordRowPath": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource_MappingParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CSVMappingParameters": &Reference{
	ref: "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource_CSVMappingParameters",
},
			"JSONMappingParameters": &Reference{
	ref: "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource_JSONMappingParameters",
},
	},
},
	"AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource_RecordColumn": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Mapping": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"SqlType": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource_RecordFormat": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MappingParameters": &Reference{
	ref: "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource_MappingParameters",
},
			"RecordFormatType": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource_ReferenceDataSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ReferenceSchema": &Reference{
	ref: "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource_ReferenceSchema",
},
			"S3ReferenceDataSource": &Reference{
	ref: "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource_S3ReferenceDataSource",
},
			"TableName": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource_ReferenceSchema": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RecordColumns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource_RecordColumn",
},
},
			"RecordEncoding": &Reference{
	type_: String,
},
			"RecordFormat": &Reference{
	ref: "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource_RecordFormat",
},
	},
},
	"AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource_S3ReferenceDataSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketARN": &Reference{
	type_: String,
},
			"FileKey": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_AmazonopensearchserviceBufferingHints": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IntervalInSeconds": &Reference{
	type_: Integer,
},
			"SizeInMBs": &Reference{
	type_: Integer,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_AmazonopensearchserviceDestinationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BufferingHints": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_AmazonopensearchserviceBufferingHints",
},
			"CloudWatchLoggingOptions": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_CloudWatchLoggingOptions",
},
			"ClusterEndpoint": &Reference{
	type_: String,
},
			"DomainARN": &Reference{
	type_: String,
},
			"IndexName": &Reference{
	type_: String,
},
			"IndexRotationPeriod": &Reference{
	type_: String,
},
			"ProcessingConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_ProcessingConfiguration",
},
			"RetryOptions": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_AmazonopensearchserviceRetryOptions",
},
			"RoleARN": &Reference{
	type_: String,
},
			"S3BackupMode": &Reference{
	type_: String,
},
			"S3Configuration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_S3DestinationConfiguration",
},
			"TypeName": &Reference{
	type_: String,
},
			"VpcConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_VpcConfiguration",
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_AmazonopensearchserviceRetryOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DurationInSeconds": &Reference{
	type_: Integer,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_BufferingHints": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IntervalInSeconds": &Reference{
	type_: Integer,
},
			"SizeInMBs": &Reference{
	type_: Integer,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_CloudWatchLoggingOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
			"LogGroupName": &Reference{
	type_: String,
},
			"LogStreamName": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_CopyCommand": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CopyOptions": &Reference{
	type_: String,
},
			"DataTableColumns": &Reference{
	type_: String,
},
			"DataTableName": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_DataFormatConversionConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
			"InputFormatConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_InputFormatConfiguration",
},
			"OutputFormatConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_OutputFormatConfiguration",
},
			"SchemaConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_SchemaConfiguration",
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_DeliveryStreamEncryptionConfigurationInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KeyARN": &Reference{
	type_: String,
},
			"KeyType": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_Deserializer": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HiveJsonSerDe": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_HiveJsonSerDe",
},
			"OpenXJsonSerDe": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_OpenXJsonSerDe",
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_DynamicPartitioningConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
			"RetryOptions": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_RetryOptions",
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_ElasticsearchBufferingHints": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IntervalInSeconds": &Reference{
	type_: Integer,
},
			"SizeInMBs": &Reference{
	type_: Integer,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_ElasticsearchDestinationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BufferingHints": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_ElasticsearchBufferingHints",
},
			"CloudWatchLoggingOptions": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_CloudWatchLoggingOptions",
},
			"ClusterEndpoint": &Reference{
	type_: String,
},
			"DomainARN": &Reference{
	type_: String,
},
			"IndexName": &Reference{
	type_: String,
},
			"IndexRotationPeriod": &Reference{
	type_: String,
},
			"ProcessingConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_ProcessingConfiguration",
},
			"RetryOptions": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_ElasticsearchRetryOptions",
},
			"RoleARN": &Reference{
	type_: String,
},
			"S3BackupMode": &Reference{
	type_: String,
},
			"S3Configuration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_S3DestinationConfiguration",
},
			"TypeName": &Reference{
	type_: String,
},
			"VpcConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_VpcConfiguration",
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_ElasticsearchRetryOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DurationInSeconds": &Reference{
	type_: Integer,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_EncryptionConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KMSEncryptionConfig": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_KMSEncryptionConfig",
},
			"NoEncryptionConfig": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_ExtendedS3DestinationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketARN": &Reference{
	type_: String,
},
			"BufferingHints": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_BufferingHints",
},
			"CloudWatchLoggingOptions": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_CloudWatchLoggingOptions",
},
			"CompressionFormat": &Reference{
	type_: String,
},
			"DataFormatConversionConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_DataFormatConversionConfiguration",
},
			"DynamicPartitioningConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_DynamicPartitioningConfiguration",
},
			"EncryptionConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_EncryptionConfiguration",
},
			"ErrorOutputPrefix": &Reference{
	type_: String,
},
			"Prefix": &Reference{
	type_: String,
},
			"ProcessingConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_ProcessingConfiguration",
},
			"RoleARN": &Reference{
	type_: String,
},
			"S3BackupConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_S3DestinationConfiguration",
},
			"S3BackupMode": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_HiveJsonSerDe": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TimestampFormats": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_HttpEndpointCommonAttribute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AttributeName": &Reference{
	type_: String,
},
			"AttributeValue": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_HttpEndpointConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessKey": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Url": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_HttpEndpointDestinationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BufferingHints": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_BufferingHints",
},
			"CloudWatchLoggingOptions": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_CloudWatchLoggingOptions",
},
			"EndpointConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_HttpEndpointConfiguration",
},
			"ProcessingConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_ProcessingConfiguration",
},
			"RequestConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_HttpEndpointRequestConfiguration",
},
			"RetryOptions": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_RetryOptions",
},
			"RoleARN": &Reference{
	type_: String,
},
			"S3BackupMode": &Reference{
	type_: String,
},
			"S3Configuration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_S3DestinationConfiguration",
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_HttpEndpointRequestConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CommonAttributes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_HttpEndpointCommonAttribute",
},
},
			"ContentEncoding": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_InputFormatConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Deserializer": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_Deserializer",
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_KMSEncryptionConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AWSKMSKeyARN": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_KinesisStreamSourceConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KinesisStreamARN": &Reference{
	type_: String,
},
			"RoleARN": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_OpenXJsonSerDe": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CaseInsensitive": &Reference{
	type_: Boolean,
},
			"ColumnToJsonKeyMappings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"ConvertDotsInJsonKeysToUnderscores": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_OrcSerDe": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BlockSizeBytes": &Reference{
	type_: Integer,
},
			"BloomFilterColumns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"BloomFilterFalsePositiveProbability": &Reference{
	type_: Number,
},
			"Compression": &Reference{
	type_: String,
},
			"DictionaryKeyThreshold": &Reference{
	type_: Number,
},
			"EnablePadding": &Reference{
	type_: Boolean,
},
			"FormatVersion": &Reference{
	type_: String,
},
			"PaddingTolerance": &Reference{
	type_: Number,
},
			"RowIndexStride": &Reference{
	type_: Integer,
},
			"StripeSizeBytes": &Reference{
	type_: Integer,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_OutputFormatConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Serializer": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_Serializer",
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_ParquetSerDe": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BlockSizeBytes": &Reference{
	type_: Integer,
},
			"Compression": &Reference{
	type_: String,
},
			"EnableDictionaryCompression": &Reference{
	type_: Boolean,
},
			"MaxPaddingBytes": &Reference{
	type_: Integer,
},
			"PageSizeBytes": &Reference{
	type_: Integer,
},
			"WriterVersion": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_ProcessingConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
			"Processors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_Processor",
},
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_Processor": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Parameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_ProcessorParameter",
},
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_ProcessorParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ParameterName": &Reference{
	type_: String,
},
			"ParameterValue": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_RedshiftDestinationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchLoggingOptions": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_CloudWatchLoggingOptions",
},
			"ClusterJDBCURL": &Reference{
	type_: String,
},
			"CopyCommand": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_CopyCommand",
},
			"Password": &Reference{
	type_: String,
},
			"ProcessingConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_ProcessingConfiguration",
},
			"RetryOptions": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_RedshiftRetryOptions",
},
			"RoleARN": &Reference{
	type_: String,
},
			"S3BackupConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_S3DestinationConfiguration",
},
			"S3BackupMode": &Reference{
	type_: String,
},
			"S3Configuration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_S3DestinationConfiguration",
},
			"Username": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_RedshiftRetryOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DurationInSeconds": &Reference{
	type_: Integer,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_RetryOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DurationInSeconds": &Reference{
	type_: Integer,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_S3DestinationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketARN": &Reference{
	type_: String,
},
			"BufferingHints": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_BufferingHints",
},
			"CloudWatchLoggingOptions": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_CloudWatchLoggingOptions",
},
			"CompressionFormat": &Reference{
	type_: String,
},
			"EncryptionConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_EncryptionConfiguration",
},
			"ErrorOutputPrefix": &Reference{
	type_: String,
},
			"Prefix": &Reference{
	type_: String,
},
			"RoleARN": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_SchemaConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	type_: String,
},
			"DatabaseName": &Reference{
	type_: String,
},
			"Region": &Reference{
	type_: String,
},
			"RoleARN": &Reference{
	type_: String,
},
			"TableName": &Reference{
	type_: String,
},
			"VersionId": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_Serializer": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OrcSerDe": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_OrcSerDe",
},
			"ParquetSerDe": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_ParquetSerDe",
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_SplunkDestinationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchLoggingOptions": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_CloudWatchLoggingOptions",
},
			"HECAcknowledgmentTimeoutInSeconds": &Reference{
	type_: Integer,
},
			"HECEndpoint": &Reference{
	type_: String,
},
			"HECEndpointType": &Reference{
	type_: String,
},
			"HECToken": &Reference{
	type_: String,
},
			"ProcessingConfiguration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_ProcessingConfiguration",
},
			"RetryOptions": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_SplunkRetryOptions",
},
			"S3BackupMode": &Reference{
	type_: String,
},
			"S3Configuration": &Reference{
	ref: "AWS::KinesisFirehose::DeliveryStream_S3DestinationConfiguration",
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_SplunkRetryOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DurationInSeconds": &Reference{
	type_: Integer,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisFirehose::DeliveryStream_VpcConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RoleARN": &Reference{
	type_: String,
},
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::KinesisVideo::SignalingChannel_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::KinesisVideo::Stream_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::LakeFormation::DataCellsFilter_CatalogIdString": &Reference{
	type_: String,
},
	"AWS::LakeFormation::DataCellsFilter_ColumnNames": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::LakeFormation::DataCellsFilter_NameString",
},
},
	"AWS::LakeFormation::DataCellsFilter_ColumnWildcard": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExcludedColumnNames": &Reference{
	ref: "AWS::LakeFormation::DataCellsFilter_ColumnNames",
},
	},
},
	"AWS::LakeFormation::DataCellsFilter_NameString": &Reference{
	type_: String,
},
	"AWS::LakeFormation::DataCellsFilter_RowFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllRowsWildcard": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"FilterExpression": &Reference{
	type_: String,
},
	},
},
	"AWS::LakeFormation::DataLakeSettings_Admins": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::LakeFormation::Permissions_ColumnWildcard": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExcludedColumnNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::LakeFormation::Permissions_DataLakePrincipal": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataLakePrincipalIdentifier": &Reference{
	type_: String,
},
	},
},
	"AWS::LakeFormation::Permissions_DataLocationResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	type_: String,
},
			"S3Resource": &Reference{
	type_: String,
},
	},
},
	"AWS::LakeFormation::Permissions_DatabaseResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::LakeFormation::Permissions_Resource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataLocationResource": &Reference{
	ref: "AWS::LakeFormation::Permissions_DataLocationResource",
},
			"DatabaseResource": &Reference{
	ref: "AWS::LakeFormation::Permissions_DatabaseResource",
},
			"TableResource": &Reference{
	ref: "AWS::LakeFormation::Permissions_TableResource",
},
			"TableWithColumnsResource": &Reference{
	ref: "AWS::LakeFormation::Permissions_TableWithColumnsResource",
},
	},
},
	"AWS::LakeFormation::Permissions_TableResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	type_: String,
},
			"DatabaseName": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"TableWildcard": &Reference{
	ref: "AWS::LakeFormation::Permissions_TableWildcard",
},
	},
},
	"AWS::LakeFormation::Permissions_TableWildcard": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::LakeFormation::Permissions_TableWithColumnsResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	type_: String,
},
			"ColumnNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ColumnWildcard": &Reference{
	ref: "AWS::LakeFormation::Permissions_ColumnWildcard",
},
			"DatabaseName": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::LakeFormation::PrincipalPermissions_CatalogIdString": &Reference{
	type_: String,
},
	"AWS::LakeFormation::PrincipalPermissions_CatalogResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::LakeFormation::PrincipalPermissions_ColumnNames": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_NameString",
},
},
	"AWS::LakeFormation::PrincipalPermissions_ColumnWildcard": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExcludedColumnNames": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_ColumnNames",
},
	},
},
	"AWS::LakeFormation::PrincipalPermissions_DataCellsFilterResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DatabaseName": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_NameString",
},
			"Name": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_NameString",
},
			"TableCatalogId": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_CatalogIdString",
},
			"TableName": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_NameString",
},
	},
},
	"AWS::LakeFormation::PrincipalPermissions_DataLakePrincipal": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataLakePrincipalIdentifier": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_DataLakePrincipalString",
},
	},
},
	"AWS::LakeFormation::PrincipalPermissions_DataLakePrincipalList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_DataLakePrincipal",
},
},
	"AWS::LakeFormation::PrincipalPermissions_DataLakePrincipalString": &Reference{
	type_: String,
},
	"AWS::LakeFormation::PrincipalPermissions_DataLocationResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_CatalogIdString",
},
			"ResourceArn": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_ResourceArnString",
},
	},
},
	"AWS::LakeFormation::PrincipalPermissions_DatabaseResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_CatalogIdString",
},
			"Name": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_NameString",
},
	},
},
	"AWS::LakeFormation::PrincipalPermissions_Expression": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_LFTag",
},
},
	"AWS::LakeFormation::PrincipalPermissions_IAMRoleArn": &Reference{
	type_: String,
},
	"AWS::LakeFormation::PrincipalPermissions_LFTag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TagKey": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_LFTagKey",
},
			"TagValues": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_TagValueList",
},
	},
},
	"AWS::LakeFormation::PrincipalPermissions_LFTagKey": &Reference{
	type_: String,
},
	"AWS::LakeFormation::PrincipalPermissions_LFTagKeyResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_CatalogIdString",
},
			"TagKey": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_NameString",
},
			"TagValues": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_TagValueList",
},
	},
},
	"AWS::LakeFormation::PrincipalPermissions_LFTagPair": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_CatalogIdString",
},
			"TagKey": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_LFTagKey",
},
			"TagValues": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_TagValueList",
},
	},
},
	"AWS::LakeFormation::PrincipalPermissions_LFTagPolicyResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_CatalogIdString",
},
			"Expression": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_Expression",
},
			"ResourceType": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_ResourceType",
},
	},
},
	"AWS::LakeFormation::PrincipalPermissions_LFTagValue": &Reference{
	type_: String,
},
	"AWS::LakeFormation::PrincipalPermissions_LFTagsList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_LFTagPair",
},
},
	"AWS::LakeFormation::PrincipalPermissions_NameString": &Reference{
	type_: String,
},
	"AWS::LakeFormation::PrincipalPermissions_NullableBoolean": &Reference{
	type_: Unknown,
},
	"AWS::LakeFormation::PrincipalPermissions_PathString": &Reference{
	type_: String,
},
	"AWS::LakeFormation::PrincipalPermissions_Permission": &Reference{
	type_: String,
},
	"AWS::LakeFormation::PrincipalPermissions_PermissionList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_Permission",
},
},
	"AWS::LakeFormation::PrincipalPermissions_PrincipalPermissions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataLakePrincipal": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_DataLakePrincipal",
},
			"PermissionList": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_PermissionList",
},
	},
},
	"AWS::LakeFormation::PrincipalPermissions_PrincipalPermissionsList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_PrincipalPermissions",
},
},
	"AWS::LakeFormation::PrincipalPermissions_PrincipalResourcePair": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Principal": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_DataLakePrincipal",
},
			"Resource": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_Resource",
},
	},
},
	"AWS::LakeFormation::PrincipalPermissions_Resource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Catalog": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_CatalogResource",
},
			"DataCellsFilter": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_DataCellsFilterResource",
},
			"DataLocation": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_DataLocationResource",
},
			"Database": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_DatabaseResource",
},
			"LFTag": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_LFTagKeyResource",
},
			"LFTagPolicy": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_LFTagPolicyResource",
},
			"Table": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_TableResource",
},
			"TableWithColumns": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_TableWithColumnsResource",
},
	},
},
	"AWS::LakeFormation::PrincipalPermissions_ResourceArnString": &Reference{
	type_: String,
},
	"AWS::LakeFormation::PrincipalPermissions_ResourceType": &Reference{
	type_: String,
},
	"AWS::LakeFormation::PrincipalPermissions_TableResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_CatalogIdString",
},
			"DatabaseName": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_NameString",
},
			"Name": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_NameString",
},
			"TableWildcard": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_TableWildcard",
},
	},
},
	"AWS::LakeFormation::PrincipalPermissions_TableWildcard": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::LakeFormation::PrincipalPermissions_TableWithColumnsResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_CatalogIdString",
},
			"ColumnNames": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_ColumnNames",
},
			"ColumnWildcard": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_ColumnWildcard",
},
			"DatabaseName": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_NameString",
},
			"Name": &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_NameString",
},
	},
},
	"AWS::LakeFormation::PrincipalPermissions_TagValueList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::LakeFormation::PrincipalPermissions_LFTagValue",
},
},
	"AWS::LakeFormation::Tag_CatalogIdString": &Reference{
	type_: String,
},
	"AWS::LakeFormation::Tag_LFTagKey": &Reference{
	type_: String,
},
	"AWS::LakeFormation::Tag_LFTagValue": &Reference{
	type_: String,
},
	"AWS::LakeFormation::Tag_TagValueList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::LakeFormation::Tag_LFTagValue",
},
},
	"AWS::LakeFormation::TagAssociation_CatalogIdString": &Reference{
	type_: String,
},
	"AWS::LakeFormation::TagAssociation_CatalogResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::LakeFormation::TagAssociation_ColumnNames": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::LakeFormation::TagAssociation_NameString",
},
},
	"AWS::LakeFormation::TagAssociation_DataLakePrincipal": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataLakePrincipalIdentifier": &Reference{
	ref: "AWS::LakeFormation::TagAssociation_DataLakePrincipalString",
},
	},
},
	"AWS::LakeFormation::TagAssociation_DataLakePrincipalString": &Reference{
	type_: String,
},
	"AWS::LakeFormation::TagAssociation_DatabaseResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	ref: "AWS::LakeFormation::TagAssociation_CatalogIdString",
},
			"Name": &Reference{
	ref: "AWS::LakeFormation::TagAssociation_NameString",
},
	},
},
	"AWS::LakeFormation::TagAssociation_LFTagKey": &Reference{
	type_: String,
},
	"AWS::LakeFormation::TagAssociation_LFTagPair": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	ref: "AWS::LakeFormation::TagAssociation_CatalogIdString",
},
			"TagKey": &Reference{
	ref: "AWS::LakeFormation::TagAssociation_LFTagKey",
},
			"TagValues": &Reference{
	ref: "AWS::LakeFormation::TagAssociation_TagValueList",
},
	},
},
	"AWS::LakeFormation::TagAssociation_LFTagValue": &Reference{
	type_: String,
},
	"AWS::LakeFormation::TagAssociation_LFTagsList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::LakeFormation::TagAssociation_LFTagPair",
},
},
	"AWS::LakeFormation::TagAssociation_NameString": &Reference{
	type_: String,
},
	"AWS::LakeFormation::TagAssociation_Resource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Catalog": &Reference{
	ref: "AWS::LakeFormation::TagAssociation_CatalogResource",
},
			"Database": &Reference{
	ref: "AWS::LakeFormation::TagAssociation_DatabaseResource",
},
			"Table": &Reference{
	ref: "AWS::LakeFormation::TagAssociation_TableResource",
},
			"TableWithColumns": &Reference{
	ref: "AWS::LakeFormation::TagAssociation_TableWithColumnsResource",
},
	},
},
	"AWS::LakeFormation::TagAssociation_ResourceType": &Reference{
	type_: String,
},
	"AWS::LakeFormation::TagAssociation_TableResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	ref: "AWS::LakeFormation::TagAssociation_CatalogIdString",
},
			"DatabaseName": &Reference{
	ref: "AWS::LakeFormation::TagAssociation_NameString",
},
			"Name": &Reference{
	ref: "AWS::LakeFormation::TagAssociation_NameString",
},
			"TableWildcard": &Reference{
	ref: "AWS::LakeFormation::TagAssociation_TableWildcard",
},
	},
},
	"AWS::LakeFormation::TagAssociation_TableWildcard": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::LakeFormation::TagAssociation_TableWithColumnsResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CatalogId": &Reference{
	ref: "AWS::LakeFormation::TagAssociation_CatalogIdString",
},
			"ColumnNames": &Reference{
	ref: "AWS::LakeFormation::TagAssociation_ColumnNames",
},
			"DatabaseName": &Reference{
	ref: "AWS::LakeFormation::TagAssociation_NameString",
},
			"Name": &Reference{
	ref: "AWS::LakeFormation::TagAssociation_NameString",
},
	},
},
	"AWS::LakeFormation::TagAssociation_TagValueList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::LakeFormation::TagAssociation_LFTagValue",
},
},
	"AWS::Lambda::Alias_AliasRoutingConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdditionalVersionWeights": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lambda::Alias_VersionWeight",
},
},
	},
},
	"AWS::Lambda::Alias_ProvisionedConcurrencyConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ProvisionedConcurrentExecutions": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Lambda::Alias_VersionWeight": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FunctionVersion": &Reference{
	type_: String,
},
			"FunctionWeight": &Reference{
	type_: Number,
},
	},
},
	"AWS::Lambda::CodeSigningConfig_AllowedPublishers": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SigningProfileVersionArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Lambda::CodeSigningConfig_CodeSigningPolicies": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"UntrustedArtifactOnDeployment": &Reference{
	type_: String,
},
	},
},
	"AWS::Lambda::EventInvokeConfig_DestinationConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OnFailure": &Reference{
	ref: "AWS::Lambda::EventInvokeConfig_OnFailure",
},
			"OnSuccess": &Reference{
	ref: "AWS::Lambda::EventInvokeConfig_OnSuccess",
},
	},
},
	"AWS::Lambda::EventInvokeConfig_OnFailure": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Destination": &Reference{
	type_: String,
},
	},
},
	"AWS::Lambda::EventInvokeConfig_OnSuccess": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Destination": &Reference{
	type_: String,
},
	},
},
	"AWS::Lambda::EventSourceMapping_DestinationConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OnFailure": &Reference{
	ref: "AWS::Lambda::EventSourceMapping_OnFailure",
},
	},
},
	"AWS::Lambda::EventSourceMapping_Endpoints": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KafkaBootstrapServers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Lambda::EventSourceMapping_Filter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Pattern": &Reference{
	type_: String,
},
	},
},
	"AWS::Lambda::EventSourceMapping_FilterCriteria": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Filters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lambda::EventSourceMapping_Filter",
},
},
	},
},
	"AWS::Lambda::EventSourceMapping_OnFailure": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Destination": &Reference{
	type_: String,
},
	},
},
	"AWS::Lambda::EventSourceMapping_SelfManagedEventSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Endpoints": &Reference{
	ref: "AWS::Lambda::EventSourceMapping_Endpoints",
},
	},
},
	"AWS::Lambda::EventSourceMapping_SourceAccessConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
			"URI": &Reference{
	type_: String,
},
	},
},
	"AWS::Lambda::Function_Code": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ImageUri": &Reference{
	type_: String,
},
			"S3Bucket": &Reference{
	type_: String,
},
			"S3Key": &Reference{
	type_: String,
},
			"S3ObjectVersion": &Reference{
	type_: String,
},
			"ZipFile": &Reference{
	type_: String,
},
	},
},
	"AWS::Lambda::Function_DeadLetterConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TargetArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Lambda::Function_Environment": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Variables": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::Lambda::Function_EphemeralStorage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Size": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Lambda::Function_FileSystemConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"LocalMountPath": &Reference{
	type_: String,
},
	},
},
	"AWS::Lambda::Function_ImageConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Command": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"EntryPoint": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"WorkingDirectory": &Reference{
	type_: String,
},
	},
},
	"AWS::Lambda::Function_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Lambda::Function_TracingConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Mode": &Reference{
	type_: String,
},
	},
},
	"AWS::Lambda::Function_VpcConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Lambda::LayerVersion_Content": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Bucket": &Reference{
	type_: String,
},
			"S3Key": &Reference{
	type_: String,
},
			"S3ObjectVersion": &Reference{
	type_: String,
},
	},
},
	"AWS::Lambda::Url_AllowHeaders": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	"AWS::Lambda::Url_AllowMethods": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	"AWS::Lambda::Url_AllowOrigins": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	"AWS::Lambda::Url_Cors": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllowCredentials": &Reference{
	type_: Boolean,
},
			"AllowHeaders": &Reference{
	ref: "AWS::Lambda::Url_AllowHeaders",
},
			"AllowMethods": &Reference{
	ref: "AWS::Lambda::Url_AllowMethods",
},
			"AllowOrigins": &Reference{
	ref: "AWS::Lambda::Url_AllowOrigins",
},
			"ExposeHeaders": &Reference{
	ref: "AWS::Lambda::Url_ExposeHeaders",
},
			"MaxAge": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Lambda::Url_ExposeHeaders": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	"AWS::Lambda::Version_ProvisionedConcurrencyConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ProvisionedConcurrentExecutions": &Reference{
	type_: Integer,
},
	},
},
	"AWS::LicenseManager::Grant_Arn": &Reference{
	type_: String,
},
	"AWS::LicenseManager::License_Arn": &Reference{
	type_: String,
},
	"AWS::LicenseManager::License_BorrowConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllowEarlyCheckIn": &Reference{
	type_: Boolean,
},
			"MaxTimeToLiveInMinutes": &Reference{
	type_: Integer,
},
	},
},
	"AWS::LicenseManager::License_ConsumptionConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BorrowConfiguration": &Reference{
	ref: "AWS::LicenseManager::License_BorrowConfiguration",
},
			"ProvisionalConfiguration": &Reference{
	ref: "AWS::LicenseManager::License_ProvisionalConfiguration",
},
			"RenewType": &Reference{
	type_: String,
},
	},
},
	"AWS::LicenseManager::License_Entitlement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllowCheckIn": &Reference{
	type_: Boolean,
},
			"MaxCount": &Reference{
	type_: Integer,
},
			"Name": &Reference{
	type_: String,
},
			"Overage": &Reference{
	type_: Boolean,
},
			"Unit": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::LicenseManager::License_IssuerData": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"SignKey": &Reference{
	type_: String,
},
	},
},
	"AWS::LicenseManager::License_LicenseStatus": &Reference{
	type_: String,
},
	"AWS::LicenseManager::License_Metadata": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::LicenseManager::License_ProvisionalConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxTimeToLiveInMinutes": &Reference{
	type_: Integer,
},
	},
},
	"AWS::LicenseManager::License_ValidityDateFormat": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Begin": &Reference{
	type_: String,
},
			"End": &Reference{
	type_: String,
},
	},
},
	"AWS::Lightsail::Bucket_AccessRules": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllowPublicOverrides": &Reference{
	type_: Boolean,
},
			"GetObject": &Reference{
	type_: String,
},
	},
},
	"AWS::Lightsail::Bucket_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Lightsail::Certificate_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Lightsail::Container_Container": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Command": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ContainerName": &Reference{
	type_: String,
},
			"Environment": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lightsail::Container_EnvironmentVariable",
},
},
			"Image": &Reference{
	type_: String,
},
			"Ports": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lightsail::Container_PortInfo",
},
},
	},
},
	"AWS::Lightsail::Container_ContainerServiceDeployment": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Containers": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lightsail::Container_Container",
},
},
			"PublicEndpoint": &Reference{
	ref: "AWS::Lightsail::Container_PublicEndpoint",
},
	},
},
	"AWS::Lightsail::Container_EnvironmentVariable": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Value": &Reference{
	type_: String,
},
			"Variable": &Reference{
	type_: String,
},
	},
},
	"AWS::Lightsail::Container_HealthCheckConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HealthyThreshold": &Reference{
	type_: Integer,
},
			"IntervalSeconds": &Reference{
	type_: Integer,
},
			"Path": &Reference{
	type_: String,
},
			"SuccessCodes": &Reference{
	type_: String,
},
			"TimeoutSeconds": &Reference{
	type_: Integer,
},
			"UnhealthyThreshold": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Lightsail::Container_PortInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Port": &Reference{
	type_: String,
},
			"Protocol": &Reference{
	type_: String,
},
	},
},
	"AWS::Lightsail::Container_PublicDomainName": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateName": &Reference{
	type_: String,
},
			"DomainNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Lightsail::Container_PublicEndpoint": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerName": &Reference{
	type_: String,
},
			"ContainerPort": &Reference{
	type_: Integer,
},
			"HealthCheckConfig": &Reference{
	ref: "AWS::Lightsail::Container_HealthCheckConfig",
},
	},
},
	"AWS::Lightsail::Container_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Lightsail::Database_RelationalDatabaseParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllowedValues": &Reference{
	type_: String,
},
			"ApplyMethod": &Reference{
	type_: String,
},
			"ApplyType": &Reference{
	type_: String,
},
			"DataType": &Reference{
	type_: String,
},
			"Description": &Reference{
	type_: String,
},
			"IsModifiable": &Reference{
	type_: Boolean,
},
			"ParameterName": &Reference{
	type_: String,
},
			"ParameterValue": &Reference{
	type_: String,
},
	},
},
	"AWS::Lightsail::Database_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Lightsail::Disk_AddOn": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AddOnType": &Reference{
	type_: String,
},
			"AutoSnapshotAddOnRequest": &Reference{
	ref: "AWS::Lightsail::Disk_AutoSnapshotAddOn",
},
			"Status": &Reference{
	type_: String,
},
	},
},
	"AWS::Lightsail::Disk_AutoSnapshotAddOn": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SnapshotTimeOfDay": &Reference{
	type_: String,
},
	},
},
	"AWS::Lightsail::Disk_Location": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AvailabilityZone": &Reference{
	type_: String,
},
			"RegionName": &Reference{
	type_: String,
},
	},
},
	"AWS::Lightsail::Disk_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Lightsail::Instance_AddOn": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AddOnType": &Reference{
	type_: String,
},
			"AutoSnapshotAddOnRequest": &Reference{
	ref: "AWS::Lightsail::Instance_AutoSnapshotAddOn",
},
			"Status": &Reference{
	type_: String,
},
	},
},
	"AWS::Lightsail::Instance_AutoSnapshotAddOn": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SnapshotTimeOfDay": &Reference{
	type_: String,
},
	},
},
	"AWS::Lightsail::Instance_Disk": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AttachedTo": &Reference{
	type_: String,
},
			"AttachmentState": &Reference{
	type_: String,
},
			"DiskName": &Reference{
	type_: String,
},
			"IOPS": &Reference{
	type_: Integer,
},
			"IsSystemDisk": &Reference{
	type_: Boolean,
},
			"Path": &Reference{
	type_: String,
},
			"SizeInGb": &Reference{
	type_: String,
},
	},
},
	"AWS::Lightsail::Instance_Hardware": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CpuCount": &Reference{
	type_: Integer,
},
			"Disks": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lightsail::Instance_Disk",
},
},
			"RamSizeInGb": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Lightsail::Instance_Location": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AvailabilityZone": &Reference{
	type_: String,
},
			"RegionName": &Reference{
	type_: String,
},
	},
},
	"AWS::Lightsail::Instance_MonthlyTransfer": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GbPerMonthAllocated": &Reference{
	type_: String,
},
	},
},
	"AWS::Lightsail::Instance_Networking": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MonthlyTransfer": &Reference{
	ref: "AWS::Lightsail::Instance_MonthlyTransfer",
},
			"Ports": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Lightsail::Instance_Port",
},
},
	},
},
	"AWS::Lightsail::Instance_Port": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessDirection": &Reference{
	type_: String,
},
			"AccessFrom": &Reference{
	type_: String,
},
			"AccessType": &Reference{
	type_: String,
},
			"CidrListAliases": &Reference{
	ref: "AWS::Lightsail::Instance_cidrListAliases",
},
			"Cidrs": &Reference{
	ref: "AWS::Lightsail::Instance_cidrs",
},
			"CommonName": &Reference{
	type_: String,
},
			"FromPort": &Reference{
	type_: Integer,
},
			"Ipv6Cidrs": &Reference{
	ref: "AWS::Lightsail::Instance_ipv6Cidrs",
},
			"Protocol": &Reference{
	type_: String,
},
			"ToPort": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Lightsail::Instance_State": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Code": &Reference{
	type_: Integer,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::Lightsail::Instance_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Lightsail::Instance_cidrListAliases": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	"AWS::Lightsail::Instance_cidrs": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	"AWS::Lightsail::Instance_ipv6Cidrs": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	"AWS::Lightsail::LoadBalancer_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Location::GeofenceCollection_PricingPlan": &Reference{
	type_: String,
},
	"AWS::Location::GeofenceCollection_iso8601UTC": &Reference{
	type_: String,
},
	"AWS::Location::Map_MapConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Style": &Reference{
	type_: String,
},
	},
},
	"AWS::Location::Map_PricingPlan": &Reference{
	type_: String,
},
	"AWS::Location::Map_iso8601UTC": &Reference{
	type_: String,
},
	"AWS::Location::PlaceIndex_DataSourceConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IntendedUse": &Reference{
	ref: "AWS::Location::PlaceIndex_IntendedUse",
},
	},
},
	"AWS::Location::PlaceIndex_IntendedUse": &Reference{
	type_: String,
},
	"AWS::Location::PlaceIndex_PricingPlan": &Reference{
	type_: String,
},
	"AWS::Location::PlaceIndex_iso8601UTC": &Reference{
	type_: String,
},
	"AWS::Location::RouteCalculator_PricingPlan": &Reference{
	type_: String,
},
	"AWS::Location::RouteCalculator_iso8601UTC": &Reference{
	type_: String,
},
	"AWS::Location::Tracker_PositionFiltering": &Reference{
	type_: String,
},
	"AWS::Location::Tracker_PricingPlan": &Reference{
	type_: String,
},
	"AWS::Location::Tracker_iso8601UTC": &Reference{
	type_: String,
},
	"AWS::Logs::LogGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Logs::MetricFilter_MetricTransformation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DefaultValue": &Reference{
	type_: Number,
},
			"MetricName": &Reference{
	type_: String,
},
			"MetricNamespace": &Reference{
	type_: String,
},
			"MetricValue": &Reference{
	type_: String,
},
	},
},
	"AWS::Logs::QueryDefinition_LogGroup": &Reference{
	type_: String,
},
	"AWS::LookoutMetrics::Alert_Action": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LambdaConfiguration": &Reference{
	ref: "AWS::LookoutMetrics::Alert_LambdaConfiguration",
},
			"SNSConfiguration": &Reference{
	ref: "AWS::LookoutMetrics::Alert_SNSConfiguration",
},
	},
},
	"AWS::LookoutMetrics::Alert_Arn": &Reference{
	type_: String,
},
	"AWS::LookoutMetrics::Alert_LambdaConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LambdaArn": &Reference{
	ref: "AWS::LookoutMetrics::Alert_Arn",
},
			"RoleArn": &Reference{
	ref: "AWS::LookoutMetrics::Alert_Arn",
},
	},
},
	"AWS::LookoutMetrics::Alert_SNSConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RoleArn": &Reference{
	ref: "AWS::LookoutMetrics::Alert_Arn",
},
			"SnsTopicArn": &Reference{
	ref: "AWS::LookoutMetrics::Alert_Arn",
},
	},
},
	"AWS::LookoutMetrics::AnomalyDetector_AnomalyDetectorConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AnomalyDetectorFrequency": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_AnomalyDetectorFrequency",
},
	},
},
	"AWS::LookoutMetrics::AnomalyDetector_AnomalyDetectorFrequency": &Reference{
	type_: String,
},
	"AWS::LookoutMetrics::AnomalyDetector_AppFlowConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FlowName": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_Arn",
},
	},
},
	"AWS::LookoutMetrics::AnomalyDetector_Arn": &Reference{
	type_: String,
},
	"AWS::LookoutMetrics::AnomalyDetector_Charset": &Reference{
	type_: String,
},
	"AWS::LookoutMetrics::AnomalyDetector_CloudwatchConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RoleArn": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_Arn",
},
	},
},
	"AWS::LookoutMetrics::AnomalyDetector_ColumnName": &Reference{
	type_: String,
},
	"AWS::LookoutMetrics::AnomalyDetector_CsvFormatDescriptor": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Charset": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_Charset",
},
			"ContainsHeader": &Reference{
	type_: Boolean,
},
			"Delimiter": &Reference{
	type_: String,
},
			"FileCompression": &Reference{
	type_: String,
},
			"HeaderList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_ColumnName",
},
},
			"QuoteSymbol": &Reference{
	type_: String,
},
	},
},
	"AWS::LookoutMetrics::AnomalyDetector_DatabaseHost": &Reference{
	type_: String,
},
	"AWS::LookoutMetrics::AnomalyDetector_DatabasePort": &Reference{
	type_: Integer,
},
	"AWS::LookoutMetrics::AnomalyDetector_FileFormatDescriptor": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CsvFormatDescriptor": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_CsvFormatDescriptor",
},
			"JsonFormatDescriptor": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_JsonFormatDescriptor",
},
	},
},
	"AWS::LookoutMetrics::AnomalyDetector_JsonFormatDescriptor": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Charset": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_Charset",
},
			"FileCompression": &Reference{
	type_: String,
},
	},
},
	"AWS::LookoutMetrics::AnomalyDetector_Metric": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AggregationFunction": &Reference{
	type_: String,
},
			"MetricName": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_ColumnName",
},
			"Namespace": &Reference{
	type_: String,
},
	},
},
	"AWS::LookoutMetrics::AnomalyDetector_MetricSet": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DimensionList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_ColumnName",
},
},
			"MetricList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_Metric",
},
},
			"MetricSetDescription": &Reference{
	type_: String,
},
			"MetricSetFrequency": &Reference{
	type_: String,
},
			"MetricSetName": &Reference{
	type_: String,
},
			"MetricSource": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_MetricSource",
},
			"Offset": &Reference{
	type_: Integer,
},
			"TimestampColumn": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_TimestampColumn",
},
			"Timezone": &Reference{
	type_: String,
},
	},
},
	"AWS::LookoutMetrics::AnomalyDetector_MetricSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AppFlowConfig": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_AppFlowConfig",
},
			"CloudwatchConfig": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_CloudwatchConfig",
},
			"RDSSourceConfig": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_RDSSourceConfig",
},
			"RedshiftSourceConfig": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_RedshiftSourceConfig",
},
			"S3SourceConfig": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_S3SourceConfig",
},
	},
},
	"AWS::LookoutMetrics::AnomalyDetector_RDSSourceConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DBInstanceIdentifier": &Reference{
	type_: String,
},
			"DatabaseHost": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_DatabaseHost",
},
			"DatabaseName": &Reference{
	type_: String,
},
			"DatabasePort": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_DatabasePort",
},
			"RoleArn": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_Arn",
},
			"SecretManagerArn": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_SecretManagerArn",
},
			"TableName": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_TableName",
},
			"VpcConfiguration": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_VpcConfiguration",
},
	},
},
	"AWS::LookoutMetrics::AnomalyDetector_RedshiftSourceConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClusterIdentifier": &Reference{
	type_: String,
},
			"DatabaseHost": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_DatabaseHost",
},
			"DatabaseName": &Reference{
	type_: String,
},
			"DatabasePort": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_DatabasePort",
},
			"RoleArn": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_Arn",
},
			"SecretManagerArn": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_SecretManagerArn",
},
			"TableName": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_TableName",
},
			"VpcConfiguration": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_VpcConfiguration",
},
	},
},
	"AWS::LookoutMetrics::AnomalyDetector_S3SourceConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FileFormatDescriptor": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_FileFormatDescriptor",
},
			"HistoricalDataPathList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"RoleArn": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_Arn",
},
			"TemplatedPathList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::LookoutMetrics::AnomalyDetector_SecretManagerArn": &Reference{
	type_: String,
},
	"AWS::LookoutMetrics::AnomalyDetector_SecurityGroupIdList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	"AWS::LookoutMetrics::AnomalyDetector_SubnetIdList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	"AWS::LookoutMetrics::AnomalyDetector_TableName": &Reference{
	type_: String,
},
	"AWS::LookoutMetrics::AnomalyDetector_TimestampColumn": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ColumnFormat": &Reference{
	type_: String,
},
			"ColumnName": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_ColumnName",
},
	},
},
	"AWS::LookoutMetrics::AnomalyDetector_VpcConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecurityGroupIdList": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_SecurityGroupIdList",
},
			"SubnetIdList": &Reference{
	ref: "AWS::LookoutMetrics::AnomalyDetector_SubnetIdList",
},
	},
},
	"AWS::LookoutVision::Project_Arn": &Reference{
	type_: String,
},
	"AWS::LookoutVision::Project_ProjectName": &Reference{
	type_: String,
},
	"AWS::MSK::BatchScramSecret_SecretArnList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	"AWS::MSK::Cluster_BrokerLogs": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchLogs": &Reference{
	ref: "AWS::MSK::Cluster_CloudWatchLogs",
},
			"Firehose": &Reference{
	ref: "AWS::MSK::Cluster_Firehose",
},
			"S3": &Reference{
	ref: "AWS::MSK::Cluster_S3",
},
	},
},
	"AWS::MSK::Cluster_BrokerNodeGroupInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BrokerAZDistribution": &Reference{
	type_: String,
},
			"ClientSubnets": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ConnectivityInfo": &Reference{
	ref: "AWS::MSK::Cluster_ConnectivityInfo",
},
			"InstanceType": &Reference{
	type_: String,
},
			"SecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"StorageInfo": &Reference{
	ref: "AWS::MSK::Cluster_StorageInfo",
},
	},
},
	"AWS::MSK::Cluster_ClientAuthentication": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Sasl": &Reference{
	ref: "AWS::MSK::Cluster_Sasl",
},
			"Tls": &Reference{
	ref: "AWS::MSK::Cluster_Tls",
},
			"Unauthenticated": &Reference{
	ref: "AWS::MSK::Cluster_Unauthenticated",
},
	},
},
	"AWS::MSK::Cluster_CloudWatchLogs": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
			"LogGroup": &Reference{
	type_: String,
},
	},
},
	"AWS::MSK::Cluster_ConfigurationInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"Revision": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MSK::Cluster_ConnectivityInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PublicAccess": &Reference{
	ref: "AWS::MSK::Cluster_PublicAccess",
},
	},
},
	"AWS::MSK::Cluster_EBSStorageInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ProvisionedThroughput": &Reference{
	ref: "AWS::MSK::Cluster_ProvisionedThroughput",
},
			"VolumeSize": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MSK::Cluster_EncryptionAtRest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataVolumeKMSKeyId": &Reference{
	type_: String,
},
	},
},
	"AWS::MSK::Cluster_EncryptionInTransit": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClientBroker": &Reference{
	type_: String,
},
			"InCluster": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::MSK::Cluster_EncryptionInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EncryptionAtRest": &Reference{
	ref: "AWS::MSK::Cluster_EncryptionAtRest",
},
			"EncryptionInTransit": &Reference{
	ref: "AWS::MSK::Cluster_EncryptionInTransit",
},
	},
},
	"AWS::MSK::Cluster_Firehose": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeliveryStream": &Reference{
	type_: String,
},
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::MSK::Cluster_Iam": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::MSK::Cluster_JmxExporter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EnabledInBroker": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::MSK::Cluster_LoggingInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BrokerLogs": &Reference{
	ref: "AWS::MSK::Cluster_BrokerLogs",
},
	},
},
	"AWS::MSK::Cluster_NodeExporter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EnabledInBroker": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::MSK::Cluster_OpenMonitoring": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Prometheus": &Reference{
	ref: "AWS::MSK::Cluster_Prometheus",
},
	},
},
	"AWS::MSK::Cluster_Prometheus": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"JmxExporter": &Reference{
	ref: "AWS::MSK::Cluster_JmxExporter",
},
			"NodeExporter": &Reference{
	ref: "AWS::MSK::Cluster_NodeExporter",
},
	},
},
	"AWS::MSK::Cluster_ProvisionedThroughput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
			"VolumeThroughput": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MSK::Cluster_PublicAccess": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::MSK::Cluster_S3": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"Enabled": &Reference{
	type_: Boolean,
},
			"Prefix": &Reference{
	type_: String,
},
	},
},
	"AWS::MSK::Cluster_Sasl": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Iam": &Reference{
	ref: "AWS::MSK::Cluster_Iam",
},
			"Scram": &Reference{
	ref: "AWS::MSK::Cluster_Scram",
},
	},
},
	"AWS::MSK::Cluster_Scram": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::MSK::Cluster_StorageInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EBSStorageInfo": &Reference{
	ref: "AWS::MSK::Cluster_EBSStorageInfo",
},
	},
},
	"AWS::MSK::Cluster_Tls": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateAuthorityArnList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::MSK::Cluster_Unauthenticated": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::MSK::Configuration_KafkaVersionsList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	"AWS::MWAA::Environment_AirflowArn": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_AirflowVersion": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_CloudWatchLogGroupArn": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_ConfigKey": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_ConfigValue": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_CreatedAt": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_EnvironmentArn": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_EnvironmentClass": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_EnvironmentName": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_EnvironmentStatus": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_ErrorCode": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_ErrorMessage": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_ExecutionRoleArn": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_KmsKey": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_LastUpdate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CreatedAt": &Reference{
	ref: "AWS::MWAA::Environment_UpdateCreatedAt",
},
			"Error": &Reference{
	ref: "AWS::MWAA::Environment_UpdateError",
},
			"Status": &Reference{
	ref: "AWS::MWAA::Environment_UpdateStatus",
},
	},
},
	"AWS::MWAA::Environment_LoggingConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DagProcessingLogs": &Reference{
	ref: "AWS::MWAA::Environment_ModuleLoggingConfiguration",
},
			"SchedulerLogs": &Reference{
	ref: "AWS::MWAA::Environment_ModuleLoggingConfiguration",
},
			"TaskLogs": &Reference{
	ref: "AWS::MWAA::Environment_ModuleLoggingConfiguration",
},
			"WebserverLogs": &Reference{
	ref: "AWS::MWAA::Environment_ModuleLoggingConfiguration",
},
			"WorkerLogs": &Reference{
	ref: "AWS::MWAA::Environment_ModuleLoggingConfiguration",
},
	},
},
	"AWS::MWAA::Environment_LoggingConfigurationInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DagProcessingLogs": &Reference{
	ref: "AWS::MWAA::Environment_ModuleLoggingConfigurationInput",
},
			"SchedulerLogs": &Reference{
	ref: "AWS::MWAA::Environment_ModuleLoggingConfigurationInput",
},
			"TaskLogs": &Reference{
	ref: "AWS::MWAA::Environment_ModuleLoggingConfigurationInput",
},
			"WebserverLogs": &Reference{
	ref: "AWS::MWAA::Environment_ModuleLoggingConfigurationInput",
},
			"WorkerLogs": &Reference{
	ref: "AWS::MWAA::Environment_ModuleLoggingConfigurationInput",
},
	},
},
	"AWS::MWAA::Environment_LoggingEnabled": &Reference{
	type_: Boolean,
},
	"AWS::MWAA::Environment_LoggingLevel": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_MaxWorkers": &Reference{
	type_: Integer,
},
	"AWS::MWAA::Environment_MinWorkers": &Reference{
	type_: Integer,
},
	"AWS::MWAA::Environment_ModuleLoggingConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchLogGroupArn": &Reference{
	ref: "AWS::MWAA::Environment_CloudWatchLogGroupArn",
},
			"Enabled": &Reference{
	ref: "AWS::MWAA::Environment_LoggingEnabled",
},
			"LogLevel": &Reference{
	ref: "AWS::MWAA::Environment_LoggingLevel",
},
	},
},
	"AWS::MWAA::Environment_ModuleLoggingConfigurationInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	ref: "AWS::MWAA::Environment_LoggingEnabled",
},
			"LogLevel": &Reference{
	ref: "AWS::MWAA::Environment_LoggingLevel",
},
	},
},
	"AWS::MWAA::Environment_NetworkConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MWAA::Environment_SecurityGroupId",
},
},
			"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MWAA::Environment_SubnetId",
},
},
	},
},
	"AWS::MWAA::Environment_RelativePath": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_S3BucketArn": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_S3ObjectVersion": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_Schedulers": &Reference{
	type_: Integer,
},
	"AWS::MWAA::Environment_SecurityGroupId": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_ServiceRoleArn": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_SubnetId": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_UpdateCreatedAt": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_UpdateError": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ErrorCode": &Reference{
	ref: "AWS::MWAA::Environment_ErrorCode",
},
			"ErrorMessage": &Reference{
	ref: "AWS::MWAA::Environment_ErrorMessage",
},
	},
},
	"AWS::MWAA::Environment_UpdateStatus": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_WebserverAccessMode": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_WebserverUrl": &Reference{
	type_: String,
},
	"AWS::MWAA::Environment_WeeklyMaintenanceWindowStart": &Reference{
	type_: String,
},
	"AWS::Macie::FindingsFilter_Criterion": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::Macie::FindingsFilter_CriterionAdditionalProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"eq": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"gt": &Reference{
	type_: Integer,
},
			"gte": &Reference{
	type_: Integer,
},
			"lt": &Reference{
	type_: Integer,
},
			"lte": &Reference{
	type_: Integer,
},
			"neq": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Macie::FindingsFilter_FindingCriteria": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Criterion": &Reference{
	ref: "AWS::Macie::FindingsFilter_Criterion",
},
	},
},
	"AWS::Macie::FindingsFilter_FindingFilterAction": &Reference{
	type_: String,
},
	"AWS::Macie::FindingsFilter_FindingsFilterListItem": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Id": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::ManagedBlockchain::Member_ApprovalThresholdPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ProposalDurationInHours": &Reference{
	type_: Integer,
},
			"ThresholdComparator": &Reference{
	type_: String,
},
			"ThresholdPercentage": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ManagedBlockchain::Member_MemberConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Description": &Reference{
	type_: String,
},
			"MemberFrameworkConfiguration": &Reference{
	ref: "AWS::ManagedBlockchain::Member_MemberFrameworkConfiguration",
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::ManagedBlockchain::Member_MemberFabricConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdminPassword": &Reference{
	type_: String,
},
			"AdminUsername": &Reference{
	type_: String,
},
	},
},
	"AWS::ManagedBlockchain::Member_MemberFrameworkConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MemberFabricConfiguration": &Reference{
	ref: "AWS::ManagedBlockchain::Member_MemberFabricConfiguration",
},
	},
},
	"AWS::ManagedBlockchain::Member_NetworkConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Description": &Reference{
	type_: String,
},
			"Framework": &Reference{
	type_: String,
},
			"FrameworkVersion": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"NetworkFrameworkConfiguration": &Reference{
	ref: "AWS::ManagedBlockchain::Member_NetworkFrameworkConfiguration",
},
			"VotingPolicy": &Reference{
	ref: "AWS::ManagedBlockchain::Member_VotingPolicy",
},
	},
},
	"AWS::ManagedBlockchain::Member_NetworkFabricConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Edition": &Reference{
	type_: String,
},
	},
},
	"AWS::ManagedBlockchain::Member_NetworkFrameworkConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NetworkFabricConfiguration": &Reference{
	ref: "AWS::ManagedBlockchain::Member_NetworkFabricConfiguration",
},
	},
},
	"AWS::ManagedBlockchain::Member_VotingPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApprovalThresholdPolicy": &Reference{
	ref: "AWS::ManagedBlockchain::Member_ApprovalThresholdPolicy",
},
	},
},
	"AWS::ManagedBlockchain::Node_NodeConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AvailabilityZone": &Reference{
	type_: String,
},
			"InstanceType": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaConnect::Flow_Encryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Algorithm": &Reference{
	type_: String,
},
			"ConstantInitializationVector": &Reference{
	type_: String,
},
			"DeviceId": &Reference{
	type_: String,
},
			"KeyType": &Reference{
	type_: String,
},
			"Region": &Reference{
	type_: String,
},
			"ResourceId": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
			"SecretArn": &Reference{
	type_: String,
},
			"Url": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaConnect::Flow_FailoverConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RecoveryWindow": &Reference{
	type_: Integer,
},
			"State": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaConnect::Flow_Source": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Decryption": &Reference{
	ref: "AWS::MediaConnect::Flow_Encryption",
},
			"Description": &Reference{
	type_: String,
},
			"EntitlementArn": &Reference{
	type_: String,
},
			"IngestIp": &Reference{
	type_: String,
},
			"IngestPort": &Reference{
	type_: Integer,
},
			"MaxBitrate": &Reference{
	type_: Integer,
},
			"MaxLatency": &Reference{
	type_: Integer,
},
			"MinLatency": &Reference{
	type_: Integer,
},
			"Name": &Reference{
	type_: String,
},
			"Protocol": &Reference{
	type_: String,
},
			"SourceArn": &Reference{
	type_: String,
},
			"SourceIngestPort": &Reference{
	type_: String,
},
			"StreamId": &Reference{
	type_: String,
},
			"VpcInterfaceName": &Reference{
	type_: String,
},
			"WhitelistCidr": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaConnect::FlowEntitlement_Encryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Algorithm": &Reference{
	type_: String,
},
			"ConstantInitializationVector": &Reference{
	type_: String,
},
			"DeviceId": &Reference{
	type_: String,
},
			"KeyType": &Reference{
	type_: String,
},
			"Region": &Reference{
	type_: String,
},
			"ResourceId": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
			"SecretArn": &Reference{
	type_: String,
},
			"Url": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaConnect::FlowOutput_Encryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Algorithm": &Reference{
	type_: String,
},
			"KeyType": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
			"SecretArn": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaConnect::FlowOutput_VpcInterfaceAttachment": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"VpcInterfaceName": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaConnect::FlowSource_Encryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Algorithm": &Reference{
	type_: String,
},
			"ConstantInitializationVector": &Reference{
	type_: String,
},
			"DeviceId": &Reference{
	type_: String,
},
			"KeyType": &Reference{
	type_: String,
},
			"Region": &Reference{
	type_: String,
},
			"ResourceId": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
			"SecretArn": &Reference{
	type_: String,
},
			"Url": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaConvert::JobTemplate_AccelerationSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Mode": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaConvert::JobTemplate_HopDestination": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Priority": &Reference{
	type_: Integer,
},
			"Queue": &Reference{
	type_: String,
},
			"WaitMinutes": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_AacSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bitrate": &Reference{
	type_: Number,
},
			"CodingMode": &Reference{
	type_: String,
},
			"InputType": &Reference{
	type_: String,
},
			"Profile": &Reference{
	type_: String,
},
			"RateControlMode": &Reference{
	type_: String,
},
			"RawFormat": &Reference{
	type_: String,
},
			"SampleRate": &Reference{
	type_: Number,
},
			"Spec": &Reference{
	type_: String,
},
			"VbrQuality": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_Ac3Settings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bitrate": &Reference{
	type_: Number,
},
			"BitstreamMode": &Reference{
	type_: String,
},
			"CodingMode": &Reference{
	type_: String,
},
			"Dialnorm": &Reference{
	type_: Integer,
},
			"DrcProfile": &Reference{
	type_: String,
},
			"LfeFilter": &Reference{
	type_: String,
},
			"MetadataControl": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_AncillarySourceSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SourceAncillaryChannelNumber": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_ArchiveCdnSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ArchiveS3Settings": &Reference{
	ref: "AWS::MediaLive::Channel_ArchiveS3Settings",
},
	},
},
	"AWS::MediaLive::Channel_ArchiveContainerSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"M2tsSettings": &Reference{
	ref: "AWS::MediaLive::Channel_M2tsSettings",
},
			"RawSettings": &Reference{
	ref: "AWS::MediaLive::Channel_RawSettings",
},
	},
},
	"AWS::MediaLive::Channel_ArchiveGroupSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ArchiveCdnSettings": &Reference{
	ref: "AWS::MediaLive::Channel_ArchiveCdnSettings",
},
			"Destination": &Reference{
	ref: "AWS::MediaLive::Channel_OutputLocationRef",
},
			"RolloverInterval": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_ArchiveOutputSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerSettings": &Reference{
	ref: "AWS::MediaLive::Channel_ArchiveContainerSettings",
},
			"Extension": &Reference{
	type_: String,
},
			"NameModifier": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_ArchiveS3Settings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CannedAcl": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_AribDestinationSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::MediaLive::Channel_AribSourceSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::MediaLive::Channel_AudioChannelMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InputChannelLevels": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaLive::Channel_InputChannelLevel",
},
},
			"OutputChannel": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_AudioCodecSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AacSettings": &Reference{
	ref: "AWS::MediaLive::Channel_AacSettings",
},
			"Ac3Settings": &Reference{
	ref: "AWS::MediaLive::Channel_Ac3Settings",
},
			"Eac3Settings": &Reference{
	ref: "AWS::MediaLive::Channel_Eac3Settings",
},
			"Mp2Settings": &Reference{
	ref: "AWS::MediaLive::Channel_Mp2Settings",
},
			"PassThroughSettings": &Reference{
	ref: "AWS::MediaLive::Channel_PassThroughSettings",
},
			"WavSettings": &Reference{
	ref: "AWS::MediaLive::Channel_WavSettings",
},
	},
},
	"AWS::MediaLive::Channel_AudioDescription": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AudioNormalizationSettings": &Reference{
	ref: "AWS::MediaLive::Channel_AudioNormalizationSettings",
},
			"AudioSelectorName": &Reference{
	type_: String,
},
			"AudioType": &Reference{
	type_: String,
},
			"AudioTypeControl": &Reference{
	type_: String,
},
			"AudioWatermarkingSettings": &Reference{
	ref: "AWS::MediaLive::Channel_AudioWatermarkSettings",
},
			"CodecSettings": &Reference{
	ref: "AWS::MediaLive::Channel_AudioCodecSettings",
},
			"LanguageCode": &Reference{
	type_: String,
},
			"LanguageCodeControl": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"RemixSettings": &Reference{
	ref: "AWS::MediaLive::Channel_RemixSettings",
},
			"StreamName": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_AudioHlsRenditionSelection": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GroupId": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_AudioLanguageSelection": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LanguageCode": &Reference{
	type_: String,
},
			"LanguageSelectionPolicy": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_AudioNormalizationSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Algorithm": &Reference{
	type_: String,
},
			"AlgorithmControl": &Reference{
	type_: String,
},
			"TargetLkfs": &Reference{
	type_: Number,
},
	},
},
	"AWS::MediaLive::Channel_AudioOnlyHlsSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AudioGroupId": &Reference{
	type_: String,
},
			"AudioOnlyImage": &Reference{
	ref: "AWS::MediaLive::Channel_InputLocation",
},
			"AudioTrackType": &Reference{
	type_: String,
},
			"SegmentType": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_AudioPidSelection": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Pid": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_AudioSelector": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"SelectorSettings": &Reference{
	ref: "AWS::MediaLive::Channel_AudioSelectorSettings",
},
	},
},
	"AWS::MediaLive::Channel_AudioSelectorSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AudioHlsRenditionSelection": &Reference{
	ref: "AWS::MediaLive::Channel_AudioHlsRenditionSelection",
},
			"AudioLanguageSelection": &Reference{
	ref: "AWS::MediaLive::Channel_AudioLanguageSelection",
},
			"AudioPidSelection": &Reference{
	ref: "AWS::MediaLive::Channel_AudioPidSelection",
},
			"AudioTrackSelection": &Reference{
	ref: "AWS::MediaLive::Channel_AudioTrackSelection",
},
	},
},
	"AWS::MediaLive::Channel_AudioSilenceFailoverSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AudioSelectorName": &Reference{
	type_: String,
},
			"AudioSilenceThresholdMsec": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_AudioTrack": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Track": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_AudioTrackSelection": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Tracks": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaLive::Channel_AudioTrack",
},
},
	},
},
	"AWS::MediaLive::Channel_AudioWatermarkSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NielsenWatermarksSettings": &Reference{
	ref: "AWS::MediaLive::Channel_NielsenWatermarksSettings",
},
	},
},
	"AWS::MediaLive::Channel_AutomaticInputFailoverSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ErrorClearTimeMsec": &Reference{
	type_: Integer,
},
			"FailoverConditions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaLive::Channel_FailoverCondition",
},
},
			"InputPreference": &Reference{
	type_: String,
},
			"SecondaryInputId": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_AvailBlanking": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AvailBlankingImage": &Reference{
	ref: "AWS::MediaLive::Channel_InputLocation",
},
			"State": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_AvailConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AvailSettings": &Reference{
	ref: "AWS::MediaLive::Channel_AvailSettings",
},
	},
},
	"AWS::MediaLive::Channel_AvailSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Scte35SpliceInsert": &Reference{
	ref: "AWS::MediaLive::Channel_Scte35SpliceInsert",
},
			"Scte35TimeSignalApos": &Reference{
	ref: "AWS::MediaLive::Channel_Scte35TimeSignalApos",
},
	},
},
	"AWS::MediaLive::Channel_BlackoutSlate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BlackoutSlateImage": &Reference{
	ref: "AWS::MediaLive::Channel_InputLocation",
},
			"NetworkEndBlackout": &Reference{
	type_: String,
},
			"NetworkEndBlackoutImage": &Reference{
	ref: "AWS::MediaLive::Channel_InputLocation",
},
			"NetworkId": &Reference{
	type_: String,
},
			"State": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_BurnInDestinationSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Alignment": &Reference{
	type_: String,
},
			"BackgroundColor": &Reference{
	type_: String,
},
			"BackgroundOpacity": &Reference{
	type_: Integer,
},
			"Font": &Reference{
	ref: "AWS::MediaLive::Channel_InputLocation",
},
			"FontColor": &Reference{
	type_: String,
},
			"FontOpacity": &Reference{
	type_: Integer,
},
			"FontResolution": &Reference{
	type_: Integer,
},
			"FontSize": &Reference{
	type_: String,
},
			"OutlineColor": &Reference{
	type_: String,
},
			"OutlineSize": &Reference{
	type_: Integer,
},
			"ShadowColor": &Reference{
	type_: String,
},
			"ShadowOpacity": &Reference{
	type_: Integer,
},
			"ShadowXOffset": &Reference{
	type_: Integer,
},
			"ShadowYOffset": &Reference{
	type_: Integer,
},
			"TeletextGridControl": &Reference{
	type_: String,
},
			"XPosition": &Reference{
	type_: Integer,
},
			"YPosition": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_CaptionDescription": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CaptionSelectorName": &Reference{
	type_: String,
},
			"DestinationSettings": &Reference{
	ref: "AWS::MediaLive::Channel_CaptionDestinationSettings",
},
			"LanguageCode": &Reference{
	type_: String,
},
			"LanguageDescription": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_CaptionDestinationSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AribDestinationSettings": &Reference{
	ref: "AWS::MediaLive::Channel_AribDestinationSettings",
},
			"BurnInDestinationSettings": &Reference{
	ref: "AWS::MediaLive::Channel_BurnInDestinationSettings",
},
			"DvbSubDestinationSettings": &Reference{
	ref: "AWS::MediaLive::Channel_DvbSubDestinationSettings",
},
			"EbuTtDDestinationSettings": &Reference{
	ref: "AWS::MediaLive::Channel_EbuTtDDestinationSettings",
},
			"EmbeddedDestinationSettings": &Reference{
	ref: "AWS::MediaLive::Channel_EmbeddedDestinationSettings",
},
			"EmbeddedPlusScte20DestinationSettings": &Reference{
	ref: "AWS::MediaLive::Channel_EmbeddedPlusScte20DestinationSettings",
},
			"RtmpCaptionInfoDestinationSettings": &Reference{
	ref: "AWS::MediaLive::Channel_RtmpCaptionInfoDestinationSettings",
},
			"Scte20PlusEmbeddedDestinationSettings": &Reference{
	ref: "AWS::MediaLive::Channel_Scte20PlusEmbeddedDestinationSettings",
},
			"Scte27DestinationSettings": &Reference{
	ref: "AWS::MediaLive::Channel_Scte27DestinationSettings",
},
			"SmpteTtDestinationSettings": &Reference{
	ref: "AWS::MediaLive::Channel_SmpteTtDestinationSettings",
},
			"TeletextDestinationSettings": &Reference{
	ref: "AWS::MediaLive::Channel_TeletextDestinationSettings",
},
			"TtmlDestinationSettings": &Reference{
	ref: "AWS::MediaLive::Channel_TtmlDestinationSettings",
},
			"WebvttDestinationSettings": &Reference{
	ref: "AWS::MediaLive::Channel_WebvttDestinationSettings",
},
	},
},
	"AWS::MediaLive::Channel_CaptionLanguageMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CaptionChannel": &Reference{
	type_: Integer,
},
			"LanguageCode": &Reference{
	type_: String,
},
			"LanguageDescription": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_CaptionRectangle": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Height": &Reference{
	type_: Number,
},
			"LeftOffset": &Reference{
	type_: Number,
},
			"TopOffset": &Reference{
	type_: Number,
},
			"Width": &Reference{
	type_: Number,
},
	},
},
	"AWS::MediaLive::Channel_CaptionSelector": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LanguageCode": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"SelectorSettings": &Reference{
	ref: "AWS::MediaLive::Channel_CaptionSelectorSettings",
},
	},
},
	"AWS::MediaLive::Channel_CaptionSelectorSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AncillarySourceSettings": &Reference{
	ref: "AWS::MediaLive::Channel_AncillarySourceSettings",
},
			"AribSourceSettings": &Reference{
	ref: "AWS::MediaLive::Channel_AribSourceSettings",
},
			"DvbSubSourceSettings": &Reference{
	ref: "AWS::MediaLive::Channel_DvbSubSourceSettings",
},
			"EmbeddedSourceSettings": &Reference{
	ref: "AWS::MediaLive::Channel_EmbeddedSourceSettings",
},
			"Scte20SourceSettings": &Reference{
	ref: "AWS::MediaLive::Channel_Scte20SourceSettings",
},
			"Scte27SourceSettings": &Reference{
	ref: "AWS::MediaLive::Channel_Scte27SourceSettings",
},
			"TeletextSourceSettings": &Reference{
	ref: "AWS::MediaLive::Channel_TeletextSourceSettings",
},
	},
},
	"AWS::MediaLive::Channel_CdiInputSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Resolution": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_ColorSpacePassthroughSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::MediaLive::Channel_DvbNitSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NetworkId": &Reference{
	type_: Integer,
},
			"NetworkName": &Reference{
	type_: String,
},
			"RepInterval": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_DvbSdtSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OutputSdt": &Reference{
	type_: String,
},
			"RepInterval": &Reference{
	type_: Integer,
},
			"ServiceName": &Reference{
	type_: String,
},
			"ServiceProviderName": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_DvbSubDestinationSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Alignment": &Reference{
	type_: String,
},
			"BackgroundColor": &Reference{
	type_: String,
},
			"BackgroundOpacity": &Reference{
	type_: Integer,
},
			"Font": &Reference{
	ref: "AWS::MediaLive::Channel_InputLocation",
},
			"FontColor": &Reference{
	type_: String,
},
			"FontOpacity": &Reference{
	type_: Integer,
},
			"FontResolution": &Reference{
	type_: Integer,
},
			"FontSize": &Reference{
	type_: String,
},
			"OutlineColor": &Reference{
	type_: String,
},
			"OutlineSize": &Reference{
	type_: Integer,
},
			"ShadowColor": &Reference{
	type_: String,
},
			"ShadowOpacity": &Reference{
	type_: Integer,
},
			"ShadowXOffset": &Reference{
	type_: Integer,
},
			"ShadowYOffset": &Reference{
	type_: Integer,
},
			"TeletextGridControl": &Reference{
	type_: String,
},
			"XPosition": &Reference{
	type_: Integer,
},
			"YPosition": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_DvbSubSourceSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OcrLanguage": &Reference{
	type_: String,
},
			"Pid": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_DvbTdtSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RepInterval": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_Eac3Settings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AttenuationControl": &Reference{
	type_: String,
},
			"Bitrate": &Reference{
	type_: Number,
},
			"BitstreamMode": &Reference{
	type_: String,
},
			"CodingMode": &Reference{
	type_: String,
},
			"DcFilter": &Reference{
	type_: String,
},
			"Dialnorm": &Reference{
	type_: Integer,
},
			"DrcLine": &Reference{
	type_: String,
},
			"DrcRf": &Reference{
	type_: String,
},
			"LfeControl": &Reference{
	type_: String,
},
			"LfeFilter": &Reference{
	type_: String,
},
			"LoRoCenterMixLevel": &Reference{
	type_: Number,
},
			"LoRoSurroundMixLevel": &Reference{
	type_: Number,
},
			"LtRtCenterMixLevel": &Reference{
	type_: Number,
},
			"LtRtSurroundMixLevel": &Reference{
	type_: Number,
},
			"MetadataControl": &Reference{
	type_: String,
},
			"PassthroughControl": &Reference{
	type_: String,
},
			"PhaseControl": &Reference{
	type_: String,
},
			"StereoDownmix": &Reference{
	type_: String,
},
			"SurroundExMode": &Reference{
	type_: String,
},
			"SurroundMode": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_EbuTtDDestinationSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CopyrightHolder": &Reference{
	type_: String,
},
			"FillLineGap": &Reference{
	type_: String,
},
			"FontFamily": &Reference{
	type_: String,
},
			"StyleControl": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_EmbeddedDestinationSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::MediaLive::Channel_EmbeddedPlusScte20DestinationSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::MediaLive::Channel_EmbeddedSourceSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Convert608To708": &Reference{
	type_: String,
},
			"Scte20Detection": &Reference{
	type_: String,
},
			"Source608ChannelNumber": &Reference{
	type_: Integer,
},
			"Source608TrackNumber": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_EncoderSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AudioDescriptions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaLive::Channel_AudioDescription",
},
},
			"AvailBlanking": &Reference{
	ref: "AWS::MediaLive::Channel_AvailBlanking",
},
			"AvailConfiguration": &Reference{
	ref: "AWS::MediaLive::Channel_AvailConfiguration",
},
			"BlackoutSlate": &Reference{
	ref: "AWS::MediaLive::Channel_BlackoutSlate",
},
			"CaptionDescriptions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaLive::Channel_CaptionDescription",
},
},
			"FeatureActivations": &Reference{
	ref: "AWS::MediaLive::Channel_FeatureActivations",
},
			"GlobalConfiguration": &Reference{
	ref: "AWS::MediaLive::Channel_GlobalConfiguration",
},
			"MotionGraphicsConfiguration": &Reference{
	ref: "AWS::MediaLive::Channel_MotionGraphicsConfiguration",
},
			"NielsenConfiguration": &Reference{
	ref: "AWS::MediaLive::Channel_NielsenConfiguration",
},
			"OutputGroups": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaLive::Channel_OutputGroup",
},
},
			"TimecodeConfig": &Reference{
	ref: "AWS::MediaLive::Channel_TimecodeConfig",
},
			"VideoDescriptions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaLive::Channel_VideoDescription",
},
},
	},
},
	"AWS::MediaLive::Channel_FailoverCondition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FailoverConditionSettings": &Reference{
	ref: "AWS::MediaLive::Channel_FailoverConditionSettings",
},
	},
},
	"AWS::MediaLive::Channel_FailoverConditionSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AudioSilenceSettings": &Reference{
	ref: "AWS::MediaLive::Channel_AudioSilenceFailoverSettings",
},
			"InputLossSettings": &Reference{
	ref: "AWS::MediaLive::Channel_InputLossFailoverSettings",
},
			"VideoBlackSettings": &Reference{
	ref: "AWS::MediaLive::Channel_VideoBlackFailoverSettings",
},
	},
},
	"AWS::MediaLive::Channel_FeatureActivations": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InputPrepareScheduleActions": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_FecOutputSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ColumnDepth": &Reference{
	type_: Integer,
},
			"IncludeFec": &Reference{
	type_: String,
},
			"RowLength": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_Fmp4HlsSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AudioRenditionSets": &Reference{
	type_: String,
},
			"NielsenId3Behavior": &Reference{
	type_: String,
},
			"TimedMetadataBehavior": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_FrameCaptureCdnSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FrameCaptureS3Settings": &Reference{
	ref: "AWS::MediaLive::Channel_FrameCaptureS3Settings",
},
	},
},
	"AWS::MediaLive::Channel_FrameCaptureGroupSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Destination": &Reference{
	ref: "AWS::MediaLive::Channel_OutputLocationRef",
},
			"FrameCaptureCdnSettings": &Reference{
	ref: "AWS::MediaLive::Channel_FrameCaptureCdnSettings",
},
	},
},
	"AWS::MediaLive::Channel_FrameCaptureHlsSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::MediaLive::Channel_FrameCaptureOutputSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NameModifier": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_FrameCaptureS3Settings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CannedAcl": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_FrameCaptureSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CaptureInterval": &Reference{
	type_: Integer,
},
			"CaptureIntervalUnits": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_GlobalConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InitialAudioGain": &Reference{
	type_: Integer,
},
			"InputEndAction": &Reference{
	type_: String,
},
			"InputLossBehavior": &Reference{
	ref: "AWS::MediaLive::Channel_InputLossBehavior",
},
			"OutputLockingMode": &Reference{
	type_: String,
},
			"OutputTimingSource": &Reference{
	type_: String,
},
			"SupportLowFramerateInputs": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_H264ColorSpaceSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ColorSpacePassthroughSettings": &Reference{
	ref: "AWS::MediaLive::Channel_ColorSpacePassthroughSettings",
},
			"Rec601Settings": &Reference{
	ref: "AWS::MediaLive::Channel_Rec601Settings",
},
			"Rec709Settings": &Reference{
	ref: "AWS::MediaLive::Channel_Rec709Settings",
},
	},
},
	"AWS::MediaLive::Channel_H264FilterSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TemporalFilterSettings": &Reference{
	ref: "AWS::MediaLive::Channel_TemporalFilterSettings",
},
	},
},
	"AWS::MediaLive::Channel_H264Settings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdaptiveQuantization": &Reference{
	type_: String,
},
			"AfdSignaling": &Reference{
	type_: String,
},
			"Bitrate": &Reference{
	type_: Integer,
},
			"BufFillPct": &Reference{
	type_: Integer,
},
			"BufSize": &Reference{
	type_: Integer,
},
			"ColorMetadata": &Reference{
	type_: String,
},
			"ColorSpaceSettings": &Reference{
	ref: "AWS::MediaLive::Channel_H264ColorSpaceSettings",
},
			"EntropyEncoding": &Reference{
	type_: String,
},
			"FilterSettings": &Reference{
	ref: "AWS::MediaLive::Channel_H264FilterSettings",
},
			"FixedAfd": &Reference{
	type_: String,
},
			"FlickerAq": &Reference{
	type_: String,
},
			"ForceFieldPictures": &Reference{
	type_: String,
},
			"FramerateControl": &Reference{
	type_: String,
},
			"FramerateDenominator": &Reference{
	type_: Integer,
},
			"FramerateNumerator": &Reference{
	type_: Integer,
},
			"GopBReference": &Reference{
	type_: String,
},
			"GopClosedCadence": &Reference{
	type_: Integer,
},
			"GopNumBFrames": &Reference{
	type_: Integer,
},
			"GopSize": &Reference{
	type_: Number,
},
			"GopSizeUnits": &Reference{
	type_: String,
},
			"Level": &Reference{
	type_: String,
},
			"LookAheadRateControl": &Reference{
	type_: String,
},
			"MaxBitrate": &Reference{
	type_: Integer,
},
			"MinIInterval": &Reference{
	type_: Integer,
},
			"NumRefFrames": &Reference{
	type_: Integer,
},
			"ParControl": &Reference{
	type_: String,
},
			"ParDenominator": &Reference{
	type_: Integer,
},
			"ParNumerator": &Reference{
	type_: Integer,
},
			"Profile": &Reference{
	type_: String,
},
			"QualityLevel": &Reference{
	type_: String,
},
			"QvbrQualityLevel": &Reference{
	type_: Integer,
},
			"RateControlMode": &Reference{
	type_: String,
},
			"ScanType": &Reference{
	type_: String,
},
			"SceneChangeDetect": &Reference{
	type_: String,
},
			"Slices": &Reference{
	type_: Integer,
},
			"Softness": &Reference{
	type_: Integer,
},
			"SpatialAq": &Reference{
	type_: String,
},
			"SubgopLength": &Reference{
	type_: String,
},
			"Syntax": &Reference{
	type_: String,
},
			"TemporalAq": &Reference{
	type_: String,
},
			"TimecodeInsertion": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_H265ColorSpaceSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ColorSpacePassthroughSettings": &Reference{
	ref: "AWS::MediaLive::Channel_ColorSpacePassthroughSettings",
},
			"Hdr10Settings": &Reference{
	ref: "AWS::MediaLive::Channel_Hdr10Settings",
},
			"Rec601Settings": &Reference{
	ref: "AWS::MediaLive::Channel_Rec601Settings",
},
			"Rec709Settings": &Reference{
	ref: "AWS::MediaLive::Channel_Rec709Settings",
},
	},
},
	"AWS::MediaLive::Channel_H265FilterSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TemporalFilterSettings": &Reference{
	ref: "AWS::MediaLive::Channel_TemporalFilterSettings",
},
	},
},
	"AWS::MediaLive::Channel_H265Settings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdaptiveQuantization": &Reference{
	type_: String,
},
			"AfdSignaling": &Reference{
	type_: String,
},
			"AlternativeTransferFunction": &Reference{
	type_: String,
},
			"Bitrate": &Reference{
	type_: Integer,
},
			"BufSize": &Reference{
	type_: Integer,
},
			"ColorMetadata": &Reference{
	type_: String,
},
			"ColorSpaceSettings": &Reference{
	ref: "AWS::MediaLive::Channel_H265ColorSpaceSettings",
},
			"FilterSettings": &Reference{
	ref: "AWS::MediaLive::Channel_H265FilterSettings",
},
			"FixedAfd": &Reference{
	type_: String,
},
			"FlickerAq": &Reference{
	type_: String,
},
			"FramerateDenominator": &Reference{
	type_: Integer,
},
			"FramerateNumerator": &Reference{
	type_: Integer,
},
			"GopClosedCadence": &Reference{
	type_: Integer,
},
			"GopSize": &Reference{
	type_: Number,
},
			"GopSizeUnits": &Reference{
	type_: String,
},
			"Level": &Reference{
	type_: String,
},
			"LookAheadRateControl": &Reference{
	type_: String,
},
			"MaxBitrate": &Reference{
	type_: Integer,
},
			"MinIInterval": &Reference{
	type_: Integer,
},
			"ParDenominator": &Reference{
	type_: Integer,
},
			"ParNumerator": &Reference{
	type_: Integer,
},
			"Profile": &Reference{
	type_: String,
},
			"QvbrQualityLevel": &Reference{
	type_: Integer,
},
			"RateControlMode": &Reference{
	type_: String,
},
			"ScanType": &Reference{
	type_: String,
},
			"SceneChangeDetect": &Reference{
	type_: String,
},
			"Slices": &Reference{
	type_: Integer,
},
			"Tier": &Reference{
	type_: String,
},
			"TimecodeInsertion": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_Hdr10Settings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxCll": &Reference{
	type_: Integer,
},
			"MaxFall": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_HlsAkamaiSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConnectionRetryInterval": &Reference{
	type_: Integer,
},
			"FilecacheDuration": &Reference{
	type_: Integer,
},
			"HttpTransferMode": &Reference{
	type_: String,
},
			"NumRetries": &Reference{
	type_: Integer,
},
			"RestartDelay": &Reference{
	type_: Integer,
},
			"Salt": &Reference{
	type_: String,
},
			"Token": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_HlsBasicPutSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConnectionRetryInterval": &Reference{
	type_: Integer,
},
			"FilecacheDuration": &Reference{
	type_: Integer,
},
			"NumRetries": &Reference{
	type_: Integer,
},
			"RestartDelay": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_HlsCdnSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HlsAkamaiSettings": &Reference{
	ref: "AWS::MediaLive::Channel_HlsAkamaiSettings",
},
			"HlsBasicPutSettings": &Reference{
	ref: "AWS::MediaLive::Channel_HlsBasicPutSettings",
},
			"HlsMediaStoreSettings": &Reference{
	ref: "AWS::MediaLive::Channel_HlsMediaStoreSettings",
},
			"HlsS3Settings": &Reference{
	ref: "AWS::MediaLive::Channel_HlsS3Settings",
},
			"HlsWebdavSettings": &Reference{
	ref: "AWS::MediaLive::Channel_HlsWebdavSettings",
},
	},
},
	"AWS::MediaLive::Channel_HlsGroupSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdMarkers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"BaseUrlContent": &Reference{
	type_: String,
},
			"BaseUrlContent1": &Reference{
	type_: String,
},
			"BaseUrlManifest": &Reference{
	type_: String,
},
			"BaseUrlManifest1": &Reference{
	type_: String,
},
			"CaptionLanguageMappings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaLive::Channel_CaptionLanguageMapping",
},
},
			"CaptionLanguageSetting": &Reference{
	type_: String,
},
			"ClientCache": &Reference{
	type_: String,
},
			"CodecSpecification": &Reference{
	type_: String,
},
			"ConstantIv": &Reference{
	type_: String,
},
			"Destination": &Reference{
	ref: "AWS::MediaLive::Channel_OutputLocationRef",
},
			"DirectoryStructure": &Reference{
	type_: String,
},
			"DiscontinuityTags": &Reference{
	type_: String,
},
			"EncryptionType": &Reference{
	type_: String,
},
			"HlsCdnSettings": &Reference{
	ref: "AWS::MediaLive::Channel_HlsCdnSettings",
},
			"HlsId3SegmentTagging": &Reference{
	type_: String,
},
			"IFrameOnlyPlaylists": &Reference{
	type_: String,
},
			"IncompleteSegmentBehavior": &Reference{
	type_: String,
},
			"IndexNSegments": &Reference{
	type_: Integer,
},
			"InputLossAction": &Reference{
	type_: String,
},
			"IvInManifest": &Reference{
	type_: String,
},
			"IvSource": &Reference{
	type_: String,
},
			"KeepSegments": &Reference{
	type_: Integer,
},
			"KeyFormat": &Reference{
	type_: String,
},
			"KeyFormatVersions": &Reference{
	type_: String,
},
			"KeyProviderSettings": &Reference{
	ref: "AWS::MediaLive::Channel_KeyProviderSettings",
},
			"ManifestCompression": &Reference{
	type_: String,
},
			"ManifestDurationFormat": &Reference{
	type_: String,
},
			"MinSegmentLength": &Reference{
	type_: Integer,
},
			"Mode": &Reference{
	type_: String,
},
			"OutputSelection": &Reference{
	type_: String,
},
			"ProgramDateTime": &Reference{
	type_: String,
},
			"ProgramDateTimeClock": &Reference{
	type_: String,
},
			"ProgramDateTimePeriod": &Reference{
	type_: Integer,
},
			"RedundantManifest": &Reference{
	type_: String,
},
			"SegmentLength": &Reference{
	type_: Integer,
},
			"SegmentationMode": &Reference{
	type_: String,
},
			"SegmentsPerSubdirectory": &Reference{
	type_: Integer,
},
			"StreamInfResolution": &Reference{
	type_: String,
},
			"TimedMetadataId3Frame": &Reference{
	type_: String,
},
			"TimedMetadataId3Period": &Reference{
	type_: Integer,
},
			"TimestampDeltaMilliseconds": &Reference{
	type_: Integer,
},
			"TsFileMode": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_HlsInputSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bandwidth": &Reference{
	type_: Integer,
},
			"BufferSegments": &Reference{
	type_: Integer,
},
			"Retries": &Reference{
	type_: Integer,
},
			"RetryInterval": &Reference{
	type_: Integer,
},
			"Scte35Source": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_HlsMediaStoreSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConnectionRetryInterval": &Reference{
	type_: Integer,
},
			"FilecacheDuration": &Reference{
	type_: Integer,
},
			"MediaStoreStorageClass": &Reference{
	type_: String,
},
			"NumRetries": &Reference{
	type_: Integer,
},
			"RestartDelay": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_HlsOutputSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"H265PackagingType": &Reference{
	type_: String,
},
			"HlsSettings": &Reference{
	ref: "AWS::MediaLive::Channel_HlsSettings",
},
			"NameModifier": &Reference{
	type_: String,
},
			"SegmentModifier": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_HlsS3Settings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CannedAcl": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_HlsSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AudioOnlyHlsSettings": &Reference{
	ref: "AWS::MediaLive::Channel_AudioOnlyHlsSettings",
},
			"Fmp4HlsSettings": &Reference{
	ref: "AWS::MediaLive::Channel_Fmp4HlsSettings",
},
			"FrameCaptureHlsSettings": &Reference{
	ref: "AWS::MediaLive::Channel_FrameCaptureHlsSettings",
},
			"StandardHlsSettings": &Reference{
	ref: "AWS::MediaLive::Channel_StandardHlsSettings",
},
	},
},
	"AWS::MediaLive::Channel_HlsWebdavSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConnectionRetryInterval": &Reference{
	type_: Integer,
},
			"FilecacheDuration": &Reference{
	type_: Integer,
},
			"HttpTransferMode": &Reference{
	type_: String,
},
			"NumRetries": &Reference{
	type_: Integer,
},
			"RestartDelay": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_HtmlMotionGraphicsSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::MediaLive::Channel_InputAttachment": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AutomaticInputFailoverSettings": &Reference{
	ref: "AWS::MediaLive::Channel_AutomaticInputFailoverSettings",
},
			"InputAttachmentName": &Reference{
	type_: String,
},
			"InputId": &Reference{
	type_: String,
},
			"InputSettings": &Reference{
	ref: "AWS::MediaLive::Channel_InputSettings",
},
	},
},
	"AWS::MediaLive::Channel_InputChannelLevel": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Gain": &Reference{
	type_: Integer,
},
			"InputChannel": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_InputLocation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PasswordParam": &Reference{
	type_: String,
},
			"Uri": &Reference{
	type_: String,
},
			"Username": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_InputLossBehavior": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BlackFrameMsec": &Reference{
	type_: Integer,
},
			"InputLossImageColor": &Reference{
	type_: String,
},
			"InputLossImageSlate": &Reference{
	ref: "AWS::MediaLive::Channel_InputLocation",
},
			"InputLossImageType": &Reference{
	type_: String,
},
			"RepeatFrameMsec": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_InputLossFailoverSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InputLossThresholdMsec": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_InputSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AudioSelectors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaLive::Channel_AudioSelector",
},
},
			"CaptionSelectors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaLive::Channel_CaptionSelector",
},
},
			"DeblockFilter": &Reference{
	type_: String,
},
			"DenoiseFilter": &Reference{
	type_: String,
},
			"FilterStrength": &Reference{
	type_: Integer,
},
			"InputFilter": &Reference{
	type_: String,
},
			"NetworkInputSettings": &Reference{
	ref: "AWS::MediaLive::Channel_NetworkInputSettings",
},
			"Scte35Pid": &Reference{
	type_: Integer,
},
			"Smpte2038DataPreference": &Reference{
	type_: String,
},
			"SourceEndBehavior": &Reference{
	type_: String,
},
			"VideoSelector": &Reference{
	ref: "AWS::MediaLive::Channel_VideoSelector",
},
	},
},
	"AWS::MediaLive::Channel_InputSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Codec": &Reference{
	type_: String,
},
			"MaximumBitrate": &Reference{
	type_: String,
},
			"Resolution": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_KeyProviderSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"StaticKeySettings": &Reference{
	ref: "AWS::MediaLive::Channel_StaticKeySettings",
},
	},
},
	"AWS::MediaLive::Channel_M2tsSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AbsentInputAudioBehavior": &Reference{
	type_: String,
},
			"Arib": &Reference{
	type_: String,
},
			"AribCaptionsPid": &Reference{
	type_: String,
},
			"AribCaptionsPidControl": &Reference{
	type_: String,
},
			"AudioBufferModel": &Reference{
	type_: String,
},
			"AudioFramesPerPes": &Reference{
	type_: Integer,
},
			"AudioPids": &Reference{
	type_: String,
},
			"AudioStreamType": &Reference{
	type_: String,
},
			"Bitrate": &Reference{
	type_: Integer,
},
			"BufferModel": &Reference{
	type_: String,
},
			"CcDescriptor": &Reference{
	type_: String,
},
			"DvbNitSettings": &Reference{
	ref: "AWS::MediaLive::Channel_DvbNitSettings",
},
			"DvbSdtSettings": &Reference{
	ref: "AWS::MediaLive::Channel_DvbSdtSettings",
},
			"DvbSubPids": &Reference{
	type_: String,
},
			"DvbTdtSettings": &Reference{
	ref: "AWS::MediaLive::Channel_DvbTdtSettings",
},
			"DvbTeletextPid": &Reference{
	type_: String,
},
			"Ebif": &Reference{
	type_: String,
},
			"EbpAudioInterval": &Reference{
	type_: String,
},
			"EbpLookaheadMs": &Reference{
	type_: Integer,
},
			"EbpPlacement": &Reference{
	type_: String,
},
			"EcmPid": &Reference{
	type_: String,
},
			"EsRateInPes": &Reference{
	type_: String,
},
			"EtvPlatformPid": &Reference{
	type_: String,
},
			"EtvSignalPid": &Reference{
	type_: String,
},
			"FragmentTime": &Reference{
	type_: Number,
},
			"Klv": &Reference{
	type_: String,
},
			"KlvDataPids": &Reference{
	type_: String,
},
			"NielsenId3Behavior": &Reference{
	type_: String,
},
			"NullPacketBitrate": &Reference{
	type_: Number,
},
			"PatInterval": &Reference{
	type_: Integer,
},
			"PcrControl": &Reference{
	type_: String,
},
			"PcrPeriod": &Reference{
	type_: Integer,
},
			"PcrPid": &Reference{
	type_: String,
},
			"PmtInterval": &Reference{
	type_: Integer,
},
			"PmtPid": &Reference{
	type_: String,
},
			"ProgramNum": &Reference{
	type_: Integer,
},
			"RateMode": &Reference{
	type_: String,
},
			"Scte27Pids": &Reference{
	type_: String,
},
			"Scte35Control": &Reference{
	type_: String,
},
			"Scte35Pid": &Reference{
	type_: String,
},
			"SegmentationMarkers": &Reference{
	type_: String,
},
			"SegmentationStyle": &Reference{
	type_: String,
},
			"SegmentationTime": &Reference{
	type_: Number,
},
			"TimedMetadataBehavior": &Reference{
	type_: String,
},
			"TimedMetadataPid": &Reference{
	type_: String,
},
			"TransportStreamId": &Reference{
	type_: Integer,
},
			"VideoPid": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_M3u8Settings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AudioFramesPerPes": &Reference{
	type_: Integer,
},
			"AudioPids": &Reference{
	type_: String,
},
			"EcmPid": &Reference{
	type_: String,
},
			"NielsenId3Behavior": &Reference{
	type_: String,
},
			"PatInterval": &Reference{
	type_: Integer,
},
			"PcrControl": &Reference{
	type_: String,
},
			"PcrPeriod": &Reference{
	type_: Integer,
},
			"PcrPid": &Reference{
	type_: String,
},
			"PmtInterval": &Reference{
	type_: Integer,
},
			"PmtPid": &Reference{
	type_: String,
},
			"ProgramNum": &Reference{
	type_: Integer,
},
			"Scte35Behavior": &Reference{
	type_: String,
},
			"Scte35Pid": &Reference{
	type_: String,
},
			"TimedMetadataBehavior": &Reference{
	type_: String,
},
			"TimedMetadataPid": &Reference{
	type_: String,
},
			"TransportStreamId": &Reference{
	type_: Integer,
},
			"VideoPid": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_MediaPackageGroupSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Destination": &Reference{
	ref: "AWS::MediaLive::Channel_OutputLocationRef",
},
	},
},
	"AWS::MediaLive::Channel_MediaPackageOutputDestinationSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ChannelId": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_MediaPackageOutputSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::MediaLive::Channel_MotionGraphicsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MotionGraphicsInsertion": &Reference{
	type_: String,
},
			"MotionGraphicsSettings": &Reference{
	ref: "AWS::MediaLive::Channel_MotionGraphicsSettings",
},
	},
},
	"AWS::MediaLive::Channel_MotionGraphicsSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HtmlMotionGraphicsSettings": &Reference{
	ref: "AWS::MediaLive::Channel_HtmlMotionGraphicsSettings",
},
	},
},
	"AWS::MediaLive::Channel_Mp2Settings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bitrate": &Reference{
	type_: Number,
},
			"CodingMode": &Reference{
	type_: String,
},
			"SampleRate": &Reference{
	type_: Number,
},
	},
},
	"AWS::MediaLive::Channel_Mpeg2FilterSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TemporalFilterSettings": &Reference{
	ref: "AWS::MediaLive::Channel_TemporalFilterSettings",
},
	},
},
	"AWS::MediaLive::Channel_Mpeg2Settings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdaptiveQuantization": &Reference{
	type_: String,
},
			"AfdSignaling": &Reference{
	type_: String,
},
			"ColorMetadata": &Reference{
	type_: String,
},
			"ColorSpace": &Reference{
	type_: String,
},
			"DisplayAspectRatio": &Reference{
	type_: String,
},
			"FilterSettings": &Reference{
	ref: "AWS::MediaLive::Channel_Mpeg2FilterSettings",
},
			"FixedAfd": &Reference{
	type_: String,
},
			"FramerateDenominator": &Reference{
	type_: Integer,
},
			"FramerateNumerator": &Reference{
	type_: Integer,
},
			"GopClosedCadence": &Reference{
	type_: Integer,
},
			"GopNumBFrames": &Reference{
	type_: Integer,
},
			"GopSize": &Reference{
	type_: Number,
},
			"GopSizeUnits": &Reference{
	type_: String,
},
			"ScanType": &Reference{
	type_: String,
},
			"SubgopLength": &Reference{
	type_: String,
},
			"TimecodeInsertion": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_MsSmoothGroupSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AcquisitionPointId": &Reference{
	type_: String,
},
			"AudioOnlyTimecodeControl": &Reference{
	type_: String,
},
			"CertificateMode": &Reference{
	type_: String,
},
			"ConnectionRetryInterval": &Reference{
	type_: Integer,
},
			"Destination": &Reference{
	ref: "AWS::MediaLive::Channel_OutputLocationRef",
},
			"EventId": &Reference{
	type_: String,
},
			"EventIdMode": &Reference{
	type_: String,
},
			"EventStopBehavior": &Reference{
	type_: String,
},
			"FilecacheDuration": &Reference{
	type_: Integer,
},
			"FragmentLength": &Reference{
	type_: Integer,
},
			"InputLossAction": &Reference{
	type_: String,
},
			"NumRetries": &Reference{
	type_: Integer,
},
			"RestartDelay": &Reference{
	type_: Integer,
},
			"SegmentationMode": &Reference{
	type_: String,
},
			"SendDelayMs": &Reference{
	type_: Integer,
},
			"SparseTrackType": &Reference{
	type_: String,
},
			"StreamManifestBehavior": &Reference{
	type_: String,
},
			"TimestampOffset": &Reference{
	type_: String,
},
			"TimestampOffsetMode": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_MsSmoothOutputSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"H265PackagingType": &Reference{
	type_: String,
},
			"NameModifier": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_MultiplexGroupSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::MediaLive::Channel_MultiplexOutputSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Destination": &Reference{
	ref: "AWS::MediaLive::Channel_OutputLocationRef",
},
	},
},
	"AWS::MediaLive::Channel_MultiplexProgramChannelDestinationSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MultiplexId": &Reference{
	type_: String,
},
			"ProgramName": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_NetworkInputSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HlsInputSettings": &Reference{
	ref: "AWS::MediaLive::Channel_HlsInputSettings",
},
			"ServerValidation": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_NielsenCBET": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CbetCheckDigitString": &Reference{
	type_: String,
},
			"CbetStepaside": &Reference{
	type_: String,
},
			"Csid": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_NielsenConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DistributorId": &Reference{
	type_: String,
},
			"NielsenPcmToId3Tagging": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_NielsenNaesIiNw": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CheckDigitString": &Reference{
	type_: String,
},
			"Sid": &Reference{
	type_: Number,
},
	},
},
	"AWS::MediaLive::Channel_NielsenWatermarksSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NielsenCbetSettings": &Reference{
	ref: "AWS::MediaLive::Channel_NielsenCBET",
},
			"NielsenDistributionType": &Reference{
	type_: String,
},
			"NielsenNaesIiNwSettings": &Reference{
	ref: "AWS::MediaLive::Channel_NielsenNaesIiNw",
},
	},
},
	"AWS::MediaLive::Channel_Output": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AudioDescriptionNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"CaptionDescriptionNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"OutputName": &Reference{
	type_: String,
},
			"OutputSettings": &Reference{
	ref: "AWS::MediaLive::Channel_OutputSettings",
},
			"VideoDescriptionName": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_OutputDestination": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Id": &Reference{
	type_: String,
},
			"MediaPackageSettings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaLive::Channel_MediaPackageOutputDestinationSettings",
},
},
			"MultiplexSettings": &Reference{
	ref: "AWS::MediaLive::Channel_MultiplexProgramChannelDestinationSettings",
},
			"Settings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaLive::Channel_OutputDestinationSettings",
},
},
	},
},
	"AWS::MediaLive::Channel_OutputDestinationSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PasswordParam": &Reference{
	type_: String,
},
			"StreamName": &Reference{
	type_: String,
},
			"Url": &Reference{
	type_: String,
},
			"Username": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_OutputGroup": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"OutputGroupSettings": &Reference{
	ref: "AWS::MediaLive::Channel_OutputGroupSettings",
},
			"Outputs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaLive::Channel_Output",
},
},
	},
},
	"AWS::MediaLive::Channel_OutputGroupSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ArchiveGroupSettings": &Reference{
	ref: "AWS::MediaLive::Channel_ArchiveGroupSettings",
},
			"FrameCaptureGroupSettings": &Reference{
	ref: "AWS::MediaLive::Channel_FrameCaptureGroupSettings",
},
			"HlsGroupSettings": &Reference{
	ref: "AWS::MediaLive::Channel_HlsGroupSettings",
},
			"MediaPackageGroupSettings": &Reference{
	ref: "AWS::MediaLive::Channel_MediaPackageGroupSettings",
},
			"MsSmoothGroupSettings": &Reference{
	ref: "AWS::MediaLive::Channel_MsSmoothGroupSettings",
},
			"MultiplexGroupSettings": &Reference{
	ref: "AWS::MediaLive::Channel_MultiplexGroupSettings",
},
			"RtmpGroupSettings": &Reference{
	ref: "AWS::MediaLive::Channel_RtmpGroupSettings",
},
			"UdpGroupSettings": &Reference{
	ref: "AWS::MediaLive::Channel_UdpGroupSettings",
},
	},
},
	"AWS::MediaLive::Channel_OutputLocationRef": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationRefId": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_OutputSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ArchiveOutputSettings": &Reference{
	ref: "AWS::MediaLive::Channel_ArchiveOutputSettings",
},
			"FrameCaptureOutputSettings": &Reference{
	ref: "AWS::MediaLive::Channel_FrameCaptureOutputSettings",
},
			"HlsOutputSettings": &Reference{
	ref: "AWS::MediaLive::Channel_HlsOutputSettings",
},
			"MediaPackageOutputSettings": &Reference{
	ref: "AWS::MediaLive::Channel_MediaPackageOutputSettings",
},
			"MsSmoothOutputSettings": &Reference{
	ref: "AWS::MediaLive::Channel_MsSmoothOutputSettings",
},
			"MultiplexOutputSettings": &Reference{
	ref: "AWS::MediaLive::Channel_MultiplexOutputSettings",
},
			"RtmpOutputSettings": &Reference{
	ref: "AWS::MediaLive::Channel_RtmpOutputSettings",
},
			"UdpOutputSettings": &Reference{
	ref: "AWS::MediaLive::Channel_UdpOutputSettings",
},
	},
},
	"AWS::MediaLive::Channel_PassThroughSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::MediaLive::Channel_RawSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::MediaLive::Channel_Rec601Settings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::MediaLive::Channel_Rec709Settings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::MediaLive::Channel_RemixSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ChannelMappings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaLive::Channel_AudioChannelMapping",
},
},
			"ChannelsIn": &Reference{
	type_: Integer,
},
			"ChannelsOut": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_RtmpCaptionInfoDestinationSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::MediaLive::Channel_RtmpGroupSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdMarkers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"AuthenticationScheme": &Reference{
	type_: String,
},
			"CacheFullBehavior": &Reference{
	type_: String,
},
			"CacheLength": &Reference{
	type_: Integer,
},
			"CaptionData": &Reference{
	type_: String,
},
			"InputLossAction": &Reference{
	type_: String,
},
			"RestartDelay": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_RtmpOutputSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateMode": &Reference{
	type_: String,
},
			"ConnectionRetryInterval": &Reference{
	type_: Integer,
},
			"Destination": &Reference{
	ref: "AWS::MediaLive::Channel_OutputLocationRef",
},
			"NumRetries": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_Scte20PlusEmbeddedDestinationSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::MediaLive::Channel_Scte20SourceSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Convert608To708": &Reference{
	type_: String,
},
			"Source608ChannelNumber": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_Scte27DestinationSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::MediaLive::Channel_Scte27SourceSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OcrLanguage": &Reference{
	type_: String,
},
			"Pid": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_Scte35SpliceInsert": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdAvailOffset": &Reference{
	type_: Integer,
},
			"NoRegionalBlackoutFlag": &Reference{
	type_: String,
},
			"WebDeliveryAllowedFlag": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_Scte35TimeSignalApos": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdAvailOffset": &Reference{
	type_: Integer,
},
			"NoRegionalBlackoutFlag": &Reference{
	type_: String,
},
			"WebDeliveryAllowedFlag": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_SmpteTtDestinationSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::MediaLive::Channel_StandardHlsSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AudioRenditionSets": &Reference{
	type_: String,
},
			"M3u8Settings": &Reference{
	ref: "AWS::MediaLive::Channel_M3u8Settings",
},
	},
},
	"AWS::MediaLive::Channel_StaticKeySettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KeyProviderServer": &Reference{
	ref: "AWS::MediaLive::Channel_InputLocation",
},
			"StaticKeyValue": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_TeletextDestinationSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::MediaLive::Channel_TeletextSourceSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OutputRectangle": &Reference{
	ref: "AWS::MediaLive::Channel_CaptionRectangle",
},
			"PageNumber": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_TemporalFilterSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PostFilterSharpening": &Reference{
	type_: String,
},
			"Strength": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_TimecodeConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Source": &Reference{
	type_: String,
},
			"SyncThreshold": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_TtmlDestinationSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"StyleControl": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::Channel_UdpContainerSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"M2tsSettings": &Reference{
	ref: "AWS::MediaLive::Channel_M2tsSettings",
},
	},
},
	"AWS::MediaLive::Channel_UdpGroupSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InputLossAction": &Reference{
	type_: String,
},
			"TimedMetadataId3Frame": &Reference{
	type_: String,
},
			"TimedMetadataId3Period": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_UdpOutputSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BufferMsec": &Reference{
	type_: Integer,
},
			"ContainerSettings": &Reference{
	ref: "AWS::MediaLive::Channel_UdpContainerSettings",
},
			"Destination": &Reference{
	ref: "AWS::MediaLive::Channel_OutputLocationRef",
},
			"FecOutputSettings": &Reference{
	ref: "AWS::MediaLive::Channel_FecOutputSettings",
},
	},
},
	"AWS::MediaLive::Channel_VideoBlackFailoverSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BlackDetectThreshold": &Reference{
	type_: Number,
},
			"VideoBlackThresholdMsec": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_VideoCodecSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FrameCaptureSettings": &Reference{
	ref: "AWS::MediaLive::Channel_FrameCaptureSettings",
},
			"H264Settings": &Reference{
	ref: "AWS::MediaLive::Channel_H264Settings",
},
			"H265Settings": &Reference{
	ref: "AWS::MediaLive::Channel_H265Settings",
},
			"Mpeg2Settings": &Reference{
	ref: "AWS::MediaLive::Channel_Mpeg2Settings",
},
	},
},
	"AWS::MediaLive::Channel_VideoDescription": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CodecSettings": &Reference{
	ref: "AWS::MediaLive::Channel_VideoCodecSettings",
},
			"Height": &Reference{
	type_: Integer,
},
			"Name": &Reference{
	type_: String,
},
			"RespondToAfd": &Reference{
	type_: String,
},
			"ScalingBehavior": &Reference{
	type_: String,
},
			"Sharpness": &Reference{
	type_: Integer,
},
			"Width": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_VideoSelector": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ColorSpace": &Reference{
	type_: String,
},
			"ColorSpaceSettings": &Reference{
	ref: "AWS::MediaLive::Channel_VideoSelectorColorSpaceSettings",
},
			"ColorSpaceUsage": &Reference{
	type_: String,
},
			"SelectorSettings": &Reference{
	ref: "AWS::MediaLive::Channel_VideoSelectorSettings",
},
	},
},
	"AWS::MediaLive::Channel_VideoSelectorColorSpaceSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Hdr10Settings": &Reference{
	ref: "AWS::MediaLive::Channel_Hdr10Settings",
},
	},
},
	"AWS::MediaLive::Channel_VideoSelectorPid": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Pid": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_VideoSelectorProgramId": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ProgramId": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MediaLive::Channel_VideoSelectorSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"VideoSelectorPid": &Reference{
	ref: "AWS::MediaLive::Channel_VideoSelectorPid",
},
			"VideoSelectorProgramId": &Reference{
	ref: "AWS::MediaLive::Channel_VideoSelectorProgramId",
},
	},
},
	"AWS::MediaLive::Channel_VpcOutputSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PublicAddressAllocationIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::MediaLive::Channel_WavSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BitDepth": &Reference{
	type_: Number,
},
			"CodingMode": &Reference{
	type_: String,
},
			"SampleRate": &Reference{
	type_: Number,
},
	},
},
	"AWS::MediaLive::Channel_WebvttDestinationSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"StyleControl": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaLive::InputSecurityGroup_InputWhitelistRuleCidr": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Cidr": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaPackage::Asset_EgressEndpoint": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PackagingConfigurationId": &Reference{
	type_: String,
},
			"Url": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaPackage::Asset_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaPackage::Channel_HlsIngest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ingestEndpoints": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaPackage::Channel_IngestEndpoint",
},
},
	},
},
	"AWS::MediaPackage::Channel_IngestEndpoint": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Id": &Reference{
	type_: String,
},
			"Password": &Reference{
	type_: String,
},
			"Url": &Reference{
	type_: String,
},
			"Username": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaPackage::Channel_LogConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LogGroupName": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaPackage::Channel_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaPackage::OriginEndpoint_AdsOnDeliveryRestrictions": &Reference{
	type_: String,
},
	"AWS::MediaPackage::OriginEndpoint_Authorization": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CdnIdentifierSecret": &Reference{
	type_: String,
},
			"SecretsRoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaPackage::OriginEndpoint_CmafEncryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConstantInitializationVector": &Reference{
	type_: String,
},
			"KeyRotationIntervalSeconds": &Reference{
	type_: Integer,
},
			"SpekeKeyProvider": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_SpekeKeyProvider",
},
	},
},
	"AWS::MediaPackage::OriginEndpoint_CmafPackage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Encryption": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_CmafEncryption",
},
			"HlsManifests": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_HlsManifest",
},
},
			"SegmentDurationSeconds": &Reference{
	type_: Integer,
},
			"SegmentPrefix": &Reference{
	type_: String,
},
			"StreamSelection": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_StreamSelection",
},
	},
},
	"AWS::MediaPackage::OriginEndpoint_DashEncryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KeyRotationIntervalSeconds": &Reference{
	type_: Integer,
},
			"SpekeKeyProvider": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_SpekeKeyProvider",
},
	},
},
	"AWS::MediaPackage::OriginEndpoint_DashPackage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdTriggers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"AdsOnDeliveryRestrictions": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_AdsOnDeliveryRestrictions",
},
			"Encryption": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_DashEncryption",
},
			"ManifestLayout": &Reference{
	type_: String,
},
			"ManifestWindowSeconds": &Reference{
	type_: Integer,
},
			"MinBufferTimeSeconds": &Reference{
	type_: Integer,
},
			"MinUpdatePeriodSeconds": &Reference{
	type_: Integer,
},
			"PeriodTriggers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Profile": &Reference{
	type_: String,
},
			"SegmentDurationSeconds": &Reference{
	type_: Integer,
},
			"SegmentTemplateFormat": &Reference{
	type_: String,
},
			"StreamSelection": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_StreamSelection",
},
			"SuggestedPresentationDelaySeconds": &Reference{
	type_: Integer,
},
			"UtcTiming": &Reference{
	type_: String,
},
			"UtcTimingUri": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaPackage::OriginEndpoint_EncryptionContractConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PresetSpeke20Audio": &Reference{
	type_: String,
},
			"PresetSpeke20Video": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaPackage::OriginEndpoint_HlsEncryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConstantInitializationVector": &Reference{
	type_: String,
},
			"EncryptionMethod": &Reference{
	type_: String,
},
			"KeyRotationIntervalSeconds": &Reference{
	type_: Integer,
},
			"RepeatExtXKey": &Reference{
	type_: Boolean,
},
			"SpekeKeyProvider": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_SpekeKeyProvider",
},
	},
},
	"AWS::MediaPackage::OriginEndpoint_HlsManifest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdMarkers": &Reference{
	type_: String,
},
			"AdTriggers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"AdsOnDeliveryRestrictions": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_AdsOnDeliveryRestrictions",
},
			"Id": &Reference{
	type_: String,
},
			"IncludeIframeOnlyStream": &Reference{
	type_: Boolean,
},
			"ManifestName": &Reference{
	type_: String,
},
			"PlaylistType": &Reference{
	type_: String,
},
			"PlaylistWindowSeconds": &Reference{
	type_: Integer,
},
			"ProgramDateTimeIntervalSeconds": &Reference{
	type_: Integer,
},
			"Url": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaPackage::OriginEndpoint_HlsPackage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdMarkers": &Reference{
	type_: String,
},
			"AdTriggers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"AdsOnDeliveryRestrictions": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_AdsOnDeliveryRestrictions",
},
			"Encryption": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_HlsEncryption",
},
			"IncludeIframeOnlyStream": &Reference{
	type_: Boolean,
},
			"PlaylistType": &Reference{
	type_: String,
},
			"PlaylistWindowSeconds": &Reference{
	type_: Integer,
},
			"ProgramDateTimeIntervalSeconds": &Reference{
	type_: Integer,
},
			"SegmentDurationSeconds": &Reference{
	type_: Integer,
},
			"StreamSelection": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_StreamSelection",
},
			"UseAudioRenditionGroup": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::MediaPackage::OriginEndpoint_MssEncryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SpekeKeyProvider": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_SpekeKeyProvider",
},
	},
},
	"AWS::MediaPackage::OriginEndpoint_MssPackage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Encryption": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_MssEncryption",
},
			"ManifestWindowSeconds": &Reference{
	type_: Integer,
},
			"SegmentDurationSeconds": &Reference{
	type_: Integer,
},
			"StreamSelection": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_StreamSelection",
},
	},
},
	"AWS::MediaPackage::OriginEndpoint_SpekeKeyProvider": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CertificateArn": &Reference{
	type_: String,
},
			"EncryptionContractConfiguration": &Reference{
	ref: "AWS::MediaPackage::OriginEndpoint_EncryptionContractConfiguration",
},
			"ResourceId": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
			"SystemIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Url": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaPackage::OriginEndpoint_StreamSelection": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxVideoBitsPerSecond": &Reference{
	type_: Integer,
},
			"MinVideoBitsPerSecond": &Reference{
	type_: Integer,
},
			"StreamOrder": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaPackage::OriginEndpoint_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaPackage::PackagingConfiguration_CmafEncryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SpekeKeyProvider": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_SpekeKeyProvider",
},
	},
},
	"AWS::MediaPackage::PackagingConfiguration_CmafPackage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Encryption": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_CmafEncryption",
},
			"HlsManifests": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_HlsManifest",
},
},
			"IncludeEncoderConfigurationInSegments": &Reference{
	type_: Boolean,
},
			"SegmentDurationSeconds": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_SegmentDurationSeconds",
},
	},
},
	"AWS::MediaPackage::PackagingConfiguration_DashEncryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SpekeKeyProvider": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_SpekeKeyProvider",
},
	},
},
	"AWS::MediaPackage::PackagingConfiguration_DashManifest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ManifestLayout": &Reference{
	type_: String,
},
			"ManifestName": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_ManifestName",
},
			"MinBufferTimeSeconds": &Reference{
	type_: Integer,
},
			"Profile": &Reference{
	type_: String,
},
			"ScteMarkersSource": &Reference{
	type_: String,
},
			"StreamSelection": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_StreamSelection",
},
	},
},
	"AWS::MediaPackage::PackagingConfiguration_DashPackage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DashManifests": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_DashManifest",
},
},
			"Encryption": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_DashEncryption",
},
			"IncludeEncoderConfigurationInSegments": &Reference{
	type_: Boolean,
},
			"PeriodTriggers": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SegmentDurationSeconds": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_SegmentDurationSeconds",
},
			"SegmentTemplateFormat": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaPackage::PackagingConfiguration_HlsEncryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConstantInitializationVector": &Reference{
	type_: String,
},
			"EncryptionMethod": &Reference{
	type_: String,
},
			"SpekeKeyProvider": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_SpekeKeyProvider",
},
	},
},
	"AWS::MediaPackage::PackagingConfiguration_HlsManifest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdMarkers": &Reference{
	type_: String,
},
			"IncludeIframeOnlyStream": &Reference{
	type_: Boolean,
},
			"ManifestName": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_ManifestName",
},
			"ProgramDateTimeIntervalSeconds": &Reference{
	type_: Integer,
},
			"RepeatExtXKey": &Reference{
	type_: Boolean,
},
			"StreamSelection": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_StreamSelection",
},
	},
},
	"AWS::MediaPackage::PackagingConfiguration_HlsPackage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Encryption": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_HlsEncryption",
},
			"HlsManifests": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_HlsManifest",
},
},
			"SegmentDurationSeconds": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_SegmentDurationSeconds",
},
			"UseAudioRenditionGroup": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::MediaPackage::PackagingConfiguration_ManifestName": &Reference{
	type_: String,
},
	"AWS::MediaPackage::PackagingConfiguration_MssEncryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SpekeKeyProvider": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_SpekeKeyProvider",
},
	},
},
	"AWS::MediaPackage::PackagingConfiguration_MssManifest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ManifestName": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_ManifestName",
},
			"StreamSelection": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_StreamSelection",
},
	},
},
	"AWS::MediaPackage::PackagingConfiguration_MssPackage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Encryption": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_MssEncryption",
},
			"MssManifests": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_MssManifest",
},
},
			"SegmentDurationSeconds": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_SegmentDurationSeconds",
},
	},
},
	"AWS::MediaPackage::PackagingConfiguration_RoleArn": &Reference{
	type_: String,
},
	"AWS::MediaPackage::PackagingConfiguration_SegmentDurationSeconds": &Reference{
	type_: Integer,
},
	"AWS::MediaPackage::PackagingConfiguration_SpekeKeyProvider": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RoleArn": &Reference{
	ref: "AWS::MediaPackage::PackagingConfiguration_RoleArn",
},
			"SystemIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Url": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaPackage::PackagingConfiguration_StreamSelection": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxVideoBitsPerSecond": &Reference{
	type_: Integer,
},
			"MinVideoBitsPerSecond": &Reference{
	type_: Integer,
},
			"StreamOrder": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaPackage::PackagingConfiguration_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaPackage::PackagingGroup_Authorization": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CdnIdentifierSecret": &Reference{
	type_: String,
},
			"SecretsRoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaPackage::PackagingGroup_LogConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LogGroupName": &Reference{
	type_: String,
},
	},
},
	"AWS::MediaPackage::PackagingGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::MemoryDB::ACL_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::MemoryDB::Cluster_Endpoint": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Address": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Integer,
},
	},
},
	"AWS::MemoryDB::Cluster_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::MemoryDB::ParameterGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::MemoryDB::SubnetGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::MemoryDB::User_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Neptune::DBCluster_DBClusterRole": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FeatureName": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Neptune::DBCluster_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Neptune::DBClusterParameterGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Neptune::DBInstance_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Neptune::DBParameterGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Neptune::DBSubnetGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::NetworkFirewall::Firewall_EndpointId": &Reference{
	type_: String,
},
	"AWS::NetworkFirewall::Firewall_ResourceArn": &Reference{
	type_: String,
},
	"AWS::NetworkFirewall::Firewall_SubnetMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SubnetId": &Reference{
	type_: String,
},
	},
},
	"AWS::NetworkFirewall::Firewall_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::NetworkFirewall::FirewallPolicy_ActionDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PublishMetricAction": &Reference{
	ref: "AWS::NetworkFirewall::FirewallPolicy_PublishMetricAction",
},
	},
},
	"AWS::NetworkFirewall::FirewallPolicy_CustomAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ActionDefinition": &Reference{
	ref: "AWS::NetworkFirewall::FirewallPolicy_ActionDefinition",
},
			"ActionName": &Reference{
	type_: String,
},
	},
},
	"AWS::NetworkFirewall::FirewallPolicy_Dimension": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::NetworkFirewall::FirewallPolicy_FirewallPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"StatefulDefaultActions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"StatefulEngineOptions": &Reference{
	ref: "AWS::NetworkFirewall::FirewallPolicy_StatefulEngineOptions",
},
			"StatefulRuleGroupReferences": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::FirewallPolicy_StatefulRuleGroupReference",
},
},
			"StatelessCustomActions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::FirewallPolicy_CustomAction",
},
},
			"StatelessDefaultActions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"StatelessFragmentDefaultActions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"StatelessRuleGroupReferences": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::FirewallPolicy_StatelessRuleGroupReference",
},
},
	},
},
	"AWS::NetworkFirewall::FirewallPolicy_Priority": &Reference{
	type_: Integer,
},
	"AWS::NetworkFirewall::FirewallPolicy_PublishMetricAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Dimensions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::FirewallPolicy_Dimension",
},
},
	},
},
	"AWS::NetworkFirewall::FirewallPolicy_ResourceArn": &Reference{
	type_: String,
},
	"AWS::NetworkFirewall::FirewallPolicy_RuleOrder": &Reference{
	type_: String,
},
	"AWS::NetworkFirewall::FirewallPolicy_StatefulEngineOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RuleOrder": &Reference{
	ref: "AWS::NetworkFirewall::FirewallPolicy_RuleOrder",
},
	},
},
	"AWS::NetworkFirewall::FirewallPolicy_StatefulRuleGroupReference": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Priority": &Reference{
	ref: "AWS::NetworkFirewall::FirewallPolicy_Priority",
},
			"ResourceArn": &Reference{
	ref: "AWS::NetworkFirewall::FirewallPolicy_ResourceArn",
},
	},
},
	"AWS::NetworkFirewall::FirewallPolicy_StatelessRuleGroupReference": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Priority": &Reference{
	ref: "AWS::NetworkFirewall::FirewallPolicy_Priority",
},
			"ResourceArn": &Reference{
	ref: "AWS::NetworkFirewall::FirewallPolicy_ResourceArn",
},
	},
},
	"AWS::NetworkFirewall::FirewallPolicy_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::NetworkFirewall::LoggingConfiguration_LogDestinationConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LogDestination": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"LogDestinationType": &Reference{
	type_: String,
},
			"LogType": &Reference{
	type_: String,
},
	},
},
	"AWS::NetworkFirewall::LoggingConfiguration_LoggingConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LogDestinationConfigs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::LoggingConfiguration_LogDestinationConfig",
},
},
	},
},
	"AWS::NetworkFirewall::LoggingConfiguration_ResourceArn": &Reference{
	type_: String,
},
	"AWS::NetworkFirewall::RuleGroup_ActionDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PublishMetricAction": &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_PublishMetricAction",
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_Address": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AddressDefinition": &Reference{
	type_: String,
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_CustomAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ActionDefinition": &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_ActionDefinition",
},
			"ActionName": &Reference{
	type_: String,
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_Dimension": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_GeneratedRulesType": &Reference{
	type_: String,
},
	"AWS::NetworkFirewall::RuleGroup_Header": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Destination": &Reference{
	type_: String,
},
			"DestinationPort": &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_Port",
},
			"Direction": &Reference{
	type_: String,
},
			"Protocol": &Reference{
	type_: String,
},
			"Source": &Reference{
	type_: String,
},
			"SourcePort": &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_Port",
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_IPSet": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Definition": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_VariableDefinition",
},
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_MatchAttributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationPorts": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_PortRange",
},
},
			"Destinations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_Address",
},
},
			"Protocols": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_ProtocolNumber",
},
},
			"SourcePorts": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_PortRange",
},
},
			"Sources": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_Address",
},
},
			"TCPFlags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_TCPFlagField",
},
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_Port": &Reference{
	type_: String,
},
	"AWS::NetworkFirewall::RuleGroup_PortRange": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FromPort": &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_PortRangeBound",
},
			"ToPort": &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_PortRangeBound",
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_PortRangeBound": &Reference{
	type_: Integer,
},
	"AWS::NetworkFirewall::RuleGroup_PortSet": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Definition": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_VariableDefinition",
},
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_ProtocolNumber": &Reference{
	type_: Integer,
},
	"AWS::NetworkFirewall::RuleGroup_PublishMetricAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Dimensions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_Dimension",
},
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_ResourceArn": &Reference{
	type_: String,
},
	"AWS::NetworkFirewall::RuleGroup_RuleDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Actions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"MatchAttributes": &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_MatchAttributes",
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_RuleGroup": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RuleVariables": &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_RuleVariables",
},
			"RulesSource": &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_RulesSource",
},
			"StatefulRuleOptions": &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_StatefulRuleOptions",
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_RuleOption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Keyword": &Reference{
	type_: String,
},
			"Settings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_Setting",
},
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_RuleOrder": &Reference{
	type_: String,
},
	"AWS::NetworkFirewall::RuleGroup_RuleVariables": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IPSets": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"PortSets": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_RulesSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RulesSourceList": &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_RulesSourceList",
},
			"RulesString": &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_RulesString",
},
			"StatefulRules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_StatefulRule",
},
},
			"StatelessRulesAndCustomActions": &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_StatelessRulesAndCustomActions",
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_RulesSourceList": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GeneratedRulesType": &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_GeneratedRulesType",
},
			"TargetTypes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_TargetType",
},
},
			"Targets": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_RulesString": &Reference{
	type_: String,
},
	"AWS::NetworkFirewall::RuleGroup_Setting": &Reference{
	type_: String,
},
	"AWS::NetworkFirewall::RuleGroup_StatefulRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	type_: String,
},
			"Header": &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_Header",
},
			"RuleOptions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_RuleOption",
},
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_StatefulRuleOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RuleOrder": &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_RuleOrder",
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_StatelessRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Priority": &Reference{
	type_: Integer,
},
			"RuleDefinition": &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_RuleDefinition",
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_StatelessRulesAndCustomActions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomActions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_CustomAction",
},
},
			"StatelessRules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_StatelessRule",
},
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_TCPFlag": &Reference{
	type_: String,
},
	"AWS::NetworkFirewall::RuleGroup_TCPFlagField": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Flags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_TCPFlag",
},
},
			"Masks": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::NetworkFirewall::RuleGroup_TCPFlag",
},
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::NetworkFirewall::RuleGroup_TargetType": &Reference{
	type_: String,
},
	"AWS::NetworkFirewall::RuleGroup_VariableDefinition": &Reference{
	type_: String,
},
	"AWS::NetworkManager::Device_Location": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Address": &Reference{
	type_: String,
},
			"Latitude": &Reference{
	type_: String,
},
			"Longitude": &Reference{
	type_: String,
},
	},
},
	"AWS::NetworkManager::Device_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::NetworkManager::GlobalNetwork_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::NetworkManager::Link_Bandwidth": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DownloadSpeed": &Reference{
	type_: Integer,
},
			"UploadSpeed": &Reference{
	type_: Integer,
},
	},
},
	"AWS::NetworkManager::Link_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::NetworkManager::Site_Location": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Address": &Reference{
	type_: String,
},
			"Latitude": &Reference{
	type_: String,
},
			"Longitude": &Reference{
	type_: String,
},
	},
},
	"AWS::NetworkManager::Site_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::OpenSearchService::Domain_AdvancedSecurityOptionsInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
			"InternalUserDatabaseEnabled": &Reference{
	type_: Boolean,
},
			"MasterUserOptions": &Reference{
	ref: "AWS::OpenSearchService::Domain_MasterUserOptions",
},
	},
},
	"AWS::OpenSearchService::Domain_ClusterConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DedicatedMasterCount": &Reference{
	type_: Integer,
},
			"DedicatedMasterEnabled": &Reference{
	type_: Boolean,
},
			"DedicatedMasterType": &Reference{
	type_: String,
},
			"InstanceCount": &Reference{
	type_: Integer,
},
			"InstanceType": &Reference{
	type_: String,
},
			"WarmCount": &Reference{
	type_: Integer,
},
			"WarmEnabled": &Reference{
	type_: Boolean,
},
			"WarmType": &Reference{
	type_: String,
},
			"ZoneAwarenessConfig": &Reference{
	ref: "AWS::OpenSearchService::Domain_ZoneAwarenessConfig",
},
			"ZoneAwarenessEnabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::OpenSearchService::Domain_CognitoOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
			"IdentityPoolId": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
			"UserPoolId": &Reference{
	type_: String,
},
	},
},
	"AWS::OpenSearchService::Domain_DomainEndpointOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomEndpoint": &Reference{
	type_: String,
},
			"CustomEndpointCertificateArn": &Reference{
	type_: String,
},
			"CustomEndpointEnabled": &Reference{
	type_: Boolean,
},
			"EnforceHTTPS": &Reference{
	type_: Boolean,
},
			"TLSSecurityPolicy": &Reference{
	type_: String,
},
	},
},
	"AWS::OpenSearchService::Domain_EBSOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EBSEnabled": &Reference{
	type_: Boolean,
},
			"Iops": &Reference{
	type_: Integer,
},
			"VolumeSize": &Reference{
	type_: Integer,
},
			"VolumeType": &Reference{
	type_: String,
},
	},
},
	"AWS::OpenSearchService::Domain_EncryptionAtRestOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
			"KmsKeyId": &Reference{
	type_: String,
},
	},
},
	"AWS::OpenSearchService::Domain_LogPublishingOption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchLogsLogGroupArn": &Reference{
	type_: String,
},
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::OpenSearchService::Domain_MasterUserOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MasterUserARN": &Reference{
	type_: String,
},
			"MasterUserName": &Reference{
	type_: String,
},
			"MasterUserPassword": &Reference{
	type_: String,
},
	},
},
	"AWS::OpenSearchService::Domain_NodeToNodeEncryptionOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::OpenSearchService::Domain_ServiceSoftwareOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AutomatedUpdateDate": &Reference{
	type_: String,
},
			"Cancellable": &Reference{
	type_: Boolean,
},
			"CurrentVersion": &Reference{
	type_: String,
},
			"Description": &Reference{
	type_: String,
},
			"NewVersion": &Reference{
	type_: String,
},
			"OptionalDeployment": &Reference{
	type_: Boolean,
},
			"UpdateAvailable": &Reference{
	type_: Boolean,
},
			"UpdateStatus": &Reference{
	type_: String,
},
	},
},
	"AWS::OpenSearchService::Domain_SnapshotOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AutomatedSnapshotStartHour": &Reference{
	type_: Integer,
},
	},
},
	"AWS::OpenSearchService::Domain_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::OpenSearchService::Domain_VPCOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::OpenSearchService::Domain_ZoneAwarenessConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AvailabilityZoneCount": &Reference{
	type_: Integer,
},
	},
},
	"AWS::OpsWorks::App_DataSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"DatabaseName": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::OpsWorks::App_EnvironmentVariable": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Secure": &Reference{
	type_: Boolean,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::OpsWorks::App_Source": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Password": &Reference{
	type_: String,
},
			"Revision": &Reference{
	type_: String,
},
			"SshKey": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
			"Url": &Reference{
	type_: String,
},
			"Username": &Reference{
	type_: String,
},
	},
},
	"AWS::OpsWorks::App_SslConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Certificate": &Reference{
	type_: String,
},
			"Chain": &Reference{
	type_: String,
},
			"PrivateKey": &Reference{
	type_: String,
},
	},
},
	"AWS::OpsWorks::Instance_BlockDeviceMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeviceName": &Reference{
	type_: String,
},
			"Ebs": &Reference{
	ref: "AWS::OpsWorks::Instance_EbsBlockDevice",
},
			"NoDevice": &Reference{
	type_: String,
},
			"VirtualName": &Reference{
	type_: String,
},
	},
},
	"AWS::OpsWorks::Instance_EbsBlockDevice": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeleteOnTermination": &Reference{
	type_: Boolean,
},
			"Iops": &Reference{
	type_: Integer,
},
			"SnapshotId": &Reference{
	type_: String,
},
			"VolumeSize": &Reference{
	type_: Integer,
},
			"VolumeType": &Reference{
	type_: String,
},
	},
},
	"AWS::OpsWorks::Instance_TimeBasedAutoScaling": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Friday": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Monday": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Saturday": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Sunday": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Thursday": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Tuesday": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Wednesday": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::OpsWorks::Layer_AutoScalingThresholds": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CpuThreshold": &Reference{
	type_: Number,
},
			"IgnoreMetricsTime": &Reference{
	type_: Integer,
},
			"InstanceCount": &Reference{
	type_: Integer,
},
			"LoadThreshold": &Reference{
	type_: Number,
},
			"MemoryThreshold": &Reference{
	type_: Number,
},
			"ThresholdsWaitTime": &Reference{
	type_: Integer,
},
	},
},
	"AWS::OpsWorks::Layer_LifecycleEventConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ShutdownEventConfiguration": &Reference{
	ref: "AWS::OpsWorks::Layer_ShutdownEventConfiguration",
},
	},
},
	"AWS::OpsWorks::Layer_LoadBasedAutoScaling": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DownScaling": &Reference{
	ref: "AWS::OpsWorks::Layer_AutoScalingThresholds",
},
			"Enable": &Reference{
	type_: Boolean,
},
			"UpScaling": &Reference{
	ref: "AWS::OpsWorks::Layer_AutoScalingThresholds",
},
	},
},
	"AWS::OpsWorks::Layer_Recipes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Configure": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Deploy": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Setup": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Shutdown": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Undeploy": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::OpsWorks::Layer_ShutdownEventConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DelayUntilElbConnectionsDrained": &Reference{
	type_: Boolean,
},
			"ExecutionTimeout": &Reference{
	type_: Integer,
},
	},
},
	"AWS::OpsWorks::Layer_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::OpsWorks::Layer_VolumeConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Encrypted": &Reference{
	type_: Boolean,
},
			"Iops": &Reference{
	type_: Integer,
},
			"MountPoint": &Reference{
	type_: String,
},
			"NumberOfDisks": &Reference{
	type_: Integer,
},
			"RaidLevel": &Reference{
	type_: Integer,
},
			"Size": &Reference{
	type_: Integer,
},
			"VolumeType": &Reference{
	type_: String,
},
	},
},
	"AWS::OpsWorks::Stack_ChefConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BerkshelfVersion": &Reference{
	type_: String,
},
			"ManageBerkshelf": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::OpsWorks::Stack_ElasticIp": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Ip": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::OpsWorks::Stack_RdsDbInstance": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DbPassword": &Reference{
	type_: String,
},
			"DbUser": &Reference{
	type_: String,
},
			"RdsDbInstanceArn": &Reference{
	type_: String,
},
	},
},
	"AWS::OpsWorks::Stack_Source": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Password": &Reference{
	type_: String,
},
			"Revision": &Reference{
	type_: String,
},
			"SshKey": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
			"Url": &Reference{
	type_: String,
},
			"Username": &Reference{
	type_: String,
},
	},
},
	"AWS::OpsWorks::Stack_StackConfigurationManager": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::OpsWorks::Stack_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::OpsWorksCM::Server_EngineAttribute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::OpsWorksCM::Server_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Personalize::Dataset_DatasetImportJob": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataLocation": &Reference{
	type_: String,
},
	},
},
			"DatasetArn": &Reference{
	type_: String,
},
			"DatasetImportJobArn": &Reference{
	type_: String,
},
			"JobName": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Personalize::Solution_CategoricalHyperParameterRange": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::Personalize::Solution_ContinuousHyperParameterRange": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxValue": &Reference{
	type_: Number,
},
			"MinValue": &Reference{
	type_: Number,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::Personalize::Solution_IntegerHyperParameterRange": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxValue": &Reference{
	type_: Integer,
},
			"MinValue": &Reference{
	type_: Integer,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::Personalize::Solution_SolutionArn": &Reference{
	type_: String,
},
	"AWS::Personalize::Solution_SolutionConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AlgorithmHyperParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"AutoMLConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MetricName": &Reference{
	type_: String,
},
			"RecipeList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
			"EventValueThreshold": &Reference{
	type_: String,
},
			"FeatureTransformationParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"HpoConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AlgorithmHyperParameterRanges": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CategoricalHyperParameterRanges": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Personalize::Solution_CategoricalHyperParameterRange",
},
},
			"ContinuousHyperParameterRanges": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Personalize::Solution_ContinuousHyperParameterRange",
},
},
			"IntegerHyperParameterRanges": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Personalize::Solution_IntegerHyperParameterRange",
},
},
	},
},
			"HpoObjective": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MetricName": &Reference{
	type_: String,
},
			"MetricRegex": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
			"HpoResourceConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxNumberOfTrainingJobs": &Reference{
	type_: String,
},
			"MaxParallelTrainingJobs": &Reference{
	type_: String,
},
	},
},
	},
},
	},
},
	"AWS::QLDB::Ledger_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::QLDB::Stream_Arn": &Reference{
	type_: String,
},
	"AWS::QLDB::Stream_KinesisConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AggregationEnabled": &Reference{
	type_: Boolean,
},
			"StreamArn": &Reference{
	ref: "AWS::QLDB::Stream_Arn",
},
	},
},
	"AWS::QLDB::Stream_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Analysis_AnalysisError": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Message": &Reference{
	type_: String,
},
			"Type": &Reference{
	ref: "AWS::QuickSight::Analysis_AnalysisErrorType",
},
	},
},
	"AWS::QuickSight::Analysis_AnalysisErrorType": &Reference{
	type_: String,
},
	"AWS::QuickSight::Analysis_AnalysisSourceEntity": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SourceTemplate": &Reference{
	ref: "AWS::QuickSight::Analysis_AnalysisSourceTemplate",
},
	},
},
	"AWS::QuickSight::Analysis_AnalysisSourceTemplate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"DataSetReferences": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Analysis_DataSetReference",
},
},
	},
},
	"AWS::QuickSight::Analysis_DataSetReference": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataSetArn": &Reference{
	type_: String,
},
			"DataSetPlaceholder": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Analysis_DateTimeParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::QuickSight::Analysis_DecimalParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: Number,
},
},
	},
},
	"AWS::QuickSight::Analysis_IntegerParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: Number,
},
},
	},
},
	"AWS::QuickSight::Analysis_Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DateTimeParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Analysis_DateTimeParameter",
},
},
			"DecimalParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Analysis_DecimalParameter",
},
},
			"IntegerParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Analysis_IntegerParameter",
},
},
			"StringParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Analysis_StringParameter",
},
},
	},
},
	"AWS::QuickSight::Analysis_ResourcePermission": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Actions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Principal": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Analysis_ResourceStatus": &Reference{
	type_: String,
},
	"AWS::QuickSight::Analysis_Sheet": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"SheetId": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Analysis_StringParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::QuickSight::Analysis_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Dashboard_AdHocFilteringOption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AvailabilityStatus": &Reference{
	ref: "AWS::QuickSight::Dashboard_DashboardBehavior",
},
	},
},
	"AWS::QuickSight::Dashboard_DashboardBehavior": &Reference{
	type_: String,
},
	"AWS::QuickSight::Dashboard_DashboardError": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Message": &Reference{
	type_: String,
},
			"Type": &Reference{
	ref: "AWS::QuickSight::Dashboard_DashboardErrorType",
},
	},
},
	"AWS::QuickSight::Dashboard_DashboardErrorType": &Reference{
	type_: String,
},
	"AWS::QuickSight::Dashboard_DashboardPublishOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdHocFilteringOption": &Reference{
	ref: "AWS::QuickSight::Dashboard_AdHocFilteringOption",
},
			"ExportToCSVOption": &Reference{
	ref: "AWS::QuickSight::Dashboard_ExportToCSVOption",
},
			"SheetControlsOption": &Reference{
	ref: "AWS::QuickSight::Dashboard_SheetControlsOption",
},
	},
},
	"AWS::QuickSight::Dashboard_DashboardSourceEntity": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SourceTemplate": &Reference{
	ref: "AWS::QuickSight::Dashboard_DashboardSourceTemplate",
},
	},
},
	"AWS::QuickSight::Dashboard_DashboardSourceTemplate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"DataSetReferences": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Dashboard_DataSetReference",
},
},
	},
},
	"AWS::QuickSight::Dashboard_DashboardUIState": &Reference{
	type_: String,
},
	"AWS::QuickSight::Dashboard_DashboardVersion": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"CreatedTime": &Reference{
	type_: String,
},
			"DataSetArns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Description": &Reference{
	type_: String,
},
			"Errors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Dashboard_DashboardError",
},
},
			"Sheets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Dashboard_Sheet",
},
},
			"SourceEntityArn": &Reference{
	type_: String,
},
			"Status": &Reference{
	ref: "AWS::QuickSight::Dashboard_ResourceStatus",
},
			"ThemeArn": &Reference{
	type_: String,
},
			"VersionNumber": &Reference{
	type_: Number,
},
	},
},
	"AWS::QuickSight::Dashboard_DataSetReference": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataSetArn": &Reference{
	type_: String,
},
			"DataSetPlaceholder": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Dashboard_DateTimeParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::QuickSight::Dashboard_DecimalParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: Number,
},
},
	},
},
	"AWS::QuickSight::Dashboard_ExportToCSVOption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AvailabilityStatus": &Reference{
	ref: "AWS::QuickSight::Dashboard_DashboardBehavior",
},
	},
},
	"AWS::QuickSight::Dashboard_IntegerParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: Number,
},
},
	},
},
	"AWS::QuickSight::Dashboard_Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DateTimeParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Dashboard_DateTimeParameter",
},
},
			"DecimalParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Dashboard_DecimalParameter",
},
},
			"IntegerParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Dashboard_IntegerParameter",
},
},
			"StringParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Dashboard_StringParameter",
},
},
	},
},
	"AWS::QuickSight::Dashboard_ResourcePermission": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Actions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Principal": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Dashboard_ResourceStatus": &Reference{
	type_: String,
},
	"AWS::QuickSight::Dashboard_Sheet": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"SheetId": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Dashboard_SheetControlsOption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"VisibilityState": &Reference{
	ref: "AWS::QuickSight::Dashboard_DashboardUIState",
},
	},
},
	"AWS::QuickSight::Dashboard_StringParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::QuickSight::Dashboard_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSet_CalculatedColumn": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ColumnId": &Reference{
	type_: String,
},
			"ColumnName": &Reference{
	type_: String,
},
			"Expression": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSet_CastColumnTypeOperation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ColumnName": &Reference{
	type_: String,
},
			"Format": &Reference{
	type_: String,
},
			"NewColumnType": &Reference{
	ref: "AWS::QuickSight::DataSet_ColumnDataType",
},
	},
},
	"AWS::QuickSight::DataSet_ColumnDataType": &Reference{
	type_: String,
},
	"AWS::QuickSight::DataSet_ColumnDescription": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Text": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSet_ColumnGroup": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"GeoSpatialColumnGroup": &Reference{
	ref: "AWS::QuickSight::DataSet_GeoSpatialColumnGroup",
},
	},
},
	"AWS::QuickSight::DataSet_ColumnLevelPermissionRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ColumnNames": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Principals": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::QuickSight::DataSet_ColumnTag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ColumnDescription": &Reference{
	ref: "AWS::QuickSight::DataSet_ColumnDescription",
},
			"ColumnGeographicRole": &Reference{
	ref: "AWS::QuickSight::DataSet_GeoSpatialDataRole",
},
	},
},
	"AWS::QuickSight::DataSet_CreateColumnsOperation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Columns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::DataSet_CalculatedColumn",
},
},
	},
},
	"AWS::QuickSight::DataSet_CustomSql": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Columns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::DataSet_InputColumn",
},
},
			"DataSourceArn": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"SqlQuery": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSet_DataSetImportMode": &Reference{
	type_: String,
},
	"AWS::QuickSight::DataSet_DataSetUsageConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DisableUseAsDirectQuerySource": &Reference{
	type_: Boolean,
},
			"DisableUseAsImportedSource": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::QuickSight::DataSet_FieldFolder": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Columns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Description": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSet_FieldFolderMap": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::QuickSight::DataSet_FileFormat": &Reference{
	type_: String,
},
	"AWS::QuickSight::DataSet_FilterOperation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConditionExpression": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSet_GeoSpatialColumnGroup": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Columns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"CountryCode": &Reference{
	ref: "AWS::QuickSight::DataSet_GeoSpatialCountryCode",
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSet_GeoSpatialCountryCode": &Reference{
	type_: String,
},
	"AWS::QuickSight::DataSet_GeoSpatialDataRole": &Reference{
	type_: String,
},
	"AWS::QuickSight::DataSet_IngestionWaitPolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IngestionWaitTimeInHours": &Reference{
	type_: Number,
},
			"WaitForSpiceIngestion": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::QuickSight::DataSet_InputColumn": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Type": &Reference{
	ref: "AWS::QuickSight::DataSet_InputColumnDataType",
},
	},
},
	"AWS::QuickSight::DataSet_InputColumnDataType": &Reference{
	type_: String,
},
	"AWS::QuickSight::DataSet_JoinInstruction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LeftJoinKeyProperties": &Reference{
	ref: "AWS::QuickSight::DataSet_JoinKeyProperties",
},
			"LeftOperand": &Reference{
	type_: String,
},
			"OnClause": &Reference{
	type_: String,
},
			"RightJoinKeyProperties": &Reference{
	ref: "AWS::QuickSight::DataSet_JoinKeyProperties",
},
			"RightOperand": &Reference{
	type_: String,
},
			"Type": &Reference{
	ref: "AWS::QuickSight::DataSet_JoinType",
},
	},
},
	"AWS::QuickSight::DataSet_JoinKeyProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"UniqueKey": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::QuickSight::DataSet_JoinType": &Reference{
	type_: String,
},
	"AWS::QuickSight::DataSet_LogicalTable": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Alias": &Reference{
	type_: String,
},
			"DataTransforms": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::DataSet_TransformOperation",
},
},
			"Source": &Reference{
	ref: "AWS::QuickSight::DataSet_LogicalTableSource",
},
	},
},
	"AWS::QuickSight::DataSet_LogicalTableMap": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::QuickSight::DataSet_LogicalTableSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataSetArn": &Reference{
	type_: String,
},
			"JoinInstruction": &Reference{
	ref: "AWS::QuickSight::DataSet_JoinInstruction",
},
			"PhysicalTableId": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSet_OutputColumn": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Description": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Type": &Reference{
	ref: "AWS::QuickSight::DataSet_ColumnDataType",
},
	},
},
	"AWS::QuickSight::DataSet_PhysicalTable": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomSql": &Reference{
	ref: "AWS::QuickSight::DataSet_CustomSql",
},
			"RelationalTable": &Reference{
	ref: "AWS::QuickSight::DataSet_RelationalTable",
},
			"S3Source": &Reference{
	ref: "AWS::QuickSight::DataSet_S3Source",
},
	},
},
	"AWS::QuickSight::DataSet_PhysicalTableMap": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::QuickSight::DataSet_ProjectOperation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ProjectedColumns": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::QuickSight::DataSet_RelationalTable": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Catalog": &Reference{
	type_: String,
},
			"DataSourceArn": &Reference{
	type_: String,
},
			"InputColumns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::DataSet_InputColumn",
},
},
			"Name": &Reference{
	type_: String,
},
			"Schema": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSet_RenameColumnOperation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ColumnName": &Reference{
	type_: String,
},
			"NewColumnName": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSet_ResourcePermission": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Actions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Principal": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSet_RowLevelPermissionDataSet": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"FormatVersion": &Reference{
	ref: "AWS::QuickSight::DataSet_RowLevelPermissionFormatVersion",
},
			"Namespace": &Reference{
	type_: String,
},
			"PermissionPolicy": &Reference{
	ref: "AWS::QuickSight::DataSet_RowLevelPermissionPolicy",
},
	},
},
	"AWS::QuickSight::DataSet_RowLevelPermissionFormatVersion": &Reference{
	type_: String,
},
	"AWS::QuickSight::DataSet_RowLevelPermissionPolicy": &Reference{
	type_: String,
},
	"AWS::QuickSight::DataSet_S3Source": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataSourceArn": &Reference{
	type_: String,
},
			"InputColumns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::DataSet_InputColumn",
},
},
			"UploadSettings": &Reference{
	ref: "AWS::QuickSight::DataSet_UploadSettings",
},
	},
},
	"AWS::QuickSight::DataSet_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSet_TagColumnOperation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ColumnName": &Reference{
	type_: String,
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::DataSet_ColumnTag",
},
},
	},
},
	"AWS::QuickSight::DataSet_TextQualifier": &Reference{
	type_: String,
},
	"AWS::QuickSight::DataSet_TransformOperation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CastColumnTypeOperation": &Reference{
	ref: "AWS::QuickSight::DataSet_CastColumnTypeOperation",
},
			"CreateColumnsOperation": &Reference{
	ref: "AWS::QuickSight::DataSet_CreateColumnsOperation",
},
			"FilterOperation": &Reference{
	ref: "AWS::QuickSight::DataSet_FilterOperation",
},
			"ProjectOperation": &Reference{
	ref: "AWS::QuickSight::DataSet_ProjectOperation",
},
			"RenameColumnOperation": &Reference{
	ref: "AWS::QuickSight::DataSet_RenameColumnOperation",
},
			"TagColumnOperation": &Reference{
	ref: "AWS::QuickSight::DataSet_TagColumnOperation",
},
	},
},
	"AWS::QuickSight::DataSet_UploadSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainsHeader": &Reference{
	type_: Boolean,
},
			"Delimiter": &Reference{
	type_: String,
},
			"Format": &Reference{
	ref: "AWS::QuickSight::DataSet_FileFormat",
},
			"StartFromRow": &Reference{
	type_: Number,
},
			"TextQualifier": &Reference{
	ref: "AWS::QuickSight::DataSet_TextQualifier",
},
	},
},
	"AWS::QuickSight::DataSource_AmazonElasticsearchParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Domain": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSource_AmazonOpenSearchParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Domain": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSource_AthenaParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"WorkGroup": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSource_AuroraParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Database": &Reference{
	type_: String,
},
			"Host": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Number,
},
	},
},
	"AWS::QuickSight::DataSource_AuroraPostgreSqlParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Database": &Reference{
	type_: String,
},
			"Host": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Number,
},
	},
},
	"AWS::QuickSight::DataSource_AwsIotAnalyticsParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataSetName": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSource_CredentialPair": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AlternateDataSourceParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::DataSource_DataSourceParameters",
},
},
			"Password": &Reference{
	type_: String,
},
			"Username": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSource_DataSourceCredentials": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CopySourceArn": &Reference{
	type_: String,
},
			"CredentialPair": &Reference{
	ref: "AWS::QuickSight::DataSource_CredentialPair",
},
	},
},
	"AWS::QuickSight::DataSource_DataSourceErrorInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Message": &Reference{
	type_: String,
},
			"Type": &Reference{
	ref: "AWS::QuickSight::DataSource_DataSourceErrorInfoType",
},
	},
},
	"AWS::QuickSight::DataSource_DataSourceErrorInfoType": &Reference{
	type_: String,
},
	"AWS::QuickSight::DataSource_DataSourceParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AmazonElasticsearchParameters": &Reference{
	ref: "AWS::QuickSight::DataSource_AmazonElasticsearchParameters",
},
			"AmazonOpenSearchParameters": &Reference{
	ref: "AWS::QuickSight::DataSource_AmazonOpenSearchParameters",
},
			"AthenaParameters": &Reference{
	ref: "AWS::QuickSight::DataSource_AthenaParameters",
},
			"AuroraParameters": &Reference{
	ref: "AWS::QuickSight::DataSource_AuroraParameters",
},
			"AuroraPostgreSqlParameters": &Reference{
	ref: "AWS::QuickSight::DataSource_AuroraPostgreSqlParameters",
},
			"MariaDbParameters": &Reference{
	ref: "AWS::QuickSight::DataSource_MariaDbParameters",
},
			"MySqlParameters": &Reference{
	ref: "AWS::QuickSight::DataSource_MySqlParameters",
},
			"OracleParameters": &Reference{
	ref: "AWS::QuickSight::DataSource_OracleParameters",
},
			"PostgreSqlParameters": &Reference{
	ref: "AWS::QuickSight::DataSource_PostgreSqlParameters",
},
			"PrestoParameters": &Reference{
	ref: "AWS::QuickSight::DataSource_PrestoParameters",
},
			"RdsParameters": &Reference{
	ref: "AWS::QuickSight::DataSource_RdsParameters",
},
			"RedshiftParameters": &Reference{
	ref: "AWS::QuickSight::DataSource_RedshiftParameters",
},
			"S3Parameters": &Reference{
	ref: "AWS::QuickSight::DataSource_S3Parameters",
},
			"SnowflakeParameters": &Reference{
	ref: "AWS::QuickSight::DataSource_SnowflakeParameters",
},
			"SparkParameters": &Reference{
	ref: "AWS::QuickSight::DataSource_SparkParameters",
},
			"SqlServerParameters": &Reference{
	ref: "AWS::QuickSight::DataSource_SqlServerParameters",
},
			"TeradataParameters": &Reference{
	ref: "AWS::QuickSight::DataSource_TeradataParameters",
},
	},
},
	"AWS::QuickSight::DataSource_DataSourceType": &Reference{
	type_: String,
},
	"AWS::QuickSight::DataSource_ManifestFileLocation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"Key": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSource_MariaDbParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Database": &Reference{
	type_: String,
},
			"Host": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Number,
},
	},
},
	"AWS::QuickSight::DataSource_MySqlParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Database": &Reference{
	type_: String,
},
			"Host": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Number,
},
	},
},
	"AWS::QuickSight::DataSource_OracleParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Database": &Reference{
	type_: String,
},
			"Host": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Number,
},
	},
},
	"AWS::QuickSight::DataSource_PostgreSqlParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Database": &Reference{
	type_: String,
},
			"Host": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Number,
},
	},
},
	"AWS::QuickSight::DataSource_PrestoParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Catalog": &Reference{
	type_: String,
},
			"Host": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Number,
},
	},
},
	"AWS::QuickSight::DataSource_RdsParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Database": &Reference{
	type_: String,
},
			"InstanceId": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSource_RedshiftParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClusterId": &Reference{
	type_: String,
},
			"Database": &Reference{
	type_: String,
},
			"Host": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Number,
},
	},
},
	"AWS::QuickSight::DataSource_ResourcePermission": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Actions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Principal": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSource_ResourceStatus": &Reference{
	type_: String,
},
	"AWS::QuickSight::DataSource_S3Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ManifestFileLocation": &Reference{
	ref: "AWS::QuickSight::DataSource_ManifestFileLocation",
},
	},
},
	"AWS::QuickSight::DataSource_SnowflakeParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Database": &Reference{
	type_: String,
},
			"Host": &Reference{
	type_: String,
},
			"Warehouse": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSource_SparkParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Host": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Number,
},
	},
},
	"AWS::QuickSight::DataSource_SqlServerParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Database": &Reference{
	type_: String,
},
			"Host": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Number,
},
	},
},
	"AWS::QuickSight::DataSource_SslProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DisableSsl": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::QuickSight::DataSource_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::DataSource_TeradataParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Database": &Reference{
	type_: String,
},
			"Host": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Number,
},
	},
},
	"AWS::QuickSight::DataSource_VpcConnectionProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"VpcConnectionArn": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Template_ColumnGroupColumnSchema": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Template_ColumnGroupSchema": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ColumnGroupColumnSchemaList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Template_ColumnGroupColumnSchema",
},
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Template_ColumnSchema": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataType": &Reference{
	type_: String,
},
			"GeographicRole": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Template_DataSetConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ColumnGroupSchemaList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Template_ColumnGroupSchema",
},
},
			"DataSetSchema": &Reference{
	ref: "AWS::QuickSight::Template_DataSetSchema",
},
			"Placeholder": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Template_DataSetReference": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataSetArn": &Reference{
	type_: String,
},
			"DataSetPlaceholder": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Template_DataSetSchema": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ColumnSchemaList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Template_ColumnSchema",
},
},
	},
},
	"AWS::QuickSight::Template_ResourcePermission": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Actions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Principal": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Template_ResourceStatus": &Reference{
	type_: String,
},
	"AWS::QuickSight::Template_Sheet": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"SheetId": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Template_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Template_TemplateError": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Message": &Reference{
	type_: String,
},
			"Type": &Reference{
	ref: "AWS::QuickSight::Template_TemplateErrorType",
},
	},
},
	"AWS::QuickSight::Template_TemplateErrorType": &Reference{
	type_: String,
},
	"AWS::QuickSight::Template_TemplateSourceAnalysis": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"DataSetReferences": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Template_DataSetReference",
},
},
	},
},
	"AWS::QuickSight::Template_TemplateSourceEntity": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SourceAnalysis": &Reference{
	ref: "AWS::QuickSight::Template_TemplateSourceAnalysis",
},
			"SourceTemplate": &Reference{
	ref: "AWS::QuickSight::Template_TemplateSourceTemplate",
},
	},
},
	"AWS::QuickSight::Template_TemplateSourceTemplate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Template_TemplateVersion": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CreatedTime": &Reference{
	type_: String,
},
			"DataSetConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Template_DataSetConfiguration",
},
},
			"Description": &Reference{
	type_: String,
},
			"Errors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Template_TemplateError",
},
},
			"Sheets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Template_Sheet",
},
},
			"SourceEntityArn": &Reference{
	type_: String,
},
			"Status": &Reference{
	ref: "AWS::QuickSight::Template_ResourceStatus",
},
			"ThemeArn": &Reference{
	type_: String,
},
			"VersionNumber": &Reference{
	type_: Number,
},
	},
},
	"AWS::QuickSight::Theme_BorderStyle": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Show": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::QuickSight::Theme_DataColorPalette": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Colors": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"EmptyFillColor": &Reference{
	type_: String,
},
			"MinMaxGradient": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::QuickSight::Theme_Font": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FontFamily": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Theme_GutterStyle": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Show": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::QuickSight::Theme_MarginStyle": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Show": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::QuickSight::Theme_ResourcePermission": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Actions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Principal": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Theme_ResourceStatus": &Reference{
	type_: String,
},
	"AWS::QuickSight::Theme_SheetStyle": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Tile": &Reference{
	ref: "AWS::QuickSight::Theme_TileStyle",
},
			"TileLayout": &Reference{
	ref: "AWS::QuickSight::Theme_TileLayoutStyle",
},
	},
},
	"AWS::QuickSight::Theme_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::QuickSight::Theme_ThemeConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataColorPalette": &Reference{
	ref: "AWS::QuickSight::Theme_DataColorPalette",
},
			"Sheet": &Reference{
	ref: "AWS::QuickSight::Theme_SheetStyle",
},
			"Typography": &Reference{
	ref: "AWS::QuickSight::Theme_Typography",
},
			"UIColorPalette": &Reference{
	ref: "AWS::QuickSight::Theme_UIColorPalette",
},
	},
},
	"AWS::QuickSight::Theme_ThemeError": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Message": &Reference{
	type_: String,
},
			"Type": &Reference{
	ref: "AWS::QuickSight::Theme_ThemeErrorType",
},
	},
},
	"AWS::QuickSight::Theme_ThemeErrorType": &Reference{
	type_: String,
},
	"AWS::QuickSight::Theme_ThemeType": &Reference{
	type_: String,
},
	"AWS::QuickSight::Theme_ThemeVersion": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
			"BaseThemeId": &Reference{
	type_: String,
},
			"Configuration": &Reference{
	ref: "AWS::QuickSight::Theme_ThemeConfiguration",
},
			"CreatedTime": &Reference{
	type_: String,
},
			"Description": &Reference{
	type_: String,
},
			"Errors": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Theme_ThemeError",
},
},
			"Status": &Reference{
	ref: "AWS::QuickSight::Theme_ResourceStatus",
},
			"VersionNumber": &Reference{
	type_: Number,
},
	},
},
	"AWS::QuickSight::Theme_TileLayoutStyle": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Gutter": &Reference{
	ref: "AWS::QuickSight::Theme_GutterStyle",
},
			"Margin": &Reference{
	ref: "AWS::QuickSight::Theme_MarginStyle",
},
	},
},
	"AWS::QuickSight::Theme_TileStyle": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Border": &Reference{
	ref: "AWS::QuickSight::Theme_BorderStyle",
},
	},
},
	"AWS::QuickSight::Theme_Typography": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FontFamilies": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::QuickSight::Theme_Font",
},
},
	},
},
	"AWS::QuickSight::Theme_UIColorPalette": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Accent": &Reference{
	type_: String,
},
			"AccentForeground": &Reference{
	type_: String,
},
			"Danger": &Reference{
	type_: String,
},
			"DangerForeground": &Reference{
	type_: String,
},
			"Dimension": &Reference{
	type_: String,
},
			"DimensionForeground": &Reference{
	type_: String,
},
			"Measure": &Reference{
	type_: String,
},
			"MeasureForeground": &Reference{
	type_: String,
},
			"PrimaryBackground": &Reference{
	type_: String,
},
			"PrimaryForeground": &Reference{
	type_: String,
},
			"SecondaryBackground": &Reference{
	type_: String,
},
			"SecondaryForeground": &Reference{
	type_: String,
},
			"Success": &Reference{
	type_: String,
},
			"SuccessForeground": &Reference{
	type_: String,
},
			"Warning": &Reference{
	type_: String,
},
			"WarningForeground": &Reference{
	type_: String,
},
	},
},
	"AWS::RAM::ResourceShare_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RDS::DBCluster_DBClusterRole": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FeatureName": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::RDS::DBCluster_ScalingConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AutoPause": &Reference{
	type_: Boolean,
},
			"MaxCapacity": &Reference{
	type_: Integer,
},
			"MinCapacity": &Reference{
	type_: Integer,
},
			"SecondsUntilAutoPause": &Reference{
	type_: Integer,
},
	},
},
	"AWS::RDS::DBCluster_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RDS::DBClusterParameterGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RDS::DBInstance_DBInstanceRole": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FeatureName": &Reference{
	type_: String,
},
			"RoleArn": &Reference{
	type_: String,
},
	},
},
	"AWS::RDS::DBInstance_ProcessorFeature": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RDS::DBInstance_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RDS::DBParameterGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RDS::DBProxy_AuthFormat": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AuthScheme": &Reference{
	type_: String,
},
			"Description": &Reference{
	type_: String,
},
			"IAMAuth": &Reference{
	type_: String,
},
			"SecretArn": &Reference{
	type_: String,
},
			"UserName": &Reference{
	type_: String,
},
	},
},
	"AWS::RDS::DBProxy_TagFormat": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RDS::DBProxyEndpoint_TagFormat": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RDS::DBProxyTargetGroup_ConnectionPoolConfigurationInfoFormat": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConnectionBorrowTimeout": &Reference{
	type_: Integer,
},
			"InitQuery": &Reference{
	type_: String,
},
			"MaxConnectionsPercent": &Reference{
	type_: Integer,
},
			"MaxIdleConnectionsPercent": &Reference{
	type_: Integer,
},
			"SessionPinningFilters": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::RDS::DBSecurityGroup_Ingress": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CIDRIP": &Reference{
	type_: String,
},
			"EC2SecurityGroupId": &Reference{
	type_: String,
},
			"EC2SecurityGroupName": &Reference{
	type_: String,
},
			"EC2SecurityGroupOwnerId": &Reference{
	type_: String,
},
	},
},
	"AWS::RDS::DBSecurityGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RDS::DBSubnetGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RDS::EventSubscription_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RDS::OptionGroup_OptionConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DBSecurityGroupMemberships": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"OptionName": &Reference{
	type_: String,
},
			"OptionSettings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RDS::OptionGroup_OptionSetting",
},
},
			"OptionVersion": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: Integer,
},
			"VpcSecurityGroupMemberships": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::RDS::OptionGroup_OptionSetting": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RDS::OptionGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RUM::AppMonitor_AppMonitorConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllowCookies": &Reference{
	type_: Boolean,
},
			"EnableXRay": &Reference{
	type_: Boolean,
},
			"ExcludedPages": &Reference{
	ref: "AWS::RUM::AppMonitor_Pages",
},
			"FavoritePages": &Reference{
	ref: "AWS::RUM::AppMonitor_FavoritePages",
},
			"GuestRoleArn": &Reference{
	ref: "AWS::RUM::AppMonitor_Arn",
},
			"IdentityPoolId": &Reference{
	type_: String,
},
			"IncludedPages": &Reference{
	ref: "AWS::RUM::AppMonitor_Pages",
},
			"SessionSampleRate": &Reference{
	type_: Number,
},
			"Telemetries": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RUM::AppMonitor_Telemetry",
},
},
	},
},
	"AWS::RUM::AppMonitor_Arn": &Reference{
	type_: String,
},
	"AWS::RUM::AppMonitor_FavoritePages": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	"AWS::RUM::AppMonitor_Pages": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RUM::AppMonitor_Url",
},
},
	"AWS::RUM::AppMonitor_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RUM::AppMonitor_TagDef": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RUM::AppMonitor_Tag",
},
},
	"AWS::RUM::AppMonitor_Telemetry": &Reference{
	type_: String,
},
	"AWS::RUM::AppMonitor_Url": &Reference{
	type_: String,
},
	"AWS::Redshift::Cluster_Endpoint": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Address": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: String,
},
	},
},
	"AWS::Redshift::Cluster_LoggingProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketName": &Reference{
	type_: String,
},
			"S3KeyPrefix": &Reference{
	type_: String,
},
	},
},
	"AWS::Redshift::Cluster_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Redshift::ClusterParameterGroup_Parameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ParameterName": &Reference{
	type_: String,
},
			"ParameterValue": &Reference{
	type_: String,
},
	},
},
	"AWS::Redshift::ClusterParameterGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Redshift::ClusterSecurityGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Redshift::ClusterSubnetGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Redshift::EndpointAccess_NetworkInterface": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AvailabilityZone": &Reference{
	type_: String,
},
			"NetworkInterfaceId": &Reference{
	type_: String,
},
			"PrivateIpAddress": &Reference{
	type_: String,
},
			"SubnetId": &Reference{
	type_: String,
},
	},
},
	"AWS::Redshift::EndpointAccess_VpcSecurityGroup": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Status": &Reference{
	type_: String,
},
			"VpcSecurityGroupId": &Reference{
	type_: String,
},
	},
},
	"AWS::Redshift::EndpointAuthorization_AwsAccount": &Reference{
	type_: String,
},
	"AWS::Redshift::EndpointAuthorization_VpcId": &Reference{
	type_: String,
},
	"AWS::Redshift::EventSubscription_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Redshift::ScheduledAction_PauseClusterMessage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClusterIdentifier": &Reference{
	type_: String,
},
	},
},
	"AWS::Redshift::ScheduledAction_ResizeClusterMessage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Classic": &Reference{
	type_: Boolean,
},
			"ClusterIdentifier": &Reference{
	type_: String,
},
			"ClusterType": &Reference{
	type_: String,
},
			"NodeType": &Reference{
	type_: String,
},
			"NumberOfNodes": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Redshift::ScheduledAction_ResumeClusterMessage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClusterIdentifier": &Reference{
	type_: String,
},
	},
},
	"AWS::Redshift::ScheduledAction_ScheduledActionType": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PauseCluster": &Reference{
	ref: "AWS::Redshift::ScheduledAction_PauseClusterMessage",
},
			"ResizeCluster": &Reference{
	ref: "AWS::Redshift::ScheduledAction_ResizeClusterMessage",
},
			"ResumeCluster": &Reference{
	ref: "AWS::Redshift::ScheduledAction_ResumeClusterMessage",
},
	},
},
	"AWS::Redshift::ScheduledAction_timestamp": &Reference{
	type_: String,
},
	"AWS::RedshiftServerless::Namespace_LogExport": &Reference{
	type_: String,
},
	"AWS::RedshiftServerless::Namespace_Namespace": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AdminUsername": &Reference{
	type_: String,
},
			"CreationDate": &Reference{
	type_: String,
},
			"DbName": &Reference{
	type_: String,
},
			"DefaultIamRoleArn": &Reference{
	type_: String,
},
			"IamRoles": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"KmsKeyId": &Reference{
	type_: String,
},
			"LogExports": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RedshiftServerless::Namespace_LogExport",
},
},
			"NamespaceArn": &Reference{
	type_: String,
},
			"NamespaceId": &Reference{
	type_: String,
},
			"NamespaceName": &Reference{
	type_: String,
},
			"Status": &Reference{
	ref: "AWS::RedshiftServerless::Namespace_NamespaceStatus",
},
	},
},
	"AWS::RedshiftServerless::Namespace_NamespaceStatus": &Reference{
	type_: String,
},
	"AWS::RedshiftServerless::Namespace_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RefactorSpaces::Application_ApiGatewayEndpointType": &Reference{
	type_: String,
},
	"AWS::RefactorSpaces::Application_ApiGatewayProxyInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EndpointType": &Reference{
	ref: "AWS::RefactorSpaces::Application_ApiGatewayEndpointType",
},
			"StageName": &Reference{
	type_: String,
},
	},
},
	"AWS::RefactorSpaces::Application_ProxyType": &Reference{
	type_: String,
},
	"AWS::RefactorSpaces::Application_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RefactorSpaces::Environment_NetworkFabricType": &Reference{
	type_: String,
},
	"AWS::RefactorSpaces::Environment_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RefactorSpaces::Route_DefaultRouteInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ActivationState": &Reference{
	ref: "AWS::RefactorSpaces::Route_RouteActivationState",
},
	},
},
	"AWS::RefactorSpaces::Route_Method": &Reference{
	type_: String,
},
	"AWS::RefactorSpaces::Route_RouteActivationState": &Reference{
	type_: String,
},
	"AWS::RefactorSpaces::Route_RouteType": &Reference{
	type_: String,
},
	"AWS::RefactorSpaces::Route_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RefactorSpaces::Route_UriPathRouteInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ActivationState": &Reference{
	ref: "AWS::RefactorSpaces::Route_RouteActivationState",
},
			"IncludeChildPaths": &Reference{
	type_: Boolean,
},
			"Methods": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::RefactorSpaces::Route_Method",
},
},
			"SourcePath": &Reference{
	type_: String,
},
	},
},
	"AWS::RefactorSpaces::Service_LambdaEndpointInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
	},
},
	"AWS::RefactorSpaces::Service_ServiceEndpointType": &Reference{
	type_: String,
},
	"AWS::RefactorSpaces::Service_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RefactorSpaces::Service_UrlEndpointInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HealthUrl": &Reference{
	type_: String,
},
			"Url": &Reference{
	type_: String,
},
	},
},
	"AWS::Rekognition::Collection_Arn": &Reference{
	type_: String,
},
	"AWS::Rekognition::Collection_CollectionId": &Reference{
	type_: String,
},
	"AWS::Rekognition::Collection_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Rekognition::Project_Arn": &Reference{
	type_: String,
},
	"AWS::Rekognition::Project_ProjectName": &Reference{
	type_: String,
},
	"AWS::Rekognition::StreamProcessor_Arn": &Reference{
	type_: String,
},
	"AWS::Rekognition::StreamProcessor_BoundingBox": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Height": &Reference{
	type_: Number,
},
			"Left": &Reference{
	type_: Number,
},
			"Top": &Reference{
	type_: Number,
},
			"Width": &Reference{
	type_: Number,
},
	},
},
	"AWS::Rekognition::StreamProcessor_ConnectedHomeSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Labels": &Reference{
	ref: "AWS::Rekognition::StreamProcessor_Labels",
},
			"MinConfidence": &Reference{
	type_: Number,
},
	},
},
	"AWS::Rekognition::StreamProcessor_DataSharingPreference": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OptIn": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Rekognition::StreamProcessor_FaceSearchSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CollectionId": &Reference{
	type_: String,
},
			"FaceMatchThreshold": &Reference{
	type_: Number,
},
	},
},
	"AWS::Rekognition::StreamProcessor_KinesisDataStream": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
	},
},
	"AWS::Rekognition::StreamProcessor_KinesisVideoStream": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
	},
},
	"AWS::Rekognition::StreamProcessor_Labels": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	"AWS::Rekognition::StreamProcessor_NotificationChannel": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	type_: String,
},
	},
},
	"AWS::Rekognition::StreamProcessor_Point": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"X": &Reference{
	type_: Number,
},
			"Y": &Reference{
	type_: Number,
},
	},
},
	"AWS::Rekognition::StreamProcessor_Polygon": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Rekognition::StreamProcessor_Point",
},
},
	"AWS::Rekognition::StreamProcessor_S3Destination": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketName": &Reference{
	type_: String,
},
			"ObjectKeyPrefix": &Reference{
	type_: String,
},
	},
},
	"AWS::Rekognition::StreamProcessor_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ResilienceHub::App_PhysicalResourceId": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AwsAccountId": &Reference{
	type_: String,
},
			"AwsRegion": &Reference{
	type_: String,
},
			"Identifier": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::ResilienceHub::App_ResourceMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LogicalStackName": &Reference{
	type_: String,
},
			"MappingType": &Reference{
	type_: String,
},
			"PhysicalResourceId": &Reference{
	ref: "AWS::ResilienceHub::App_PhysicalResourceId",
},
			"ResourceName": &Reference{
	type_: String,
},
			"TerraformSourceName": &Reference{
	type_: String,
},
	},
},
	"AWS::ResilienceHub::App_TagMap": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::ResilienceHub::App_TagValue": &Reference{
	type_: String,
},
	"AWS::ResilienceHub::ResiliencyPolicy_FailurePolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RpoInSecs": &Reference{
	type_: Integer,
},
			"RtoInSecs": &Reference{
	type_: Integer,
},
	},
},
	"AWS::ResilienceHub::ResiliencyPolicy_PolicyMap": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::ResilienceHub::ResiliencyPolicy_TagMap": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::ResilienceHub::ResiliencyPolicy_TagValue": &Reference{
	type_: String,
},
	"AWS::ResourceGroups::Group_Configuration": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ResourceGroups::Group_ConfigurationItem",
},
},
	"AWS::ResourceGroups::Group_ConfigurationItem": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Parameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ResourceGroups::Group_ConfigurationParameter",
},
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::ResourceGroups::Group_ConfigurationParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::ResourceGroups::Group_Query": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ResourceTypeFilters": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"StackIdentifier": &Reference{
	type_: String,
},
			"TagFilters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ResourceGroups::Group_TagFilter",
},
},
	},
},
	"AWS::ResourceGroups::Group_ResourceQuery": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Query": &Reference{
	ref: "AWS::ResourceGroups::Group_Query",
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::ResourceGroups::Group_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ResourceGroups::Group_TagFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::RoboMaker::Fleet_Arn": &Reference{
	type_: String,
},
	"AWS::RoboMaker::Fleet_Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::RoboMaker::Robot_Arn": &Reference{
	type_: String,
},
	"AWS::RoboMaker::Robot_Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::RoboMaker::RobotApplication_Arn": &Reference{
	type_: String,
},
	"AWS::RoboMaker::RobotApplication_RobotSoftwareSuite": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::RoboMaker::RobotApplication_SourceConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Architecture": &Reference{
	type_: String,
},
			"S3Bucket": &Reference{
	type_: String,
},
			"S3Key": &Reference{
	type_: String,
},
	},
},
	"AWS::RoboMaker::RobotApplication_Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::RoboMaker::RobotApplicationVersion_Arn": &Reference{
	type_: String,
},
	"AWS::RoboMaker::SimulationApplication_Arn": &Reference{
	type_: String,
},
	"AWS::RoboMaker::SimulationApplication_RenderingEngine": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::RoboMaker::SimulationApplication_RobotSoftwareSuite": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::RoboMaker::SimulationApplication_SimulationSoftwareSuite": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::RoboMaker::SimulationApplication_SourceConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Architecture": &Reference{
	type_: String,
},
			"S3Bucket": &Reference{
	type_: String,
},
			"S3Key": &Reference{
	type_: String,
},
	},
},
	"AWS::RoboMaker::SimulationApplication_Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::RoboMaker::SimulationApplicationVersion_Arn": &Reference{
	type_: String,
},
	"AWS::RolesAnywhere::Profile_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RolesAnywhere::TrustAnchor_Source": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SourceData": &Reference{
	ref: "AWS::RolesAnywhere::TrustAnchor_SourceData",
},
			"SourceType": &Reference{
	ref: "AWS::RolesAnywhere::TrustAnchor_TrustAnchorType",
},
	},
},
	"AWS::RolesAnywhere::TrustAnchor_SourceData": &Reference{
	type_: Unknown,
},
	"AWS::RolesAnywhere::TrustAnchor_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::RolesAnywhere::TrustAnchor_TrustAnchorType": &Reference{
	type_: String,
},
	"AWS::Route53::CidrCollection_Location": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CidrList": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"LocationName": &Reference{
	type_: String,
},
	},
},
	"AWS::Route53::HealthCheck_AlarmIdentifier": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Region": &Reference{
	type_: String,
},
	},
},
	"AWS::Route53::HealthCheck_HealthCheckTag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Route53::HostedZone_HostedZoneConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Comment": &Reference{
	type_: String,
},
	},
},
	"AWS::Route53::HostedZone_HostedZoneTag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Route53::HostedZone_QueryLoggingConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchLogsLogGroupArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Route53::HostedZone_VPC": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"VPCId": &Reference{
	type_: String,
},
			"VPCRegion": &Reference{
	type_: String,
},
	},
},
	"AWS::Route53::RecordSet_AliasTarget": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DNSName": &Reference{
	type_: String,
},
			"EvaluateTargetHealth": &Reference{
	type_: Boolean,
},
			"HostedZoneId": &Reference{
	type_: String,
},
	},
},
	"AWS::Route53::RecordSet_CidrRoutingConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CollectionId": &Reference{
	type_: String,
},
			"LocationName": &Reference{
	type_: String,
},
	},
},
	"AWS::Route53::RecordSet_GeoLocation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContinentCode": &Reference{
	type_: String,
},
			"CountryCode": &Reference{
	type_: String,
},
			"SubdivisionCode": &Reference{
	type_: String,
},
	},
},
	"AWS::Route53::RecordSetGroup_AliasTarget": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DNSName": &Reference{
	type_: String,
},
			"EvaluateTargetHealth": &Reference{
	type_: Boolean,
},
			"HostedZoneId": &Reference{
	type_: String,
},
	},
},
	"AWS::Route53::RecordSetGroup_CidrRoutingConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CollectionId": &Reference{
	type_: String,
},
			"LocationName": &Reference{
	type_: String,
},
	},
},
	"AWS::Route53::RecordSetGroup_GeoLocation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContinentCode": &Reference{
	type_: String,
},
			"CountryCode": &Reference{
	type_: String,
},
			"SubdivisionCode": &Reference{
	type_: String,
},
	},
},
	"AWS::Route53::RecordSetGroup_RecordSet": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AliasTarget": &Reference{
	ref: "AWS::Route53::RecordSetGroup_AliasTarget",
},
			"CidrRoutingConfig": &Reference{
	ref: "AWS::Route53::RecordSetGroup_CidrRoutingConfig",
},
			"Failover": &Reference{
	type_: String,
},
			"GeoLocation": &Reference{
	ref: "AWS::Route53::RecordSetGroup_GeoLocation",
},
			"HealthCheckId": &Reference{
	type_: String,
},
			"HostedZoneId": &Reference{
	type_: String,
},
			"HostedZoneName": &Reference{
	type_: String,
},
			"MultiValueAnswer": &Reference{
	type_: Boolean,
},
			"Name": &Reference{
	type_: String,
},
			"Region": &Reference{
	type_: String,
},
			"ResourceRecords": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SetIdentifier": &Reference{
	type_: String,
},
			"TTL": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
			"Weight": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Route53Resolver::FirewallDomainList_Domains": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	"AWS::Route53Resolver::FirewallDomainList_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Route53Resolver::FirewallRuleGroup_FirewallRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	type_: String,
},
			"BlockOverrideDnsType": &Reference{
	type_: String,
},
			"BlockOverrideDomain": &Reference{
	type_: String,
},
			"BlockOverrideTtl": &Reference{
	type_: Integer,
},
			"BlockResponse": &Reference{
	type_: String,
},
			"FirewallDomainListId": &Reference{
	type_: String,
},
			"Priority": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Route53Resolver::FirewallRuleGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Route53Resolver::FirewallRuleGroupAssociation_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Route53Resolver::ResolverEndpoint_IpAddressRequest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Ip": &Reference{
	type_: String,
},
			"SubnetId": &Reference{
	type_: String,
},
	},
},
	"AWS::Route53Resolver::ResolverEndpoint_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Route53Resolver::ResolverRule_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Route53Resolver::ResolverRule_TargetAddress": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Ip": &Reference{
	type_: String,
},
			"Port": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::AccessPoint_Arn": &Reference{
	type_: String,
},
	"AWS::S3::AccessPoint_PublicAccessBlockConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BlockPublicAcls": &Reference{
	type_: Boolean,
},
			"BlockPublicPolicy": &Reference{
	type_: Boolean,
},
			"IgnorePublicAcls": &Reference{
	type_: Boolean,
},
			"RestrictPublicBuckets": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::S3::AccessPoint_VpcConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"VpcId": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_AbortIncompleteMultipartUpload": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DaysAfterInitiation": &Reference{
	type_: Integer,
},
	},
},
	"AWS::S3::Bucket_AccelerateConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccelerationStatus": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_AccessControlTranslation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Owner": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_AnalyticsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Id": &Reference{
	type_: String,
},
			"Prefix": &Reference{
	type_: String,
},
			"StorageClassAnalysis": &Reference{
	ref: "AWS::S3::Bucket_StorageClassAnalysis",
},
			"TagFilters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_TagFilter",
},
},
	},
},
	"AWS::S3::Bucket_Arn": &Reference{
	type_: String,
},
	"AWS::S3::Bucket_BucketEncryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ServerSideEncryptionConfiguration": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_ServerSideEncryptionRule",
},
},
	},
},
	"AWS::S3::Bucket_CorsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CorsRules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_CorsRule",
},
},
	},
},
	"AWS::S3::Bucket_CorsRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllowedHeaders": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"AllowedMethods": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"AllowedOrigins": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ExposedHeaders": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Id": &Reference{
	type_: String,
},
			"MaxAge": &Reference{
	type_: Integer,
},
	},
},
	"AWS::S3::Bucket_DataExport": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Destination": &Reference{
	ref: "AWS::S3::Bucket_Destination",
},
			"OutputSchemaVersion": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_DefaultRetention": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Days": &Reference{
	type_: Integer,
},
			"Mode": &Reference{
	type_: String,
},
			"Years": &Reference{
	type_: Integer,
},
	},
},
	"AWS::S3::Bucket_DeleteMarkerReplication": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Status": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_Destination": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketAccountId": &Reference{
	type_: String,
},
			"BucketArn": &Reference{
	type_: String,
},
			"Format": &Reference{
	type_: String,
},
			"Prefix": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_EncryptionConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ReplicaKmsKeyID": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_EventBridgeConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EventBridgeEnabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::S3::Bucket_FilterRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_IntelligentTieringConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Id": &Reference{
	type_: String,
},
			"Prefix": &Reference{
	type_: String,
},
			"Status": &Reference{
	type_: String,
},
			"TagFilters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_TagFilter",
},
},
			"Tierings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_Tiering",
},
},
	},
},
	"AWS::S3::Bucket_InventoryConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Destination": &Reference{
	ref: "AWS::S3::Bucket_Destination",
},
			"Enabled": &Reference{
	type_: Boolean,
},
			"Id": &Reference{
	type_: String,
},
			"IncludedObjectVersions": &Reference{
	type_: String,
},
			"OptionalFields": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Prefix": &Reference{
	type_: String,
},
			"ScheduleFrequency": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_LambdaConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Event": &Reference{
	type_: String,
},
			"Filter": &Reference{
	ref: "AWS::S3::Bucket_NotificationFilter",
},
			"Function": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_LifecycleConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Rules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_Rule",
},
},
	},
},
	"AWS::S3::Bucket_LoggingConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationBucketName": &Reference{
	type_: String,
},
			"LogFilePrefix": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_Metrics": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EventThreshold": &Reference{
	ref: "AWS::S3::Bucket_ReplicationTimeValue",
},
			"Status": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_MetricsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessPointArn": &Reference{
	type_: String,
},
			"Id": &Reference{
	type_: String,
},
			"Prefix": &Reference{
	type_: String,
},
			"TagFilters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_TagFilter",
},
},
	},
},
	"AWS::S3::Bucket_NoncurrentVersionExpiration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NewerNoncurrentVersions": &Reference{
	type_: Integer,
},
			"NoncurrentDays": &Reference{
	type_: Integer,
},
	},
},
	"AWS::S3::Bucket_NoncurrentVersionTransition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NewerNoncurrentVersions": &Reference{
	type_: Integer,
},
			"StorageClass": &Reference{
	type_: String,
},
			"TransitionInDays": &Reference{
	type_: Integer,
},
	},
},
	"AWS::S3::Bucket_NotificationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EventBridgeConfiguration": &Reference{
	ref: "AWS::S3::Bucket_EventBridgeConfiguration",
},
			"LambdaConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_LambdaConfiguration",
},
},
			"QueueConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_QueueConfiguration",
},
},
			"TopicConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_TopicConfiguration",
},
},
	},
},
	"AWS::S3::Bucket_NotificationFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Key": &Reference{
	ref: "AWS::S3::Bucket_S3KeyFilter",
},
	},
},
	"AWS::S3::Bucket_ObjectLockConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ObjectLockEnabled": &Reference{
	type_: String,
},
			"Rule": &Reference{
	ref: "AWS::S3::Bucket_ObjectLockRule",
},
	},
},
	"AWS::S3::Bucket_ObjectLockRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DefaultRetention": &Reference{
	ref: "AWS::S3::Bucket_DefaultRetention",
},
	},
},
	"AWS::S3::Bucket_OwnershipControls": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Rules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_OwnershipControlsRule",
},
},
	},
},
	"AWS::S3::Bucket_OwnershipControlsRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ObjectOwnership": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_PublicAccessBlockConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BlockPublicAcls": &Reference{
	type_: Boolean,
},
			"BlockPublicPolicy": &Reference{
	type_: Boolean,
},
			"IgnorePublicAcls": &Reference{
	type_: Boolean,
},
			"RestrictPublicBuckets": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::S3::Bucket_QueueConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Event": &Reference{
	type_: String,
},
			"Filter": &Reference{
	ref: "AWS::S3::Bucket_NotificationFilter",
},
			"Queue": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_RedirectAllRequestsTo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HostName": &Reference{
	type_: String,
},
			"Protocol": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_RedirectRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HostName": &Reference{
	type_: String,
},
			"HttpRedirectCode": &Reference{
	type_: String,
},
			"Protocol": &Reference{
	type_: String,
},
			"ReplaceKeyPrefixWith": &Reference{
	type_: String,
},
			"ReplaceKeyWith": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_ReplicaModifications": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Status": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_ReplicationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Role": &Reference{
	type_: String,
},
			"Rules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_ReplicationRule",
},
},
	},
},
	"AWS::S3::Bucket_ReplicationDestination": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessControlTranslation": &Reference{
	ref: "AWS::S3::Bucket_AccessControlTranslation",
},
			"Account": &Reference{
	type_: String,
},
			"Bucket": &Reference{
	type_: String,
},
			"EncryptionConfiguration": &Reference{
	ref: "AWS::S3::Bucket_EncryptionConfiguration",
},
			"Metrics": &Reference{
	ref: "AWS::S3::Bucket_Metrics",
},
			"ReplicationTime": &Reference{
	ref: "AWS::S3::Bucket_ReplicationTime",
},
			"StorageClass": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_ReplicationRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeleteMarkerReplication": &Reference{
	ref: "AWS::S3::Bucket_DeleteMarkerReplication",
},
			"Destination": &Reference{
	ref: "AWS::S3::Bucket_ReplicationDestination",
},
			"Filter": &Reference{
	ref: "AWS::S3::Bucket_ReplicationRuleFilter",
},
			"Id": &Reference{
	type_: String,
},
			"Prefix": &Reference{
	type_: String,
},
			"Priority": &Reference{
	type_: Integer,
},
			"SourceSelectionCriteria": &Reference{
	ref: "AWS::S3::Bucket_SourceSelectionCriteria",
},
			"Status": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_ReplicationRuleAndOperator": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Prefix": &Reference{
	type_: String,
},
			"TagFilters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_TagFilter",
},
},
	},
},
	"AWS::S3::Bucket_ReplicationRuleFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"And": &Reference{
	ref: "AWS::S3::Bucket_ReplicationRuleAndOperator",
},
			"Prefix": &Reference{
	type_: String,
},
			"TagFilter": &Reference{
	ref: "AWS::S3::Bucket_TagFilter",
},
	},
},
	"AWS::S3::Bucket_ReplicationTime": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Status": &Reference{
	type_: String,
},
			"Time": &Reference{
	ref: "AWS::S3::Bucket_ReplicationTimeValue",
},
	},
},
	"AWS::S3::Bucket_ReplicationTimeValue": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Minutes": &Reference{
	type_: Integer,
},
	},
},
	"AWS::S3::Bucket_RoutingRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RedirectRule": &Reference{
	ref: "AWS::S3::Bucket_RedirectRule",
},
			"RoutingRuleCondition": &Reference{
	ref: "AWS::S3::Bucket_RoutingRuleCondition",
},
	},
},
	"AWS::S3::Bucket_RoutingRuleCondition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HttpErrorCodeReturnedEquals": &Reference{
	type_: String,
},
			"KeyPrefixEquals": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_Rule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AbortIncompleteMultipartUpload": &Reference{
	ref: "AWS::S3::Bucket_AbortIncompleteMultipartUpload",
},
			"ExpirationDate": &Reference{
	ref: "AWS::S3::Bucket_iso8601UTC",
},
			"ExpirationInDays": &Reference{
	type_: Integer,
},
			"ExpiredObjectDeleteMarker": &Reference{
	type_: Boolean,
},
			"Id": &Reference{
	type_: String,
},
			"NoncurrentVersionExpiration": &Reference{
	ref: "AWS::S3::Bucket_NoncurrentVersionExpiration",
},
			"NoncurrentVersionExpirationInDays": &Reference{
	type_: Integer,
},
			"NoncurrentVersionTransition": &Reference{
	ref: "AWS::S3::Bucket_NoncurrentVersionTransition",
},
			"NoncurrentVersionTransitions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_NoncurrentVersionTransition",
},
},
			"ObjectSizeGreaterThan": &Reference{
	type_: String,
},
			"ObjectSizeLessThan": &Reference{
	type_: String,
},
			"Prefix": &Reference{
	type_: String,
},
			"Status": &Reference{
	type_: String,
},
			"TagFilters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_TagFilter",
},
},
			"Transition": &Reference{
	ref: "AWS::S3::Bucket_Transition",
},
			"Transitions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_Transition",
},
},
	},
},
	"AWS::S3::Bucket_S3KeyFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Rules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_FilterRule",
},
},
	},
},
	"AWS::S3::Bucket_ServerSideEncryptionByDefault": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KMSMasterKeyID": &Reference{
	type_: String,
},
			"SSEAlgorithm": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_ServerSideEncryptionRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketKeyEnabled": &Reference{
	type_: Boolean,
},
			"ServerSideEncryptionByDefault": &Reference{
	ref: "AWS::S3::Bucket_ServerSideEncryptionByDefault",
},
	},
},
	"AWS::S3::Bucket_SourceSelectionCriteria": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ReplicaModifications": &Reference{
	ref: "AWS::S3::Bucket_ReplicaModifications",
},
			"SseKmsEncryptedObjects": &Reference{
	ref: "AWS::S3::Bucket_SseKmsEncryptedObjects",
},
	},
},
	"AWS::S3::Bucket_SseKmsEncryptedObjects": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Status": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_StorageClassAnalysis": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataExport": &Reference{
	ref: "AWS::S3::Bucket_DataExport",
},
	},
},
	"AWS::S3::Bucket_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_TagFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_Tiering": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessTier": &Reference{
	type_: String,
},
			"Days": &Reference{
	type_: Integer,
},
	},
},
	"AWS::S3::Bucket_TopicConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Event": &Reference{
	type_: String,
},
			"Filter": &Reference{
	ref: "AWS::S3::Bucket_NotificationFilter",
},
			"Topic": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_Transition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"StorageClass": &Reference{
	type_: String,
},
			"TransitionDate": &Reference{
	ref: "AWS::S3::Bucket_iso8601UTC",
},
			"TransitionInDays": &Reference{
	type_: Integer,
},
	},
},
	"AWS::S3::Bucket_VersioningConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Status": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::Bucket_WebsiteConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ErrorDocument": &Reference{
	type_: String,
},
			"IndexDocument": &Reference{
	type_: String,
},
			"RedirectAllRequestsTo": &Reference{
	ref: "AWS::S3::Bucket_RedirectAllRequestsTo",
},
			"RoutingRules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::Bucket_RoutingRule",
},
},
	},
},
	"AWS::S3::Bucket_iso8601UTC": &Reference{
	type_: String,
},
	"AWS::S3::MultiRegionAccessPoint_PublicAccessBlockConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BlockPublicAcls": &Reference{
	type_: Boolean,
},
			"BlockPublicPolicy": &Reference{
	type_: Boolean,
},
			"IgnorePublicAcls": &Reference{
	type_: Boolean,
},
			"RestrictPublicBuckets": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::S3::MultiRegionAccessPoint_Region": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccountId": &Reference{
	type_: String,
},
			"Bucket": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::StorageLens_AccountLevel": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ActivityMetrics": &Reference{
	ref: "AWS::S3::StorageLens_ActivityMetrics",
},
			"BucketLevel": &Reference{
	ref: "AWS::S3::StorageLens_BucketLevel",
},
	},
},
	"AWS::S3::StorageLens_ActivityMetrics": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IsEnabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::S3::StorageLens_Arn": &Reference{
	type_: String,
},
	"AWS::S3::StorageLens_AwsOrg": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	ref: "AWS::S3::StorageLens_Arn",
},
	},
},
	"AWS::S3::StorageLens_BucketLevel": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ActivityMetrics": &Reference{
	ref: "AWS::S3::StorageLens_ActivityMetrics",
},
			"PrefixLevel": &Reference{
	ref: "AWS::S3::StorageLens_PrefixLevel",
},
	},
},
	"AWS::S3::StorageLens_BucketsAndRegions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Buckets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3::StorageLens_Arn",
},
},
			"Regions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::S3::StorageLens_CloudWatchMetrics": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IsEnabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::S3::StorageLens_DataExport": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchMetrics": &Reference{
	ref: "AWS::S3::StorageLens_CloudWatchMetrics",
},
			"S3BucketDestination": &Reference{
	ref: "AWS::S3::StorageLens_S3BucketDestination",
},
	},
},
	"AWS::S3::StorageLens_Encryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::S3::StorageLens_Id": &Reference{
	type_: String,
},
	"AWS::S3::StorageLens_PrefixLevel": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"StorageMetrics": &Reference{
	ref: "AWS::S3::StorageLens_PrefixLevelStorageMetrics",
},
	},
},
	"AWS::S3::StorageLens_PrefixLevelStorageMetrics": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IsEnabled": &Reference{
	type_: Boolean,
},
			"SelectionCriteria": &Reference{
	ref: "AWS::S3::StorageLens_SelectionCriteria",
},
	},
},
	"AWS::S3::StorageLens_S3BucketDestination": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccountId": &Reference{
	type_: String,
},
			"Arn": &Reference{
	type_: String,
},
			"Encryption": &Reference{
	ref: "AWS::S3::StorageLens_Encryption",
},
			"Format": &Reference{
	type_: String,
},
			"OutputSchemaVersion": &Reference{
	type_: String,
},
			"Prefix": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::StorageLens_SSEKMS": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KeyId": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::StorageLens_SelectionCriteria": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Delimiter": &Reference{
	type_: String,
},
			"MaxDepth": &Reference{
	type_: Integer,
},
			"MinStorageBytesPercentage": &Reference{
	type_: Number,
},
	},
},
	"AWS::S3::StorageLens_StorageLensConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccountLevel": &Reference{
	ref: "AWS::S3::StorageLens_AccountLevel",
},
			"AwsOrg": &Reference{
	ref: "AWS::S3::StorageLens_AwsOrg",
},
			"DataExport": &Reference{
	ref: "AWS::S3::StorageLens_DataExport",
},
			"Exclude": &Reference{
	ref: "AWS::S3::StorageLens_BucketsAndRegions",
},
			"Id": &Reference{
	ref: "AWS::S3::StorageLens_Id",
},
			"Include": &Reference{
	ref: "AWS::S3::StorageLens_BucketsAndRegions",
},
			"IsEnabled": &Reference{
	type_: Boolean,
},
			"StorageLensArn": &Reference{
	type_: String,
},
	},
},
	"AWS::S3::StorageLens_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::S3ObjectLambda::AccessPoint_Action": &Reference{
	type_: String,
},
	"AWS::S3ObjectLambda::AccessPoint_AwsLambda": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FunctionArn": &Reference{
	type_: String,
},
			"FunctionPayload": &Reference{
	type_: String,
},
	},
},
	"AWS::S3ObjectLambda::AccessPoint_ObjectLambdaConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllowedFeatures": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"CloudWatchMetricsEnabled": &Reference{
	type_: Boolean,
},
			"SupportingAccessPoint": &Reference{
	type_: String,
},
			"TransformationConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3ObjectLambda::AccessPoint_TransformationConfiguration",
},
},
	},
},
	"AWS::S3ObjectLambda::AccessPoint_PublicAccessBlockConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BlockPublicAcls": &Reference{
	type_: Boolean,
},
			"BlockPublicPolicy": &Reference{
	type_: Boolean,
},
			"IgnorePublicAcls": &Reference{
	type_: Boolean,
},
			"RestrictPublicBuckets": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::S3ObjectLambda::AccessPoint_TransformationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Actions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3ObjectLambda::AccessPoint_Action",
},
},
			"ContentTransformation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::S3Outposts::AccessPoint_VpcConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"VpcId": &Reference{
	type_: String,
},
	},
},
	"AWS::S3Outposts::Bucket_AbortIncompleteMultipartUpload": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DaysAfterInitiation": &Reference{
	type_: Integer,
},
	},
},
	"AWS::S3Outposts::Bucket_FilterAndOperator": &Reference{
	type_: Unknown,
},
	"AWS::S3Outposts::Bucket_FilterPrefix": &Reference{
	type_: String,
},
	"AWS::S3Outposts::Bucket_FilterTag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::S3Outposts::Bucket_LifecycleConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Rules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::S3Outposts::Bucket_Rule",
},
},
	},
},
	"AWS::S3Outposts::Bucket_Rule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AbortIncompleteMultipartUpload": &Reference{
	ref: "AWS::S3Outposts::Bucket_AbortIncompleteMultipartUpload",
},
			"ExpirationDate": &Reference{
	ref: "AWS::S3Outposts::Bucket_iso8601UTC",
},
			"ExpirationInDays": &Reference{
	type_: Integer,
},
			"Filter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AndOperator": &Reference{
	ref: "AWS::S3Outposts::Bucket_FilterAndOperator",
},
			"Prefix": &Reference{
	ref: "AWS::S3Outposts::Bucket_FilterPrefix",
},
			"Tag": &Reference{
	ref: "AWS::S3Outposts::Bucket_FilterTag",
},
	},
},
			"Id": &Reference{
	type_: String,
},
			"Status": &Reference{
	type_: String,
},
	},
},
	"AWS::S3Outposts::Bucket_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::S3Outposts::Bucket_iso8601UTC": &Reference{
	type_: String,
},
	"AWS::S3Outposts::Endpoint_NetworkInterface": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NetworkInterfaceId": &Reference{
	type_: String,
},
	},
},
	"AWS::S3Outposts::Endpoint_iso8601UTC": &Reference{
	type_: String,
},
	"AWS::SES::ConfigurationSet_DeliveryOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SendingPoolName": &Reference{
	type_: String,
},
			"TlsPolicy": &Reference{
	type_: String,
},
	},
},
	"AWS::SES::ConfigurationSet_ReputationOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ReputationMetricsEnabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::SES::ConfigurationSet_SendingOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SendingEnabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::SES::ConfigurationSet_SuppressionOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SuppressedReasons": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::SES::ConfigurationSet_TrackingOptions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomRedirectDomain": &Reference{
	type_: String,
},
	},
},
	"AWS::SES::ConfigurationSetEventDestination_CloudWatchDestination": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DimensionConfigurations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SES::ConfigurationSetEventDestination_DimensionConfiguration",
},
},
	},
},
	"AWS::SES::ConfigurationSetEventDestination_DimensionConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DefaultDimensionValue": &Reference{
	type_: String,
},
			"DimensionName": &Reference{
	type_: String,
},
			"DimensionValueSource": &Reference{
	type_: String,
},
	},
},
	"AWS::SES::ConfigurationSetEventDestination_EventDestination": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchDestination": &Reference{
	ref: "AWS::SES::ConfigurationSetEventDestination_CloudWatchDestination",
},
			"Enabled": &Reference{
	type_: Boolean,
},
			"KinesisFirehoseDestination": &Reference{
	ref: "AWS::SES::ConfigurationSetEventDestination_KinesisFirehoseDestination",
},
			"MatchingEventTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Name": &Reference{
	type_: String,
},
			"SnsDestination": &Reference{
	ref: "AWS::SES::ConfigurationSetEventDestination_SnsDestination",
},
	},
},
	"AWS::SES::ConfigurationSetEventDestination_KinesisFirehoseDestination": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DeliveryStreamARN": &Reference{
	type_: String,
},
			"IAMRoleARN": &Reference{
	type_: String,
},
	},
},
	"AWS::SES::ConfigurationSetEventDestination_SnsDestination": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TopicARN": &Reference{
	type_: String,
},
	},
},
	"AWS::SES::ContactList_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SES::ContactList_Topic": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DefaultSubscriptionStatus": &Reference{
	type_: String,
},
			"Description": &Reference{
	type_: String,
},
			"DisplayName": &Reference{
	type_: String,
},
			"TopicName": &Reference{
	type_: String,
},
	},
},
	"AWS::SES::EmailIdentity_ConfigurationSetAttributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConfigurationSetName": &Reference{
	type_: String,
},
	},
},
	"AWS::SES::EmailIdentity_DkimAttributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SigningEnabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::SES::EmailIdentity_DkimSigningAttributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DomainSigningPrivateKey": &Reference{
	type_: String,
},
			"DomainSigningSelector": &Reference{
	type_: String,
},
			"NextSigningKeyLength": &Reference{
	type_: String,
},
	},
},
	"AWS::SES::EmailIdentity_FeedbackAttributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EmailForwardingEnabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::SES::EmailIdentity_MailFromAttributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BehaviorOnMxFailure": &Reference{
	type_: String,
},
			"MailFromDomain": &Reference{
	type_: String,
},
	},
},
	"AWS::SES::Template_Template": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"HtmlPart": &Reference{
	type_: String,
},
			"SubjectPart": &Reference{
	type_: String,
},
			"TemplateName": &Reference{
	type_: String,
},
			"TextPart": &Reference{
	type_: String,
},
	},
},
	"AWS::SNS::Topic_Subscription": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Endpoint": &Reference{
	type_: String,
},
			"Protocol": &Reference{
	type_: String,
},
	},
},
	"AWS::SNS::Topic_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SQS::Queue_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SSM::Association_InstanceAssociationOutputLocation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Location": &Reference{
	ref: "AWS::SSM::Association_S3OutputLocation",
},
	},
},
	"AWS::SSM::Association_ParameterValues": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	"AWS::SSM::Association_S3BucketName": &Reference{
	type_: String,
},
	"AWS::SSM::Association_S3KeyPrefix": &Reference{
	type_: String,
},
	"AWS::SSM::Association_S3OutputLocation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OutputS3BucketName": &Reference{
	ref: "AWS::SSM::Association_S3BucketName",
},
			"OutputS3KeyPrefix": &Reference{
	ref: "AWS::SSM::Association_S3KeyPrefix",
},
			"OutputS3Region": &Reference{
	ref: "AWS::SSM::Association_S3Region",
},
	},
},
	"AWS::SSM::Association_S3Region": &Reference{
	type_: String,
},
	"AWS::SSM::Association_Target": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::SSM::Document_AttachmentsSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::SSM::Document_DocumentRequires": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::SSM::Document_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SSM::MaintenanceWindow_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SSM::MaintenanceWindowTarget_Targets": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::SSM::MaintenanceWindowTask_CloudWatchOutputConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchLogGroupName": &Reference{
	type_: String,
},
			"CloudWatchOutputEnabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::SSM::MaintenanceWindowTask_LoggingInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Region": &Reference{
	type_: String,
},
			"S3Bucket": &Reference{
	type_: String,
},
			"S3Prefix": &Reference{
	type_: String,
},
	},
},
	"AWS::SSM::MaintenanceWindowTask_MaintenanceWindowAutomationParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DocumentVersion": &Reference{
	type_: String,
},
			"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::SSM::MaintenanceWindowTask_MaintenanceWindowLambdaParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClientContext": &Reference{
	type_: String,
},
			"Payload": &Reference{
	type_: String,
},
			"Qualifier": &Reference{
	type_: String,
},
	},
},
	"AWS::SSM::MaintenanceWindowTask_MaintenanceWindowRunCommandParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchOutputConfig": &Reference{
	ref: "AWS::SSM::MaintenanceWindowTask_CloudWatchOutputConfig",
},
			"Comment": &Reference{
	type_: String,
},
			"DocumentHash": &Reference{
	type_: String,
},
			"DocumentHashType": &Reference{
	type_: String,
},
			"DocumentVersion": &Reference{
	type_: String,
},
			"NotificationConfig": &Reference{
	ref: "AWS::SSM::MaintenanceWindowTask_NotificationConfig",
},
			"OutputS3BucketName": &Reference{
	type_: String,
},
			"OutputS3KeyPrefix": &Reference{
	type_: String,
},
			"Parameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"ServiceRoleArn": &Reference{
	type_: String,
},
			"TimeoutSeconds": &Reference{
	type_: Integer,
},
	},
},
	"AWS::SSM::MaintenanceWindowTask_MaintenanceWindowStepFunctionsParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Input": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::SSM::MaintenanceWindowTask_NotificationConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NotificationArn": &Reference{
	type_: String,
},
			"NotificationEvents": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"NotificationType": &Reference{
	type_: String,
},
	},
},
	"AWS::SSM::MaintenanceWindowTask_Target": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::SSM::MaintenanceWindowTask_TaskInvocationParameters": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaintenanceWindowAutomationParameters": &Reference{
	ref: "AWS::SSM::MaintenanceWindowTask_MaintenanceWindowAutomationParameters",
},
			"MaintenanceWindowLambdaParameters": &Reference{
	ref: "AWS::SSM::MaintenanceWindowTask_MaintenanceWindowLambdaParameters",
},
			"MaintenanceWindowRunCommandParameters": &Reference{
	ref: "AWS::SSM::MaintenanceWindowTask_MaintenanceWindowRunCommandParameters",
},
			"MaintenanceWindowStepFunctionsParameters": &Reference{
	ref: "AWS::SSM::MaintenanceWindowTask_MaintenanceWindowStepFunctionsParameters",
},
	},
},
	"AWS::SSM::PatchBaseline_PatchFilter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::SSM::PatchBaseline_PatchFilterGroup": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PatchFilters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSM::PatchBaseline_PatchFilter",
},
},
	},
},
	"AWS::SSM::PatchBaseline_PatchSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Configuration": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Products": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::SSM::PatchBaseline_PatchStringDate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::SSM::PatchBaseline_Rule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ApproveAfterDays": &Reference{
	type_: Integer,
},
			"ApproveUntilDate": &Reference{
	ref: "AWS::SSM::PatchBaseline_PatchStringDate",
},
			"ComplianceLevel": &Reference{
	type_: String,
},
			"EnableNonSecurity": &Reference{
	type_: Boolean,
},
			"PatchFilterGroup": &Reference{
	ref: "AWS::SSM::PatchBaseline_PatchFilterGroup",
},
	},
},
	"AWS::SSM::PatchBaseline_RuleGroup": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PatchRules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSM::PatchBaseline_Rule",
},
},
	},
},
	"AWS::SSM::PatchBaseline_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SSM::ResourceDataSync_AwsOrganizationsSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OrganizationSourceType": &Reference{
	type_: String,
},
			"OrganizationalUnits": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::SSM::ResourceDataSync_S3Destination": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketName": &Reference{
	type_: String,
},
			"BucketPrefix": &Reference{
	type_: String,
},
			"BucketRegion": &Reference{
	type_: String,
},
			"KMSKeyArn": &Reference{
	type_: String,
},
			"SyncFormat": &Reference{
	type_: String,
},
	},
},
	"AWS::SSM::ResourceDataSync_SyncSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AwsOrganizationsSource": &Reference{
	ref: "AWS::SSM::ResourceDataSync_AwsOrganizationsSource",
},
			"IncludeFutureRegions": &Reference{
	type_: Boolean,
},
			"SourceRegions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SourceType": &Reference{
	type_: String,
},
	},
},
	"AWS::SSMContacts::Contact_ChannelTargetInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ChannelId": &Reference{
	type_: String,
},
			"RetryIntervalInMinutes": &Reference{
	type_: Integer,
},
	},
},
	"AWS::SSMContacts::Contact_ContactTargetInfo": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContactId": &Reference{
	type_: String,
},
			"IsEssential": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::SSMContacts::Contact_Stage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DurationInMinutes": &Reference{
	type_: Integer,
},
			"Targets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSMContacts::Contact_Targets",
},
},
	},
},
	"AWS::SSMContacts::Contact_Targets": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ChannelTargetInfo": &Reference{
	ref: "AWS::SSMContacts::Contact_ChannelTargetInfo",
},
			"ContactTargetInfo": &Reference{
	ref: "AWS::SSMContacts::Contact_ContactTargetInfo",
},
	},
},
	"AWS::SSMIncidents::ReplicationSet_Arn": &Reference{
	type_: String,
},
	"AWS::SSMIncidents::ReplicationSet_DeletionProtected": &Reference{
	type_: Boolean,
},
	"AWS::SSMIncidents::ReplicationSet_RegionConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SseKmsKeyId": &Reference{
	ref: "AWS::SSMIncidents::ReplicationSet_Arn",
},
	},
},
	"AWS::SSMIncidents::ReplicationSet_RegionList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSMIncidents::ReplicationSet_ReplicationRegion",
},
},
	"AWS::SSMIncidents::ReplicationSet_RegionName": &Reference{
	type_: String,
},
	"AWS::SSMIncidents::ReplicationSet_ReplicationRegion": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RegionConfiguration": &Reference{
	ref: "AWS::SSMIncidents::ReplicationSet_RegionConfiguration",
},
			"RegionName": &Reference{
	ref: "AWS::SSMIncidents::ReplicationSet_RegionName",
},
	},
},
	"AWS::SSMIncidents::ResponsePlan_Action": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SsmAutomation": &Reference{
	ref: "AWS::SSMIncidents::ResponsePlan_SsmAutomation",
},
	},
},
	"AWS::SSMIncidents::ResponsePlan_ChatChannel": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ChatbotSns": &Reference{
	ref: "AWS::SSMIncidents::ResponsePlan_ChatbotSns",
},
	},
},
	"AWS::SSMIncidents::ResponsePlan_ChatbotSns": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSMIncidents::ResponsePlan_SnsArn",
},
},
	"AWS::SSMIncidents::ResponsePlan_DynamicSsmParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	ref: "AWS::SSMIncidents::ResponsePlan_DynamicSsmParameterValue",
},
	},
},
	"AWS::SSMIncidents::ResponsePlan_DynamicSsmParameterValue": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Variable": &Reference{
	ref: "AWS::SSMIncidents::ResponsePlan_VariableType",
},
	},
},
	"AWS::SSMIncidents::ResponsePlan_IncidentTemplate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DedupeString": &Reference{
	type_: String,
},
			"Impact": &Reference{
	type_: Integer,
},
			"IncidentTags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSMIncidents::ResponsePlan_Tag",
},
},
			"NotificationTargets": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSMIncidents::ResponsePlan_NotificationTargetItem",
},
},
			"Summary": &Reference{
	type_: String,
},
			"Title": &Reference{
	type_: String,
},
	},
},
	"AWS::SSMIncidents::ResponsePlan_NotificationTargetItem": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SnsTopicArn": &Reference{
	ref: "AWS::SSMIncidents::ResponsePlan_SnsArn",
},
	},
},
	"AWS::SSMIncidents::ResponsePlan_SSMContact": &Reference{
	type_: String,
},
	"AWS::SSMIncidents::ResponsePlan_SnsArn": &Reference{
	type_: String,
},
	"AWS::SSMIncidents::ResponsePlan_SsmAutomation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DocumentName": &Reference{
	type_: String,
},
			"DocumentVersion": &Reference{
	type_: String,
},
			"DynamicParameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSMIncidents::ResponsePlan_DynamicSsmParameter",
},
},
			"Parameters": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSMIncidents::ResponsePlan_SsmParameter",
},
},
			"RoleArn": &Reference{
	type_: String,
},
			"TargetAccount": &Reference{
	type_: String,
},
	},
},
	"AWS::SSMIncidents::ResponsePlan_SsmParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Values": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSMIncidents::ResponsePlan_SsmParameterValue",
},
},
	},
},
	"AWS::SSMIncidents::ResponsePlan_SsmParameterValue": &Reference{
	type_: String,
},
	"AWS::SSMIncidents::ResponsePlan_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SSMIncidents::ResponsePlan_VariableType": &Reference{
	type_: String,
},
	"AWS::SSO::InstanceAccessControlAttributeConfiguration_AccessControlAttribute": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	ref: "AWS::SSO::InstanceAccessControlAttributeConfiguration_AccessControlAttributeValue",
},
	},
},
	"AWS::SSO::InstanceAccessControlAttributeConfiguration_AccessControlAttributeList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSO::InstanceAccessControlAttributeConfiguration_AccessControlAttribute",
},
},
	"AWS::SSO::InstanceAccessControlAttributeConfiguration_AccessControlAttributeValue": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Source": &Reference{
	ref: "AWS::SSO::InstanceAccessControlAttributeConfiguration_AccessControlAttributeValueSourceList",
},
	},
},
	"AWS::SSO::InstanceAccessControlAttributeConfiguration_AccessControlAttributeValueSource": &Reference{
	type_: String,
},
	"AWS::SSO::InstanceAccessControlAttributeConfiguration_AccessControlAttributeValueSourceList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SSO::InstanceAccessControlAttributeConfiguration_AccessControlAttributeValueSource",
},
},
	"AWS::SSO::PermissionSet_ManagedPolicyArn": &Reference{
	type_: String,
},
	"AWS::SSO::PermissionSet_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::App_ResourceSpec": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceType": &Reference{
	type_: String,
},
			"SageMakerImageArn": &Reference{
	type_: String,
},
			"SageMakerImageVersionArn": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::App_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::AppImageConfig_FileSystemConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DefaultGid": &Reference{
	type_: Integer,
},
			"DefaultUid": &Reference{
	type_: Integer,
},
			"MountPath": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::AppImageConfig_KernelGatewayImageConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FileSystemConfig": &Reference{
	ref: "AWS::SageMaker::AppImageConfig_FileSystemConfig",
},
			"KernelSpecs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::AppImageConfig_KernelSpec",
},
},
	},
},
	"AWS::SageMaker::AppImageConfig_KernelSpec": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DisplayName": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::AppImageConfig_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::CodeRepository_GitConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Branch": &Reference{
	type_: String,
},
			"RepositoryUrl": &Reference{
	type_: String,
},
			"SecretArn": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::CodeRepository_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::DataQualityJobDefinition_ClusterConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceCount": &Reference{
	type_: Integer,
},
			"InstanceType": &Reference{
	type_: String,
},
			"VolumeKmsKeyId": &Reference{
	type_: String,
},
			"VolumeSizeInGB": &Reference{
	type_: Integer,
},
	},
},
	"AWS::SageMaker::DataQualityJobDefinition_ConstraintsResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Uri": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_S3Uri",
},
	},
},
	"AWS::SageMaker::DataQualityJobDefinition_DataQualityAppSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerArguments": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ContainerEntrypoint": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Environment": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"ImageUri": &Reference{
	type_: String,
},
			"PostAnalyticsProcessorSourceUri": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_S3Uri",
},
			"RecordPreprocessorSourceUri": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_S3Uri",
},
	},
},
	"AWS::SageMaker::DataQualityJobDefinition_DataQualityBaselineConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BaseliningJobName": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_ProcessingJobName",
},
			"ConstraintsResource": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_ConstraintsResource",
},
			"StatisticsResource": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_StatisticsResource",
},
	},
},
	"AWS::SageMaker::DataQualityJobDefinition_DataQualityJobInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EndpointInput": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_EndpointInput",
},
	},
},
	"AWS::SageMaker::DataQualityJobDefinition_EndpointInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EndpointName": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_EndpointName",
},
			"LocalPath": &Reference{
	type_: String,
},
			"S3DataDistributionType": &Reference{
	type_: String,
},
			"S3InputMode": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::DataQualityJobDefinition_EndpointName": &Reference{
	type_: String,
},
	"AWS::SageMaker::DataQualityJobDefinition_JobDefinitionName": &Reference{
	type_: String,
},
	"AWS::SageMaker::DataQualityJobDefinition_MonitoringOutput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Output": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_S3Output",
},
	},
},
	"AWS::SageMaker::DataQualityJobDefinition_MonitoringOutputConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KmsKeyId": &Reference{
	type_: String,
},
			"MonitoringOutputs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_MonitoringOutput",
},
},
	},
},
	"AWS::SageMaker::DataQualityJobDefinition_MonitoringResources": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClusterConfig": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_ClusterConfig",
},
	},
},
	"AWS::SageMaker::DataQualityJobDefinition_NetworkConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EnableInterContainerTrafficEncryption": &Reference{
	type_: Boolean,
},
			"EnableNetworkIsolation": &Reference{
	type_: Boolean,
},
			"VpcConfig": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_VpcConfig",
},
	},
},
	"AWS::SageMaker::DataQualityJobDefinition_ProcessingJobName": &Reference{
	type_: String,
},
	"AWS::SageMaker::DataQualityJobDefinition_S3Output": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LocalPath": &Reference{
	type_: String,
},
			"S3UploadMode": &Reference{
	type_: String,
},
			"S3Uri": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::DataQualityJobDefinition_S3Uri": &Reference{
	type_: String,
},
	"AWS::SageMaker::DataQualityJobDefinition_StatisticsResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Uri": &Reference{
	ref: "AWS::SageMaker::DataQualityJobDefinition_S3Uri",
},
	},
},
	"AWS::SageMaker::DataQualityJobDefinition_StoppingCondition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxRuntimeInSeconds": &Reference{
	type_: Integer,
},
	},
},
	"AWS::SageMaker::DataQualityJobDefinition_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::DataQualityJobDefinition_VpcConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Subnets": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::SageMaker::Device_Device": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Description": &Reference{
	type_: String,
},
			"DeviceName": &Reference{
	type_: String,
},
			"IotThingName": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::Device_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::DeviceFleet_EdgeOutputConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KmsKeyId": &Reference{
	type_: String,
},
			"S3OutputLocation": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::DeviceFleet_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::Domain_CustomImage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AppImageConfigName": &Reference{
	type_: String,
},
			"ImageName": &Reference{
	type_: String,
},
			"ImageVersionNumber": &Reference{
	type_: Integer,
},
	},
},
	"AWS::SageMaker::Domain_DomainSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RStudioServerProDomainSettings": &Reference{
	ref: "AWS::SageMaker::Domain_RStudioServerProDomainSettings",
},
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::SageMaker::Domain_JupyterServerAppSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DefaultResourceSpec": &Reference{
	ref: "AWS::SageMaker::Domain_ResourceSpec",
},
	},
},
	"AWS::SageMaker::Domain_KernelGatewayAppSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomImages": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::Domain_CustomImage",
},
},
			"DefaultResourceSpec": &Reference{
	ref: "AWS::SageMaker::Domain_ResourceSpec",
},
	},
},
	"AWS::SageMaker::Domain_RSessionAppSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomImages": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::Domain_CustomImage",
},
},
			"DefaultResourceSpec": &Reference{
	ref: "AWS::SageMaker::Domain_ResourceSpec",
},
	},
},
	"AWS::SageMaker::Domain_RStudioServerProAppSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessStatus": &Reference{
	type_: String,
},
			"UserGroup": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::Domain_RStudioServerProDomainSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DefaultResourceSpec": &Reference{
	ref: "AWS::SageMaker::Domain_ResourceSpec",
},
			"DomainExecutionRoleArn": &Reference{
	type_: String,
},
			"RStudioConnectUrl": &Reference{
	type_: String,
},
			"RStudioPackageManagerUrl": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::Domain_ResourceSpec": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceType": &Reference{
	type_: String,
},
			"LifecycleConfigArn": &Reference{
	type_: String,
},
			"SageMakerImageArn": &Reference{
	type_: String,
},
			"SageMakerImageVersionArn": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::Domain_SharingSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NotebookOutputOption": &Reference{
	type_: String,
},
			"S3KmsKeyId": &Reference{
	type_: String,
},
			"S3OutputPath": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::Domain_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::Domain_UserSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExecutionRole": &Reference{
	type_: String,
},
			"JupyterServerAppSettings": &Reference{
	ref: "AWS::SageMaker::Domain_JupyterServerAppSettings",
},
			"KernelGatewayAppSettings": &Reference{
	ref: "AWS::SageMaker::Domain_KernelGatewayAppSettings",
},
			"RSessionAppSettings": &Reference{
	ref: "AWS::SageMaker::Domain_RSessionAppSettings",
},
			"RStudioServerProAppSettings": &Reference{
	ref: "AWS::SageMaker::Domain_RStudioServerProAppSettings",
},
			"SecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SharingSettings": &Reference{
	ref: "AWS::SageMaker::Domain_SharingSettings",
},
	},
},
	"AWS::SageMaker::Endpoint_Alarm": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AlarmName": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::Endpoint_AutoRollbackConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Alarms": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::Endpoint_Alarm",
},
},
	},
},
	"AWS::SageMaker::Endpoint_BlueGreenUpdatePolicy": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaximumExecutionTimeoutInSeconds": &Reference{
	type_: Integer,
},
			"TerminationWaitInSeconds": &Reference{
	type_: Integer,
},
			"TrafficRoutingConfiguration": &Reference{
	ref: "AWS::SageMaker::Endpoint_TrafficRoutingConfig",
},
	},
},
	"AWS::SageMaker::Endpoint_CapacitySize": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: Integer,
},
	},
},
	"AWS::SageMaker::Endpoint_DeploymentConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AutoRollbackConfiguration": &Reference{
	ref: "AWS::SageMaker::Endpoint_AutoRollbackConfig",
},
			"BlueGreenUpdatePolicy": &Reference{
	ref: "AWS::SageMaker::Endpoint_BlueGreenUpdatePolicy",
},
	},
},
	"AWS::SageMaker::Endpoint_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::Endpoint_TrafficRoutingConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CanarySize": &Reference{
	ref: "AWS::SageMaker::Endpoint_CapacitySize",
},
			"LinearStepSize": &Reference{
	ref: "AWS::SageMaker::Endpoint_CapacitySize",
},
			"Type": &Reference{
	type_: String,
},
			"WaitIntervalInSeconds": &Reference{
	type_: Integer,
},
	},
},
	"AWS::SageMaker::Endpoint_VariantProperty": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"VariantPropertyType": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::EndpointConfig_AsyncInferenceClientConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxConcurrentInvocationsPerInstance": &Reference{
	type_: Integer,
},
	},
},
	"AWS::SageMaker::EndpointConfig_AsyncInferenceConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClientConfig": &Reference{
	ref: "AWS::SageMaker::EndpointConfig_AsyncInferenceClientConfig",
},
			"OutputConfig": &Reference{
	ref: "AWS::SageMaker::EndpointConfig_AsyncInferenceOutputConfig",
},
	},
},
	"AWS::SageMaker::EndpointConfig_AsyncInferenceNotificationConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ErrorTopic": &Reference{
	type_: String,
},
			"SuccessTopic": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::EndpointConfig_AsyncInferenceOutputConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KmsKeyId": &Reference{
	type_: String,
},
			"NotificationConfig": &Reference{
	ref: "AWS::SageMaker::EndpointConfig_AsyncInferenceNotificationConfig",
},
			"S3OutputPath": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::EndpointConfig_CaptureContentTypeHeader": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CsvContentTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"JsonContentTypes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::SageMaker::EndpointConfig_CaptureOption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CaptureMode": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::EndpointConfig_DataCaptureConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CaptureContentTypeHeader": &Reference{
	ref: "AWS::SageMaker::EndpointConfig_CaptureContentTypeHeader",
},
			"CaptureOptions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::EndpointConfig_CaptureOption",
},
},
			"DestinationS3Uri": &Reference{
	type_: String,
},
			"EnableCapture": &Reference{
	type_: Boolean,
},
			"InitialSamplingPercentage": &Reference{
	type_: Integer,
},
			"KmsKeyId": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::EndpointConfig_ProductionVariant": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AcceleratorType": &Reference{
	type_: String,
},
			"InitialInstanceCount": &Reference{
	type_: Integer,
},
			"InitialVariantWeight": &Reference{
	type_: Number,
},
			"InstanceType": &Reference{
	type_: String,
},
			"ModelName": &Reference{
	type_: String,
},
			"ServerlessConfig": &Reference{
	ref: "AWS::SageMaker::EndpointConfig_ServerlessConfig",
},
			"VariantName": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::EndpointConfig_ServerlessConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxConcurrency": &Reference{
	type_: Integer,
},
			"MemorySizeInMB": &Reference{
	type_: Integer,
},
	},
},
	"AWS::SageMaker::EndpointConfig_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::FeatureGroup_DataCatalogConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Catalog": &Reference{
	type_: String,
},
			"Database": &Reference{
	type_: String,
},
			"TableName": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::FeatureGroup_FeatureDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FeatureName": &Reference{
	type_: String,
},
			"FeatureType": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::FeatureGroup_KmsKeyId": &Reference{
	type_: String,
},
	"AWS::SageMaker::FeatureGroup_OnlineStoreSecurityConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KmsKeyId": &Reference{
	ref: "AWS::SageMaker::FeatureGroup_KmsKeyId",
},
	},
},
	"AWS::SageMaker::FeatureGroup_S3StorageConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KmsKeyId": &Reference{
	ref: "AWS::SageMaker::FeatureGroup_KmsKeyId",
},
			"S3Uri": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::FeatureGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::Image_ImageArn": &Reference{
	type_: String,
},
	"AWS::SageMaker::Image_ImageDescription": &Reference{
	type_: String,
},
	"AWS::SageMaker::Image_ImageDisplayName": &Reference{
	type_: String,
},
	"AWS::SageMaker::Image_ImageName": &Reference{
	type_: String,
},
	"AWS::SageMaker::Image_ImageRoleArn": &Reference{
	type_: String,
},
	"AWS::SageMaker::Image_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ImageVersion_BaseImage": &Reference{
	type_: String,
},
	"AWS::SageMaker::ImageVersion_ContainerImage": &Reference{
	type_: String,
},
	"AWS::SageMaker::ImageVersion_ImageArn": &Reference{
	type_: String,
},
	"AWS::SageMaker::ImageVersion_ImageName": &Reference{
	type_: String,
},
	"AWS::SageMaker::ImageVersion_ImageVersionArn": &Reference{
	type_: String,
},
	"AWS::SageMaker::ImageVersion_Version": &Reference{
	type_: Integer,
},
	"AWS::SageMaker::Model_ContainerDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerHostname": &Reference{
	type_: String,
},
			"Environment": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Image": &Reference{
	type_: String,
},
			"ImageConfig": &Reference{
	ref: "AWS::SageMaker::Model_ImageConfig",
},
			"InferenceSpecificationName": &Reference{
	type_: String,
},
			"Mode": &Reference{
	type_: String,
},
			"ModelDataUrl": &Reference{
	type_: String,
},
			"ModelPackageName": &Reference{
	type_: String,
},
			"MultiModelConfig": &Reference{
	ref: "AWS::SageMaker::Model_MultiModelConfig",
},
	},
},
	"AWS::SageMaker::Model_ImageConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RepositoryAccessMode": &Reference{
	type_: String,
},
			"RepositoryAuthConfig": &Reference{
	ref: "AWS::SageMaker::Model_RepositoryAuthConfig",
},
	},
},
	"AWS::SageMaker::Model_InferenceExecutionConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Mode": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::Model_MultiModelConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ModelCacheSetting": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::Model_RepositoryAuthConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"RepositoryCredentialsProviderArn": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::Model_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::Model_VpcConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Subnets": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::SageMaker::ModelBiasJobDefinition_ClusterConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceCount": &Reference{
	type_: Integer,
},
			"InstanceType": &Reference{
	type_: String,
},
			"VolumeKmsKeyId": &Reference{
	type_: String,
},
			"VolumeSizeInGB": &Reference{
	type_: Integer,
},
	},
},
	"AWS::SageMaker::ModelBiasJobDefinition_ConstraintsResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Uri": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_S3Uri",
},
	},
},
	"AWS::SageMaker::ModelBiasJobDefinition_EndpointInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EndTimeOffset": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_MonitoringTimeOffsetString",
},
			"EndpointName": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_EndpointName",
},
			"FeaturesAttribute": &Reference{
	type_: String,
},
			"InferenceAttribute": &Reference{
	type_: String,
},
			"LocalPath": &Reference{
	type_: String,
},
			"ProbabilityAttribute": &Reference{
	type_: String,
},
			"ProbabilityThresholdAttribute": &Reference{
	type_: Number,
},
			"S3DataDistributionType": &Reference{
	type_: String,
},
			"S3InputMode": &Reference{
	type_: String,
},
			"StartTimeOffset": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_MonitoringTimeOffsetString",
},
	},
},
	"AWS::SageMaker::ModelBiasJobDefinition_EndpointName": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelBiasJobDefinition_JobDefinitionName": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelBiasJobDefinition_ModelBiasAppSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConfigUri": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_S3Uri",
},
			"Environment": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"ImageUri": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelBiasJobDefinition_ModelBiasBaselineConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BaseliningJobName": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_ProcessingJobName",
},
			"ConstraintsResource": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_ConstraintsResource",
},
	},
},
	"AWS::SageMaker::ModelBiasJobDefinition_ModelBiasJobInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EndpointInput": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_EndpointInput",
},
			"GroundTruthS3Input": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_MonitoringGroundTruthS3Input",
},
	},
},
	"AWS::SageMaker::ModelBiasJobDefinition_MonitoringGroundTruthS3Input": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Uri": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelBiasJobDefinition_MonitoringOutput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Output": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_S3Output",
},
	},
},
	"AWS::SageMaker::ModelBiasJobDefinition_MonitoringOutputConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KmsKeyId": &Reference{
	type_: String,
},
			"MonitoringOutputs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_MonitoringOutput",
},
},
	},
},
	"AWS::SageMaker::ModelBiasJobDefinition_MonitoringResources": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClusterConfig": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_ClusterConfig",
},
	},
},
	"AWS::SageMaker::ModelBiasJobDefinition_MonitoringTimeOffsetString": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelBiasJobDefinition_NetworkConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EnableInterContainerTrafficEncryption": &Reference{
	type_: Boolean,
},
			"EnableNetworkIsolation": &Reference{
	type_: Boolean,
},
			"VpcConfig": &Reference{
	ref: "AWS::SageMaker::ModelBiasJobDefinition_VpcConfig",
},
	},
},
	"AWS::SageMaker::ModelBiasJobDefinition_ProcessingJobName": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelBiasJobDefinition_S3Output": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LocalPath": &Reference{
	type_: String,
},
			"S3UploadMode": &Reference{
	type_: String,
},
			"S3Uri": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelBiasJobDefinition_S3Uri": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelBiasJobDefinition_StoppingCondition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxRuntimeInSeconds": &Reference{
	type_: Integer,
},
	},
},
	"AWS::SageMaker::ModelBiasJobDefinition_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelBiasJobDefinition_VpcConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Subnets": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::SageMaker::ModelExplainabilityJobDefinition_ClusterConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceCount": &Reference{
	type_: Integer,
},
			"InstanceType": &Reference{
	type_: String,
},
			"VolumeKmsKeyId": &Reference{
	type_: String,
},
			"VolumeSizeInGB": &Reference{
	type_: Integer,
},
	},
},
	"AWS::SageMaker::ModelExplainabilityJobDefinition_ConstraintsResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Uri": &Reference{
	ref: "AWS::SageMaker::ModelExplainabilityJobDefinition_S3Uri",
},
	},
},
	"AWS::SageMaker::ModelExplainabilityJobDefinition_EndpointInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EndpointName": &Reference{
	ref: "AWS::SageMaker::ModelExplainabilityJobDefinition_EndpointName",
},
			"FeaturesAttribute": &Reference{
	type_: String,
},
			"InferenceAttribute": &Reference{
	type_: String,
},
			"LocalPath": &Reference{
	type_: String,
},
			"ProbabilityAttribute": &Reference{
	type_: String,
},
			"S3DataDistributionType": &Reference{
	type_: String,
},
			"S3InputMode": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelExplainabilityJobDefinition_EndpointName": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelExplainabilityJobDefinition_JobDefinitionName": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelExplainabilityJobDefinition_ModelExplainabilityAppSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConfigUri": &Reference{
	ref: "AWS::SageMaker::ModelExplainabilityJobDefinition_S3Uri",
},
			"Environment": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"ImageUri": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelExplainabilityJobDefinition_ModelExplainabilityBaselineConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BaseliningJobName": &Reference{
	ref: "AWS::SageMaker::ModelExplainabilityJobDefinition_ProcessingJobName",
},
			"ConstraintsResource": &Reference{
	ref: "AWS::SageMaker::ModelExplainabilityJobDefinition_ConstraintsResource",
},
	},
},
	"AWS::SageMaker::ModelExplainabilityJobDefinition_ModelExplainabilityJobInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EndpointInput": &Reference{
	ref: "AWS::SageMaker::ModelExplainabilityJobDefinition_EndpointInput",
},
	},
},
	"AWS::SageMaker::ModelExplainabilityJobDefinition_MonitoringOutput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Output": &Reference{
	ref: "AWS::SageMaker::ModelExplainabilityJobDefinition_S3Output",
},
	},
},
	"AWS::SageMaker::ModelExplainabilityJobDefinition_MonitoringOutputConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KmsKeyId": &Reference{
	type_: String,
},
			"MonitoringOutputs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelExplainabilityJobDefinition_MonitoringOutput",
},
},
	},
},
	"AWS::SageMaker::ModelExplainabilityJobDefinition_MonitoringResources": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClusterConfig": &Reference{
	ref: "AWS::SageMaker::ModelExplainabilityJobDefinition_ClusterConfig",
},
	},
},
	"AWS::SageMaker::ModelExplainabilityJobDefinition_MonitoringTimeOffsetString": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelExplainabilityJobDefinition_NetworkConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EnableInterContainerTrafficEncryption": &Reference{
	type_: Boolean,
},
			"EnableNetworkIsolation": &Reference{
	type_: Boolean,
},
			"VpcConfig": &Reference{
	ref: "AWS::SageMaker::ModelExplainabilityJobDefinition_VpcConfig",
},
	},
},
	"AWS::SageMaker::ModelExplainabilityJobDefinition_ProcessingJobName": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelExplainabilityJobDefinition_S3Output": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LocalPath": &Reference{
	type_: String,
},
			"S3UploadMode": &Reference{
	type_: String,
},
			"S3Uri": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelExplainabilityJobDefinition_S3Uri": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelExplainabilityJobDefinition_StoppingCondition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxRuntimeInSeconds": &Reference{
	type_: Integer,
},
	},
},
	"AWS::SageMaker::ModelExplainabilityJobDefinition_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelExplainabilityJobDefinition_VpcConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Subnets": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::SageMaker::ModelPackage_AdditionalInferenceSpecificationDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Containers": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelPackage_ModelPackageContainerDefinition",
},
},
			"Description": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"SupportedContentTypes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelPackage_ContentType",
},
},
			"SupportedRealtimeInferenceInstanceTypes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelPackage_InferenceInstanceType",
},
},
			"SupportedResponseMIMETypes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelPackage_ResponseMIMEType",
},
},
			"SupportedTransformInstanceTypes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelPackage_TransformInstanceType",
},
},
	},
},
	"AWS::SageMaker::ModelPackage_AdditionalInferenceSpecifications": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelPackage_AdditionalInferenceSpecificationDefinition",
},
},
	"AWS::SageMaker::ModelPackage_ApprovalDescription": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelPackage_Bias": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PostTrainingReport": &Reference{
	ref: "AWS::SageMaker::ModelPackage_MetricsSource",
},
			"PreTrainingReport": &Reference{
	ref: "AWS::SageMaker::ModelPackage_MetricsSource",
},
			"Report": &Reference{
	ref: "AWS::SageMaker::ModelPackage_MetricsSource",
},
	},
},
	"AWS::SageMaker::ModelPackage_CertifyForMarketplace": &Reference{
	type_: Boolean,
},
	"AWS::SageMaker::ModelPackage_ClientToken": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelPackage_ContentType": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelPackage_CreatedBy": &Reference{
	ref: "AWS::SageMaker::ModelPackage_UserContext",
},
	"AWS::SageMaker::ModelPackage_CreationTime": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelPackage_CustomerMetadataProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::SageMaker::ModelPackage_DataSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3DataSource": &Reference{
	ref: "AWS::SageMaker::ModelPackage_S3DataSource",
},
	},
},
	"AWS::SageMaker::ModelPackage_Domain": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelPackage_DriftCheckBaselines": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bias": &Reference{
	ref: "AWS::SageMaker::ModelPackage_DriftCheckBias",
},
			"Explainability": &Reference{
	ref: "AWS::SageMaker::ModelPackage_DriftCheckExplainability",
},
			"ModelDataQuality": &Reference{
	ref: "AWS::SageMaker::ModelPackage_DriftCheckModelDataQuality",
},
			"ModelQuality": &Reference{
	ref: "AWS::SageMaker::ModelPackage_DriftCheckModelQuality",
},
	},
},
	"AWS::SageMaker::ModelPackage_DriftCheckBias": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConfigFile": &Reference{
	ref: "AWS::SageMaker::ModelPackage_FileSource",
},
			"PostTrainingConstraints": &Reference{
	ref: "AWS::SageMaker::ModelPackage_MetricsSource",
},
			"PreTrainingConstraints": &Reference{
	ref: "AWS::SageMaker::ModelPackage_MetricsSource",
},
	},
},
	"AWS::SageMaker::ModelPackage_DriftCheckExplainability": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConfigFile": &Reference{
	ref: "AWS::SageMaker::ModelPackage_FileSource",
},
			"Constraints": &Reference{
	ref: "AWS::SageMaker::ModelPackage_MetricsSource",
},
	},
},
	"AWS::SageMaker::ModelPackage_DriftCheckModelDataQuality": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Constraints": &Reference{
	ref: "AWS::SageMaker::ModelPackage_MetricsSource",
},
			"Statistics": &Reference{
	ref: "AWS::SageMaker::ModelPackage_MetricsSource",
},
	},
},
	"AWS::SageMaker::ModelPackage_DriftCheckModelQuality": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Constraints": &Reference{
	ref: "AWS::SageMaker::ModelPackage_MetricsSource",
},
			"Statistics": &Reference{
	ref: "AWS::SageMaker::ModelPackage_MetricsSource",
},
	},
},
	"AWS::SageMaker::ModelPackage_Environment": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::SageMaker::ModelPackage_Explainability": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Report": &Reference{
	ref: "AWS::SageMaker::ModelPackage_MetricsSource",
},
	},
},
	"AWS::SageMaker::ModelPackage_FileSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContentDigest": &Reference{
	type_: String,
},
			"ContentType": &Reference{
	type_: String,
},
			"S3Uri": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelPackage_InferenceInstanceType": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelPackage_InferenceSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Containers": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelPackage_ModelPackageContainerDefinition",
},
},
			"SupportedContentTypes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelPackage_ContentType",
},
},
			"SupportedRealtimeInferenceInstanceTypes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelPackage_InferenceInstanceType",
},
},
			"SupportedResponseMIMETypes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelPackage_ResponseMIMEType",
},
},
			"SupportedTransformInstanceTypes": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelPackage_TransformInstanceType",
},
},
	},
},
	"AWS::SageMaker::ModelPackage_LastModifiedBy": &Reference{
	ref: "AWS::SageMaker::ModelPackage_UserContext",
},
	"AWS::SageMaker::ModelPackage_LastModifiedTime": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelPackage_MetadataProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CommitId": &Reference{
	type_: String,
},
			"GeneratedBy": &Reference{
	type_: String,
},
			"ProjectId": &Reference{
	type_: String,
},
			"Repository": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelPackage_MetricsSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContentDigest": &Reference{
	type_: String,
},
			"ContentType": &Reference{
	type_: String,
},
			"S3Uri": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelPackage_ModelApprovalStatus": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelPackage_ModelDataQuality": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Constraints": &Reference{
	ref: "AWS::SageMaker::ModelPackage_MetricsSource",
},
			"Statistics": &Reference{
	ref: "AWS::SageMaker::ModelPackage_MetricsSource",
},
	},
},
	"AWS::SageMaker::ModelPackage_ModelMetrics": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bias": &Reference{
	ref: "AWS::SageMaker::ModelPackage_Bias",
},
			"Explainability": &Reference{
	ref: "AWS::SageMaker::ModelPackage_Explainability",
},
			"ModelDataQuality": &Reference{
	ref: "AWS::SageMaker::ModelPackage_ModelDataQuality",
},
			"ModelQuality": &Reference{
	ref: "AWS::SageMaker::ModelPackage_ModelQuality",
},
	},
},
	"AWS::SageMaker::ModelPackage_ModelPackageArn": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelPackage_ModelPackageContainerDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerHostname": &Reference{
	type_: String,
},
			"Environment": &Reference{
	ref: "AWS::SageMaker::ModelPackage_Environment",
},
			"Framework": &Reference{
	type_: String,
},
			"FrameworkVersion": &Reference{
	type_: String,
},
			"Image": &Reference{
	type_: String,
},
			"ImageDigest": &Reference{
	type_: String,
},
			"ModelDataUrl": &Reference{
	type_: String,
},
			"ModelInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataInputConfig": &Reference{
	type_: String,
},
	},
},
			"NearestModelName": &Reference{
	type_: String,
},
			"ProductId": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelPackage_ModelPackageDescription": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelPackage_ModelPackageGroupName": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelPackage_ModelPackageName": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelPackage_ModelPackageStatus": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelPackage_ModelPackageStatusDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ImageScanStatuses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelPackage_ModelPackageStatusItem",
},
},
			"ValidationStatuses": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelPackage_ModelPackageStatusItem",
},
},
	},
},
	"AWS::SageMaker::ModelPackage_ModelPackageStatusItem": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FailureReason": &Reference{
	type_: String,
},
			"Name": &Reference{
	type_: String,
},
			"Status": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelPackage_ModelPackageVersion": &Reference{
	type_: Integer,
},
	"AWS::SageMaker::ModelPackage_ModelQuality": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Constraints": &Reference{
	ref: "AWS::SageMaker::ModelPackage_MetricsSource",
},
			"Statistics": &Reference{
	ref: "AWS::SageMaker::ModelPackage_MetricsSource",
},
	},
},
	"AWS::SageMaker::ModelPackage_ResponseMIMEType": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelPackage_S3DataSource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3DataType": &Reference{
	type_: String,
},
			"S3Uri": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelPackage_SamplePayloadUrl": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelPackage_SourceAlgorithm": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AlgorithmName": &Reference{
	type_: String,
},
			"ModelDataUrl": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelPackage_SourceAlgorithmSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SourceAlgorithms": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelPackage_SourceAlgorithm",
},
},
	},
},
	"AWS::SageMaker::ModelPackage_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelPackage_Task": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelPackage_TransformInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CompressionType": &Reference{
	type_: String,
},
			"ContentType": &Reference{
	type_: String,
},
			"DataSource": &Reference{
	ref: "AWS::SageMaker::ModelPackage_DataSource",
},
			"SplitType": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelPackage_TransformInstanceType": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelPackage_TransformJobDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BatchStrategy": &Reference{
	type_: String,
},
			"Environment": &Reference{
	ref: "AWS::SageMaker::ModelPackage_Environment",
},
			"MaxConcurrentTransforms": &Reference{
	type_: Integer,
},
			"MaxPayloadInMB": &Reference{
	type_: Integer,
},
			"TransformInput": &Reference{
	ref: "AWS::SageMaker::ModelPackage_TransformInput",
},
			"TransformOutput": &Reference{
	ref: "AWS::SageMaker::ModelPackage_TransformOutput",
},
			"TransformResources": &Reference{
	ref: "AWS::SageMaker::ModelPackage_TransformResources",
},
	},
},
	"AWS::SageMaker::ModelPackage_TransformOutput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Accept": &Reference{
	type_: String,
},
			"AssembleWith": &Reference{
	type_: String,
},
			"KmsKeyId": &Reference{
	type_: String,
},
			"S3OutputPath": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelPackage_TransformResources": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceCount": &Reference{
	type_: Integer,
},
			"InstanceType": &Reference{
	type_: String,
},
			"VolumeKmsKeyId": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelPackage_UserContext": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DomainId": &Reference{
	type_: String,
},
			"UserProfileArn": &Reference{
	type_: String,
},
			"UserProfileName": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelPackage_ValidationProfile": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ProfileName": &Reference{
	type_: String,
},
			"TransformJobDefinition": &Reference{
	ref: "AWS::SageMaker::ModelPackage_TransformJobDefinition",
},
	},
},
	"AWS::SageMaker::ModelPackage_ValidationSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ValidationProfiles": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelPackage_ValidationProfile",
},
},
			"ValidationRole": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelPackageGroup_ModelPackageGroupArn": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelPackageGroup_ModelPackageGroupDescription": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelPackageGroup_ModelPackageGroupName": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelPackageGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelQualityJobDefinition_ClusterConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceCount": &Reference{
	type_: Integer,
},
			"InstanceType": &Reference{
	type_: String,
},
			"VolumeKmsKeyId": &Reference{
	type_: String,
},
			"VolumeSizeInGB": &Reference{
	type_: Integer,
},
	},
},
	"AWS::SageMaker::ModelQualityJobDefinition_ConstraintsResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Uri": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_S3Uri",
},
	},
},
	"AWS::SageMaker::ModelQualityJobDefinition_EndpointInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EndTimeOffset": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_MonitoringTimeOffsetString",
},
			"EndpointName": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_EndpointName",
},
			"InferenceAttribute": &Reference{
	type_: String,
},
			"LocalPath": &Reference{
	type_: String,
},
			"ProbabilityAttribute": &Reference{
	type_: String,
},
			"ProbabilityThresholdAttribute": &Reference{
	type_: Number,
},
			"S3DataDistributionType": &Reference{
	type_: String,
},
			"S3InputMode": &Reference{
	type_: String,
},
			"StartTimeOffset": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_MonitoringTimeOffsetString",
},
	},
},
	"AWS::SageMaker::ModelQualityJobDefinition_EndpointName": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelQualityJobDefinition_JobDefinitionName": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelQualityJobDefinition_ModelQualityAppSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerArguments": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ContainerEntrypoint": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Environment": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"ImageUri": &Reference{
	type_: String,
},
			"PostAnalyticsProcessorSourceUri": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_S3Uri",
},
			"ProblemType": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_ProblemType",
},
			"RecordPreprocessorSourceUri": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_S3Uri",
},
	},
},
	"AWS::SageMaker::ModelQualityJobDefinition_ModelQualityBaselineConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BaseliningJobName": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_ProcessingJobName",
},
			"ConstraintsResource": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_ConstraintsResource",
},
	},
},
	"AWS::SageMaker::ModelQualityJobDefinition_ModelQualityJobInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EndpointInput": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_EndpointInput",
},
			"GroundTruthS3Input": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_MonitoringGroundTruthS3Input",
},
	},
},
	"AWS::SageMaker::ModelQualityJobDefinition_MonitoringGroundTruthS3Input": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Uri": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelQualityJobDefinition_MonitoringOutput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Output": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_S3Output",
},
	},
},
	"AWS::SageMaker::ModelQualityJobDefinition_MonitoringOutputConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KmsKeyId": &Reference{
	type_: String,
},
			"MonitoringOutputs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_MonitoringOutput",
},
},
	},
},
	"AWS::SageMaker::ModelQualityJobDefinition_MonitoringResources": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClusterConfig": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_ClusterConfig",
},
	},
},
	"AWS::SageMaker::ModelQualityJobDefinition_MonitoringTimeOffsetString": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelQualityJobDefinition_NetworkConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EnableInterContainerTrafficEncryption": &Reference{
	type_: Boolean,
},
			"EnableNetworkIsolation": &Reference{
	type_: Boolean,
},
			"VpcConfig": &Reference{
	ref: "AWS::SageMaker::ModelQualityJobDefinition_VpcConfig",
},
	},
},
	"AWS::SageMaker::ModelQualityJobDefinition_ProblemType": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelQualityJobDefinition_ProcessingJobName": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelQualityJobDefinition_S3Output": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LocalPath": &Reference{
	type_: String,
},
			"S3UploadMode": &Reference{
	type_: String,
},
			"S3Uri": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelQualityJobDefinition_S3Uri": &Reference{
	type_: String,
},
	"AWS::SageMaker::ModelQualityJobDefinition_StoppingCondition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxRuntimeInSeconds": &Reference{
	type_: Integer,
},
	},
},
	"AWS::SageMaker::ModelQualityJobDefinition_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::ModelQualityJobDefinition_VpcConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Subnets": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::SageMaker::MonitoringSchedule_BaselineConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ConstraintsResource": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_ConstraintsResource",
},
			"StatisticsResource": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_StatisticsResource",
},
	},
},
	"AWS::SageMaker::MonitoringSchedule_ClusterConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceCount": &Reference{
	type_: Integer,
},
			"InstanceType": &Reference{
	type_: String,
},
			"VolumeKmsKeyId": &Reference{
	type_: String,
},
			"VolumeSizeInGB": &Reference{
	type_: Integer,
},
	},
},
	"AWS::SageMaker::MonitoringSchedule_ConstraintsResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Uri": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_S3Uri",
},
	},
},
	"AWS::SageMaker::MonitoringSchedule_ContainerArgument": &Reference{
	type_: String,
},
	"AWS::SageMaker::MonitoringSchedule_EndpointInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EndpointName": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_EndpointName",
},
			"LocalPath": &Reference{
	type_: String,
},
			"S3DataDistributionType": &Reference{
	type_: String,
},
			"S3InputMode": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::MonitoringSchedule_EndpointName": &Reference{
	type_: String,
},
	"AWS::SageMaker::MonitoringSchedule_MonitoringAppSpecification": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ContainerArguments": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_ContainerArgument",
},
},
			"ContainerEntrypoint": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ImageUri": &Reference{
	type_: String,
},
			"PostAnalyticsProcessorSourceUri": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_S3Uri",
},
			"RecordPreprocessorSourceUri": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_S3Uri",
},
	},
},
	"AWS::SageMaker::MonitoringSchedule_MonitoringExecutionSummary": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CreationTime": &Reference{
	type_: String,
},
			"EndpointName": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_EndpointName",
},
			"FailureReason": &Reference{
	type_: String,
},
			"LastModifiedTime": &Reference{
	type_: String,
},
			"MonitoringExecutionStatus": &Reference{
	type_: String,
},
			"MonitoringScheduleName": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_MonitoringScheduleName",
},
			"ProcessingJobArn": &Reference{
	type_: String,
},
			"ScheduledTime": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::MonitoringSchedule_MonitoringInput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EndpointInput": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_EndpointInput",
},
	},
},
	"AWS::SageMaker::MonitoringSchedule_MonitoringInputs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_MonitoringInput",
},
},
	"AWS::SageMaker::MonitoringSchedule_MonitoringJobDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BaselineConfig": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_BaselineConfig",
},
			"Environment": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"MonitoringAppSpecification": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_MonitoringAppSpecification",
},
			"MonitoringInputs": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_MonitoringInputs",
},
			"MonitoringOutputConfig": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_MonitoringOutputConfig",
},
			"MonitoringResources": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_MonitoringResources",
},
			"NetworkConfig": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_NetworkConfig",
},
			"RoleArn": &Reference{
	type_: String,
},
			"StoppingCondition": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_StoppingCondition",
},
	},
},
	"AWS::SageMaker::MonitoringSchedule_MonitoringOutput": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Output": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_S3Output",
},
	},
},
	"AWS::SageMaker::MonitoringSchedule_MonitoringOutputConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KmsKeyId": &Reference{
	type_: String,
},
			"MonitoringOutputs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_MonitoringOutput",
},
},
	},
},
	"AWS::SageMaker::MonitoringSchedule_MonitoringResources": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClusterConfig": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_ClusterConfig",
},
	},
},
	"AWS::SageMaker::MonitoringSchedule_MonitoringScheduleConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MonitoringJobDefinition": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_MonitoringJobDefinition",
},
			"MonitoringJobDefinitionName": &Reference{
	type_: String,
},
			"MonitoringType": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_MonitoringType",
},
			"ScheduleConfig": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_ScheduleConfig",
},
	},
},
	"AWS::SageMaker::MonitoringSchedule_MonitoringScheduleName": &Reference{
	type_: String,
},
	"AWS::SageMaker::MonitoringSchedule_MonitoringType": &Reference{
	type_: String,
},
	"AWS::SageMaker::MonitoringSchedule_NetworkConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EnableInterContainerTrafficEncryption": &Reference{
	type_: Boolean,
},
			"EnableNetworkIsolation": &Reference{
	type_: Boolean,
},
			"VpcConfig": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_VpcConfig",
},
	},
},
	"AWS::SageMaker::MonitoringSchedule_S3Output": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LocalPath": &Reference{
	type_: String,
},
			"S3UploadMode": &Reference{
	type_: String,
},
			"S3Uri": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::MonitoringSchedule_S3Uri": &Reference{
	type_: String,
},
	"AWS::SageMaker::MonitoringSchedule_ScheduleConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ScheduleExpression": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::MonitoringSchedule_StatisticsResource": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Uri": &Reference{
	ref: "AWS::SageMaker::MonitoringSchedule_S3Uri",
},
	},
},
	"AWS::SageMaker::MonitoringSchedule_StoppingCondition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MaxRuntimeInSeconds": &Reference{
	type_: Integer,
},
	},
},
	"AWS::SageMaker::MonitoringSchedule_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::MonitoringSchedule_VpcConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"Subnets": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::SageMaker::NotebookInstance_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::NotebookInstanceLifecycleConfig_NotebookInstanceLifecycleHook": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Content": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::Pipeline_S3Location": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"ETag": &Reference{
	type_: String,
},
			"Key": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::Pipeline_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::Project_PathId": &Reference{
	type_: String,
},
	"AWS::SageMaker::Project_ProductId": &Reference{
	type_: String,
},
	"AWS::SageMaker::Project_ProjectArn": &Reference{
	type_: String,
},
	"AWS::SageMaker::Project_ProjectDescription": &Reference{
	type_: String,
},
	"AWS::SageMaker::Project_ProjectId": &Reference{
	type_: String,
},
	"AWS::SageMaker::Project_ProjectName": &Reference{
	type_: String,
},
	"AWS::SageMaker::Project_ProvisionedProductStatusMessage": &Reference{
	type_: String,
},
	"AWS::SageMaker::Project_ProvisioningArtifactId": &Reference{
	type_: String,
},
	"AWS::SageMaker::Project_ProvisioningParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::Project_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::UserProfile_CustomImage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AppImageConfigName": &Reference{
	type_: String,
},
			"ImageName": &Reference{
	type_: String,
},
			"ImageVersionNumber": &Reference{
	type_: Integer,
},
	},
},
	"AWS::SageMaker::UserProfile_JupyterServerAppSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DefaultResourceSpec": &Reference{
	ref: "AWS::SageMaker::UserProfile_ResourceSpec",
},
	},
},
	"AWS::SageMaker::UserProfile_KernelGatewayAppSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomImages": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::SageMaker::UserProfile_CustomImage",
},
},
			"DefaultResourceSpec": &Reference{
	ref: "AWS::SageMaker::UserProfile_ResourceSpec",
},
	},
},
	"AWS::SageMaker::UserProfile_RStudioServerProAppSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AccessStatus": &Reference{
	type_: String,
},
			"UserGroup": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::UserProfile_ResourceSpec": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InstanceType": &Reference{
	type_: String,
},
			"SageMakerImageArn": &Reference{
	type_: String,
},
			"SageMakerImageVersionArn": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::UserProfile_SharingSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NotebookOutputOption": &Reference{
	type_: String,
},
			"S3KmsKeyId": &Reference{
	type_: String,
},
			"S3OutputPath": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::UserProfile_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::UserProfile_UserSettings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExecutionRole": &Reference{
	type_: String,
},
			"JupyterServerAppSettings": &Reference{
	ref: "AWS::SageMaker::UserProfile_JupyterServerAppSettings",
},
			"KernelGatewayAppSettings": &Reference{
	ref: "AWS::SageMaker::UserProfile_KernelGatewayAppSettings",
},
			"RStudioServerProAppSettings": &Reference{
	ref: "AWS::SageMaker::UserProfile_RStudioServerProAppSettings",
},
			"SecurityGroups": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SharingSettings": &Reference{
	ref: "AWS::SageMaker::UserProfile_SharingSettings",
},
	},
},
	"AWS::SageMaker::Workteam_CognitoMemberDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CognitoClientId": &Reference{
	type_: String,
},
			"CognitoUserGroup": &Reference{
	type_: String,
},
			"CognitoUserPool": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::Workteam_MemberDefinition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CognitoMemberDefinition": &Reference{
	ref: "AWS::SageMaker::Workteam_CognitoMemberDefinition",
},
	},
},
	"AWS::SageMaker::Workteam_NotificationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"NotificationTopicArn": &Reference{
	type_: String,
},
	},
},
	"AWS::SageMaker::Workteam_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::SecretsManager::RotationSchedule_HostedRotationLambda": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExcludeCharacters": &Reference{
	type_: String,
},
			"KmsKeyArn": &Reference{
	type_: String,
},
			"MasterSecretArn": &Reference{
	type_: String,
},
			"MasterSecretKmsKeyArn": &Reference{
	type_: String,
},
			"RotationLambdaName": &Reference{
	type_: String,
},
			"RotationType": &Reference{
	type_: String,
},
			"SuperuserSecretArn": &Reference{
	type_: String,
},
			"SuperuserSecretKmsKeyArn": &Reference{
	type_: String,
},
			"VpcSecurityGroupIds": &Reference{
	type_: String,
},
			"VpcSubnetIds": &Reference{
	type_: String,
},
	},
},
	"AWS::SecretsManager::RotationSchedule_RotationRules": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AutomaticallyAfterDays": &Reference{
	type_: Integer,
},
			"Duration": &Reference{
	type_: String,
},
			"ScheduleExpression": &Reference{
	type_: String,
},
	},
},
	"AWS::SecretsManager::Secret_GenerateSecretString": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExcludeCharacters": &Reference{
	type_: String,
},
			"ExcludeLowercase": &Reference{
	type_: Boolean,
},
			"ExcludeNumbers": &Reference{
	type_: Boolean,
},
			"ExcludePunctuation": &Reference{
	type_: Boolean,
},
			"ExcludeUppercase": &Reference{
	type_: Boolean,
},
			"GenerateStringKey": &Reference{
	type_: String,
},
			"IncludeSpace": &Reference{
	type_: Boolean,
},
			"PasswordLength": &Reference{
	type_: Integer,
},
			"RequireEachIncludedType": &Reference{
	type_: Boolean,
},
			"SecretStringTemplate": &Reference{
	type_: String,
},
	},
},
	"AWS::SecretsManager::Secret_ReplicaRegion": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"KmsKeyId": &Reference{
	type_: String,
},
			"Region": &Reference{
	type_: String,
},
	},
},
	"AWS::SecretsManager::Secret_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ServiceCatalog::CloudFormationProduct_ProvisioningArtifactProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Description": &Reference{
	type_: String,
},
			"DisableTemplateValidation": &Reference{
	type_: Boolean,
},
			"Info": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::ServiceCatalog::CloudFormationProduct_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ServiceCatalog::CloudFormationProvisionedProduct_OutputType": &Reference{
	type_: String,
},
	"AWS::ServiceCatalog::CloudFormationProvisionedProduct_ProvisioningParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ServiceCatalog::CloudFormationProvisionedProduct_ProvisioningPreferences": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"StackSetAccounts": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"StackSetFailureToleranceCount": &Reference{
	type_: Integer,
},
			"StackSetFailureTolerancePercentage": &Reference{
	type_: Integer,
},
			"StackSetMaxConcurrencyCount": &Reference{
	type_: Integer,
},
			"StackSetMaxConcurrencyPercentage": &Reference{
	type_: Integer,
},
			"StackSetOperationType": &Reference{
	type_: String,
},
			"StackSetRegions": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::ServiceCatalog::CloudFormationProvisionedProduct_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ServiceCatalog::Portfolio_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ServiceCatalog::ServiceAction_DefinitionParameter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ServiceCatalogAppRegistry::Application_Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::ServiceCatalogAppRegistry::AttributeGroup_Tags": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::ServiceDiscovery::HttpNamespace_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ServiceDiscovery::PrivateDnsNamespace_PrivateDnsPropertiesMutable": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SOA": &Reference{
	ref: "AWS::ServiceDiscovery::PrivateDnsNamespace_SOA",
},
	},
},
	"AWS::ServiceDiscovery::PrivateDnsNamespace_Properties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DnsProperties": &Reference{
	ref: "AWS::ServiceDiscovery::PrivateDnsNamespace_PrivateDnsPropertiesMutable",
},
	},
},
	"AWS::ServiceDiscovery::PrivateDnsNamespace_SOA": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TTL": &Reference{
	type_: Number,
},
	},
},
	"AWS::ServiceDiscovery::PrivateDnsNamespace_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ServiceDiscovery::PublicDnsNamespace_Properties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DnsProperties": &Reference{
	ref: "AWS::ServiceDiscovery::PublicDnsNamespace_PublicDnsPropertiesMutable",
},
	},
},
	"AWS::ServiceDiscovery::PublicDnsNamespace_PublicDnsPropertiesMutable": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SOA": &Reference{
	ref: "AWS::ServiceDiscovery::PublicDnsNamespace_SOA",
},
	},
},
	"AWS::ServiceDiscovery::PublicDnsNamespace_SOA": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TTL": &Reference{
	type_: Number,
},
	},
},
	"AWS::ServiceDiscovery::PublicDnsNamespace_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::ServiceDiscovery::Service_DnsConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DnsRecords": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::ServiceDiscovery::Service_DnsRecord",
},
},
			"NamespaceId": &Reference{
	type_: String,
},
			"RoutingPolicy": &Reference{
	type_: String,
},
	},
},
	"AWS::ServiceDiscovery::Service_DnsRecord": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TTL": &Reference{
	type_: Number,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::ServiceDiscovery::Service_HealthCheckConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FailureThreshold": &Reference{
	type_: Number,
},
			"ResourcePath": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::ServiceDiscovery::Service_HealthCheckCustomConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FailureThreshold": &Reference{
	type_: Number,
},
	},
},
	"AWS::ServiceDiscovery::Service_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Signer::SigningProfile_Arn": &Reference{
	type_: String,
},
	"AWS::Signer::SigningProfile_PlatformId": &Reference{
	type_: String,
},
	"AWS::Signer::SigningProfile_ProfileVersion": &Reference{
	type_: String,
},
	"AWS::Signer::SigningProfile_SignatureValidityPeriod": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Signer::SigningProfile_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::StepFunctions::Activity_TagsEntry": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::StepFunctions::StateMachine_CloudWatchLogsLogGroup": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LogGroupArn": &Reference{
	type_: String,
},
	},
},
	"AWS::StepFunctions::StateMachine_Definition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::StepFunctions::StateMachine_DefinitionSubstitutions": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::StepFunctions::StateMachine_LogDestination": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchLogsLogGroup": &Reference{
	ref: "AWS::StepFunctions::StateMachine_CloudWatchLogsLogGroup",
},
	},
},
	"AWS::StepFunctions::StateMachine_LoggingConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Destinations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::StepFunctions::StateMachine_LogDestination",
},
},
			"IncludeExecutionData": &Reference{
	type_: Boolean,
},
			"Level": &Reference{
	type_: String,
},
	},
},
	"AWS::StepFunctions::StateMachine_S3Location": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"Key": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::StepFunctions::StateMachine_TagsEntry": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::StepFunctions::StateMachine_TracingConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Enabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::Synthetics::Canary_ArtifactConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Encryption": &Reference{
	ref: "AWS::Synthetics::Canary_S3Encryption",
},
	},
},
	"AWS::Synthetics::Canary_BaseScreenshot": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"IgnoreCoordinates": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ScreenshotName": &Reference{
	type_: String,
},
	},
},
	"AWS::Synthetics::Canary_Code": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Handler": &Reference{
	type_: String,
},
			"S3Bucket": &Reference{
	type_: String,
},
			"S3Key": &Reference{
	type_: String,
},
			"S3ObjectVersion": &Reference{
	type_: String,
},
			"Script": &Reference{
	type_: String,
},
	},
},
	"AWS::Synthetics::Canary_RunConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ActiveTracing": &Reference{
	type_: Boolean,
},
			"EnvironmentVariables": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"MemoryInMB": &Reference{
	type_: Integer,
},
			"TimeoutInSeconds": &Reference{
	type_: Integer,
},
	},
},
	"AWS::Synthetics::Canary_S3Encryption": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"EncryptionMode": &Reference{
	type_: String,
},
			"KmsKeyArn": &Reference{
	type_: String,
},
	},
},
	"AWS::Synthetics::Canary_Schedule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DurationInSeconds": &Reference{
	type_: String,
},
			"Expression": &Reference{
	type_: String,
},
	},
},
	"AWS::Synthetics::Canary_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Synthetics::Canary_VPCConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"VpcId": &Reference{
	type_: String,
},
	},
},
	"AWS::Synthetics::Canary_VisualReference": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BaseCanaryRunId": &Reference{
	type_: String,
},
			"BaseScreenshots": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Synthetics::Canary_BaseScreenshot",
},
},
	},
},
	"AWS::Timestream::Database_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Timestream::ScheduledQuery_Arn": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_BucketName": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_ClientToken": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_DatabaseName": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_DimensionMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DimensionValueType": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_DimensionValueType",
},
			"Name": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_DimensionMappingName",
},
	},
},
	"AWS::Timestream::ScheduledQuery_DimensionMappingName": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_DimensionMappings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Timestream::ScheduledQuery_DimensionMapping",
},
},
	"AWS::Timestream::ScheduledQuery_DimensionValueType": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_EncryptionOption": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_ErrorReportConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3Configuration": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_S3Configuration",
},
	},
},
	"AWS::Timestream::ScheduledQuery_Key": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_KmsKeyId": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_MeasureNameColumn": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_MixedMeasureMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MeasureName": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_MixedMeasureMappingMeasureName",
},
			"MeasureValueType": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_MixedMeasureMappingMeasureValueType",
},
			"MultiMeasureAttributeMappings": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_MultiMeasureAttributeMappingList",
},
			"SourceColumn": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_MixedMeasureMappingSourceColumn",
},
			"TargetMeasureName": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_MixedMeasureMappingTargetMeasureName",
},
	},
},
	"AWS::Timestream::ScheduledQuery_MixedMeasureMappingMeasureName": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_MixedMeasureMappingMeasureValueType": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_MixedMeasureMappingSourceColumn": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_MixedMeasureMappingTargetMeasureName": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_MixedMeasureMappings": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Timestream::ScheduledQuery_MixedMeasureMapping",
},
},
	"AWS::Timestream::ScheduledQuery_MultiMeasureAttributeMapping": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MeasureValueType": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_MultiMeasureAttributeMappingMeasureValueType",
},
			"SourceColumn": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_MultiMeasureAttributeMappingSourceColumn",
},
			"TargetMultiMeasureAttributeName": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_TargetMultiMeasureAttributeName",
},
	},
},
	"AWS::Timestream::ScheduledQuery_MultiMeasureAttributeMappingList": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Timestream::ScheduledQuery_MultiMeasureAttributeMapping",
},
},
	"AWS::Timestream::ScheduledQuery_MultiMeasureAttributeMappingMeasureValueType": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_MultiMeasureAttributeMappingSourceColumn": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_MultiMeasureMappings": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MultiMeasureAttributeMappings": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_MultiMeasureAttributeMappingList",
},
			"TargetMultiMeasureName": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_TargetMultiMeasureName",
},
	},
},
	"AWS::Timestream::ScheduledQuery_NotificationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"SnsConfiguration": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_SnsConfiguration",
},
	},
},
	"AWS::Timestream::ScheduledQuery_ObjectKeyPrefix": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_QueryString": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_S3Configuration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"BucketName": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_BucketName",
},
			"EncryptionOption": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_EncryptionOption",
},
			"ObjectKeyPrefix": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_ObjectKeyPrefix",
},
	},
},
	"AWS::Timestream::ScheduledQuery_ScheduleConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ScheduleExpression": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_ScheduleExpression",
},
	},
},
	"AWS::Timestream::ScheduledQuery_ScheduleExpression": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_ScheduledQueryExecutionRoleArn": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_ScheduledQueryName": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_SnsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TopicArn": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_TopicArn",
},
	},
},
	"AWS::Timestream::ScheduledQuery_TableName": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_Key",
},
			"Value": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_Value",
},
	},
},
	"AWS::Timestream::ScheduledQuery_Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Timestream::ScheduledQuery_Tag",
},
},
	"AWS::Timestream::ScheduledQuery_TargetConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"TimestreamConfiguration": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_TimestreamConfiguration",
},
	},
},
	"AWS::Timestream::ScheduledQuery_TargetMultiMeasureAttributeName": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_TargetMultiMeasureName": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_TimeColumn": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_TimestreamConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DatabaseName": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_DatabaseName",
},
			"DimensionMappings": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_DimensionMappings",
},
			"MeasureNameColumn": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_MeasureNameColumn",
},
			"MixedMeasureMappings": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_MixedMeasureMappings",
},
			"MultiMeasureMappings": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_MultiMeasureMappings",
},
			"TableName": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_TableName",
},
			"TimeColumn": &Reference{
	ref: "AWS::Timestream::ScheduledQuery_TimeColumn",
},
	},
},
	"AWS::Timestream::ScheduledQuery_TopicArn": &Reference{
	type_: String,
},
	"AWS::Timestream::ScheduledQuery_Value": &Reference{
	type_: String,
},
	"AWS::Timestream::Table_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Transfer::Server_EndpointDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AddressAllocationIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SecurityGroupIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"SubnetIds": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"VpcEndpointId": &Reference{
	type_: String,
},
			"VpcId": &Reference{
	type_: String,
},
	},
},
	"AWS::Transfer::Server_IdentityProviderDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DirectoryId": &Reference{
	type_: String,
},
			"Function": &Reference{
	type_: String,
},
			"InvocationRole": &Reference{
	type_: String,
},
			"Url": &Reference{
	type_: String,
},
	},
},
	"AWS::Transfer::Server_Protocol": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::Transfer::Server_ProtocolDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"PassiveIp": &Reference{
	type_: String,
},
			"SetStatOption": &Reference{
	type_: String,
},
			"TlsSessionResumptionMode": &Reference{
	type_: String,
},
	},
},
	"AWS::Transfer::Server_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Transfer::Server_WorkflowDetail": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExecutionRole": &Reference{
	type_: String,
},
			"WorkflowId": &Reference{
	type_: String,
},
	},
},
	"AWS::Transfer::Server_WorkflowDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OnUpload": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Transfer::Server_WorkflowDetail",
},
},
	},
},
	"AWS::Transfer::User_HomeDirectoryMapEntry": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Entry": &Reference{
	type_: String,
},
			"Target": &Reference{
	type_: String,
},
	},
},
	"AWS::Transfer::User_PosixProfile": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Gid": &Reference{
	type_: Number,
},
			"SecondaryGids": &Reference{
	type_: Array,
	items: &Reference{
	type_: Number,
},
},
			"Uid": &Reference{
	type_: Number,
},
	},
},
	"AWS::Transfer::User_SshPublicKey": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::Transfer::User_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Transfer::Workflow_InputFileLocation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"S3FileLocation": &Reference{
	ref: "AWS::Transfer::Workflow_S3InputFileLocation",
},
	},
},
	"AWS::Transfer::Workflow_S3InputFileLocation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Bucket": &Reference{
	type_: String,
},
			"Key": &Reference{
	type_: String,
},
	},
},
	"AWS::Transfer::Workflow_S3Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Transfer::Workflow_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::Transfer::Workflow_WorkflowStep": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CopyStepDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DestinationFileLocation": &Reference{
	ref: "AWS::Transfer::Workflow_InputFileLocation",
},
			"Name": &Reference{
	type_: String,
},
			"OverwriteExisting": &Reference{
	type_: String,
},
			"SourceFileLocation": &Reference{
	type_: String,
},
	},
},
			"CustomStepDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"SourceFileLocation": &Reference{
	type_: String,
},
			"Target": &Reference{
	type_: String,
},
			"TimeoutSeconds": &Reference{
	type_: Integer,
},
	},
},
			"DeleteStepDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"SourceFileLocation": &Reference{
	type_: String,
},
	},
},
			"TagStepDetails": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
			"SourceFileLocation": &Reference{
	type_: String,
},
			"Tags": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::Transfer::Workflow_S3Tag",
},
},
	},
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::WAF::ByteMatchSet_ByteMatchTuple": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FieldToMatch": &Reference{
	ref: "AWS::WAF::ByteMatchSet_FieldToMatch",
},
			"PositionalConstraint": &Reference{
	type_: String,
},
			"TargetString": &Reference{
	type_: String,
},
			"TargetStringBase64": &Reference{
	type_: String,
},
			"TextTransformation": &Reference{
	type_: String,
},
	},
},
	"AWS::WAF::ByteMatchSet_FieldToMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Data": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::WAF::IPSet_IPSetDescriptor": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::WAF::Rule_Predicate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataId": &Reference{
	type_: String,
},
			"Negated": &Reference{
	type_: Boolean,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::WAF::SizeConstraintSet_FieldToMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Data": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::WAF::SizeConstraintSet_SizeConstraint": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComparisonOperator": &Reference{
	type_: String,
},
			"FieldToMatch": &Reference{
	ref: "AWS::WAF::SizeConstraintSet_FieldToMatch",
},
			"Size": &Reference{
	type_: Integer,
},
			"TextTransformation": &Reference{
	type_: String,
},
	},
},
	"AWS::WAF::SqlInjectionMatchSet_FieldToMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Data": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::WAF::SqlInjectionMatchSet_SqlInjectionMatchTuple": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FieldToMatch": &Reference{
	ref: "AWS::WAF::SqlInjectionMatchSet_FieldToMatch",
},
			"TextTransformation": &Reference{
	type_: String,
},
	},
},
	"AWS::WAF::WebACL_ActivatedRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	ref: "AWS::WAF::WebACL_WafAction",
},
			"Priority": &Reference{
	type_: Integer,
},
			"RuleId": &Reference{
	type_: String,
},
	},
},
	"AWS::WAF::WebACL_WafAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::WAF::XssMatchSet_FieldToMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Data": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::WAF::XssMatchSet_XssMatchTuple": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FieldToMatch": &Reference{
	ref: "AWS::WAF::XssMatchSet_FieldToMatch",
},
			"TextTransformation": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFRegional::ByteMatchSet_ByteMatchTuple": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FieldToMatch": &Reference{
	ref: "AWS::WAFRegional::ByteMatchSet_FieldToMatch",
},
			"PositionalConstraint": &Reference{
	type_: String,
},
			"TargetString": &Reference{
	type_: String,
},
			"TargetStringBase64": &Reference{
	type_: String,
},
			"TextTransformation": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFRegional::ByteMatchSet_FieldToMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Data": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFRegional::GeoMatchSet_GeoMatchConstraint": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFRegional::IPSet_IPSetDescriptor": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFRegional::RateBasedRule_Predicate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataId": &Reference{
	type_: String,
},
			"Negated": &Reference{
	type_: Boolean,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFRegional::Rule_Predicate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"DataId": &Reference{
	type_: String,
},
			"Negated": &Reference{
	type_: Boolean,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFRegional::SizeConstraintSet_FieldToMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Data": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFRegional::SizeConstraintSet_SizeConstraint": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComparisonOperator": &Reference{
	type_: String,
},
			"FieldToMatch": &Reference{
	ref: "AWS::WAFRegional::SizeConstraintSet_FieldToMatch",
},
			"Size": &Reference{
	type_: Integer,
},
			"TextTransformation": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFRegional::SqlInjectionMatchSet_FieldToMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Data": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFRegional::SqlInjectionMatchSet_SqlInjectionMatchTuple": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FieldToMatch": &Reference{
	ref: "AWS::WAFRegional::SqlInjectionMatchSet_FieldToMatch",
},
			"TextTransformation": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFRegional::WebACL_Action": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFRegional::WebACL_Rule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	ref: "AWS::WAFRegional::WebACL_Action",
},
			"Priority": &Reference{
	type_: Integer,
},
			"RuleId": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFRegional::XssMatchSet_FieldToMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Data": &Reference{
	type_: String,
},
			"Type": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFRegional::XssMatchSet_XssMatchTuple": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FieldToMatch": &Reference{
	ref: "AWS::WAFRegional::XssMatchSet_FieldToMatch",
},
			"TextTransformation": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFv2::IPSet_EntityDescription": &Reference{
	type_: String,
},
	"AWS::WAFv2::IPSet_EntityId": &Reference{
	type_: String,
},
	"AWS::WAFv2::IPSet_EntityName": &Reference{
	type_: String,
},
	"AWS::WAFv2::IPSet_IPAddress": &Reference{
	type_: String,
},
	"AWS::WAFv2::IPSet_IPAddressVersion": &Reference{
	type_: String,
},
	"AWS::WAFv2::IPSet_ResourceArn": &Reference{
	type_: String,
},
	"AWS::WAFv2::IPSet_Scope": &Reference{
	type_: String,
},
	"AWS::WAFv2::IPSet_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFv2::LoggingConfiguration_Condition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ActionCondition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	type_: String,
},
	},
},
			"LabelNameCondition": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LabelName": &Reference{
	type_: String,
},
	},
},
	},
},
	"AWS::WAFv2::LoggingConfiguration_FieldToMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"JsonBody": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InvalidFallbackBehavior": &Reference{
	type_: String,
},
			"MatchPattern": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"All": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"IncludedPaths": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
			"MatchScope": &Reference{
	type_: String,
},
	},
},
			"Method": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"QueryString": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"SingleHeader": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
	},
},
			"UriPath": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::WAFv2::LoggingConfiguration_Filter": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Behavior": &Reference{
	type_: String,
},
			"Conditions": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::LoggingConfiguration_Condition",
},
},
			"Requirement": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFv2::RegexPatternSet_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFv2::RuleGroup_AndStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Statements": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::RuleGroup_Statement",
},
},
	},
},
	"AWS::WAFv2::RuleGroup_Body": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OversizeHandling": &Reference{
	ref: "AWS::WAFv2::RuleGroup_OversizeHandling",
},
	},
},
	"AWS::WAFv2::RuleGroup_BodyParsingFallbackBehavior": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_ByteMatchStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FieldToMatch": &Reference{
	ref: "AWS::WAFv2::RuleGroup_FieldToMatch",
},
			"PositionalConstraint": &Reference{
	ref: "AWS::WAFv2::RuleGroup_PositionalConstraint",
},
			"SearchString": &Reference{
	ref: "AWS::WAFv2::RuleGroup_SearchString",
},
			"SearchStringBase64": &Reference{
	ref: "AWS::WAFv2::RuleGroup_SearchStringBase64",
},
			"TextTransformations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::RuleGroup_TextTransformation",
},
},
	},
},
	"AWS::WAFv2::RuleGroup_CaptchaConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ImmunityTimeProperty": &Reference{
	ref: "AWS::WAFv2::RuleGroup_ImmunityTimeProperty",
},
	},
},
	"AWS::WAFv2::RuleGroup_CookieMatchPattern": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"All": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"ExcludedCookies": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"IncludedCookies": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::WAFv2::RuleGroup_Cookies": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MatchPattern": &Reference{
	ref: "AWS::WAFv2::RuleGroup_CookieMatchPattern",
},
			"MatchScope": &Reference{
	ref: "AWS::WAFv2::RuleGroup_MapMatchScope",
},
			"OversizeHandling": &Reference{
	ref: "AWS::WAFv2::RuleGroup_OversizeHandling",
},
	},
},
	"AWS::WAFv2::RuleGroup_CustomHTTPHeader": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	ref: "AWS::WAFv2::RuleGroup_CustomHTTPHeaderName",
},
			"Value": &Reference{
	ref: "AWS::WAFv2::RuleGroup_CustomHTTPHeaderValue",
},
	},
},
	"AWS::WAFv2::RuleGroup_CustomHTTPHeaderName": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_CustomHTTPHeaderValue": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_CustomRequestHandling": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InsertHeaders": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::RuleGroup_CustomHTTPHeader",
},
},
	},
},
	"AWS::WAFv2::RuleGroup_CustomResponse": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomResponseBodyKey": &Reference{
	type_: String,
},
			"ResponseCode": &Reference{
	ref: "AWS::WAFv2::RuleGroup_ResponseStatusCode",
},
			"ResponseHeaders": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::RuleGroup_CustomHTTPHeader",
},
},
	},
},
	"AWS::WAFv2::RuleGroup_CustomResponseBodies": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::WAFv2::RuleGroup_CustomResponseBody": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Content": &Reference{
	ref: "AWS::WAFv2::RuleGroup_ResponseContent",
},
			"ContentType": &Reference{
	ref: "AWS::WAFv2::RuleGroup_ResponseContentType",
},
	},
},
	"AWS::WAFv2::RuleGroup_EntityDescription": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_EntityId": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_EntityName": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_FieldToMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllQueryArguments": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Body": &Reference{
	ref: "AWS::WAFv2::RuleGroup_Body",
},
			"Cookies": &Reference{
	ref: "AWS::WAFv2::RuleGroup_Cookies",
},
			"Headers": &Reference{
	ref: "AWS::WAFv2::RuleGroup_Headers",
},
			"JsonBody": &Reference{
	ref: "AWS::WAFv2::RuleGroup_JsonBody",
},
			"Method": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"QueryString": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"SingleHeader": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
	},
},
			"SingleQueryArgument": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
	},
},
			"UriPath": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::WAFv2::RuleGroup_ForwardedIPConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FallbackBehavior": &Reference{
	type_: String,
},
			"HeaderName": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFv2::RuleGroup_GeoMatchStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CountryCodes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ForwardedIPConfig": &Reference{
	ref: "AWS::WAFv2::RuleGroup_ForwardedIPConfiguration",
},
	},
},
	"AWS::WAFv2::RuleGroup_HeaderMatchPattern": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"All": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"ExcludedHeaders": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"IncludedHeaders": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::WAFv2::RuleGroup_Headers": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MatchPattern": &Reference{
	ref: "AWS::WAFv2::RuleGroup_HeaderMatchPattern",
},
			"MatchScope": &Reference{
	ref: "AWS::WAFv2::RuleGroup_MapMatchScope",
},
			"OversizeHandling": &Reference{
	ref: "AWS::WAFv2::RuleGroup_OversizeHandling",
},
	},
},
	"AWS::WAFv2::RuleGroup_IPSetForwardedIPConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FallbackBehavior": &Reference{
	type_: String,
},
			"HeaderName": &Reference{
	type_: String,
},
			"Position": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFv2::RuleGroup_IPSetReferenceStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	ref: "AWS::WAFv2::RuleGroup_ResourceArn",
},
			"IPSetForwardedIPConfig": &Reference{
	ref: "AWS::WAFv2::RuleGroup_IPSetForwardedIPConfiguration",
},
	},
},
	"AWS::WAFv2::RuleGroup_ImmunityTimeProperty": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ImmunityTime": &Reference{
	type_: Integer,
},
	},
},
	"AWS::WAFv2::RuleGroup_JsonBody": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InvalidFallbackBehavior": &Reference{
	ref: "AWS::WAFv2::RuleGroup_BodyParsingFallbackBehavior",
},
			"MatchPattern": &Reference{
	ref: "AWS::WAFv2::RuleGroup_JsonMatchPattern",
},
			"MatchScope": &Reference{
	ref: "AWS::WAFv2::RuleGroup_JsonMatchScope",
},
			"OversizeHandling": &Reference{
	ref: "AWS::WAFv2::RuleGroup_OversizeHandling",
},
	},
},
	"AWS::WAFv2::RuleGroup_JsonMatchPattern": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"All": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"IncludedPaths": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::RuleGroup_JsonPointerPath",
},
},
	},
},
	"AWS::WAFv2::RuleGroup_JsonMatchScope": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_JsonPointerPath": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_Label": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	ref: "AWS::WAFv2::RuleGroup_LabelName",
},
	},
},
	"AWS::WAFv2::RuleGroup_LabelMatchKey": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_LabelMatchScope": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_LabelMatchStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	ref: "AWS::WAFv2::RuleGroup_LabelMatchKey",
},
			"Scope": &Reference{
	ref: "AWS::WAFv2::RuleGroup_LabelMatchScope",
},
	},
},
	"AWS::WAFv2::RuleGroup_LabelName": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_LabelSummary": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	ref: "AWS::WAFv2::RuleGroup_LabelName",
},
	},
},
	"AWS::WAFv2::RuleGroup_MapMatchScope": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_NotStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Statement": &Reference{
	ref: "AWS::WAFv2::RuleGroup_Statement",
},
	},
},
	"AWS::WAFv2::RuleGroup_OrStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Statements": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::RuleGroup_Statement",
},
},
	},
},
	"AWS::WAFv2::RuleGroup_OversizeHandling": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_PositionalConstraint": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_RateBasedStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AggregateKeyType": &Reference{
	type_: String,
},
			"ForwardedIPConfig": &Reference{
	ref: "AWS::WAFv2::RuleGroup_ForwardedIPConfiguration",
},
			"Limit": &Reference{
	ref: "AWS::WAFv2::RuleGroup_RateLimit",
},
			"ScopeDownStatement": &Reference{
	ref: "AWS::WAFv2::RuleGroup_Statement",
},
	},
},
	"AWS::WAFv2::RuleGroup_RateLimit": &Reference{
	type_: Integer,
},
	"AWS::WAFv2::RuleGroup_RegexMatchStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FieldToMatch": &Reference{
	ref: "AWS::WAFv2::RuleGroup_FieldToMatch",
},
			"RegexString": &Reference{
	type_: String,
},
			"TextTransformations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::RuleGroup_TextTransformation",
},
},
	},
},
	"AWS::WAFv2::RuleGroup_RegexPatternSetReferenceStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	ref: "AWS::WAFv2::RuleGroup_ResourceArn",
},
			"FieldToMatch": &Reference{
	ref: "AWS::WAFv2::RuleGroup_FieldToMatch",
},
			"TextTransformations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::RuleGroup_TextTransformation",
},
},
	},
},
	"AWS::WAFv2::RuleGroup_ResourceArn": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_ResponseContent": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_ResponseContentType": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_ResponseStatusCode": &Reference{
	type_: Integer,
},
	"AWS::WAFv2::RuleGroup_Rule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	ref: "AWS::WAFv2::RuleGroup_RuleAction",
},
			"CaptchaConfig": &Reference{
	ref: "AWS::WAFv2::RuleGroup_CaptchaConfig",
},
			"Name": &Reference{
	ref: "AWS::WAFv2::RuleGroup_EntityName",
},
			"Priority": &Reference{
	ref: "AWS::WAFv2::RuleGroup_RulePriority",
},
			"RuleLabels": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::RuleGroup_Label",
},
},
			"Statement": &Reference{
	ref: "AWS::WAFv2::RuleGroup_Statement",
},
			"VisibilityConfig": &Reference{
	ref: "AWS::WAFv2::RuleGroup_VisibilityConfig",
},
	},
},
	"AWS::WAFv2::RuleGroup_RuleAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Allow": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomRequestHandling": &Reference{
	ref: "AWS::WAFv2::RuleGroup_CustomRequestHandling",
},
	},
},
			"Block": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomResponse": &Reference{
	ref: "AWS::WAFv2::RuleGroup_CustomResponse",
},
	},
},
			"Captcha": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomRequestHandling": &Reference{
	ref: "AWS::WAFv2::RuleGroup_CustomRequestHandling",
},
	},
},
			"Count": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomRequestHandling": &Reference{
	ref: "AWS::WAFv2::RuleGroup_CustomRequestHandling",
},
	},
},
	},
},
	"AWS::WAFv2::RuleGroup_RuleGroup": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	ref: "AWS::WAFv2::RuleGroup_ResourceArn",
},
			"Capacity": &Reference{
	type_: Integer,
},
			"Description": &Reference{
	ref: "AWS::WAFv2::RuleGroup_EntityDescription",
},
			"Id": &Reference{
	ref: "AWS::WAFv2::RuleGroup_EntityId",
},
			"Name": &Reference{
	ref: "AWS::WAFv2::RuleGroup_EntityName",
},
			"Rules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::RuleGroup_Rule",
},
},
			"VisibilityConfig": &Reference{
	ref: "AWS::WAFv2::RuleGroup_VisibilityConfig",
},
	},
},
	"AWS::WAFv2::RuleGroup_RulePriority": &Reference{
	type_: Integer,
},
	"AWS::WAFv2::RuleGroup_Scope": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_SearchString": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_SearchStringBase64": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_SizeConstraintStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComparisonOperator": &Reference{
	type_: String,
},
			"FieldToMatch": &Reference{
	ref: "AWS::WAFv2::RuleGroup_FieldToMatch",
},
			"Size": &Reference{
	type_: Number,
},
			"TextTransformations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::RuleGroup_TextTransformation",
},
},
	},
},
	"AWS::WAFv2::RuleGroup_SqliMatchStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FieldToMatch": &Reference{
	ref: "AWS::WAFv2::RuleGroup_FieldToMatch",
},
			"TextTransformations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::RuleGroup_TextTransformation",
},
},
	},
},
	"AWS::WAFv2::RuleGroup_Statement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AndStatement": &Reference{
	ref: "AWS::WAFv2::RuleGroup_AndStatement",
},
			"ByteMatchStatement": &Reference{
	ref: "AWS::WAFv2::RuleGroup_ByteMatchStatement",
},
			"GeoMatchStatement": &Reference{
	ref: "AWS::WAFv2::RuleGroup_GeoMatchStatement",
},
			"IPSetReferenceStatement": &Reference{
	ref: "AWS::WAFv2::RuleGroup_IPSetReferenceStatement",
},
			"LabelMatchStatement": &Reference{
	ref: "AWS::WAFv2::RuleGroup_LabelMatchStatement",
},
			"NotStatement": &Reference{
	ref: "AWS::WAFv2::RuleGroup_NotStatement",
},
			"OrStatement": &Reference{
	ref: "AWS::WAFv2::RuleGroup_OrStatement",
},
			"RateBasedStatement": &Reference{
	ref: "AWS::WAFv2::RuleGroup_RateBasedStatement",
},
			"RegexMatchStatement": &Reference{
	ref: "AWS::WAFv2::RuleGroup_RegexMatchStatement",
},
			"RegexPatternSetReferenceStatement": &Reference{
	ref: "AWS::WAFv2::RuleGroup_RegexPatternSetReferenceStatement",
},
			"SizeConstraintStatement": &Reference{
	ref: "AWS::WAFv2::RuleGroup_SizeConstraintStatement",
},
			"SqliMatchStatement": &Reference{
	ref: "AWS::WAFv2::RuleGroup_SqliMatchStatement",
},
			"XssMatchStatement": &Reference{
	ref: "AWS::WAFv2::RuleGroup_XssMatchStatement",
},
	},
},
	"AWS::WAFv2::RuleGroup_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFv2::RuleGroup_TextTransformation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Priority": &Reference{
	ref: "AWS::WAFv2::RuleGroup_TextTransformationPriority",
},
			"Type": &Reference{
	ref: "AWS::WAFv2::RuleGroup_TextTransformationType",
},
	},
},
	"AWS::WAFv2::RuleGroup_TextTransformationPriority": &Reference{
	type_: Integer,
},
	"AWS::WAFv2::RuleGroup_TextTransformationType": &Reference{
	type_: String,
},
	"AWS::WAFv2::RuleGroup_VisibilityConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchMetricsEnabled": &Reference{
	type_: Boolean,
},
			"MetricName": &Reference{
	type_: String,
},
			"SampledRequestsEnabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::WAFv2::RuleGroup_XssMatchStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FieldToMatch": &Reference{
	ref: "AWS::WAFv2::RuleGroup_FieldToMatch",
},
			"TextTransformations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::RuleGroup_TextTransformation",
},
},
	},
},
	"AWS::WAFv2::WebACL_AllowAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomRequestHandling": &Reference{
	ref: "AWS::WAFv2::WebACL_CustomRequestHandling",
},
	},
},
	"AWS::WAFv2::WebACL_AndStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Statements": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::WebACL_Statement",
},
},
	},
},
	"AWS::WAFv2::WebACL_BlockAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomResponse": &Reference{
	ref: "AWS::WAFv2::WebACL_CustomResponse",
},
	},
},
	"AWS::WAFv2::WebACL_Body": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"OversizeHandling": &Reference{
	ref: "AWS::WAFv2::WebACL_OversizeHandling",
},
	},
},
	"AWS::WAFv2::WebACL_BodyParsingFallbackBehavior": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_ByteMatchStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FieldToMatch": &Reference{
	ref: "AWS::WAFv2::WebACL_FieldToMatch",
},
			"PositionalConstraint": &Reference{
	ref: "AWS::WAFv2::WebACL_PositionalConstraint",
},
			"SearchString": &Reference{
	ref: "AWS::WAFv2::WebACL_SearchString",
},
			"SearchStringBase64": &Reference{
	ref: "AWS::WAFv2::WebACL_SearchStringBase64",
},
			"TextTransformations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::WebACL_TextTransformation",
},
},
	},
},
	"AWS::WAFv2::WebACL_CaptchaAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomRequestHandling": &Reference{
	ref: "AWS::WAFv2::WebACL_CustomRequestHandling",
},
	},
},
	"AWS::WAFv2::WebACL_CaptchaConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ImmunityTimeProperty": &Reference{
	ref: "AWS::WAFv2::WebACL_ImmunityTimeProperty",
},
	},
},
	"AWS::WAFv2::WebACL_CookieMatchPattern": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"All": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"ExcludedCookies": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"IncludedCookies": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::WAFv2::WebACL_Cookies": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MatchPattern": &Reference{
	ref: "AWS::WAFv2::WebACL_CookieMatchPattern",
},
			"MatchScope": &Reference{
	ref: "AWS::WAFv2::WebACL_MapMatchScope",
},
			"OversizeHandling": &Reference{
	ref: "AWS::WAFv2::WebACL_OversizeHandling",
},
	},
},
	"AWS::WAFv2::WebACL_CountAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomRequestHandling": &Reference{
	ref: "AWS::WAFv2::WebACL_CustomRequestHandling",
},
	},
},
	"AWS::WAFv2::WebACL_CustomHTTPHeader": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	ref: "AWS::WAFv2::WebACL_CustomHTTPHeaderName",
},
			"Value": &Reference{
	ref: "AWS::WAFv2::WebACL_CustomHTTPHeaderValue",
},
	},
},
	"AWS::WAFv2::WebACL_CustomHTTPHeaderName": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_CustomHTTPHeaderValue": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_CustomRequestHandling": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InsertHeaders": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::WebACL_CustomHTTPHeader",
},
},
	},
},
	"AWS::WAFv2::WebACL_CustomResponse": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CustomResponseBodyKey": &Reference{
	type_: String,
},
			"ResponseCode": &Reference{
	ref: "AWS::WAFv2::WebACL_ResponseStatusCode",
},
			"ResponseHeaders": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::WebACL_CustomHTTPHeader",
},
},
	},
},
	"AWS::WAFv2::WebACL_CustomResponseBodies": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::WAFv2::WebACL_CustomResponseBody": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Content": &Reference{
	ref: "AWS::WAFv2::WebACL_ResponseContent",
},
			"ContentType": &Reference{
	ref: "AWS::WAFv2::WebACL_ResponseContentType",
},
	},
},
	"AWS::WAFv2::WebACL_DefaultAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Allow": &Reference{
	ref: "AWS::WAFv2::WebACL_AllowAction",
},
			"Block": &Reference{
	ref: "AWS::WAFv2::WebACL_BlockAction",
},
	},
},
	"AWS::WAFv2::WebACL_EntityDescription": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_EntityId": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_EntityName": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_ExcludedRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	ref: "AWS::WAFv2::WebACL_EntityName",
},
	},
},
	"AWS::WAFv2::WebACL_ExcludedRules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::WebACL_ExcludedRule",
},
},
	"AWS::WAFv2::WebACL_FieldIdentifier": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Identifier": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFv2::WebACL_FieldToMatch": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AllQueryArguments": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"Body": &Reference{
	ref: "AWS::WAFv2::WebACL_Body",
},
			"Cookies": &Reference{
	ref: "AWS::WAFv2::WebACL_Cookies",
},
			"Headers": &Reference{
	ref: "AWS::WAFv2::WebACL_Headers",
},
			"JsonBody": &Reference{
	ref: "AWS::WAFv2::WebACL_JsonBody",
},
			"Method": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"QueryString": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"SingleHeader": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
	},
},
			"SingleQueryArgument": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
	},
},
			"UriPath": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::WAFv2::WebACL_ForwardedIPConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FallbackBehavior": &Reference{
	type_: String,
},
			"HeaderName": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFv2::WebACL_GeoMatchStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CountryCodes": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"ForwardedIPConfig": &Reference{
	ref: "AWS::WAFv2::WebACL_ForwardedIPConfiguration",
},
	},
},
	"AWS::WAFv2::WebACL_HeaderMatchPattern": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"All": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"ExcludedHeaders": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
			"IncludedHeaders": &Reference{
	type_: Array,
	items: &Reference{
	type_: String,
},
},
	},
},
	"AWS::WAFv2::WebACL_Headers": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"MatchPattern": &Reference{
	ref: "AWS::WAFv2::WebACL_HeaderMatchPattern",
},
			"MatchScope": &Reference{
	ref: "AWS::WAFv2::WebACL_MapMatchScope",
},
			"OversizeHandling": &Reference{
	ref: "AWS::WAFv2::WebACL_OversizeHandling",
},
	},
},
	"AWS::WAFv2::WebACL_IPSetForwardedIPConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FallbackBehavior": &Reference{
	type_: String,
},
			"HeaderName": &Reference{
	type_: String,
},
			"Position": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFv2::WebACL_IPSetReferenceStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	ref: "AWS::WAFv2::WebACL_ResourceArn",
},
			"IPSetForwardedIPConfig": &Reference{
	ref: "AWS::WAFv2::WebACL_IPSetForwardedIPConfiguration",
},
	},
},
	"AWS::WAFv2::WebACL_ImmunityTimeProperty": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ImmunityTime": &Reference{
	type_: Integer,
},
	},
},
	"AWS::WAFv2::WebACL_JsonBody": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InvalidFallbackBehavior": &Reference{
	ref: "AWS::WAFv2::WebACL_BodyParsingFallbackBehavior",
},
			"MatchPattern": &Reference{
	ref: "AWS::WAFv2::WebACL_JsonMatchPattern",
},
			"MatchScope": &Reference{
	ref: "AWS::WAFv2::WebACL_JsonMatchScope",
},
			"OversizeHandling": &Reference{
	ref: "AWS::WAFv2::WebACL_OversizeHandling",
},
	},
},
	"AWS::WAFv2::WebACL_JsonMatchPattern": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"All": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"IncludedPaths": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::WebACL_JsonPointerPath",
},
},
	},
},
	"AWS::WAFv2::WebACL_JsonMatchScope": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_JsonPointerPath": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_Label": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	ref: "AWS::WAFv2::WebACL_LabelName",
},
	},
},
	"AWS::WAFv2::WebACL_LabelMatchKey": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_LabelMatchScope": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_LabelMatchStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	ref: "AWS::WAFv2::WebACL_LabelMatchKey",
},
			"Scope": &Reference{
	ref: "AWS::WAFv2::WebACL_LabelMatchScope",
},
	},
},
	"AWS::WAFv2::WebACL_LabelName": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_ManagedRuleGroupConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"LoginPath": &Reference{
	type_: String,
},
			"PasswordField": &Reference{
	ref: "AWS::WAFv2::WebACL_FieldIdentifier",
},
			"PayloadType": &Reference{
	type_: String,
},
			"UsernameField": &Reference{
	ref: "AWS::WAFv2::WebACL_FieldIdentifier",
},
	},
},
	"AWS::WAFv2::WebACL_ManagedRuleGroupStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ExcludedRules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::WebACL_ExcludedRule",
},
},
			"ManagedRuleGroupConfigs": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::WebACL_ManagedRuleGroupConfig",
},
},
			"Name": &Reference{
	ref: "AWS::WAFv2::WebACL_EntityName",
},
			"ScopeDownStatement": &Reference{
	ref: "AWS::WAFv2::WebACL_Statement",
},
			"VendorName": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFv2::WebACL_MapMatchScope": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_NotStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Statement": &Reference{
	ref: "AWS::WAFv2::WebACL_Statement",
},
	},
},
	"AWS::WAFv2::WebACL_OrStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Statements": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::WebACL_Statement",
},
},
	},
},
	"AWS::WAFv2::WebACL_OverrideAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Count": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"None": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"AWS::WAFv2::WebACL_OversizeHandling": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_PositionalConstraint": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_QueryString": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::WAFv2::WebACL_RateBasedStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AggregateKeyType": &Reference{
	type_: String,
},
			"ForwardedIPConfig": &Reference{
	ref: "AWS::WAFv2::WebACL_ForwardedIPConfiguration",
},
			"Limit": &Reference{
	ref: "AWS::WAFv2::WebACL_RateLimit",
},
			"ScopeDownStatement": &Reference{
	ref: "AWS::WAFv2::WebACL_Statement",
},
	},
},
	"AWS::WAFv2::WebACL_RateLimit": &Reference{
	type_: Integer,
},
	"AWS::WAFv2::WebACL_RegexMatchStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FieldToMatch": &Reference{
	ref: "AWS::WAFv2::WebACL_FieldToMatch",
},
			"RegexString": &Reference{
	type_: String,
},
			"TextTransformations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::WebACL_TextTransformation",
},
},
	},
},
	"AWS::WAFv2::WebACL_RegexPatternSetReferenceStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	ref: "AWS::WAFv2::WebACL_ResourceArn",
},
			"FieldToMatch": &Reference{
	ref: "AWS::WAFv2::WebACL_FieldToMatch",
},
			"TextTransformations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::WebACL_TextTransformation",
},
},
	},
},
	"AWS::WAFv2::WebACL_ResourceArn": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_ResponseContent": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_ResponseContentType": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_ResponseStatusCode": &Reference{
	type_: Integer,
},
	"AWS::WAFv2::WebACL_Rule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Action": &Reference{
	ref: "AWS::WAFv2::WebACL_RuleAction",
},
			"CaptchaConfig": &Reference{
	ref: "AWS::WAFv2::WebACL_CaptchaConfig",
},
			"Name": &Reference{
	ref: "AWS::WAFv2::WebACL_EntityName",
},
			"OverrideAction": &Reference{
	ref: "AWS::WAFv2::WebACL_OverrideAction",
},
			"Priority": &Reference{
	ref: "AWS::WAFv2::WebACL_RulePriority",
},
			"RuleLabels": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::WebACL_Label",
},
},
			"Statement": &Reference{
	ref: "AWS::WAFv2::WebACL_Statement",
},
			"VisibilityConfig": &Reference{
	ref: "AWS::WAFv2::WebACL_VisibilityConfig",
},
	},
},
	"AWS::WAFv2::WebACL_RuleAction": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Allow": &Reference{
	ref: "AWS::WAFv2::WebACL_AllowAction",
},
			"Block": &Reference{
	ref: "AWS::WAFv2::WebACL_BlockAction",
},
			"Captcha": &Reference{
	ref: "AWS::WAFv2::WebACL_CaptchaAction",
},
			"Count": &Reference{
	ref: "AWS::WAFv2::WebACL_CountAction",
},
	},
},
	"AWS::WAFv2::WebACL_RuleGroupReferenceStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Arn": &Reference{
	ref: "AWS::WAFv2::WebACL_ResourceArn",
},
			"ExcludedRules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::WebACL_ExcludedRule",
},
},
	},
},
	"AWS::WAFv2::WebACL_RulePriority": &Reference{
	type_: Integer,
},
	"AWS::WAFv2::WebACL_Rules": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::WebACL_Rule",
},
},
	"AWS::WAFv2::WebACL_Scope": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_SearchString": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_SearchStringBase64": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_SingleHeader": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFv2::WebACL_SingleQueryArgument": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Name": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFv2::WebACL_SizeConstraintStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComparisonOperator": &Reference{
	type_: String,
},
			"FieldToMatch": &Reference{
	ref: "AWS::WAFv2::WebACL_FieldToMatch",
},
			"Size": &Reference{
	type_: Number,
},
			"TextTransformations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::WebACL_TextTransformation",
},
},
	},
},
	"AWS::WAFv2::WebACL_SqliMatchStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FieldToMatch": &Reference{
	ref: "AWS::WAFv2::WebACL_FieldToMatch",
},
			"TextTransformations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::WebACL_TextTransformation",
},
},
	},
},
	"AWS::WAFv2::WebACL_Statement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"AndStatement": &Reference{
	ref: "AWS::WAFv2::WebACL_AndStatement",
},
			"ByteMatchStatement": &Reference{
	ref: "AWS::WAFv2::WebACL_ByteMatchStatement",
},
			"GeoMatchStatement": &Reference{
	ref: "AWS::WAFv2::WebACL_GeoMatchStatement",
},
			"IPSetReferenceStatement": &Reference{
	ref: "AWS::WAFv2::WebACL_IPSetReferenceStatement",
},
			"LabelMatchStatement": &Reference{
	ref: "AWS::WAFv2::WebACL_LabelMatchStatement",
},
			"ManagedRuleGroupStatement": &Reference{
	ref: "AWS::WAFv2::WebACL_ManagedRuleGroupStatement",
},
			"NotStatement": &Reference{
	ref: "AWS::WAFv2::WebACL_NotStatement",
},
			"OrStatement": &Reference{
	ref: "AWS::WAFv2::WebACL_OrStatement",
},
			"RateBasedStatement": &Reference{
	ref: "AWS::WAFv2::WebACL_RateBasedStatement",
},
			"RegexMatchStatement": &Reference{
	ref: "AWS::WAFv2::WebACL_RegexMatchStatement",
},
			"RegexPatternSetReferenceStatement": &Reference{
	ref: "AWS::WAFv2::WebACL_RegexPatternSetReferenceStatement",
},
			"RuleGroupReferenceStatement": &Reference{
	ref: "AWS::WAFv2::WebACL_RuleGroupReferenceStatement",
},
			"SizeConstraintStatement": &Reference{
	ref: "AWS::WAFv2::WebACL_SizeConstraintStatement",
},
			"SqliMatchStatement": &Reference{
	ref: "AWS::WAFv2::WebACL_SqliMatchStatement",
},
			"XssMatchStatement": &Reference{
	ref: "AWS::WAFv2::WebACL_XssMatchStatement",
},
	},
},
	"AWS::WAFv2::WebACL_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::WAFv2::WebACL_TextTransformation": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Priority": &Reference{
	ref: "AWS::WAFv2::WebACL_TextTransformationPriority",
},
			"Type": &Reference{
	ref: "AWS::WAFv2::WebACL_TextTransformationType",
},
	},
},
	"AWS::WAFv2::WebACL_TextTransformationPriority": &Reference{
	type_: Integer,
},
	"AWS::WAFv2::WebACL_TextTransformationType": &Reference{
	type_: String,
},
	"AWS::WAFv2::WebACL_UriPath": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	"AWS::WAFv2::WebACL_VisibilityConfig": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CloudWatchMetricsEnabled": &Reference{
	type_: Boolean,
},
			"MetricName": &Reference{
	type_: String,
},
			"SampledRequestsEnabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::WAFv2::WebACL_XssMatchStatement": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"FieldToMatch": &Reference{
	ref: "AWS::WAFv2::WebACL_FieldToMatch",
},
			"TextTransformations": &Reference{
	type_: Array,
	items: &Reference{
	ref: "AWS::WAFv2::WebACL_TextTransformation",
},
},
	},
},
	"AWS::WAFv2::WebACLAssociation_ResourceArn": &Reference{
	type_: String,
},
	"AWS::WorkSpaces::Workspace_Tag": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
	"AWS::WorkSpaces::Workspace_WorkspaceProperties": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ComputeTypeName": &Reference{
	type_: String,
},
			"RootVolumeSizeGib": &Reference{
	type_: Integer,
},
			"RunningMode": &Reference{
	type_: String,
},
			"RunningModeAutoStopTimeoutInMinutes": &Reference{
	type_: Integer,
},
			"UserVolumeSizeGib": &Reference{
	type_: Integer,
},
	},
},
	"AWS::XRay::Group_InsightsConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"InsightsEnabled": &Reference{
	type_: Boolean,
},
			"NotificationsEnabled": &Reference{
	type_: Boolean,
},
	},
},
	"AWS::XRay::Group_Tags": &Reference{
	type_: Array,
	items: &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
},
	"AWS::XRay::SamplingRule_RuleARN": &Reference{
	type_: String,
},
	"AWS::XRay::SamplingRule_RuleName": &Reference{
	type_: String,
},
	"AWS::XRay::SamplingRule_SamplingRule": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Attributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"FixedRate": &Reference{
	type_: Number,
},
			"HTTPMethod": &Reference{
	type_: String,
},
			"Host": &Reference{
	type_: String,
},
			"Priority": &Reference{
	type_: Integer,
},
			"ReservoirSize": &Reference{
	type_: Integer,
},
			"ResourceARN": &Reference{
	type_: String,
},
			"RuleARN": &Reference{
	ref: "AWS::XRay::SamplingRule_RuleARN",
},
			"RuleName": &Reference{
	ref: "AWS::XRay::SamplingRule_RuleName",
},
			"ServiceName": &Reference{
	type_: String,
},
			"ServiceType": &Reference{
	type_: String,
},
			"URLPath": &Reference{
	type_: String,
},
			"Version": &Reference{
	type_: Integer,
},
	},
},
	"AWS::XRay::SamplingRule_SamplingRuleRecord": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"CreatedAt": &Reference{
	type_: String,
},
			"ModifiedAt": &Reference{
	type_: String,
},
			"SamplingRule": &Reference{
	ref: "AWS::XRay::SamplingRule_SamplingRule",
},
	},
},
	"AWS::XRay::SamplingRule_SamplingRuleUpdate": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Attributes": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
			"FixedRate": &Reference{
	type_: Number,
},
			"HTTPMethod": &Reference{
	type_: String,
},
			"Host": &Reference{
	type_: String,
},
			"Priority": &Reference{
	type_: Integer,
},
			"ReservoirSize": &Reference{
	type_: Integer,
},
			"ResourceARN": &Reference{
	type_: String,
},
			"RuleARN": &Reference{
	ref: "AWS::XRay::SamplingRule_RuleARN",
},
			"RuleName": &Reference{
	ref: "AWS::XRay::SamplingRule_RuleName",
},
			"ServiceName": &Reference{
	type_: String,
},
			"ServiceType": &Reference{
	type_: String,
},
			"URLPath": &Reference{
	type_: String,
},
	},
},
	"AWS::XRay::SamplingRule_Tags": &Reference{
	type_: Array,
	items: &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Key": &Reference{
	type_: String,
},
			"Value": &Reference{
	type_: String,
},
	},
},
},
	"Alexa::ASK::Skill_AuthenticationConfiguration": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"ClientId": &Reference{
	type_: String,
},
			"ClientSecret": &Reference{
	type_: String,
},
			"RefreshToken": &Reference{
	type_: String,
},
	},
},
	"Alexa::ASK::Skill_Overrides": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Manifest": &Reference{
	type_: Object,
	properties: map[string]*Reference{
	},
},
	},
},
	"Alexa::ASK::Skill_SkillPackage": &Reference{
	type_: Object,
	properties: map[string]*Reference{
			"Overrides": &Reference{
	ref: "Alexa::ASK::Skill_Overrides",
},
			"S3Bucket": &Reference{
	type_: String,
},
			"S3BucketRole": &Reference{
	type_: String,
},
			"S3Key": &Reference{
	type_: String,
},
			"S3ObjectVersion": &Reference{
	type_: String,
},
	},
},
}
